
stone_subsystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e47c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001fc  0800e62c  0800e62c  0001e62c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e828  0800e828  00020138  2**0
                  CONTENTS
  4 .ARM          00000008  0800e828  0800e828  0001e828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e830  0800e830  00020138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e830  0800e830  0001e830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e834  0800e834  0001e834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000138  20000000  0800e838  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020138  2**0
                  CONTENTS
 10 .bss          00000b84  20000138  20000138  00020138  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000cbc  20000cbc  00020138  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY
 13 .debug_info   00027985  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005a62  00000000  00000000  00047aed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001bd0  00000000  00000000  0004d550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001990  00000000  00000000  0004f120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b35f  00000000  00000000  00050ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002855e  00000000  00000000  0007be0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e77f1  00000000  00000000  000a436d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0018bb5e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007aec  00000000  00000000  0018bbb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000138 	.word	0x20000138
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800e614 	.word	0x0800e614

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000013c 	.word	0x2000013c
 80001ec:	0800e614 	.word	0x0800e614

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <MovementControllerInit>:

#include <movementController.h>
#include "lis3dh_driver.h"
#include "gyroI3G450D.h"

void MovementControllerInit(I2C_HandleTypeDef *I2Cxhandle,SPI_HandleTypeDef *SPIxHandle) {
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	6039      	str	r1, [r7, #0]
	// Accelrometor Init
	Lis3dhInit(I2Cxhandle);
 800059e:	6878      	ldr	r0, [r7, #4]
 80005a0:	f000 fa5a 	bl	8000a58 <Lis3dhInit>
	I3G450D_Init(SPIxHandle);
 80005a4:	6838      	ldr	r0, [r7, #0]
 80005a6:	f000 f99d 	bl	80008e4 <I3G450D_Init>
	// Gyroscope init.
	// GPIO for accelerometor interrupt.

}
 80005aa:	bf00      	nop
 80005ac:	3708      	adds	r7, #8
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}

080005b2 <MovementControllerProcess>:
int MovementControllerProcess(){
 80005b2:	b480      	push	{r7}
 80005b4:	af00      	add	r7, sp, #0
	return 0;
 80005b6:	2300      	movs	r3, #0
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
	...

080005c4 <SessionControllerInit>:
void ChangeUser(uint8_t newUserID ){
	userID = newUserID;
}

void SessionControllerInit(I2C_HandleTypeDef *I2Cxhandle,TIM_HandleTypeDef *timer,SPI_HandleTypeDef *SPIxHandle)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	60f8      	str	r0, [r7, #12]
 80005cc:	60b9      	str	r1, [r7, #8]
 80005ce:	607a      	str	r2, [r7, #4]

	// Make sure that they return okay.
	// There are error enter error state
	// start general timer;

	currentState = START;
 80005d0:	4b07      	ldr	r3, [pc, #28]	; (80005f0 <SessionControllerInit+0x2c>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	701a      	strb	r2, [r3, #0]
	timeStateStarted = HAL_GetTick();
 80005d6:	f001 fcf9 	bl	8001fcc <HAL_GetTick>
 80005da:	4603      	mov	r3, r0
 80005dc:	4a05      	ldr	r2, [pc, #20]	; (80005f4 <SessionControllerInit+0x30>)
 80005de:	6013      	str	r3, [r2, #0]
	MovementControllerInit(I2Cxhandle,SPIxHandle);
 80005e0:	6879      	ldr	r1, [r7, #4]
 80005e2:	68f8      	ldr	r0, [r7, #12]
 80005e4:	f7ff ffd6 	bl	8000594 <MovementControllerInit>


}
 80005e8:	bf00      	nop
 80005ea:	3710      	adds	r7, #16
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	20000154 	.word	0x20000154
 80005f4:	20000158 	.word	0x20000158

080005f8 <SessionControllerProcess>:
void SessionControllerProcess()
{
 80005f8:	b5b0      	push	{r4, r5, r7, lr}
 80005fa:	b08a      	sub	sp, #40	; 0x28
 80005fc:	af00      	add	r7, sp, #0


// check to see if current state has reached it time out.
	stateTableEntry_t current = stateTabel[currentState];
 80005fe:	4b1a      	ldr	r3, [pc, #104]	; (8000668 <SessionControllerProcess+0x70>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	4619      	mov	r1, r3
 8000604:	4a19      	ldr	r2, [pc, #100]	; (800066c <SessionControllerProcess+0x74>)
 8000606:	460b      	mov	r3, r1
 8000608:	005b      	lsls	r3, r3, #1
 800060a:	440b      	add	r3, r1
 800060c:	00db      	lsls	r3, r3, #3
 800060e:	4413      	add	r3, r2
 8000610:	1d3c      	adds	r4, r7, #4
 8000612:	461d      	mov	r5, r3
 8000614:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000616:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000618:	e895 0003 	ldmia.w	r5, {r0, r1}
 800061c:	e884 0003 	stmia.w	r4, {r0, r1}
	uint32_t timeout = current.timeout;
 8000620:	69bb      	ldr	r3, [r7, #24]
 8000622:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t currentTime = HAL_GetTick();
 8000624:	f001 fcd2 	bl	8001fcc <HAL_GetTick>
 8000628:	6238      	str	r0, [r7, #32]
	uint32_t timeSinceStarted = currentTime -timeStateStarted;
 800062a:	4b11      	ldr	r3, [pc, #68]	; (8000670 <SessionControllerProcess+0x78>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	6a3a      	ldr	r2, [r7, #32]
 8000630:	1ad3      	subs	r3, r2, r3
 8000632:	61fb      	str	r3, [r7, #28]


	gestureRecognized = MovementControllerProcess();
 8000634:	f7ff ffbd 	bl	80005b2 <MovementControllerProcess>
 8000638:	4603      	mov	r3, r0
 800063a:	b2da      	uxtb	r2, r3
 800063c:	4b0d      	ldr	r3, [pc, #52]	; (8000674 <SessionControllerProcess+0x7c>)
 800063e:	701a      	strb	r2, [r3, #0]

	if ( HAL_GetTick() - timeStateStarted > timeout )
 8000640:	f001 fcc4 	bl	8001fcc <HAL_GetTick>
 8000644:	4602      	mov	r2, r0
 8000646:	4b0a      	ldr	r3, [pc, #40]	; (8000670 <SessionControllerProcess+0x78>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	1ad3      	subs	r3, r2, r3
 800064c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800064e:	429a      	cmp	r2, r3
 8000650:	d205      	bcs.n	800065e <SessionControllerProcess+0x66>
	{
		previouseState = currentState;
 8000652:	4b05      	ldr	r3, [pc, #20]	; (8000668 <SessionControllerProcess+0x70>)
 8000654:	781a      	ldrb	r2, [r3, #0]
 8000656:	4b08      	ldr	r3, [pc, #32]	; (8000678 <SessionControllerProcess+0x80>)
 8000658:	701a      	strb	r2, [r3, #0]
		current.onEnd();
 800065a:	697b      	ldr	r3, [r7, #20]
 800065c:	4798      	blx	r3
	else{
		// run out put for current state.
	}


}
 800065e:	bf00      	nop
 8000660:	3728      	adds	r7, #40	; 0x28
 8000662:	46bd      	mov	sp, r7
 8000664:	bdb0      	pop	{r4, r5, r7, pc}
 8000666:	bf00      	nop
 8000668:	20000154 	.word	0x20000154
 800066c:	20000000 	.word	0x20000000
 8000670:	20000158 	.word	0x20000158
 8000674:	2000015c 	.word	0x2000015c
 8000678:	20000155 	.word	0x20000155

0800067c <IdleAwake>:
int Start(){
	timeStateStarted = HAL_GetTick();
	ConsoleSendLine(" State = starting");
	return 0;
}
int IdleAwake(){
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
	currentState = IDLE_AWAKE;
 8000680:	4b06      	ldr	r3, [pc, #24]	; (800069c <IdleAwake+0x20>)
 8000682:	2201      	movs	r2, #1
 8000684:	701a      	strb	r2, [r3, #0]
	timeStateStarted = HAL_GetTick();
 8000686:	f001 fca1 	bl	8001fcc <HAL_GetTick>
 800068a:	4603      	mov	r3, r0
 800068c:	4a04      	ldr	r2, [pc, #16]	; (80006a0 <IdleAwake+0x24>)
 800068e:	6013      	str	r3, [r2, #0]
	ConsoleSendLine(" State = IdleAwake");
 8000690:	4804      	ldr	r0, [pc, #16]	; (80006a4 <IdleAwake+0x28>)
 8000692:	f000 f8c1 	bl	8000818 <ConsoleSendLine>
	return 0;
 8000696:	2300      	movs	r3, #0
}
 8000698:	4618      	mov	r0, r3
 800069a:	bd80      	pop	{r7, pc}
 800069c:	20000154 	.word	0x20000154
 80006a0:	20000158 	.word	0x20000158
 80006a4:	0800e640 	.word	0x0800e640

080006a8 <DeepSleep>:
int DeepSleep(){
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
	currentState = DEEP_SLEEP;
 80006ac:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <DeepSleep+0x20>)
 80006ae:	2202      	movs	r2, #2
 80006b0:	701a      	strb	r2, [r3, #0]
	timeStateStarted = HAL_GetTick();
 80006b2:	f001 fc8b 	bl	8001fcc <HAL_GetTick>
 80006b6:	4603      	mov	r3, r0
 80006b8:	4a04      	ldr	r2, [pc, #16]	; (80006cc <DeepSleep+0x24>)
 80006ba:	6013      	str	r3, [r2, #0]
	ConsoleSendLine(" State = DeepSleep");
 80006bc:	4804      	ldr	r0, [pc, #16]	; (80006d0 <DeepSleep+0x28>)
 80006be:	f000 f8ab 	bl	8000818 <ConsoleSendLine>
	return 0;
 80006c2:	2300      	movs	r3, #0
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	20000154 	.word	0x20000154
 80006cc:	20000158 	.word	0x20000158
 80006d0:	0800e654 	.word	0x0800e654

080006d4 <WaitingForSelection>:
int WaitingForSelection(){
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
	currentState = WAITING_FOR_SELECTION;
 80006d8:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <WaitingForSelection+0x20>)
 80006da:	2203      	movs	r2, #3
 80006dc:	701a      	strb	r2, [r3, #0]
	timeStateStarted = HAL_GetTick();
 80006de:	f001 fc75 	bl	8001fcc <HAL_GetTick>
 80006e2:	4603      	mov	r3, r0
 80006e4:	4a04      	ldr	r2, [pc, #16]	; (80006f8 <WaitingForSelection+0x24>)
 80006e6:	6013      	str	r3, [r2, #0]
	ConsoleSendLine(" State = WaitingForSelection");
 80006e8:	4804      	ldr	r0, [pc, #16]	; (80006fc <WaitingForSelection+0x28>)
 80006ea:	f000 f895 	bl	8000818 <ConsoleSendLine>
	return 0;
 80006ee:	2300      	movs	r3, #0
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	20000154 	.word	0x20000154
 80006f8:	20000158 	.word	0x20000158
 80006fc:	0800e668 	.word	0x0800e668

08000700 <LoadMode>:
int LoadMode(){
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
	currentState = WAITING_FOR_SELECTION;
 8000704:	4b06      	ldr	r3, [pc, #24]	; (8000720 <LoadMode+0x20>)
 8000706:	2203      	movs	r2, #3
 8000708:	701a      	strb	r2, [r3, #0]
	timeStateStarted = HAL_GetTick();
 800070a:	f001 fc5f 	bl	8001fcc <HAL_GetTick>
 800070e:	4603      	mov	r3, r0
 8000710:	4a04      	ldr	r2, [pc, #16]	; (8000724 <LoadMode+0x24>)
 8000712:	6013      	str	r3, [r2, #0]
	ConsoleSendLine(" State = LoadMode");
 8000714:	4804      	ldr	r0, [pc, #16]	; (8000728 <LoadMode+0x28>)
 8000716:	f000 f87f 	bl	8000818 <ConsoleSendLine>
	return 0;
 800071a:	2300      	movs	r3, #0
}
 800071c:	4618      	mov	r0, r3
 800071e:	bd80      	pop	{r7, pc}
 8000720:	20000154 	.word	0x20000154
 8000724:	20000158 	.word	0x20000158
 8000728:	0800e688 	.word	0x0800e688

0800072c <CliMode>:
int CliMode(){
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
	currentState = CLI_MODE;
 8000730:	4b06      	ldr	r3, [pc, #24]	; (800074c <CliMode+0x20>)
 8000732:	2205      	movs	r2, #5
 8000734:	701a      	strb	r2, [r3, #0]
	timeStateStarted = HAL_GetTick();
 8000736:	f001 fc49 	bl	8001fcc <HAL_GetTick>
 800073a:	4603      	mov	r3, r0
 800073c:	4a04      	ldr	r2, [pc, #16]	; (8000750 <CliMode+0x24>)
 800073e:	6013      	str	r3, [r2, #0]
	ConsoleSendLine(" State = CliMode");
 8000740:	4804      	ldr	r0, [pc, #16]	; (8000754 <CliMode+0x28>)
 8000742:	f000 f869 	bl	8000818 <ConsoleSendLine>
	return 0;
 8000746:	2300      	movs	r3, #0
}
 8000748:	4618      	mov	r0, r3
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20000154 	.word	0x20000154
 8000750:	20000158 	.word	0x20000158
 8000754:	0800e69c 	.word	0x0800e69c

08000758 <StartPreviouseMode>:
int StartPreviouseMode(){
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
	currentState = previouseState;
 800075c:	4b07      	ldr	r3, [pc, #28]	; (800077c <StartPreviouseMode+0x24>)
 800075e:	781a      	ldrb	r2, [r3, #0]
 8000760:	4b07      	ldr	r3, [pc, #28]	; (8000780 <StartPreviouseMode+0x28>)
 8000762:	701a      	strb	r2, [r3, #0]

	timeStateStarted = HAL_GetTick();
 8000764:	f001 fc32 	bl	8001fcc <HAL_GetTick>
 8000768:	4603      	mov	r3, r0
 800076a:	4a06      	ldr	r2, [pc, #24]	; (8000784 <StartPreviouseMode+0x2c>)
 800076c:	6013      	str	r3, [r2, #0]
	ConsoleSendLine(" State = StartPreviouseMode");
 800076e:	4806      	ldr	r0, [pc, #24]	; (8000788 <StartPreviouseMode+0x30>)
 8000770:	f000 f852 	bl	8000818 <ConsoleSendLine>
	return 0;
 8000774:	2300      	movs	r3, #0
}
 8000776:	4618      	mov	r0, r3
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	20000155 	.word	0x20000155
 8000780:	20000154 	.word	0x20000154
 8000784:	20000158 	.word	0x20000158
 8000788:	0800e6b0 	.word	0x0800e6b0

0800078c <InMode>:
int InMode()
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
	currentState = IN_MODE;
 8000790:	4b06      	ldr	r3, [pc, #24]	; (80007ac <InMode+0x20>)
 8000792:	2206      	movs	r2, #6
 8000794:	701a      	strb	r2, [r3, #0]
	timeStateStarted = HAL_GetTick();
 8000796:	f001 fc19 	bl	8001fcc <HAL_GetTick>
 800079a:	4603      	mov	r3, r0
 800079c:	4a04      	ldr	r2, [pc, #16]	; (80007b0 <InMode+0x24>)
 800079e:	6013      	str	r3, [r2, #0]
	ConsoleSendLine(" State = InMode");
 80007a0:	4804      	ldr	r0, [pc, #16]	; (80007b4 <InMode+0x28>)
 80007a2:	f000 f839 	bl	8000818 <ConsoleSendLine>
	return 0;
 80007a6:	2300      	movs	r3, #0

}
 80007a8:	4618      	mov	r0, r3
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	20000154 	.word	0x20000154
 80007b0:	20000158 	.word	0x20000158
 80007b4:	0800e6cc 	.word	0x0800e6cc

080007b8 <ConsoleInit>:
}

// ConsoleInit
// Initialize the console interface and all it depends on
void ConsoleInit(UART_HandleTypeDef *huart)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
	uint32_t i;

	ConsoleIoInit(huart);
 80007c0:	6878      	ldr	r0, [r7, #4]
 80007c2:	f000 f83b 	bl	800083c <ConsoleIoInit>
	ConsoleIoSendString("Welcome to the Stone Subsystem, your gateway to testing code and hardware.");
 80007c6:	480f      	ldr	r0, [pc, #60]	; (8000804 <ConsoleInit+0x4c>)
 80007c8:	f000 f850 	bl	800086c <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 80007cc:	480e      	ldr	r0, [pc, #56]	; (8000808 <ConsoleInit+0x50>)
 80007ce:	f000 f84d 	bl	800086c <ConsoleIoSendString>
	ConsoleIoSendString(CONSOLE_PROMPT);
 80007d2:	480e      	ldr	r0, [pc, #56]	; (800080c <ConsoleInit+0x54>)
 80007d4:	f000 f84a 	bl	800086c <ConsoleIoSendString>
	mReceivedSoFar = 0u;
 80007d8:	4b0d      	ldr	r3, [pc, #52]	; (8000810 <ConsoleInit+0x58>)
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]

	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 80007de:	2300      	movs	r3, #0
 80007e0:	60fb      	str	r3, [r7, #12]
 80007e2:	e007      	b.n	80007f4 <ConsoleInit+0x3c>
	{
		mReceiveBuffer[i] = NULL_CHAR;
 80007e4:	4a0b      	ldr	r2, [pc, #44]	; (8000814 <ConsoleInit+0x5c>)
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	4413      	add	r3, r2
 80007ea:	2200      	movs	r2, #0
 80007ec:	701a      	strb	r2, [r3, #0]
	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	3301      	adds	r3, #1
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	2bff      	cmp	r3, #255	; 0xff
 80007f8:	d9f4      	bls.n	80007e4 <ConsoleInit+0x2c>
	}

}
 80007fa:	bf00      	nop
 80007fc:	bf00      	nop
 80007fe:	3710      	adds	r7, #16
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	0800e6dc 	.word	0x0800e6dc
 8000808:	0800e728 	.word	0x0800e728
 800080c:	0800e72c 	.word	0x0800e72c
 8000810:	20000260 	.word	0x20000260
 8000814:	20000160 	.word	0x20000160

08000818 <ConsoleSendLine>:
}

// ConsoleSendLine
// Send a null terminated string to the console followed by a line ending.
eCommandResult_T ConsoleSendLine(const char *buffer)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
	ConsoleIoSendString(buffer);
 8000820:	6878      	ldr	r0, [r7, #4]
 8000822:	f000 f823 	bl	800086c <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 8000826:	4804      	ldr	r0, [pc, #16]	; (8000838 <ConsoleSendLine+0x20>)
 8000828:	f000 f820 	bl	800086c <ConsoleIoSendString>
	return COMMAND_SUCCESS;
 800082c:	2300      	movs	r3, #0
}
 800082e:	4618      	mov	r0, r3
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	0800e728 	.word	0x0800e728

0800083c <ConsoleIoInit>:

}

eConsoleError ConsoleIoInit(UART_HandleTypeDef *huart)

{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
	consoleHuart = huart;
 8000844:	4a07      	ldr	r2, [pc, #28]	; (8000864 <ConsoleIoInit+0x28>)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	6013      	str	r3, [r2, #0]
	// So that we start the call back
	HAL_UART_Receive_IT(consoleHuart,&byte,1);
 800084a:	4b06      	ldr	r3, [pc, #24]	; (8000864 <ConsoleIoInit+0x28>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	2201      	movs	r2, #1
 8000850:	4905      	ldr	r1, [pc, #20]	; (8000868 <ConsoleIoInit+0x2c>)
 8000852:	4618      	mov	r0, r3
 8000854:	f007 fa09 	bl	8007c6a <HAL_UART_Receive_IT>
	return CONSOLE_SUCCESS;
 8000858:	2300      	movs	r3, #0
}
 800085a:	4618      	mov	r0, r3
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	20000264 	.word	0x20000264
 8000868:	2000027a 	.word	0x2000027a

0800086c <ConsoleIoSendString>:
	*readLength = i;
	return CONSOLE_SUCCESS;
}

eConsoleError ConsoleIoSendString(const char *buffer)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
	printf("%s", buffer);
 8000874:	6879      	ldr	r1, [r7, #4]
 8000876:	4804      	ldr	r0, [pc, #16]	; (8000888 <ConsoleIoSendString+0x1c>)
 8000878:	f00c ff58 	bl	800d72c <iprintf>
	return CONSOLE_SUCCESS;
 800087c:	2300      	movs	r3, #0
}
 800087e:	4618      	mov	r0, r3
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	0800e754 	.word	0x0800e754

0800088c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback (UART_HandleTypeDef *huart)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]


	//uint8_t lastChar = *(huart->pRxBuffPtr);
	tempBuffer[charCount] = byte;
 8000894:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <HAL_UART_RxCpltCallback+0x44>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a0e      	ldr	r2, [pc, #56]	; (80008d4 <HAL_UART_RxCpltCallback+0x48>)
 800089a:	7811      	ldrb	r1, [r2, #0]
 800089c:	4a0e      	ldr	r2, [pc, #56]	; (80008d8 <HAL_UART_RxCpltCallback+0x4c>)
 800089e:	54d1      	strb	r1, [r2, r3]

	charCount ++;
 80008a0:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <HAL_UART_RxCpltCallback+0x44>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	3301      	adds	r3, #1
 80008a6:	4a0a      	ldr	r2, [pc, #40]	; (80008d0 <HAL_UART_RxCpltCallback+0x44>)
 80008a8:	6013      	str	r3, [r2, #0]

	if( byte == '\n'){
 80008aa:	4b0a      	ldr	r3, [pc, #40]	; (80008d4 <HAL_UART_RxCpltCallback+0x48>)
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	2b0a      	cmp	r3, #10
 80008b0:	d102      	bne.n	80008b8 <HAL_UART_RxCpltCallback+0x2c>
	readComplete = 1;
 80008b2:	4b0a      	ldr	r3, [pc, #40]	; (80008dc <HAL_UART_RxCpltCallback+0x50>)
 80008b4:	2201      	movs	r2, #1
 80008b6:	601a      	str	r2, [r3, #0]

	}
	HAL_UART_Receive_IT(consoleHuart,&byte,1);
 80008b8:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <HAL_UART_RxCpltCallback+0x54>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	2201      	movs	r2, #1
 80008be:	4905      	ldr	r1, [pc, #20]	; (80008d4 <HAL_UART_RxCpltCallback+0x48>)
 80008c0:	4618      	mov	r0, r3
 80008c2:	f007 f9d2 	bl	8007c6a <HAL_UART_Receive_IT>

}
 80008c6:	bf00      	nop
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	2000026c 	.word	0x2000026c
 80008d4:	2000027a 	.word	0x2000027a
 80008d8:	20000270 	.word	0x20000270
 80008dc:	20000268 	.word	0x20000268
 80008e0:	20000264 	.word	0x20000264

080008e4 <I3G450D_Init>:

static uint8_t spiTxBuf[2];
static uint8_t spiRxBuf[7];

void I3G450D_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 80008e8:	2201      	movs	r2, #1
 80008ea:	2102      	movs	r1, #2
 80008ec:	4856      	ldr	r0, [pc, #344]	; (8000a48 <I3G450D_Init+0x164>)
 80008ee:	f002 f9f3 	bl	8002cd8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80008f2:	2014      	movs	r0, #20
 80008f4:	f001 fb76 	bl	8001fe4 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 80008f8:	2200      	movs	r2, #0
 80008fa:	2102      	movs	r1, #2
 80008fc:	4852      	ldr	r0, [pc, #328]	; (8000a48 <I3G450D_Init+0x164>)
 80008fe:	f002 f9eb 	bl	8002cd8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000902:	2014      	movs	r0, #20
 8000904:	f001 fb6e 	bl	8001fe4 <HAL_Delay>
	spiTxBuf[0]=0x20;
 8000908:	4b50      	ldr	r3, [pc, #320]	; (8000a4c <I3G450D_Init+0x168>)
 800090a:	2220      	movs	r2, #32
 800090c:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0xff;
 800090e:	4b4f      	ldr	r3, [pc, #316]	; (8000a4c <I3G450D_Init+0x168>)
 8000910:	22ff      	movs	r2, #255	; 0xff
 8000912:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi5,spiTxBuf,2,50);
 8000914:	2332      	movs	r3, #50	; 0x32
 8000916:	2202      	movs	r2, #2
 8000918:	494c      	ldr	r1, [pc, #304]	; (8000a4c <I3G450D_Init+0x168>)
 800091a:	484d      	ldr	r0, [pc, #308]	; (8000a50 <I3G450D_Init+0x16c>)
 800091c:	f005 fb31 	bl	8005f82 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8000920:	2201      	movs	r2, #1
 8000922:	2102      	movs	r1, #2
 8000924:	4848      	ldr	r0, [pc, #288]	; (8000a48 <I3G450D_Init+0x164>)
 8000926:	f002 f9d7 	bl	8002cd8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800092a:	2014      	movs	r0, #20
 800092c:	f001 fb5a 	bl	8001fe4 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8000930:	2200      	movs	r2, #0
 8000932:	2102      	movs	r1, #2
 8000934:	4844      	ldr	r0, [pc, #272]	; (8000a48 <I3G450D_Init+0x164>)
 8000936:	f002 f9cf 	bl	8002cd8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800093a:	2014      	movs	r0, #20
 800093c:	f001 fb52 	bl	8001fe4 <HAL_Delay>
	spiTxBuf[0]=0x21;
 8000940:	4b42      	ldr	r3, [pc, #264]	; (8000a4c <I3G450D_Init+0x168>)
 8000942:	2221      	movs	r2, #33	; 0x21
 8000944:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x00;
 8000946:	4b41      	ldr	r3, [pc, #260]	; (8000a4c <I3G450D_Init+0x168>)
 8000948:	2200      	movs	r2, #0
 800094a:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi5,spiTxBuf,2,50);
 800094c:	2332      	movs	r3, #50	; 0x32
 800094e:	2202      	movs	r2, #2
 8000950:	493e      	ldr	r1, [pc, #248]	; (8000a4c <I3G450D_Init+0x168>)
 8000952:	483f      	ldr	r0, [pc, #252]	; (8000a50 <I3G450D_Init+0x16c>)
 8000954:	f005 fb15 	bl	8005f82 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8000958:	2201      	movs	r2, #1
 800095a:	2102      	movs	r1, #2
 800095c:	483a      	ldr	r0, [pc, #232]	; (8000a48 <I3G450D_Init+0x164>)
 800095e:	f002 f9bb 	bl	8002cd8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000962:	2014      	movs	r0, #20
 8000964:	f001 fb3e 	bl	8001fe4 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8000968:	2200      	movs	r2, #0
 800096a:	2102      	movs	r1, #2
 800096c:	4836      	ldr	r0, [pc, #216]	; (8000a48 <I3G450D_Init+0x164>)
 800096e:	f002 f9b3 	bl	8002cd8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000972:	2014      	movs	r0, #20
 8000974:	f001 fb36 	bl	8001fe4 <HAL_Delay>
	spiTxBuf[0]=0x22;
 8000978:	4b34      	ldr	r3, [pc, #208]	; (8000a4c <I3G450D_Init+0x168>)
 800097a:	2222      	movs	r2, #34	; 0x22
 800097c:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x00;
 800097e:	4b33      	ldr	r3, [pc, #204]	; (8000a4c <I3G450D_Init+0x168>)
 8000980:	2200      	movs	r2, #0
 8000982:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi5,spiTxBuf,2,50);
 8000984:	2332      	movs	r3, #50	; 0x32
 8000986:	2202      	movs	r2, #2
 8000988:	4930      	ldr	r1, [pc, #192]	; (8000a4c <I3G450D_Init+0x168>)
 800098a:	4831      	ldr	r0, [pc, #196]	; (8000a50 <I3G450D_Init+0x16c>)
 800098c:	f005 faf9 	bl	8005f82 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8000990:	2201      	movs	r2, #1
 8000992:	2102      	movs	r1, #2
 8000994:	482c      	ldr	r0, [pc, #176]	; (8000a48 <I3G450D_Init+0x164>)
 8000996:	f002 f99f 	bl	8002cd8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800099a:	2014      	movs	r0, #20
 800099c:	f001 fb22 	bl	8001fe4 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 80009a0:	2200      	movs	r2, #0
 80009a2:	2102      	movs	r1, #2
 80009a4:	4828      	ldr	r0, [pc, #160]	; (8000a48 <I3G450D_Init+0x164>)
 80009a6:	f002 f997 	bl	8002cd8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80009aa:	2014      	movs	r0, #20
 80009ac:	f001 fb1a 	bl	8001fe4 <HAL_Delay>
	spiTxBuf[0]=0x23;
 80009b0:	4b26      	ldr	r3, [pc, #152]	; (8000a4c <I3G450D_Init+0x168>)
 80009b2:	2223      	movs	r2, #35	; 0x23
 80009b4:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x20;
 80009b6:	4b25      	ldr	r3, [pc, #148]	; (8000a4c <I3G450D_Init+0x168>)
 80009b8:	2220      	movs	r2, #32
 80009ba:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi5,spiTxBuf,2,50);
 80009bc:	2332      	movs	r3, #50	; 0x32
 80009be:	2202      	movs	r2, #2
 80009c0:	4922      	ldr	r1, [pc, #136]	; (8000a4c <I3G450D_Init+0x168>)
 80009c2:	4823      	ldr	r0, [pc, #140]	; (8000a50 <I3G450D_Init+0x16c>)
 80009c4:	f005 fadd 	bl	8005f82 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 80009c8:	2201      	movs	r2, #1
 80009ca:	2102      	movs	r1, #2
 80009cc:	481e      	ldr	r0, [pc, #120]	; (8000a48 <I3G450D_Init+0x164>)
 80009ce:	f002 f983 	bl	8002cd8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80009d2:	2014      	movs	r0, #20
 80009d4:	f001 fb06 	bl	8001fe4 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 80009d8:	2200      	movs	r2, #0
 80009da:	2102      	movs	r1, #2
 80009dc:	481a      	ldr	r0, [pc, #104]	; (8000a48 <I3G450D_Init+0x164>)
 80009de:	f002 f97b 	bl	8002cd8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80009e2:	2014      	movs	r0, #20
 80009e4:	f001 fafe 	bl	8001fe4 <HAL_Delay>
	spiTxBuf[0]=0x24;
 80009e8:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <I3G450D_Init+0x168>)
 80009ea:	2224      	movs	r2, #36	; 0x24
 80009ec:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x10;
 80009ee:	4b17      	ldr	r3, [pc, #92]	; (8000a4c <I3G450D_Init+0x168>)
 80009f0:	2210      	movs	r2, #16
 80009f2:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi5,spiTxBuf,2,50);
 80009f4:	2332      	movs	r3, #50	; 0x32
 80009f6:	2202      	movs	r2, #2
 80009f8:	4914      	ldr	r1, [pc, #80]	; (8000a4c <I3G450D_Init+0x168>)
 80009fa:	4815      	ldr	r0, [pc, #84]	; (8000a50 <I3G450D_Init+0x16c>)
 80009fc:	f005 fac1 	bl	8005f82 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8000a00:	2201      	movs	r2, #1
 8000a02:	2102      	movs	r1, #2
 8000a04:	4810      	ldr	r0, [pc, #64]	; (8000a48 <I3G450D_Init+0x164>)
 8000a06:	f002 f967 	bl	8002cd8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000a0a:	2014      	movs	r0, #20
 8000a0c:	f001 faea 	bl	8001fe4 <HAL_Delay>
	// read who am i register
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8000a10:	2200      	movs	r2, #0
 8000a12:	2102      	movs	r1, #2
 8000a14:	480c      	ldr	r0, [pc, #48]	; (8000a48 <I3G450D_Init+0x164>)
 8000a16:	f002 f95f 	bl	8002cd8 <HAL_GPIO_WritePin>
	spiTxBuf[0]=0x0F|0x80;
 8000a1a:	4b0c      	ldr	r3, [pc, #48]	; (8000a4c <I3G450D_Init+0x168>)
 8000a1c:	228f      	movs	r2, #143	; 0x8f
 8000a1e:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi5,spiTxBuf,1,50);
 8000a20:	2332      	movs	r3, #50	; 0x32
 8000a22:	2201      	movs	r2, #1
 8000a24:	4909      	ldr	r1, [pc, #36]	; (8000a4c <I3G450D_Init+0x168>)
 8000a26:	480a      	ldr	r0, [pc, #40]	; (8000a50 <I3G450D_Init+0x16c>)
 8000a28:	f005 faab 	bl	8005f82 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi5,&spiRxBuf[1],1,50);
 8000a2c:	2332      	movs	r3, #50	; 0x32
 8000a2e:	2201      	movs	r2, #1
 8000a30:	4908      	ldr	r1, [pc, #32]	; (8000a54 <I3G450D_Init+0x170>)
 8000a32:	4807      	ldr	r0, [pc, #28]	; (8000a50 <I3G450D_Init+0x16c>)
 8000a34:	f005 fbe1 	bl	80061fa <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8000a38:	2201      	movs	r2, #1
 8000a3a:	2102      	movs	r1, #2
 8000a3c:	4802      	ldr	r0, [pc, #8]	; (8000a48 <I3G450D_Init+0x164>)
 8000a3e:	f002 f94b 	bl	8002cd8 <HAL_GPIO_WritePin>
}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40020800 	.word	0x40020800
 8000a4c:	2000027c 	.word	0x2000027c
 8000a50:	20000394 	.word	0x20000394
 8000a54:	20000281 	.word	0x20000281

08000a58 <Lis3dhInit>:

}



void Lis3dhInit(I2C_HandleTypeDef *I2Cxhandle){
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b088      	sub	sp, #32
 8000a5c:	af02      	add	r7, sp, #8
 8000a5e:	6078      	str	r0, [r7, #4]

	 HAL_StatusTypeDef ret;

	    uint8_t sendBuff[2];
	    uint8_t reciveBuff[12];
	    I2Cx = I2Cxhandle;
 8000a60:	4a38      	ldr	r2, [pc, #224]	; (8000b44 <Lis3dhInit+0xec>)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	6013      	str	r3, [r2, #0]

	    sendBuff[0] = WHO_AM_I|LIS3DH_READ;
 8000a66:	238f      	movs	r3, #143	; 0x8f
 8000a68:	753b      	strb	r3, [r7, #20]

	    ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 1, HAL_MAX_DELAY);
 8000a6a:	4b36      	ldr	r3, [pc, #216]	; (8000b44 <Lis3dhInit+0xec>)
 8000a6c:	6818      	ldr	r0, [r3, #0]
 8000a6e:	2130      	movs	r1, #48	; 0x30
 8000a70:	f107 0214 	add.w	r2, r7, #20
 8000a74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a78:	9300      	str	r3, [sp, #0]
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	f003 fe94 	bl	80047a8 <HAL_I2C_Master_Transmit>
 8000a80:	4603      	mov	r3, r0
 8000a82:	75fb      	strb	r3, [r7, #23]
	    if(ret != HAL_OK) {
 8000a84:	7dfb      	ldrb	r3, [r7, #23]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d158      	bne.n	8000b3c <Lis3dhInit+0xe4>
	        //Handle Error

	    } else {

	        ret = HAL_I2C_Master_Receive(I2Cx, LIS3DH_ADDR, reciveBuff, 2, HAL_MAX_DELAY);
 8000a8a:	4b2e      	ldr	r3, [pc, #184]	; (8000b44 <Lis3dhInit+0xec>)
 8000a8c:	6818      	ldr	r0, [r3, #0]
 8000a8e:	2130      	movs	r1, #48	; 0x30
 8000a90:	f107 0208 	add.w	r2, r7, #8
 8000a94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a98:	9300      	str	r3, [sp, #0]
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	f003 ff82 	bl	80049a4 <HAL_I2C_Master_Receive>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	75fb      	strb	r3, [r7, #23]
	        if(ret != HAL_OK) {
 8000aa4:	7dfb      	ldrb	r3, [r7, #23]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d148      	bne.n	8000b3c <Lis3dhInit+0xe4>
	        } else {

	        	// configure the sensor.
	        	// Setting our resolution 100HZ so that we can use interrupts
	        	// and that we will read all three axis
	        	 sendBuff[0]  = LIS3DH_REG_CTRL1  |LIS3DH_READ;
 8000aaa:	23a0      	movs	r3, #160	; 0xa0
 8000aac:	753b      	strb	r3, [r7, #20]

	        	  ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 1, HAL_MAX_DELAY);
 8000aae:	4b25      	ldr	r3, [pc, #148]	; (8000b44 <Lis3dhInit+0xec>)
 8000ab0:	6818      	ldr	r0, [r3, #0]
 8000ab2:	2130      	movs	r1, #48	; 0x30
 8000ab4:	f107 0214 	add.w	r2, r7, #20
 8000ab8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000abc:	9300      	str	r3, [sp, #0]
 8000abe:	2301      	movs	r3, #1
 8000ac0:	f003 fe72 	bl	80047a8 <HAL_I2C_Master_Transmit>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	75fb      	strb	r3, [r7, #23]
	        	  ret = HAL_I2C_Master_Receive(I2Cx, LIS3DH_ADDR, reciveBuff, 2, HAL_MAX_DELAY);
 8000ac8:	4b1e      	ldr	r3, [pc, #120]	; (8000b44 <Lis3dhInit+0xec>)
 8000aca:	6818      	ldr	r0, [r3, #0]
 8000acc:	2130      	movs	r1, #48	; 0x30
 8000ace:	f107 0208 	add.w	r2, r7, #8
 8000ad2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ad6:	9300      	str	r3, [sp, #0]
 8000ad8:	2302      	movs	r3, #2
 8000ada:	f003 ff63 	bl	80049a4 <HAL_I2C_Master_Receive>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	75fb      	strb	r3, [r7, #23]

	        	  sendBuff[0] = LIS3DH_REG_CTRL1;
 8000ae2:	2320      	movs	r3, #32
 8000ae4:	753b      	strb	r3, [r7, #20]
	        	  sendBuff[1] = 0x57;
 8000ae6:	2357      	movs	r3, #87	; 0x57
 8000ae8:	757b      	strb	r3, [r7, #21]
	        	  ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 2, HAL_MAX_DELAY);
 8000aea:	4b16      	ldr	r3, [pc, #88]	; (8000b44 <Lis3dhInit+0xec>)
 8000aec:	6818      	ldr	r0, [r3, #0]
 8000aee:	2130      	movs	r1, #48	; 0x30
 8000af0:	f107 0214 	add.w	r2, r7, #20
 8000af4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000af8:	9300      	str	r3, [sp, #0]
 8000afa:	2302      	movs	r3, #2
 8000afc:	f003 fe54 	bl	80047a8 <HAL_I2C_Master_Transmit>
 8000b00:	4603      	mov	r3, r0
 8000b02:	75fb      	strb	r3, [r7, #23]
					//Read to make sure the write worked.
					sendBuff[0]  = LIS3DH_REG_CTRL1  |LIS3DH_READ;
 8000b04:	23a0      	movs	r3, #160	; 0xa0
 8000b06:	753b      	strb	r3, [r7, #20]

					ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 1, HAL_MAX_DELAY);
 8000b08:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <Lis3dhInit+0xec>)
 8000b0a:	6818      	ldr	r0, [r3, #0]
 8000b0c:	2130      	movs	r1, #48	; 0x30
 8000b0e:	f107 0214 	add.w	r2, r7, #20
 8000b12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b16:	9300      	str	r3, [sp, #0]
 8000b18:	2301      	movs	r3, #1
 8000b1a:	f003 fe45 	bl	80047a8 <HAL_I2C_Master_Transmit>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	75fb      	strb	r3, [r7, #23]
					ret = HAL_I2C_Master_Receive(I2Cx, LIS3DH_ADDR, reciveBuff, 2, HAL_MAX_DELAY);
 8000b22:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <Lis3dhInit+0xec>)
 8000b24:	6818      	ldr	r0, [r3, #0]
 8000b26:	2130      	movs	r1, #48	; 0x30
 8000b28:	f107 0208 	add.w	r2, r7, #8
 8000b2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b30:	9300      	str	r3, [sp, #0]
 8000b32:	2302      	movs	r3, #2
 8000b34:	f003 ff36 	bl	80049a4 <HAL_I2C_Master_Receive>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	75fb      	strb	r3, [r7, #23]





}
 8000b3c:	bf00      	nop
 8000b3e:	3718      	adds	r7, #24
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	20000288 	.word	0x20000288

08000b48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b4e:	f001 f9d7 	bl	8001f00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b52:	f000 f839 	bl	8000bc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b56:	f000 fadd 	bl	8001114 <MX_GPIO_Init>
  MX_CRC_Init();
 8000b5a:	f000 f89f 	bl	8000c9c <MX_CRC_Init>
  MX_I2C3_Init();
 8000b5e:	f000 f8f1 	bl	8000d44 <MX_I2C3_Init>
  MX_SPI5_Init();
 8000b62:	f000 f965 	bl	8000e30 <MX_SPI5_Init>
  MX_TIM1_Init();
 8000b66:	f000 f999 	bl	8000e9c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000b6a:	f000 fa5f 	bl	800102c <MX_USART1_UART_Init>
  MX_DMA_Init();
 8000b6e:	f000 fab1 	bl	80010d4 <MX_DMA_Init>
  MX_TIM2_Init();
 8000b72:	f000 f9e7 	bl	8000f44 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000b76:	f000 fa83 	bl	8001080 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8000b7a:	f000 f923 	bl	8000dc4 <MX_SPI3_Init>
  MX_FATFS_Init();
 8000b7e:	f008 fff3 	bl	8009b68 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8000b82:	f00c f965 	bl	800ce50 <MX_USB_HOST_Init>
  MX_I2C2_Init();
 8000b86:	f000 f89d 	bl	8000cc4 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */



  RetargetInit(&huart1);
 8000b8a:	480b      	ldr	r0, [pc, #44]	; (8000bb8 <main+0x70>)
 8000b8c:	f000 fcda 	bl	8001544 <RetargetInit>
  ConsoleInit(&huart1);
 8000b90:	4809      	ldr	r0, [pc, #36]	; (8000bb8 <main+0x70>)
 8000b92:	f7ff fe11 	bl	80007b8 <ConsoleInit>

  SessionControllerInit(&hi2c2,&htim2,&hspi5);
 8000b96:	4a09      	ldr	r2, [pc, #36]	; (8000bbc <main+0x74>)
 8000b98:	4909      	ldr	r1, [pc, #36]	; (8000bc0 <main+0x78>)
 8000b9a:	480a      	ldr	r0, [pc, #40]	; (8000bc4 <main+0x7c>)
 8000b9c:	f7ff fd12 	bl	80005c4 <SessionControllerInit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t angle = 0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	71fb      	strb	r3, [r7, #7]
  const uint8_t angle_difference = 11;
 8000ba4:	230b      	movs	r3, #11
 8000ba6:	71bb      	strb	r3, [r7, #6]
  int usbWriteFlag = 1;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	603b      	str	r3, [r7, #0]
uint8_t x,y,z;

  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000bac:	f00c f976 	bl	800ce9c <MX_USB_HOST_Process>


	  //		ConsoleProcess();
	  //		I3G450D_loop();
	  //		Lis3dhGetAcc();
	  SessionControllerProcess();
 8000bb0:	f7ff fd22 	bl	80005f8 <SessionControllerProcess>
  {
 8000bb4:	e7fa      	b.n	8000bac <main+0x64>
 8000bb6:	bf00      	nop
 8000bb8:	200004dc 	.word	0x200004dc
 8000bbc:	20000394 	.word	0x20000394
 8000bc0:	20000434 	.word	0x20000434
 8000bc4:	20000294 	.word	0x20000294

08000bc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b094      	sub	sp, #80	; 0x50
 8000bcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bce:	f107 0320 	add.w	r3, r7, #32
 8000bd2:	2230      	movs	r2, #48	; 0x30
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f00c fcc0 	bl	800d55c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bdc:	f107 030c 	add.w	r3, r7, #12
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]
 8000bea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bec:	2300      	movs	r3, #0
 8000bee:	60bb      	str	r3, [r7, #8]
 8000bf0:	4b28      	ldr	r3, [pc, #160]	; (8000c94 <SystemClock_Config+0xcc>)
 8000bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf4:	4a27      	ldr	r2, [pc, #156]	; (8000c94 <SystemClock_Config+0xcc>)
 8000bf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bfa:	6413      	str	r3, [r2, #64]	; 0x40
 8000bfc:	4b25      	ldr	r3, [pc, #148]	; (8000c94 <SystemClock_Config+0xcc>)
 8000bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c04:	60bb      	str	r3, [r7, #8]
 8000c06:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c08:	2300      	movs	r3, #0
 8000c0a:	607b      	str	r3, [r7, #4]
 8000c0c:	4b22      	ldr	r3, [pc, #136]	; (8000c98 <SystemClock_Config+0xd0>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c14:	4a20      	ldr	r2, [pc, #128]	; (8000c98 <SystemClock_Config+0xd0>)
 8000c16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c1a:	6013      	str	r3, [r2, #0]
 8000c1c:	4b1e      	ldr	r3, [pc, #120]	; (8000c98 <SystemClock_Config+0xd0>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c24:	607b      	str	r3, [r7, #4]
 8000c26:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c30:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c32:	2302      	movs	r3, #2
 8000c34:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c36:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c3c:	2304      	movs	r3, #4
 8000c3e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000c40:	2348      	movs	r3, #72	; 0x48
 8000c42:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c44:	2302      	movs	r3, #2
 8000c46:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000c48:	2303      	movs	r3, #3
 8000c4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c4c:	f107 0320 	add.w	r3, r7, #32
 8000c50:	4618      	mov	r0, r3
 8000c52:	f004 fc75 	bl	8005540 <HAL_RCC_OscConfig>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000c5c:	f000 fc6c 	bl	8001538 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c60:	230f      	movs	r3, #15
 8000c62:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c64:	2302      	movs	r3, #2
 8000c66:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c70:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c72:	2300      	movs	r3, #0
 8000c74:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c76:	f107 030c 	add.w	r3, r7, #12
 8000c7a:	2102      	movs	r1, #2
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f004 fed7 	bl	8005a30 <HAL_RCC_ClockConfig>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000c88:	f000 fc56 	bl	8001538 <Error_Handler>
  }
}
 8000c8c:	bf00      	nop
 8000c8e:	3750      	adds	r7, #80	; 0x50
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	40023800 	.word	0x40023800
 8000c98:	40007000 	.word	0x40007000

08000c9c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000ca0:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <MX_CRC_Init+0x20>)
 8000ca2:	4a07      	ldr	r2, [pc, #28]	; (8000cc0 <MX_CRC_Init+0x24>)
 8000ca4:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000ca6:	4805      	ldr	r0, [pc, #20]	; (8000cbc <MX_CRC_Init+0x20>)
 8000ca8:	f001 fad1 	bl	800224e <HAL_CRC_Init>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000cb2:	f000 fc41 	bl	8001538 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	2000028c 	.word	0x2000028c
 8000cc0:	40023000 	.word	0x40023000

08000cc4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000cc8:	4b1b      	ldr	r3, [pc, #108]	; (8000d38 <MX_I2C2_Init+0x74>)
 8000cca:	4a1c      	ldr	r2, [pc, #112]	; (8000d3c <MX_I2C2_Init+0x78>)
 8000ccc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000cce:	4b1a      	ldr	r3, [pc, #104]	; (8000d38 <MX_I2C2_Init+0x74>)
 8000cd0:	4a1b      	ldr	r2, [pc, #108]	; (8000d40 <MX_I2C2_Init+0x7c>)
 8000cd2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000cd4:	4b18      	ldr	r3, [pc, #96]	; (8000d38 <MX_I2C2_Init+0x74>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000cda:	4b17      	ldr	r3, [pc, #92]	; (8000d38 <MX_I2C2_Init+0x74>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ce0:	4b15      	ldr	r3, [pc, #84]	; (8000d38 <MX_I2C2_Init+0x74>)
 8000ce2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ce6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ce8:	4b13      	ldr	r3, [pc, #76]	; (8000d38 <MX_I2C2_Init+0x74>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000cee:	4b12      	ldr	r3, [pc, #72]	; (8000d38 <MX_I2C2_Init+0x74>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cf4:	4b10      	ldr	r3, [pc, #64]	; (8000d38 <MX_I2C2_Init+0x74>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cfa:	4b0f      	ldr	r3, [pc, #60]	; (8000d38 <MX_I2C2_Init+0x74>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000d00:	480d      	ldr	r0, [pc, #52]	; (8000d38 <MX_I2C2_Init+0x74>)
 8000d02:	f003 fc0d 	bl	8004520 <HAL_I2C_Init>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000d0c:	f000 fc14 	bl	8001538 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d10:	2100      	movs	r1, #0
 8000d12:	4809      	ldr	r0, [pc, #36]	; (8000d38 <MX_I2C2_Init+0x74>)
 8000d14:	f004 fb99 	bl	800544a <HAL_I2CEx_ConfigAnalogFilter>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000d1e:	f000 fc0b 	bl	8001538 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000d22:	2100      	movs	r1, #0
 8000d24:	4804      	ldr	r0, [pc, #16]	; (8000d38 <MX_I2C2_Init+0x74>)
 8000d26:	f004 fbcc 	bl	80054c2 <HAL_I2CEx_ConfigDigitalFilter>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000d30:	f000 fc02 	bl	8001538 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000d34:	bf00      	nop
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	20000294 	.word	0x20000294
 8000d3c:	40005800 	.word	0x40005800
 8000d40:	000186a0 	.word	0x000186a0

08000d44 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000d48:	4b1b      	ldr	r3, [pc, #108]	; (8000db8 <MX_I2C3_Init+0x74>)
 8000d4a:	4a1c      	ldr	r2, [pc, #112]	; (8000dbc <MX_I2C3_Init+0x78>)
 8000d4c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000d4e:	4b1a      	ldr	r3, [pc, #104]	; (8000db8 <MX_I2C3_Init+0x74>)
 8000d50:	4a1b      	ldr	r2, [pc, #108]	; (8000dc0 <MX_I2C3_Init+0x7c>)
 8000d52:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d54:	4b18      	ldr	r3, [pc, #96]	; (8000db8 <MX_I2C3_Init+0x74>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000d5a:	4b17      	ldr	r3, [pc, #92]	; (8000db8 <MX_I2C3_Init+0x74>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d60:	4b15      	ldr	r3, [pc, #84]	; (8000db8 <MX_I2C3_Init+0x74>)
 8000d62:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d66:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d68:	4b13      	ldr	r3, [pc, #76]	; (8000db8 <MX_I2C3_Init+0x74>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000d6e:	4b12      	ldr	r3, [pc, #72]	; (8000db8 <MX_I2C3_Init+0x74>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d74:	4b10      	ldr	r3, [pc, #64]	; (8000db8 <MX_I2C3_Init+0x74>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d7a:	4b0f      	ldr	r3, [pc, #60]	; (8000db8 <MX_I2C3_Init+0x74>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000d80:	480d      	ldr	r0, [pc, #52]	; (8000db8 <MX_I2C3_Init+0x74>)
 8000d82:	f003 fbcd 	bl	8004520 <HAL_I2C_Init>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000d8c:	f000 fbd4 	bl	8001538 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d90:	2100      	movs	r1, #0
 8000d92:	4809      	ldr	r0, [pc, #36]	; (8000db8 <MX_I2C3_Init+0x74>)
 8000d94:	f004 fb59 	bl	800544a <HAL_I2CEx_ConfigAnalogFilter>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000d9e:	f000 fbcb 	bl	8001538 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000da2:	2100      	movs	r1, #0
 8000da4:	4804      	ldr	r0, [pc, #16]	; (8000db8 <MX_I2C3_Init+0x74>)
 8000da6:	f004 fb8c 	bl	80054c2 <HAL_I2CEx_ConfigDigitalFilter>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000db0:	f000 fbc2 	bl	8001538 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000db4:	bf00      	nop
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	200002e8 	.word	0x200002e8
 8000dbc:	40005c00 	.word	0x40005c00
 8000dc0:	000186a0 	.word	0x000186a0

08000dc4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000dc8:	4b17      	ldr	r3, [pc, #92]	; (8000e28 <MX_SPI3_Init+0x64>)
 8000dca:	4a18      	ldr	r2, [pc, #96]	; (8000e2c <MX_SPI3_Init+0x68>)
 8000dcc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000dce:	4b16      	ldr	r3, [pc, #88]	; (8000e28 <MX_SPI3_Init+0x64>)
 8000dd0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000dd4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000dd6:	4b14      	ldr	r3, [pc, #80]	; (8000e28 <MX_SPI3_Init+0x64>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ddc:	4b12      	ldr	r3, [pc, #72]	; (8000e28 <MX_SPI3_Init+0x64>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000de2:	4b11      	ldr	r3, [pc, #68]	; (8000e28 <MX_SPI3_Init+0x64>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000de8:	4b0f      	ldr	r3, [pc, #60]	; (8000e28 <MX_SPI3_Init+0x64>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000dee:	4b0e      	ldr	r3, [pc, #56]	; (8000e28 <MX_SPI3_Init+0x64>)
 8000df0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000df4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000df6:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <MX_SPI3_Init+0x64>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dfc:	4b0a      	ldr	r3, [pc, #40]	; (8000e28 <MX_SPI3_Init+0x64>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e02:	4b09      	ldr	r3, [pc, #36]	; (8000e28 <MX_SPI3_Init+0x64>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e08:	4b07      	ldr	r3, [pc, #28]	; (8000e28 <MX_SPI3_Init+0x64>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000e0e:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <MX_SPI3_Init+0x64>)
 8000e10:	220a      	movs	r2, #10
 8000e12:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000e14:	4804      	ldr	r0, [pc, #16]	; (8000e28 <MX_SPI3_Init+0x64>)
 8000e16:	f005 f82b 	bl	8005e70 <HAL_SPI_Init>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000e20:	f000 fb8a 	bl	8001538 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000e24:	bf00      	nop
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	2000033c 	.word	0x2000033c
 8000e2c:	40003c00 	.word	0x40003c00

08000e30 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000e34:	4b17      	ldr	r3, [pc, #92]	; (8000e94 <MX_SPI5_Init+0x64>)
 8000e36:	4a18      	ldr	r2, [pc, #96]	; (8000e98 <MX_SPI5_Init+0x68>)
 8000e38:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000e3a:	4b16      	ldr	r3, [pc, #88]	; (8000e94 <MX_SPI5_Init+0x64>)
 8000e3c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e40:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000e42:	4b14      	ldr	r3, [pc, #80]	; (8000e94 <MX_SPI5_Init+0x64>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e48:	4b12      	ldr	r3, [pc, #72]	; (8000e94 <MX_SPI5_Init+0x64>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e4e:	4b11      	ldr	r3, [pc, #68]	; (8000e94 <MX_SPI5_Init+0x64>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e54:	4b0f      	ldr	r3, [pc, #60]	; (8000e94 <MX_SPI5_Init+0x64>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000e5a:	4b0e      	ldr	r3, [pc, #56]	; (8000e94 <MX_SPI5_Init+0x64>)
 8000e5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e60:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000e62:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <MX_SPI5_Init+0x64>)
 8000e64:	2218      	movs	r2, #24
 8000e66:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e68:	4b0a      	ldr	r3, [pc, #40]	; (8000e94 <MX_SPI5_Init+0x64>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e6e:	4b09      	ldr	r3, [pc, #36]	; (8000e94 <MX_SPI5_Init+0x64>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e74:	4b07      	ldr	r3, [pc, #28]	; (8000e94 <MX_SPI5_Init+0x64>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000e7a:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <MX_SPI5_Init+0x64>)
 8000e7c:	220a      	movs	r2, #10
 8000e7e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000e80:	4804      	ldr	r0, [pc, #16]	; (8000e94 <MX_SPI5_Init+0x64>)
 8000e82:	f004 fff5 	bl	8005e70 <HAL_SPI_Init>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000e8c:	f000 fb54 	bl	8001538 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000e90:	bf00      	nop
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	20000394 	.word	0x20000394
 8000e98:	40015000 	.word	0x40015000

08000e9c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b086      	sub	sp, #24
 8000ea0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ea2:	f107 0308 	add.w	r3, r7, #8
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	605a      	str	r2, [r3, #4]
 8000eac:	609a      	str	r2, [r3, #8]
 8000eae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eb0:	463b      	mov	r3, r7
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000eb8:	4b20      	ldr	r3, [pc, #128]	; (8000f3c <MX_TIM1_Init+0xa0>)
 8000eba:	4a21      	ldr	r2, [pc, #132]	; (8000f40 <MX_TIM1_Init+0xa4>)
 8000ebc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000ebe:	4b1f      	ldr	r3, [pc, #124]	; (8000f3c <MX_TIM1_Init+0xa0>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec4:	4b1d      	ldr	r3, [pc, #116]	; (8000f3c <MX_TIM1_Init+0xa0>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000eca:	4b1c      	ldr	r3, [pc, #112]	; (8000f3c <MX_TIM1_Init+0xa0>)
 8000ecc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ed0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ed2:	4b1a      	ldr	r3, [pc, #104]	; (8000f3c <MX_TIM1_Init+0xa0>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ed8:	4b18      	ldr	r3, [pc, #96]	; (8000f3c <MX_TIM1_Init+0xa0>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ede:	4b17      	ldr	r3, [pc, #92]	; (8000f3c <MX_TIM1_Init+0xa0>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ee4:	4815      	ldr	r0, [pc, #84]	; (8000f3c <MX_TIM1_Init+0xa0>)
 8000ee6:	f005 fd6b 	bl	80069c0 <HAL_TIM_Base_Init>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000ef0:	f000 fb22 	bl	8001538 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ef4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ef8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000efa:	f107 0308 	add.w	r3, r7, #8
 8000efe:	4619      	mov	r1, r3
 8000f00:	480e      	ldr	r0, [pc, #56]	; (8000f3c <MX_TIM1_Init+0xa0>)
 8000f02:	f006 f8a1 	bl	8007048 <HAL_TIM_ConfigClockSource>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000f0c:	f000 fb14 	bl	8001538 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f10:	2300      	movs	r3, #0
 8000f12:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f14:	2300      	movs	r3, #0
 8000f16:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f18:	463b      	mov	r3, r7
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4807      	ldr	r0, [pc, #28]	; (8000f3c <MX_TIM1_Init+0xa0>)
 8000f1e:	f006 fc93 	bl	8007848 <HAL_TIMEx_MasterConfigSynchronization>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000f28:	f000 fb06 	bl	8001538 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_Base_MspInit(&htim1);
 8000f2c:	4803      	ldr	r0, [pc, #12]	; (8000f3c <MX_TIM1_Init+0xa0>)
 8000f2e:	f000 fded 	bl	8001b0c <HAL_TIM_Base_MspInit>
  /* USER CODE END TIM1_Init 2 */

}
 8000f32:	bf00      	nop
 8000f34:	3718      	adds	r7, #24
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	200003ec 	.word	0x200003ec
 8000f40:	40010000 	.word	0x40010000

08000f44 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b08e      	sub	sp, #56	; 0x38
 8000f48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	605a      	str	r2, [r3, #4]
 8000f54:	609a      	str	r2, [r3, #8]
 8000f56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f58:	f107 0320 	add.w	r3, r7, #32
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f62:	1d3b      	adds	r3, r7, #4
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
 8000f6e:	611a      	str	r2, [r3, #16]
 8000f70:	615a      	str	r2, [r3, #20]
 8000f72:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f74:	4b2c      	ldr	r3, [pc, #176]	; (8001028 <MX_TIM2_Init+0xe4>)
 8000f76:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f7a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000f7c:	4b2a      	ldr	r3, [pc, #168]	; (8001028 <MX_TIM2_Init+0xe4>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f82:	4b29      	ldr	r3, [pc, #164]	; (8001028 <MX_TIM2_Init+0xe4>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60-1;
 8000f88:	4b27      	ldr	r3, [pc, #156]	; (8001028 <MX_TIM2_Init+0xe4>)
 8000f8a:	223b      	movs	r2, #59	; 0x3b
 8000f8c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f8e:	4b26      	ldr	r3, [pc, #152]	; (8001028 <MX_TIM2_Init+0xe4>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f94:	4b24      	ldr	r3, [pc, #144]	; (8001028 <MX_TIM2_Init+0xe4>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f9a:	4823      	ldr	r0, [pc, #140]	; (8001028 <MX_TIM2_Init+0xe4>)
 8000f9c:	f005 fd10 	bl	80069c0 <HAL_TIM_Base_Init>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000fa6:	f000 fac7 	bl	8001538 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000faa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fae:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fb0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	481c      	ldr	r0, [pc, #112]	; (8001028 <MX_TIM2_Init+0xe4>)
 8000fb8:	f006 f846 	bl	8007048 <HAL_TIM_ConfigClockSource>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000fc2:	f000 fab9 	bl	8001538 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000fc6:	4818      	ldr	r0, [pc, #96]	; (8001028 <MX_TIM2_Init+0xe4>)
 8000fc8:	f005 fd49 	bl	8006a5e <HAL_TIM_PWM_Init>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000fd2:	f000 fab1 	bl	8001538 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fde:	f107 0320 	add.w	r3, r7, #32
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4810      	ldr	r0, [pc, #64]	; (8001028 <MX_TIM2_Init+0xe4>)
 8000fe6:	f006 fc2f 	bl	8007848 <HAL_TIMEx_MasterConfigSynchronization>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000ff0:	f000 faa2 	bl	8001538 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ff4:	2360      	movs	r3, #96	; 0x60
 8000ff6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001000:	2300      	movs	r3, #0
 8001002:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001004:	1d3b      	adds	r3, r7, #4
 8001006:	2200      	movs	r2, #0
 8001008:	4619      	mov	r1, r3
 800100a:	4807      	ldr	r0, [pc, #28]	; (8001028 <MX_TIM2_Init+0xe4>)
 800100c:	f005 ff5a 	bl	8006ec4 <HAL_TIM_PWM_ConfigChannel>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8001016:	f000 fa8f 	bl	8001538 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800101a:	4803      	ldr	r0, [pc, #12]	; (8001028 <MX_TIM2_Init+0xe4>)
 800101c:	f000 fde6 	bl	8001bec <HAL_TIM_MspPostInit>

}
 8001020:	bf00      	nop
 8001022:	3738      	adds	r7, #56	; 0x38
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	20000434 	.word	0x20000434

0800102c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001030:	4b11      	ldr	r3, [pc, #68]	; (8001078 <MX_USART1_UART_Init+0x4c>)
 8001032:	4a12      	ldr	r2, [pc, #72]	; (800107c <MX_USART1_UART_Init+0x50>)
 8001034:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001036:	4b10      	ldr	r3, [pc, #64]	; (8001078 <MX_USART1_UART_Init+0x4c>)
 8001038:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800103c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800103e:	4b0e      	ldr	r3, [pc, #56]	; (8001078 <MX_USART1_UART_Init+0x4c>)
 8001040:	2200      	movs	r2, #0
 8001042:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001044:	4b0c      	ldr	r3, [pc, #48]	; (8001078 <MX_USART1_UART_Init+0x4c>)
 8001046:	2200      	movs	r2, #0
 8001048:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800104a:	4b0b      	ldr	r3, [pc, #44]	; (8001078 <MX_USART1_UART_Init+0x4c>)
 800104c:	2200      	movs	r2, #0
 800104e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001050:	4b09      	ldr	r3, [pc, #36]	; (8001078 <MX_USART1_UART_Init+0x4c>)
 8001052:	220c      	movs	r2, #12
 8001054:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001056:	4b08      	ldr	r3, [pc, #32]	; (8001078 <MX_USART1_UART_Init+0x4c>)
 8001058:	2200      	movs	r2, #0
 800105a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800105c:	4b06      	ldr	r3, [pc, #24]	; (8001078 <MX_USART1_UART_Init+0x4c>)
 800105e:	2200      	movs	r2, #0
 8001060:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001062:	4805      	ldr	r0, [pc, #20]	; (8001078 <MX_USART1_UART_Init+0x4c>)
 8001064:	f006 fc80 	bl	8007968 <HAL_UART_Init>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800106e:	f000 fa63 	bl	8001538 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	200004dc 	.word	0x200004dc
 800107c:	40011000 	.word	0x40011000

08001080 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001084:	4b11      	ldr	r3, [pc, #68]	; (80010cc <MX_USART2_UART_Init+0x4c>)
 8001086:	4a12      	ldr	r2, [pc, #72]	; (80010d0 <MX_USART2_UART_Init+0x50>)
 8001088:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800108a:	4b10      	ldr	r3, [pc, #64]	; (80010cc <MX_USART2_UART_Init+0x4c>)
 800108c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001090:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001092:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <MX_USART2_UART_Init+0x4c>)
 8001094:	2200      	movs	r2, #0
 8001096:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001098:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <MX_USART2_UART_Init+0x4c>)
 800109a:	2200      	movs	r2, #0
 800109c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800109e:	4b0b      	ldr	r3, [pc, #44]	; (80010cc <MX_USART2_UART_Init+0x4c>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010a4:	4b09      	ldr	r3, [pc, #36]	; (80010cc <MX_USART2_UART_Init+0x4c>)
 80010a6:	220c      	movs	r2, #12
 80010a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010aa:	4b08      	ldr	r3, [pc, #32]	; (80010cc <MX_USART2_UART_Init+0x4c>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010b0:	4b06      	ldr	r3, [pc, #24]	; (80010cc <MX_USART2_UART_Init+0x4c>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010b6:	4805      	ldr	r0, [pc, #20]	; (80010cc <MX_USART2_UART_Init+0x4c>)
 80010b8:	f006 fc56 	bl	8007968 <HAL_UART_Init>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010c2:	f000 fa39 	bl	8001538 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	20000520 	.word	0x20000520
 80010d0:	40004400 	.word	0x40004400

080010d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	607b      	str	r3, [r7, #4]
 80010de:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <MX_DMA_Init+0x3c>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	4a0b      	ldr	r2, [pc, #44]	; (8001110 <MX_DMA_Init+0x3c>)
 80010e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010e8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ea:	4b09      	ldr	r3, [pc, #36]	; (8001110 <MX_DMA_Init+0x3c>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010f2:	607b      	str	r3, [r7, #4]
 80010f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80010f6:	2200      	movs	r2, #0
 80010f8:	2100      	movs	r1, #0
 80010fa:	2010      	movs	r0, #16
 80010fc:	f001 f871 	bl	80021e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001100:	2010      	movs	r0, #16
 8001102:	f001 f88a 	bl	800221a <HAL_NVIC_EnableIRQ>

}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40023800 	.word	0x40023800

08001114 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b08e      	sub	sp, #56	; 0x38
 8001118:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	605a      	str	r2, [r3, #4]
 8001124:	609a      	str	r2, [r3, #8]
 8001126:	60da      	str	r2, [r3, #12]
 8001128:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	623b      	str	r3, [r7, #32]
 800112e:	4bb2      	ldr	r3, [pc, #712]	; (80013f8 <MX_GPIO_Init+0x2e4>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	4ab1      	ldr	r2, [pc, #708]	; (80013f8 <MX_GPIO_Init+0x2e4>)
 8001134:	f043 0304 	orr.w	r3, r3, #4
 8001138:	6313      	str	r3, [r2, #48]	; 0x30
 800113a:	4baf      	ldr	r3, [pc, #700]	; (80013f8 <MX_GPIO_Init+0x2e4>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	f003 0304 	and.w	r3, r3, #4
 8001142:	623b      	str	r3, [r7, #32]
 8001144:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	61fb      	str	r3, [r7, #28]
 800114a:	4bab      	ldr	r3, [pc, #684]	; (80013f8 <MX_GPIO_Init+0x2e4>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	4aaa      	ldr	r2, [pc, #680]	; (80013f8 <MX_GPIO_Init+0x2e4>)
 8001150:	f043 0320 	orr.w	r3, r3, #32
 8001154:	6313      	str	r3, [r2, #48]	; 0x30
 8001156:	4ba8      	ldr	r3, [pc, #672]	; (80013f8 <MX_GPIO_Init+0x2e4>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	f003 0320 	and.w	r3, r3, #32
 800115e:	61fb      	str	r3, [r7, #28]
 8001160:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	61bb      	str	r3, [r7, #24]
 8001166:	4ba4      	ldr	r3, [pc, #656]	; (80013f8 <MX_GPIO_Init+0x2e4>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	4aa3      	ldr	r2, [pc, #652]	; (80013f8 <MX_GPIO_Init+0x2e4>)
 800116c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001170:	6313      	str	r3, [r2, #48]	; 0x30
 8001172:	4ba1      	ldr	r3, [pc, #644]	; (80013f8 <MX_GPIO_Init+0x2e4>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800117a:	61bb      	str	r3, [r7, #24]
 800117c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	617b      	str	r3, [r7, #20]
 8001182:	4b9d      	ldr	r3, [pc, #628]	; (80013f8 <MX_GPIO_Init+0x2e4>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	4a9c      	ldr	r2, [pc, #624]	; (80013f8 <MX_GPIO_Init+0x2e4>)
 8001188:	f043 0301 	orr.w	r3, r3, #1
 800118c:	6313      	str	r3, [r2, #48]	; 0x30
 800118e:	4b9a      	ldr	r3, [pc, #616]	; (80013f8 <MX_GPIO_Init+0x2e4>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	617b      	str	r3, [r7, #20]
 8001198:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	613b      	str	r3, [r7, #16]
 800119e:	4b96      	ldr	r3, [pc, #600]	; (80013f8 <MX_GPIO_Init+0x2e4>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	4a95      	ldr	r2, [pc, #596]	; (80013f8 <MX_GPIO_Init+0x2e4>)
 80011a4:	f043 0302 	orr.w	r3, r3, #2
 80011a8:	6313      	str	r3, [r2, #48]	; 0x30
 80011aa:	4b93      	ldr	r3, [pc, #588]	; (80013f8 <MX_GPIO_Init+0x2e4>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	f003 0302 	and.w	r3, r3, #2
 80011b2:	613b      	str	r3, [r7, #16]
 80011b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	60fb      	str	r3, [r7, #12]
 80011ba:	4b8f      	ldr	r3, [pc, #572]	; (80013f8 <MX_GPIO_Init+0x2e4>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	4a8e      	ldr	r2, [pc, #568]	; (80013f8 <MX_GPIO_Init+0x2e4>)
 80011c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011c4:	6313      	str	r3, [r2, #48]	; 0x30
 80011c6:	4b8c      	ldr	r3, [pc, #560]	; (80013f8 <MX_GPIO_Init+0x2e4>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	60bb      	str	r3, [r7, #8]
 80011d6:	4b88      	ldr	r3, [pc, #544]	; (80013f8 <MX_GPIO_Init+0x2e4>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	4a87      	ldr	r2, [pc, #540]	; (80013f8 <MX_GPIO_Init+0x2e4>)
 80011dc:	f043 0310 	orr.w	r3, r3, #16
 80011e0:	6313      	str	r3, [r2, #48]	; 0x30
 80011e2:	4b85      	ldr	r3, [pc, #532]	; (80013f8 <MX_GPIO_Init+0x2e4>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	f003 0310 	and.w	r3, r3, #16
 80011ea:	60bb      	str	r3, [r7, #8]
 80011ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	607b      	str	r3, [r7, #4]
 80011f2:	4b81      	ldr	r3, [pc, #516]	; (80013f8 <MX_GPIO_Init+0x2e4>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	4a80      	ldr	r2, [pc, #512]	; (80013f8 <MX_GPIO_Init+0x2e4>)
 80011f8:	f043 0308 	orr.w	r3, r3, #8
 80011fc:	6313      	str	r3, [r2, #48]	; 0x30
 80011fe:	4b7e      	ldr	r3, [pc, #504]	; (80013f8 <MX_GPIO_Init+0x2e4>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	f003 0308 	and.w	r3, r3, #8
 8001206:	607b      	str	r3, [r7, #4]
 8001208:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 800120a:	2200      	movs	r2, #0
 800120c:	2116      	movs	r1, #22
 800120e:	487b      	ldr	r0, [pc, #492]	; (80013fc <MX_GPIO_Init+0x2e8>)
 8001210:	f001 fd62 	bl	8002cd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8001214:	2200      	movs	r2, #0
 8001216:	2180      	movs	r1, #128	; 0x80
 8001218:	4879      	ldr	r0, [pc, #484]	; (8001400 <MX_GPIO_Init+0x2ec>)
 800121a:	f001 fd5d 	bl	8002cd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin|GPIO_PIN_2, GPIO_PIN_RESET);
 800121e:	2200      	movs	r2, #0
 8001220:	f243 0104 	movw	r1, #12292	; 0x3004
 8001224:	4877      	ldr	r0, [pc, #476]	; (8001404 <MX_GPIO_Init+0x2f0>)
 8001226:	f001 fd57 	bl	8002cd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 800122a:	2200      	movs	r2, #0
 800122c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001230:	4875      	ldr	r0, [pc, #468]	; (8001408 <MX_GPIO_Init+0x2f4>)
 8001232:	f001 fd51 	bl	8002cd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A3_Pin A4_Pin A5_Pin SDNRAS_Pin
                           A6_Pin A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A3_Pin|A4_Pin|A5_Pin|SDNRAS_Pin
 8001236:	f64f 0338 	movw	r3, #63544	; 0xf838
 800123a:	627b      	str	r3, [r7, #36]	; 0x24
                          |A6_Pin|A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123c:	2302      	movs	r3, #2
 800123e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001244:	2303      	movs	r3, #3
 8001246:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001248:	230c      	movs	r3, #12
 800124a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800124c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001250:	4619      	mov	r1, r3
 8001252:	486e      	ldr	r0, [pc, #440]	; (800140c <MX_GPIO_Init+0x2f8>)
 8001254:	f001 fb94 	bl	8002980 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 8001258:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800125c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125e:	2302      	movs	r3, #2
 8001260:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001262:	2300      	movs	r3, #0
 8001264:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001266:	2300      	movs	r3, #0
 8001268:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800126a:	230e      	movs	r3, #14
 800126c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 800126e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001272:	4619      	mov	r1, r3
 8001274:	4865      	ldr	r0, [pc, #404]	; (800140c <MX_GPIO_Init+0x2f8>)
 8001276:	f001 fb83 	bl	8002980 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 800127a:	2301      	movs	r3, #1
 800127c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127e:	2302      	movs	r3, #2
 8001280:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001282:	2300      	movs	r3, #0
 8001284:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001286:	2303      	movs	r3, #3
 8001288:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800128a:	230c      	movs	r3, #12
 800128c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 800128e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001292:	4619      	mov	r1, r3
 8001294:	4859      	ldr	r0, [pc, #356]	; (80013fc <MX_GPIO_Init+0x2e8>)
 8001296:	f001 fb73 	bl	8002980 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 800129a:	2316      	movs	r3, #22
 800129c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800129e:	2301      	movs	r3, #1
 80012a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a2:	2300      	movs	r3, #0
 80012a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a6:	2300      	movs	r3, #0
 80012a8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ae:	4619      	mov	r1, r3
 80012b0:	4852      	ldr	r0, [pc, #328]	; (80013fc <MX_GPIO_Init+0x2e8>)
 80012b2:	f001 fb65 	bl	8002980 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin;
 80012b6:	2307      	movs	r3, #7
 80012b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80012ba:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80012be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012c8:	4619      	mov	r1, r3
 80012ca:	484d      	ldr	r0, [pc, #308]	; (8001400 <MX_GPIO_Init+0x2ec>)
 80012cc:	f001 fb58 	bl	8002980 <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin
                           R5_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80012d0:	f641 0358 	movw	r3, #6232	; 0x1858
 80012d4:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d6:	2302      	movs	r3, #2
 80012d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012de:	2300      	movs	r3, #0
 80012e0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80012e2:	230e      	movs	r3, #14
 80012e4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ea:	4619      	mov	r1, r3
 80012ec:	4844      	ldr	r0, [pc, #272]	; (8001400 <MX_GPIO_Init+0x2ec>)
 80012ee:	f001 fb47 	bl	8002980 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 80012f2:	2380      	movs	r3, #128	; 0x80
 80012f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f6:	2301      	movs	r3, #1
 80012f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fe:	2300      	movs	r3, #0
 8001300:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8001302:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001306:	4619      	mov	r1, r3
 8001308:	483d      	ldr	r0, [pc, #244]	; (8001400 <MX_GPIO_Init+0x2ec>)
 800130a:	f001 fb39 	bl	8002980 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 800130e:	2320      	movs	r3, #32
 8001310:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001312:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001316:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 800131c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001320:	4619      	mov	r1, r3
 8001322:	4836      	ldr	r0, [pc, #216]	; (80013fc <MX_GPIO_Init+0x2e8>)
 8001324:	f001 fb2c 	bl	8002980 <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001328:	2303      	movs	r3, #3
 800132a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132c:	2302      	movs	r3, #2
 800132e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001330:	2300      	movs	r3, #0
 8001332:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001334:	2300      	movs	r3, #0
 8001336:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001338:	2309      	movs	r3, #9
 800133a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800133c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001340:	4619      	mov	r1, r3
 8001342:	4833      	ldr	r0, [pc, #204]	; (8001410 <MX_GPIO_Init+0x2fc>)
 8001344:	f001 fb1c 	bl	8002980 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001348:	2304      	movs	r3, #4
 800134a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800134c:	2300      	movs	r3, #0
 800134e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001354:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001358:	4619      	mov	r1, r3
 800135a:	482d      	ldr	r0, [pc, #180]	; (8001410 <MX_GPIO_Init+0x2fc>)
 800135c:	f001 fb10 	bl	8002980 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001360:	f248 1333 	movw	r3, #33075	; 0x8133
 8001364:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001366:	2302      	movs	r3, #2
 8001368:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136a:	2300      	movs	r3, #0
 800136c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800136e:	2303      	movs	r3, #3
 8001370:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001372:	230c      	movs	r3, #12
 8001374:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001376:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800137a:	4619      	mov	r1, r3
 800137c:	4822      	ldr	r0, [pc, #136]	; (8001408 <MX_GPIO_Init+0x2f4>)
 800137e:	f001 faff 	bl	8002980 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001382:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001386:	627b      	str	r3, [r7, #36]	; 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001388:	2302      	movs	r3, #2
 800138a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	2300      	movs	r3, #0
 800138e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001390:	2303      	movs	r3, #3
 8001392:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001394:	230c      	movs	r3, #12
 8001396:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001398:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800139c:	4619      	mov	r1, r3
 800139e:	481d      	ldr	r0, [pc, #116]	; (8001414 <MX_GPIO_Init+0x300>)
 80013a0:	f001 faee 	bl	8002980 <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80013a4:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80013a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013aa:	2302      	movs	r3, #2
 80013ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b2:	2300      	movs	r3, #0
 80013b4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80013b6:	230e      	movs	r3, #14
 80013b8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013be:	4619      	mov	r1, r3
 80013c0:	4813      	ldr	r0, [pc, #76]	; (8001410 <MX_GPIO_Init+0x2fc>)
 80013c2:	f001 fadd 	bl	8002980 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80013c6:	f24c 7303 	movw	r3, #50947	; 0xc703
 80013ca:	627b      	str	r3, [r7, #36]	; 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013cc:	2302      	movs	r3, #2
 80013ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d4:	2303      	movs	r3, #3
 80013d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013d8:	230c      	movs	r3, #12
 80013da:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013e0:	4619      	mov	r1, r3
 80013e2:	4808      	ldr	r0, [pc, #32]	; (8001404 <MX_GPIO_Init+0x2f0>)
 80013e4:	f001 facc 	bl	8002980 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 80013e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ee:	2300      	movs	r3, #0
 80013f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f2:	2300      	movs	r3, #0
 80013f4:	e010      	b.n	8001418 <MX_GPIO_Init+0x304>
 80013f6:	bf00      	nop
 80013f8:	40023800 	.word	0x40023800
 80013fc:	40020800 	.word	0x40020800
 8001400:	40020000 	.word	0x40020000
 8001404:	40020c00 	.word	0x40020c00
 8001408:	40021800 	.word	0x40021800
 800140c:	40021400 	.word	0x40021400
 8001410:	40020400 	.word	0x40020400
 8001414:	40021000 	.word	0x40021000
 8001418:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 800141a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800141e:	4619      	mov	r1, r3
 8001420:	4841      	ldr	r0, [pc, #260]	; (8001528 <MX_GPIO_Init+0x414>)
 8001422:	f001 faad 	bl	8002980 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin PD2 */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin|GPIO_PIN_2;
 8001426:	f243 0304 	movw	r3, #12292	; 0x3004
 800142a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800142c:	2301      	movs	r3, #1
 800142e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001430:	2300      	movs	r3, #0
 8001432:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001434:	2300      	movs	r3, #0
 8001436:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001438:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800143c:	4619      	mov	r1, r3
 800143e:	483a      	ldr	r0, [pc, #232]	; (8001528 <MX_GPIO_Init+0x414>)
 8001440:	f001 fa9e 	bl	8002980 <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001444:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001448:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144a:	2302      	movs	r3, #2
 800144c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144e:	2300      	movs	r3, #0
 8001450:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001452:	2300      	movs	r3, #0
 8001454:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001456:	230e      	movs	r3, #14
 8001458:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800145a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800145e:	4619      	mov	r1, r3
 8001460:	4832      	ldr	r0, [pc, #200]	; (800152c <MX_GPIO_Init+0x418>)
 8001462:	f001 fa8d 	bl	8002980 <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin;
 8001466:	23c0      	movs	r3, #192	; 0xc0
 8001468:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146a:	2302      	movs	r3, #2
 800146c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146e:	2300      	movs	r3, #0
 8001470:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001472:	2300      	movs	r3, #0
 8001474:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001476:	230e      	movs	r3, #14
 8001478:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800147a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800147e:	4619      	mov	r1, r3
 8001480:	482b      	ldr	r0, [pc, #172]	; (8001530 <MX_GPIO_Init+0x41c>)
 8001482:	f001 fa7d 	bl	8002980 <HAL_GPIO_Init>

  /*Configure GPIO pin : G7_Pin */
  GPIO_InitStruct.Pin = G7_Pin;
 8001486:	2308      	movs	r3, #8
 8001488:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148a:	2302      	movs	r3, #2
 800148c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001492:	2300      	movs	r3, #0
 8001494:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001496:	230e      	movs	r3, #14
 8001498:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(G7_GPIO_Port, &GPIO_InitStruct);
 800149a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800149e:	4619      	mov	r1, r3
 80014a0:	4821      	ldr	r0, [pc, #132]	; (8001528 <MX_GPIO_Init+0x414>)
 80014a2:	f001 fa6d 	bl	8002980 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80014a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ac:	2300      	movs	r3, #0
 80014ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b8:	4619      	mov	r1, r3
 80014ba:	481c      	ldr	r0, [pc, #112]	; (800152c <MX_GPIO_Init+0x418>)
 80014bc:	f001 fa60 	bl	8002980 <HAL_GPIO_Init>

  /*Configure GPIO pins : G3_Pin B4_Pin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80014c0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80014c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c6:	2302      	movs	r3, #2
 80014c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ca:	2300      	movs	r3, #0
 80014cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ce:	2300      	movs	r3, #0
 80014d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80014d2:	2309      	movs	r3, #9
 80014d4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014da:	4619      	mov	r1, r3
 80014dc:	4813      	ldr	r0, [pc, #76]	; (800152c <MX_GPIO_Init+0x418>)
 80014de:	f001 fa4f 	bl	8002980 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 80014e2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80014e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e8:	2301      	movs	r3, #1
 80014ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f0:	2300      	movs	r3, #0
 80014f2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014f8:	4619      	mov	r1, r3
 80014fa:	480c      	ldr	r0, [pc, #48]	; (800152c <MX_GPIO_Init+0x418>)
 80014fc:	f001 fa40 	bl	8002980 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001500:	2360      	movs	r3, #96	; 0x60
 8001502:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001504:	2302      	movs	r3, #2
 8001506:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	2300      	movs	r3, #0
 800150a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800150c:	2303      	movs	r3, #3
 800150e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001510:	230c      	movs	r3, #12
 8001512:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001514:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001518:	4619      	mov	r1, r3
 800151a:	4806      	ldr	r0, [pc, #24]	; (8001534 <MX_GPIO_Init+0x420>)
 800151c:	f001 fa30 	bl	8002980 <HAL_GPIO_Init>

}
 8001520:	bf00      	nop
 8001522:	3738      	adds	r7, #56	; 0x38
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	40020c00 	.word	0x40020c00
 800152c:	40021800 	.word	0x40021800
 8001530:	40020800 	.word	0x40020800
 8001534:	40020400 	.word	0x40020400

08001538 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800153c:	b672      	cpsid	i
}
 800153e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001540:	e7fe      	b.n	8001540 <Error_Handler+0x8>
	...

08001544 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 800154c:	4a07      	ldr	r2, [pc, #28]	; (800156c <RetargetInit+0x28>)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8001552:	4b07      	ldr	r3, [pc, #28]	; (8001570 <RetargetInit+0x2c>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	6898      	ldr	r0, [r3, #8]
 8001558:	2300      	movs	r3, #0
 800155a:	2202      	movs	r2, #2
 800155c:	2100      	movs	r1, #0
 800155e:	f00c f90d 	bl	800d77c <setvbuf>
}
 8001562:	bf00      	nop
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20000564 	.word	0x20000564
 8001570:	200000d4 	.word	0x200000d4

08001574 <_isatty>:

int _isatty(int fd) {
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2b00      	cmp	r3, #0
 8001580:	db04      	blt.n	800158c <_isatty+0x18>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2b02      	cmp	r3, #2
 8001586:	dc01      	bgt.n	800158c <_isatty+0x18>
    return 1;
 8001588:	2301      	movs	r3, #1
 800158a:	e005      	b.n	8001598 <_isatty+0x24>

  errno = EBADF;
 800158c:	f00b ff9e 	bl	800d4cc <__errno>
 8001590:	4603      	mov	r3, r0
 8001592:	2209      	movs	r2, #9
 8001594:	601a      	str	r2, [r3, #0]
  return 0;
 8001596:	2300      	movs	r3, #0
}
 8001598:	4618      	mov	r0, r3
 800159a:	3708      	adds	r7, #8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <_write>:

int _write(int fd, char* ptr, int len) {
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b086      	sub	sp, #24
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	60f8      	str	r0, [r7, #12]
 80015a8:	60b9      	str	r1, [r7, #8]
 80015aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d002      	beq.n	80015b8 <_write+0x18>
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d111      	bne.n	80015dc <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80015b8:	4b0e      	ldr	r3, [pc, #56]	; (80015f4 <_write+0x54>)
 80015ba:	6818      	ldr	r0, [r3, #0]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	b29a      	uxth	r2, r3
 80015c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015c4:	68b9      	ldr	r1, [r7, #8]
 80015c6:	f006 fa1c 	bl	8007a02 <HAL_UART_Transmit>
 80015ca:	4603      	mov	r3, r0
 80015cc:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80015ce:	7dfb      	ldrb	r3, [r7, #23]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d101      	bne.n	80015d8 <_write+0x38>
      return len;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	e008      	b.n	80015ea <_write+0x4a>
    else
      return EIO;
 80015d8:	2305      	movs	r3, #5
 80015da:	e006      	b.n	80015ea <_write+0x4a>
  }
  errno = EBADF;
 80015dc:	f00b ff76 	bl	800d4cc <__errno>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2209      	movs	r2, #9
 80015e4:	601a      	str	r2, [r3, #0]
  return -1;
 80015e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3718      	adds	r7, #24
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	20000564 	.word	0x20000564

080015f8 <_close>:

int _close(int fd) {
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2b00      	cmp	r3, #0
 8001604:	db04      	blt.n	8001610 <_close+0x18>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2b02      	cmp	r3, #2
 800160a:	dc01      	bgt.n	8001610 <_close+0x18>
    return 0;
 800160c:	2300      	movs	r3, #0
 800160e:	e006      	b.n	800161e <_close+0x26>

  errno = EBADF;
 8001610:	f00b ff5c 	bl	800d4cc <__errno>
 8001614:	4603      	mov	r3, r0
 8001616:	2209      	movs	r2, #9
 8001618:	601a      	str	r2, [r3, #0]
  return -1;
 800161a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800161e:	4618      	mov	r0, r3
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8001626:	b580      	push	{r7, lr}
 8001628:	b084      	sub	sp, #16
 800162a:	af00      	add	r7, sp, #0
 800162c:	60f8      	str	r0, [r7, #12]
 800162e:	60b9      	str	r1, [r7, #8]
 8001630:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8001632:	f00b ff4b 	bl	800d4cc <__errno>
 8001636:	4603      	mov	r3, r0
 8001638:	2209      	movs	r2, #9
 800163a:	601a      	str	r2, [r3, #0]
  return -1;
 800163c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001640:	4618      	mov	r0, r3
 8001642:	3710      	adds	r7, #16
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}

08001648 <_read>:

int _read(int fd, char* ptr, int len) {
 8001648:	b580      	push	{r7, lr}
 800164a:	b086      	sub	sp, #24
 800164c:	af00      	add	r7, sp, #0
 800164e:	60f8      	str	r0, [r7, #12]
 8001650:	60b9      	str	r1, [r7, #8]
 8001652:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d110      	bne.n	800167c <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 800165a:	4b0e      	ldr	r3, [pc, #56]	; (8001694 <_read+0x4c>)
 800165c:	6818      	ldr	r0, [r3, #0]
 800165e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001662:	2201      	movs	r2, #1
 8001664:	68b9      	ldr	r1, [r7, #8]
 8001666:	f006 fa5e 	bl	8007b26 <HAL_UART_Receive>
 800166a:	4603      	mov	r3, r0
 800166c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800166e:	7dfb      	ldrb	r3, [r7, #23]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d101      	bne.n	8001678 <_read+0x30>
      return 1;
 8001674:	2301      	movs	r3, #1
 8001676:	e008      	b.n	800168a <_read+0x42>
    else
      return EIO;
 8001678:	2305      	movs	r3, #5
 800167a:	e006      	b.n	800168a <_read+0x42>
  }
  errno = EBADF;
 800167c:	f00b ff26 	bl	800d4cc <__errno>
 8001680:	4603      	mov	r3, r0
 8001682:	2209      	movs	r2, #9
 8001684:	601a      	str	r2, [r3, #0]
  return -1;
 8001686:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800168a:	4618      	mov	r0, r3
 800168c:	3718      	adds	r7, #24
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	20000564 	.word	0x20000564

08001698 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	db08      	blt.n	80016ba <_fstat+0x22>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	dc05      	bgt.n	80016ba <_fstat+0x22>
    st->st_mode = S_IFCHR;
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016b4:	605a      	str	r2, [r3, #4]
    return 0;
 80016b6:	2300      	movs	r3, #0
 80016b8:	e005      	b.n	80016c6 <_fstat+0x2e>
  }

  errno = EBADF;
 80016ba:	f00b ff07 	bl	800d4cc <__errno>
 80016be:	4603      	mov	r3, r0
 80016c0:	2209      	movs	r2, #9
 80016c2:	601a      	str	r2, [r3, #0]
  return 0;
 80016c4:	2300      	movs	r3, #0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
	...

080016d0 <HAL_TIM_PWM_PulseFinishedCallback>:
    for(uint8_t i = 0; i < WR_BUF_LEN / 2; ++i) wr_buf[i] = 0;
    wr_buf_p++;
  }
}

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  // DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
  if(wr_buf_p < NUM_PIXELS) {
 80016d8:	4b3c      	ldr	r3, [pc, #240]	; (80017cc <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2b05      	cmp	r3, #5
 80016de:	d852      	bhi.n	8001786 <HAL_TIM_PWM_PulseFinishedCallback+0xb6>
      wr_buf[i + 40] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 1] << i) & 0x80) > 0);
      wr_buf[i + 48] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 2] << i) & 0x80) > 0);
      wr_buf[i + 56] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 3] << i) & 0x80) > 0);
    }
#else // WS2812B
    for(uint_fast8_t i = 0; i < NUM_PIXELS; ++i) {
 80016e0:	2300      	movs	r3, #0
 80016e2:	60fb      	str	r3, [r7, #12]
 80016e4:	e046      	b.n	8001774 <HAL_TIM_PWM_PulseFinishedCallback+0xa4>
      wr_buf[i + 24] = PWM_LO << (((rgb_arr[3 * wr_buf_p    ] << i) & 0x80) > 0);
 80016e6:	4b39      	ldr	r3, [pc, #228]	; (80017cc <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	4613      	mov	r3, r2
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	4413      	add	r3, r2
 80016f0:	4a37      	ldr	r2, [pc, #220]	; (80017d0 <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 80016f2:	5cd3      	ldrb	r3, [r2, r3]
 80016f4:	461a      	mov	r2, r3
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001700:	2b00      	cmp	r3, #0
 8001702:	dd01      	ble.n	8001708 <HAL_TIM_PWM_PulseFinishedCallback+0x38>
 8001704:	2126      	movs	r1, #38	; 0x26
 8001706:	e000      	b.n	800170a <HAL_TIM_PWM_PulseFinishedCallback+0x3a>
 8001708:	2113      	movs	r1, #19
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	3318      	adds	r3, #24
 800170e:	4a31      	ldr	r2, [pc, #196]	; (80017d4 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8001710:	54d1      	strb	r1, [r2, r3]
      wr_buf[i + 32] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 1] << i) & 0x80) > 0);
 8001712:	4b2e      	ldr	r3, [pc, #184]	; (80017cc <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	4613      	mov	r3, r2
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	4413      	add	r3, r2
 800171c:	3301      	adds	r3, #1
 800171e:	4a2c      	ldr	r2, [pc, #176]	; (80017d0 <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 8001720:	5cd3      	ldrb	r3, [r2, r3]
 8001722:	461a      	mov	r2, r3
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	fa02 f303 	lsl.w	r3, r2, r3
 800172a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800172e:	2b00      	cmp	r3, #0
 8001730:	dd01      	ble.n	8001736 <HAL_TIM_PWM_PulseFinishedCallback+0x66>
 8001732:	2126      	movs	r1, #38	; 0x26
 8001734:	e000      	b.n	8001738 <HAL_TIM_PWM_PulseFinishedCallback+0x68>
 8001736:	2113      	movs	r1, #19
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	3320      	adds	r3, #32
 800173c:	4a25      	ldr	r2, [pc, #148]	; (80017d4 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 800173e:	54d1      	strb	r1, [r2, r3]
      wr_buf[i + 40] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 2] << i) & 0x80) > 0);
 8001740:	4b22      	ldr	r3, [pc, #136]	; (80017cc <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	4613      	mov	r3, r2
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	4413      	add	r3, r2
 800174a:	3302      	adds	r3, #2
 800174c:	4a20      	ldr	r2, [pc, #128]	; (80017d0 <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 800174e:	5cd3      	ldrb	r3, [r2, r3]
 8001750:	461a      	mov	r2, r3
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800175c:	2b00      	cmp	r3, #0
 800175e:	dd01      	ble.n	8001764 <HAL_TIM_PWM_PulseFinishedCallback+0x94>
 8001760:	2126      	movs	r1, #38	; 0x26
 8001762:	e000      	b.n	8001766 <HAL_TIM_PWM_PulseFinishedCallback+0x96>
 8001764:	2113      	movs	r1, #19
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	3328      	adds	r3, #40	; 0x28
 800176a:	4a1a      	ldr	r2, [pc, #104]	; (80017d4 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 800176c:	54d1      	strb	r1, [r2, r3]
    for(uint_fast8_t i = 0; i < NUM_PIXELS; ++i) {
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	3301      	adds	r3, #1
 8001772:	60fb      	str	r3, [r7, #12]
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	2b05      	cmp	r3, #5
 8001778:	d9b5      	bls.n	80016e6 <HAL_TIM_PWM_PulseFinishedCallback+0x16>
    }
#endif // End SK6812 WS2812B case differentiation
    wr_buf_p++;
 800177a:	4b14      	ldr	r3, [pc, #80]	; (80017cc <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	3301      	adds	r3, #1
 8001780:	4a12      	ldr	r2, [pc, #72]	; (80017cc <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8001782:	6013      	str	r3, [r2, #0]
  } else {
    // We're done. Lean back and until next time!
    wr_buf_p = 0;
    HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_1);
  }
}
 8001784:	e01d      	b.n	80017c2 <HAL_TIM_PWM_PulseFinishedCallback+0xf2>
  } else if (wr_buf_p < NUM_PIXELS + 2) {
 8001786:	4b11      	ldr	r3, [pc, #68]	; (80017cc <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2b07      	cmp	r3, #7
 800178c:	d812      	bhi.n	80017b4 <HAL_TIM_PWM_PulseFinishedCallback+0xe4>
    for(uint8_t i = WR_BUF_LEN / 2; i < WR_BUF_LEN; ++i) wr_buf[i] = 0;
 800178e:	2318      	movs	r3, #24
 8001790:	72fb      	strb	r3, [r7, #11]
 8001792:	e006      	b.n	80017a2 <HAL_TIM_PWM_PulseFinishedCallback+0xd2>
 8001794:	7afb      	ldrb	r3, [r7, #11]
 8001796:	4a0f      	ldr	r2, [pc, #60]	; (80017d4 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8001798:	2100      	movs	r1, #0
 800179a:	54d1      	strb	r1, [r2, r3]
 800179c:	7afb      	ldrb	r3, [r7, #11]
 800179e:	3301      	adds	r3, #1
 80017a0:	72fb      	strb	r3, [r7, #11]
 80017a2:	7afb      	ldrb	r3, [r7, #11]
 80017a4:	2b2f      	cmp	r3, #47	; 0x2f
 80017a6:	d9f5      	bls.n	8001794 <HAL_TIM_PWM_PulseFinishedCallback+0xc4>
    ++wr_buf_p;
 80017a8:	4b08      	ldr	r3, [pc, #32]	; (80017cc <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	3301      	adds	r3, #1
 80017ae:	4a07      	ldr	r2, [pc, #28]	; (80017cc <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 80017b0:	6013      	str	r3, [r2, #0]
}
 80017b2:	e006      	b.n	80017c2 <HAL_TIM_PWM_PulseFinishedCallback+0xf2>
    wr_buf_p = 0;
 80017b4:	4b05      	ldr	r3, [pc, #20]	; (80017cc <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]
    HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_1);
 80017ba:	2100      	movs	r1, #0
 80017bc:	4806      	ldr	r0, [pc, #24]	; (80017d8 <HAL_TIM_PWM_PulseFinishedCallback+0x108>)
 80017be:	f005 f9a7 	bl	8006b10 <HAL_TIM_PWM_Stop_DMA>
}
 80017c2:	bf00      	nop
 80017c4:	3710      	adds	r7, #16
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	200005ac 	.word	0x200005ac
 80017d0:	20000568 	.word	0x20000568
 80017d4:	2000057c 	.word	0x2000057c
 80017d8:	20000434 	.word	0x20000434

080017dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	607b      	str	r3, [r7, #4]
 80017e6:	4b17      	ldr	r3, [pc, #92]	; (8001844 <HAL_MspInit+0x68>)
 80017e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ea:	4a16      	ldr	r2, [pc, #88]	; (8001844 <HAL_MspInit+0x68>)
 80017ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017f0:	6453      	str	r3, [r2, #68]	; 0x44
 80017f2:	4b14      	ldr	r3, [pc, #80]	; (8001844 <HAL_MspInit+0x68>)
 80017f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017fa:	607b      	str	r3, [r7, #4]
 80017fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	603b      	str	r3, [r7, #0]
 8001802:	4b10      	ldr	r3, [pc, #64]	; (8001844 <HAL_MspInit+0x68>)
 8001804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001806:	4a0f      	ldr	r2, [pc, #60]	; (8001844 <HAL_MspInit+0x68>)
 8001808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800180c:	6413      	str	r3, [r2, #64]	; 0x40
 800180e:	4b0d      	ldr	r3, [pc, #52]	; (8001844 <HAL_MspInit+0x68>)
 8001810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001816:	603b      	str	r3, [r7, #0]
 8001818:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800181a:	2200      	movs	r2, #0
 800181c:	2100      	movs	r1, #0
 800181e:	2005      	movs	r0, #5
 8001820:	f000 fcdf 	bl	80021e2 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001824:	2005      	movs	r0, #5
 8001826:	f000 fcf8 	bl	800221a <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800182a:	2200      	movs	r2, #0
 800182c:	2100      	movs	r1, #0
 800182e:	2005      	movs	r0, #5
 8001830:	f000 fcd7 	bl	80021e2 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001834:	2005      	movs	r0, #5
 8001836:	f000 fcf0 	bl	800221a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800183a:	bf00      	nop
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	40023800 	.word	0x40023800

08001848 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a0b      	ldr	r2, [pc, #44]	; (8001884 <HAL_CRC_MspInit+0x3c>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d10d      	bne.n	8001876 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	60fb      	str	r3, [r7, #12]
 800185e:	4b0a      	ldr	r3, [pc, #40]	; (8001888 <HAL_CRC_MspInit+0x40>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	4a09      	ldr	r2, [pc, #36]	; (8001888 <HAL_CRC_MspInit+0x40>)
 8001864:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001868:	6313      	str	r3, [r2, #48]	; 0x30
 800186a:	4b07      	ldr	r3, [pc, #28]	; (8001888 <HAL_CRC_MspInit+0x40>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001876:	bf00      	nop
 8001878:	3714      	adds	r7, #20
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	40023000 	.word	0x40023000
 8001888:	40023800 	.word	0x40023800

0800188c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b08c      	sub	sp, #48	; 0x30
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001894:	f107 031c 	add.w	r3, r7, #28
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	605a      	str	r2, [r3, #4]
 800189e:	609a      	str	r2, [r3, #8]
 80018a0:	60da      	str	r2, [r3, #12]
 80018a2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a42      	ldr	r2, [pc, #264]	; (80019b4 <HAL_I2C_MspInit+0x128>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d12c      	bne.n	8001908 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	61bb      	str	r3, [r7, #24]
 80018b2:	4b41      	ldr	r3, [pc, #260]	; (80019b8 <HAL_I2C_MspInit+0x12c>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	4a40      	ldr	r2, [pc, #256]	; (80019b8 <HAL_I2C_MspInit+0x12c>)
 80018b8:	f043 0320 	orr.w	r3, r3, #32
 80018bc:	6313      	str	r3, [r2, #48]	; 0x30
 80018be:	4b3e      	ldr	r3, [pc, #248]	; (80019b8 <HAL_I2C_MspInit+0x12c>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	f003 0320 	and.w	r3, r3, #32
 80018c6:	61bb      	str	r3, [r7, #24]
 80018c8:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80018ca:	2303      	movs	r3, #3
 80018cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018ce:	2312      	movs	r3, #18
 80018d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d2:	2300      	movs	r3, #0
 80018d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d6:	2303      	movs	r3, #3
 80018d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80018da:	2304      	movs	r3, #4
 80018dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018de:	f107 031c 	add.w	r3, r7, #28
 80018e2:	4619      	mov	r1, r3
 80018e4:	4835      	ldr	r0, [pc, #212]	; (80019bc <HAL_I2C_MspInit+0x130>)
 80018e6:	f001 f84b 	bl	8002980 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	617b      	str	r3, [r7, #20]
 80018ee:	4b32      	ldr	r3, [pc, #200]	; (80019b8 <HAL_I2C_MspInit+0x12c>)
 80018f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f2:	4a31      	ldr	r2, [pc, #196]	; (80019b8 <HAL_I2C_MspInit+0x12c>)
 80018f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80018f8:	6413      	str	r3, [r2, #64]	; 0x40
 80018fa:	4b2f      	ldr	r3, [pc, #188]	; (80019b8 <HAL_I2C_MspInit+0x12c>)
 80018fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001902:	617b      	str	r3, [r7, #20]
 8001904:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001906:	e050      	b.n	80019aa <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C3)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a2c      	ldr	r2, [pc, #176]	; (80019c0 <HAL_I2C_MspInit+0x134>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d14b      	bne.n	80019aa <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001912:	2300      	movs	r3, #0
 8001914:	613b      	str	r3, [r7, #16]
 8001916:	4b28      	ldr	r3, [pc, #160]	; (80019b8 <HAL_I2C_MspInit+0x12c>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	4a27      	ldr	r2, [pc, #156]	; (80019b8 <HAL_I2C_MspInit+0x12c>)
 800191c:	f043 0304 	orr.w	r3, r3, #4
 8001920:	6313      	str	r3, [r2, #48]	; 0x30
 8001922:	4b25      	ldr	r3, [pc, #148]	; (80019b8 <HAL_I2C_MspInit+0x12c>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	f003 0304 	and.w	r3, r3, #4
 800192a:	613b      	str	r3, [r7, #16]
 800192c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800192e:	2300      	movs	r3, #0
 8001930:	60fb      	str	r3, [r7, #12]
 8001932:	4b21      	ldr	r3, [pc, #132]	; (80019b8 <HAL_I2C_MspInit+0x12c>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001936:	4a20      	ldr	r2, [pc, #128]	; (80019b8 <HAL_I2C_MspInit+0x12c>)
 8001938:	f043 0301 	orr.w	r3, r3, #1
 800193c:	6313      	str	r3, [r2, #48]	; 0x30
 800193e:	4b1e      	ldr	r3, [pc, #120]	; (80019b8 <HAL_I2C_MspInit+0x12c>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 800194a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800194e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001950:	2312      	movs	r3, #18
 8001952:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001954:	2301      	movs	r3, #1
 8001956:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001958:	2300      	movs	r3, #0
 800195a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800195c:	2304      	movs	r3, #4
 800195e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001960:	f107 031c 	add.w	r3, r7, #28
 8001964:	4619      	mov	r1, r3
 8001966:	4817      	ldr	r0, [pc, #92]	; (80019c4 <HAL_I2C_MspInit+0x138>)
 8001968:	f001 f80a 	bl	8002980 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 800196c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001970:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001972:	2312      	movs	r3, #18
 8001974:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001976:	2301      	movs	r3, #1
 8001978:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197a:	2300      	movs	r3, #0
 800197c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800197e:	2304      	movs	r3, #4
 8001980:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001982:	f107 031c 	add.w	r3, r7, #28
 8001986:	4619      	mov	r1, r3
 8001988:	480f      	ldr	r0, [pc, #60]	; (80019c8 <HAL_I2C_MspInit+0x13c>)
 800198a:	f000 fff9 	bl	8002980 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800198e:	2300      	movs	r3, #0
 8001990:	60bb      	str	r3, [r7, #8]
 8001992:	4b09      	ldr	r3, [pc, #36]	; (80019b8 <HAL_I2C_MspInit+0x12c>)
 8001994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001996:	4a08      	ldr	r2, [pc, #32]	; (80019b8 <HAL_I2C_MspInit+0x12c>)
 8001998:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800199c:	6413      	str	r3, [r2, #64]	; 0x40
 800199e:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <HAL_I2C_MspInit+0x12c>)
 80019a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80019a6:	60bb      	str	r3, [r7, #8]
 80019a8:	68bb      	ldr	r3, [r7, #8]
}
 80019aa:	bf00      	nop
 80019ac:	3730      	adds	r7, #48	; 0x30
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	40005800 	.word	0x40005800
 80019b8:	40023800 	.word	0x40023800
 80019bc:	40021400 	.word	0x40021400
 80019c0:	40005c00 	.word	0x40005c00
 80019c4:	40020800 	.word	0x40020800
 80019c8:	40020000 	.word	0x40020000

080019cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b08c      	sub	sp, #48	; 0x30
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d4:	f107 031c 	add.w	r3, r7, #28
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	605a      	str	r2, [r3, #4]
 80019de:	609a      	str	r2, [r3, #8]
 80019e0:	60da      	str	r2, [r3, #12]
 80019e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a42      	ldr	r2, [pc, #264]	; (8001af4 <HAL_SPI_MspInit+0x128>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d14c      	bne.n	8001a88 <HAL_SPI_MspInit+0xbc>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	61bb      	str	r3, [r7, #24]
 80019f2:	4b41      	ldr	r3, [pc, #260]	; (8001af8 <HAL_SPI_MspInit+0x12c>)
 80019f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f6:	4a40      	ldr	r2, [pc, #256]	; (8001af8 <HAL_SPI_MspInit+0x12c>)
 80019f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019fc:	6413      	str	r3, [r2, #64]	; 0x40
 80019fe:	4b3e      	ldr	r3, [pc, #248]	; (8001af8 <HAL_SPI_MspInit+0x12c>)
 8001a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a06:	61bb      	str	r3, [r7, #24]
 8001a08:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	617b      	str	r3, [r7, #20]
 8001a0e:	4b3a      	ldr	r3, [pc, #232]	; (8001af8 <HAL_SPI_MspInit+0x12c>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a12:	4a39      	ldr	r2, [pc, #228]	; (8001af8 <HAL_SPI_MspInit+0x12c>)
 8001a14:	f043 0301 	orr.w	r3, r3, #1
 8001a18:	6313      	str	r3, [r2, #48]	; 0x30
 8001a1a:	4b37      	ldr	r3, [pc, #220]	; (8001af8 <HAL_SPI_MspInit+0x12c>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	617b      	str	r3, [r7, #20]
 8001a24:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	613b      	str	r3, [r7, #16]
 8001a2a:	4b33      	ldr	r3, [pc, #204]	; (8001af8 <HAL_SPI_MspInit+0x12c>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2e:	4a32      	ldr	r2, [pc, #200]	; (8001af8 <HAL_SPI_MspInit+0x12c>)
 8001a30:	f043 0304 	orr.w	r3, r3, #4
 8001a34:	6313      	str	r3, [r2, #48]	; 0x30
 8001a36:	4b30      	ldr	r3, [pc, #192]	; (8001af8 <HAL_SPI_MspInit+0x12c>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3a:	f003 0304 	and.w	r3, r3, #4
 8001a3e:	613b      	str	r3, [r7, #16]
 8001a40:	693b      	ldr	r3, [r7, #16]
    PA15     ------> SPI3_NSS
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001a42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a48:	2302      	movs	r3, #2
 8001a4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a50:	2303      	movs	r3, #3
 8001a52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a54:	2306      	movs	r3, #6
 8001a56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a58:	f107 031c 	add.w	r3, r7, #28
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4827      	ldr	r0, [pc, #156]	; (8001afc <HAL_SPI_MspInit+0x130>)
 8001a60:	f000 ff8e 	bl	8002980 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001a64:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001a68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a72:	2300      	movs	r3, #0
 8001a74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a76:	2306      	movs	r3, #6
 8001a78:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a7a:	f107 031c 	add.w	r3, r7, #28
 8001a7e:	4619      	mov	r1, r3
 8001a80:	481f      	ldr	r0, [pc, #124]	; (8001b00 <HAL_SPI_MspInit+0x134>)
 8001a82:	f000 ff7d 	bl	8002980 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001a86:	e031      	b.n	8001aec <HAL_SPI_MspInit+0x120>
  else if(hspi->Instance==SPI5)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a1d      	ldr	r2, [pc, #116]	; (8001b04 <HAL_SPI_MspInit+0x138>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d12c      	bne.n	8001aec <HAL_SPI_MspInit+0x120>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	60fb      	str	r3, [r7, #12]
 8001a96:	4b18      	ldr	r3, [pc, #96]	; (8001af8 <HAL_SPI_MspInit+0x12c>)
 8001a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9a:	4a17      	ldr	r2, [pc, #92]	; (8001af8 <HAL_SPI_MspInit+0x12c>)
 8001a9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001aa0:	6453      	str	r3, [r2, #68]	; 0x44
 8001aa2:	4b15      	ldr	r3, [pc, #84]	; (8001af8 <HAL_SPI_MspInit+0x12c>)
 8001aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aaa:	60fb      	str	r3, [r7, #12]
 8001aac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	60bb      	str	r3, [r7, #8]
 8001ab2:	4b11      	ldr	r3, [pc, #68]	; (8001af8 <HAL_SPI_MspInit+0x12c>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab6:	4a10      	ldr	r2, [pc, #64]	; (8001af8 <HAL_SPI_MspInit+0x12c>)
 8001ab8:	f043 0320 	orr.w	r3, r3, #32
 8001abc:	6313      	str	r3, [r2, #48]	; 0x30
 8001abe:	4b0e      	ldr	r3, [pc, #56]	; (8001af8 <HAL_SPI_MspInit+0x12c>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac2:	f003 0320 	and.w	r3, r3, #32
 8001ac6:	60bb      	str	r3, [r7, #8]
 8001ac8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001aca:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001ace:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001adc:	2305      	movs	r3, #5
 8001ade:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ae0:	f107 031c 	add.w	r3, r7, #28
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4808      	ldr	r0, [pc, #32]	; (8001b08 <HAL_SPI_MspInit+0x13c>)
 8001ae8:	f000 ff4a 	bl	8002980 <HAL_GPIO_Init>
}
 8001aec:	bf00      	nop
 8001aee:	3730      	adds	r7, #48	; 0x30
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	40003c00 	.word	0x40003c00
 8001af8:	40023800 	.word	0x40023800
 8001afc:	40020000 	.word	0x40020000
 8001b00:	40020800 	.word	0x40020800
 8001b04:	40015000 	.word	0x40015000
 8001b08:	40021400 	.word	0x40021400

08001b0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a30      	ldr	r2, [pc, #192]	; (8001bdc <HAL_TIM_Base_MspInit+0xd0>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d10e      	bne.n	8001b3c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b1e:	2300      	movs	r3, #0
 8001b20:	60fb      	str	r3, [r7, #12]
 8001b22:	4b2f      	ldr	r3, [pc, #188]	; (8001be0 <HAL_TIM_Base_MspInit+0xd4>)
 8001b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b26:	4a2e      	ldr	r2, [pc, #184]	; (8001be0 <HAL_TIM_Base_MspInit+0xd4>)
 8001b28:	f043 0301 	orr.w	r3, r3, #1
 8001b2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b2e:	4b2c      	ldr	r3, [pc, #176]	; (8001be0 <HAL_TIM_Base_MspInit+0xd4>)
 8001b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b32:	f003 0301 	and.w	r3, r3, #1
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001b3a:	e04a      	b.n	8001bd2 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM2)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b44:	d145      	bne.n	8001bd2 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	60bb      	str	r3, [r7, #8]
 8001b4a:	4b25      	ldr	r3, [pc, #148]	; (8001be0 <HAL_TIM_Base_MspInit+0xd4>)
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4e:	4a24      	ldr	r2, [pc, #144]	; (8001be0 <HAL_TIM_Base_MspInit+0xd4>)
 8001b50:	f043 0301 	orr.w	r3, r3, #1
 8001b54:	6413      	str	r3, [r2, #64]	; 0x40
 8001b56:	4b22      	ldr	r3, [pc, #136]	; (8001be0 <HAL_TIM_Base_MspInit+0xd4>)
 8001b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	60bb      	str	r3, [r7, #8]
 8001b60:	68bb      	ldr	r3, [r7, #8]
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 8001b62:	4b20      	ldr	r3, [pc, #128]	; (8001be4 <HAL_TIM_Base_MspInit+0xd8>)
 8001b64:	4a20      	ldr	r2, [pc, #128]	; (8001be8 <HAL_TIM_Base_MspInit+0xdc>)
 8001b66:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 8001b68:	4b1e      	ldr	r3, [pc, #120]	; (8001be4 <HAL_TIM_Base_MspInit+0xd8>)
 8001b6a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001b6e:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b70:	4b1c      	ldr	r3, [pc, #112]	; (8001be4 <HAL_TIM_Base_MspInit+0xd8>)
 8001b72:	2240      	movs	r2, #64	; 0x40
 8001b74:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b76:	4b1b      	ldr	r3, [pc, #108]	; (8001be4 <HAL_TIM_Base_MspInit+0xd8>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001b7c:	4b19      	ldr	r3, [pc, #100]	; (8001be4 <HAL_TIM_Base_MspInit+0xd8>)
 8001b7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b82:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b84:	4b17      	ldr	r3, [pc, #92]	; (8001be4 <HAL_TIM_Base_MspInit+0xd8>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b8a:	4b16      	ldr	r3, [pc, #88]	; (8001be4 <HAL_TIM_Base_MspInit+0xd8>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8001b90:	4b14      	ldr	r3, [pc, #80]	; (8001be4 <HAL_TIM_Base_MspInit+0xd8>)
 8001b92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b96:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8001b98:	4b12      	ldr	r3, [pc, #72]	; (8001be4 <HAL_TIM_Base_MspInit+0xd8>)
 8001b9a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b9e:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ba0:	4b10      	ldr	r3, [pc, #64]	; (8001be4 <HAL_TIM_Base_MspInit+0xd8>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8001ba6:	480f      	ldr	r0, [pc, #60]	; (8001be4 <HAL_TIM_Base_MspInit+0xd8>)
 8001ba8:	f000 fb6e 	bl	8002288 <HAL_DMA_Init>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <HAL_TIM_Base_MspInit+0xaa>
      Error_Handler();
 8001bb2:	f7ff fcc1 	bl	8001538 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a0a      	ldr	r2, [pc, #40]	; (8001be4 <HAL_TIM_Base_MspInit+0xd8>)
 8001bba:	625a      	str	r2, [r3, #36]	; 0x24
 8001bbc:	4a09      	ldr	r2, [pc, #36]	; (8001be4 <HAL_TIM_Base_MspInit+0xd8>)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	201c      	movs	r0, #28
 8001bc8:	f000 fb0b 	bl	80021e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001bcc:	201c      	movs	r0, #28
 8001bce:	f000 fb24 	bl	800221a <HAL_NVIC_EnableIRQ>
}
 8001bd2:	bf00      	nop
 8001bd4:	3710      	adds	r7, #16
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	40010000 	.word	0x40010000
 8001be0:	40023800 	.word	0x40023800
 8001be4:	2000047c 	.word	0x2000047c
 8001be8:	40026088 	.word	0x40026088

08001bec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b088      	sub	sp, #32
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf4:	f107 030c 	add.w	r3, r7, #12
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	605a      	str	r2, [r3, #4]
 8001bfe:	609a      	str	r2, [r3, #8]
 8001c00:	60da      	str	r2, [r3, #12]
 8001c02:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c0c:	d11d      	bne.n	8001c4a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c0e:	2300      	movs	r3, #0
 8001c10:	60bb      	str	r3, [r7, #8]
 8001c12:	4b10      	ldr	r3, [pc, #64]	; (8001c54 <HAL_TIM_MspPostInit+0x68>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c16:	4a0f      	ldr	r2, [pc, #60]	; (8001c54 <HAL_TIM_MspPostInit+0x68>)
 8001c18:	f043 0301 	orr.w	r3, r3, #1
 8001c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1e:	4b0d      	ldr	r3, [pc, #52]	; (8001c54 <HAL_TIM_MspPostInit+0x68>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	60bb      	str	r3, [r7, #8]
 8001c28:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001c2a:	2320      	movs	r3, #32
 8001c2c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2e:	2302      	movs	r3, #2
 8001c30:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c32:	2300      	movs	r3, #0
 8001c34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c36:	2300      	movs	r3, #0
 8001c38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c3e:	f107 030c 	add.w	r3, r7, #12
 8001c42:	4619      	mov	r1, r3
 8001c44:	4804      	ldr	r0, [pc, #16]	; (8001c58 <HAL_TIM_MspPostInit+0x6c>)
 8001c46:	f000 fe9b 	bl	8002980 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001c4a:	bf00      	nop
 8001c4c:	3720      	adds	r7, #32
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40023800 	.word	0x40023800
 8001c58:	40020000 	.word	0x40020000

08001c5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b08c      	sub	sp, #48	; 0x30
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c64:	f107 031c 	add.w	r3, r7, #28
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	605a      	str	r2, [r3, #4]
 8001c6e:	609a      	str	r2, [r3, #8]
 8001c70:	60da      	str	r2, [r3, #12]
 8001c72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a36      	ldr	r2, [pc, #216]	; (8001d54 <HAL_UART_MspInit+0xf8>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d135      	bne.n	8001cea <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c7e:	2300      	movs	r3, #0
 8001c80:	61bb      	str	r3, [r7, #24]
 8001c82:	4b35      	ldr	r3, [pc, #212]	; (8001d58 <HAL_UART_MspInit+0xfc>)
 8001c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c86:	4a34      	ldr	r2, [pc, #208]	; (8001d58 <HAL_UART_MspInit+0xfc>)
 8001c88:	f043 0310 	orr.w	r3, r3, #16
 8001c8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c8e:	4b32      	ldr	r3, [pc, #200]	; (8001d58 <HAL_UART_MspInit+0xfc>)
 8001c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c92:	f003 0310 	and.w	r3, r3, #16
 8001c96:	61bb      	str	r3, [r7, #24]
 8001c98:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	617b      	str	r3, [r7, #20]
 8001c9e:	4b2e      	ldr	r3, [pc, #184]	; (8001d58 <HAL_UART_MspInit+0xfc>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca2:	4a2d      	ldr	r2, [pc, #180]	; (8001d58 <HAL_UART_MspInit+0xfc>)
 8001ca4:	f043 0301 	orr.w	r3, r3, #1
 8001ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8001caa:	4b2b      	ldr	r3, [pc, #172]	; (8001d58 <HAL_UART_MspInit+0xfc>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	617b      	str	r3, [r7, #20]
 8001cb4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001cb6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001cba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001cc8:	2307      	movs	r3, #7
 8001cca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ccc:	f107 031c 	add.w	r3, r7, #28
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4822      	ldr	r0, [pc, #136]	; (8001d5c <HAL_UART_MspInit+0x100>)
 8001cd4:	f000 fe54 	bl	8002980 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001cd8:	2200      	movs	r2, #0
 8001cda:	2100      	movs	r1, #0
 8001cdc:	2025      	movs	r0, #37	; 0x25
 8001cde:	f000 fa80 	bl	80021e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001ce2:	2025      	movs	r0, #37	; 0x25
 8001ce4:	f000 fa99 	bl	800221a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ce8:	e030      	b.n	8001d4c <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a1c      	ldr	r2, [pc, #112]	; (8001d60 <HAL_UART_MspInit+0x104>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d12b      	bne.n	8001d4c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	613b      	str	r3, [r7, #16]
 8001cf8:	4b17      	ldr	r3, [pc, #92]	; (8001d58 <HAL_UART_MspInit+0xfc>)
 8001cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfc:	4a16      	ldr	r2, [pc, #88]	; (8001d58 <HAL_UART_MspInit+0xfc>)
 8001cfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d02:	6413      	str	r3, [r2, #64]	; 0x40
 8001d04:	4b14      	ldr	r3, [pc, #80]	; (8001d58 <HAL_UART_MspInit+0xfc>)
 8001d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d0c:	613b      	str	r3, [r7, #16]
 8001d0e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d10:	2300      	movs	r3, #0
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	4b10      	ldr	r3, [pc, #64]	; (8001d58 <HAL_UART_MspInit+0xfc>)
 8001d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d18:	4a0f      	ldr	r2, [pc, #60]	; (8001d58 <HAL_UART_MspInit+0xfc>)
 8001d1a:	f043 0308 	orr.w	r3, r3, #8
 8001d1e:	6313      	str	r3, [r2, #48]	; 0x30
 8001d20:	4b0d      	ldr	r3, [pc, #52]	; (8001d58 <HAL_UART_MspInit+0xfc>)
 8001d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d24:	f003 0308 	and.w	r3, r3, #8
 8001d28:	60fb      	str	r3, [r7, #12]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001d2c:	2360      	movs	r3, #96	; 0x60
 8001d2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d30:	2302      	movs	r3, #2
 8001d32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d34:	2300      	movs	r3, #0
 8001d36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d3c:	2307      	movs	r3, #7
 8001d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d40:	f107 031c 	add.w	r3, r7, #28
 8001d44:	4619      	mov	r1, r3
 8001d46:	4807      	ldr	r0, [pc, #28]	; (8001d64 <HAL_UART_MspInit+0x108>)
 8001d48:	f000 fe1a 	bl	8002980 <HAL_GPIO_Init>
}
 8001d4c:	bf00      	nop
 8001d4e:	3730      	adds	r7, #48	; 0x30
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40011000 	.word	0x40011000
 8001d58:	40023800 	.word	0x40023800
 8001d5c:	40020000 	.word	0x40020000
 8001d60:	40004400 	.word	0x40004400
 8001d64:	40020c00 	.word	0x40020c00

08001d68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d6c:	e7fe      	b.n	8001d6c <NMI_Handler+0x4>

08001d6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d72:	e7fe      	b.n	8001d72 <HardFault_Handler+0x4>

08001d74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d78:	e7fe      	b.n	8001d78 <MemManage_Handler+0x4>

08001d7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d7e:	e7fe      	b.n	8001d7e <BusFault_Handler+0x4>

08001d80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d84:	e7fe      	b.n	8001d84 <UsageFault_Handler+0x4>

08001d86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d86:	b480      	push	{r7}
 8001d88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d8a:	bf00      	nop
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d98:	bf00      	nop
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr

08001da2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001da2:	b480      	push	{r7}
 8001da4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001da6:	bf00      	nop
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001db4:	f000 f8f6 	bl	8001fa4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001db8:	bf00      	nop
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001dc0:	bf00      	nop
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
	...

08001dcc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8001dd0:	4802      	ldr	r0, [pc, #8]	; (8001ddc <DMA1_Stream5_IRQHandler+0x10>)
 8001dd2:	f000 fb99 	bl	8002508 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001dd6:	bf00      	nop
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	2000047c 	.word	0x2000047c

08001de0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001de4:	4802      	ldr	r0, [pc, #8]	; (8001df0 <TIM2_IRQHandler+0x10>)
 8001de6:	f004 ff65 	bl	8006cb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001dea:	bf00      	nop
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	20000434 	.word	0x20000434

08001df4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001df8:	4802      	ldr	r0, [pc, #8]	; (8001e04 <USART1_IRQHandler+0x10>)
 8001dfa:	f005 ff67 	bl	8007ccc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001dfe:	bf00      	nop
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	200004dc 	.word	0x200004dc

08001e08 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8001e0c:	4802      	ldr	r0, [pc, #8]	; (8001e18 <OTG_HS_IRQHandler+0x10>)
 8001e0e:	f001 f9e7 	bl	80031e0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001e12:	bf00      	nop
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	200009a8 	.word	0x200009a8

08001e1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e24:	4a14      	ldr	r2, [pc, #80]	; (8001e78 <_sbrk+0x5c>)
 8001e26:	4b15      	ldr	r3, [pc, #84]	; (8001e7c <_sbrk+0x60>)
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e30:	4b13      	ldr	r3, [pc, #76]	; (8001e80 <_sbrk+0x64>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d102      	bne.n	8001e3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e38:	4b11      	ldr	r3, [pc, #68]	; (8001e80 <_sbrk+0x64>)
 8001e3a:	4a12      	ldr	r2, [pc, #72]	; (8001e84 <_sbrk+0x68>)
 8001e3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e3e:	4b10      	ldr	r3, [pc, #64]	; (8001e80 <_sbrk+0x64>)
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4413      	add	r3, r2
 8001e46:	693a      	ldr	r2, [r7, #16]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d207      	bcs.n	8001e5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e4c:	f00b fb3e 	bl	800d4cc <__errno>
 8001e50:	4603      	mov	r3, r0
 8001e52:	220c      	movs	r2, #12
 8001e54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e5a:	e009      	b.n	8001e70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e5c:	4b08      	ldr	r3, [pc, #32]	; (8001e80 <_sbrk+0x64>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e62:	4b07      	ldr	r3, [pc, #28]	; (8001e80 <_sbrk+0x64>)
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4413      	add	r3, r2
 8001e6a:	4a05      	ldr	r2, [pc, #20]	; (8001e80 <_sbrk+0x64>)
 8001e6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3718      	adds	r7, #24
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	20030000 	.word	0x20030000
 8001e7c:	00000400 	.word	0x00000400
 8001e80:	200005b0 	.word	0x200005b0
 8001e84:	20000cc0 	.word	0x20000cc0

08001e88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e8c:	4b06      	ldr	r3, [pc, #24]	; (8001ea8 <SystemInit+0x20>)
 8001e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e92:	4a05      	ldr	r2, [pc, #20]	; (8001ea8 <SystemInit+0x20>)
 8001e94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e9c:	bf00      	nop
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	e000ed00 	.word	0xe000ed00

08001eac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001eac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ee4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001eb0:	480d      	ldr	r0, [pc, #52]	; (8001ee8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001eb2:	490e      	ldr	r1, [pc, #56]	; (8001eec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001eb4:	4a0e      	ldr	r2, [pc, #56]	; (8001ef0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001eb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001eb8:	e002      	b.n	8001ec0 <LoopCopyDataInit>

08001eba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ebc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ebe:	3304      	adds	r3, #4

08001ec0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ec0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ec2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ec4:	d3f9      	bcc.n	8001eba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ec6:	4a0b      	ldr	r2, [pc, #44]	; (8001ef4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ec8:	4c0b      	ldr	r4, [pc, #44]	; (8001ef8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001eca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ecc:	e001      	b.n	8001ed2 <LoopFillZerobss>

08001ece <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ece:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ed0:	3204      	adds	r2, #4

08001ed2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ed2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ed4:	d3fb      	bcc.n	8001ece <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ed6:	f7ff ffd7 	bl	8001e88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001eda:	f00b fafd 	bl	800d4d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ede:	f7fe fe33 	bl	8000b48 <main>
  bx  lr    
 8001ee2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001ee4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001ee8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001eec:	20000138 	.word	0x20000138
  ldr r2, =_sidata
 8001ef0:	0800e838 	.word	0x0800e838
  ldr r2, =_sbss
 8001ef4:	20000138 	.word	0x20000138
  ldr r4, =_ebss
 8001ef8:	20000cbc 	.word	0x20000cbc

08001efc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001efc:	e7fe      	b.n	8001efc <ADC_IRQHandler>
	...

08001f00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f04:	4b0e      	ldr	r3, [pc, #56]	; (8001f40 <HAL_Init+0x40>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a0d      	ldr	r2, [pc, #52]	; (8001f40 <HAL_Init+0x40>)
 8001f0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f10:	4b0b      	ldr	r3, [pc, #44]	; (8001f40 <HAL_Init+0x40>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a0a      	ldr	r2, [pc, #40]	; (8001f40 <HAL_Init+0x40>)
 8001f16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f1c:	4b08      	ldr	r3, [pc, #32]	; (8001f40 <HAL_Init+0x40>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a07      	ldr	r2, [pc, #28]	; (8001f40 <HAL_Init+0x40>)
 8001f22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f28:	2003      	movs	r0, #3
 8001f2a:	f000 f94f 	bl	80021cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f2e:	200f      	movs	r0, #15
 8001f30:	f000 f808 	bl	8001f44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f34:	f7ff fc52 	bl	80017dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	40023c00 	.word	0x40023c00

08001f44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f4c:	4b12      	ldr	r3, [pc, #72]	; (8001f98 <HAL_InitTick+0x54>)
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	4b12      	ldr	r3, [pc, #72]	; (8001f9c <HAL_InitTick+0x58>)
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	4619      	mov	r1, r3
 8001f56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f62:	4618      	mov	r0, r3
 8001f64:	f000 f967 	bl	8002236 <HAL_SYSTICK_Config>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e00e      	b.n	8001f90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2b0f      	cmp	r3, #15
 8001f76:	d80a      	bhi.n	8001f8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f78:	2200      	movs	r2, #0
 8001f7a:	6879      	ldr	r1, [r7, #4]
 8001f7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f80:	f000 f92f 	bl	80021e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f84:	4a06      	ldr	r2, [pc, #24]	; (8001fa0 <HAL_InitTick+0x5c>)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	e000      	b.n	8001f90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3708      	adds	r7, #8
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	200000a8 	.word	0x200000a8
 8001f9c:	200000b0 	.word	0x200000b0
 8001fa0:	200000ac 	.word	0x200000ac

08001fa4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fa8:	4b06      	ldr	r3, [pc, #24]	; (8001fc4 <HAL_IncTick+0x20>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	461a      	mov	r2, r3
 8001fae:	4b06      	ldr	r3, [pc, #24]	; (8001fc8 <HAL_IncTick+0x24>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	4a04      	ldr	r2, [pc, #16]	; (8001fc8 <HAL_IncTick+0x24>)
 8001fb6:	6013      	str	r3, [r2, #0]
}
 8001fb8:	bf00      	nop
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	200000b0 	.word	0x200000b0
 8001fc8:	200005b4 	.word	0x200005b4

08001fcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  return uwTick;
 8001fd0:	4b03      	ldr	r3, [pc, #12]	; (8001fe0 <HAL_GetTick+0x14>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	200005b4 	.word	0x200005b4

08001fe4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fec:	f7ff ffee 	bl	8001fcc <HAL_GetTick>
 8001ff0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ffc:	d005      	beq.n	800200a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ffe:	4b0a      	ldr	r3, [pc, #40]	; (8002028 <HAL_Delay+0x44>)
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	461a      	mov	r2, r3
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	4413      	add	r3, r2
 8002008:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800200a:	bf00      	nop
 800200c:	f7ff ffde 	bl	8001fcc <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	68fa      	ldr	r2, [r7, #12]
 8002018:	429a      	cmp	r2, r3
 800201a:	d8f7      	bhi.n	800200c <HAL_Delay+0x28>
  {
  }
}
 800201c:	bf00      	nop
 800201e:	bf00      	nop
 8002020:	3710      	adds	r7, #16
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	200000b0 	.word	0x200000b0

0800202c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800202c:	b480      	push	{r7}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f003 0307 	and.w	r3, r3, #7
 800203a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800203c:	4b0c      	ldr	r3, [pc, #48]	; (8002070 <__NVIC_SetPriorityGrouping+0x44>)
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002042:	68ba      	ldr	r2, [r7, #8]
 8002044:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002048:	4013      	ands	r3, r2
 800204a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002054:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002058:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800205c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800205e:	4a04      	ldr	r2, [pc, #16]	; (8002070 <__NVIC_SetPriorityGrouping+0x44>)
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	60d3      	str	r3, [r2, #12]
}
 8002064:	bf00      	nop
 8002066:	3714      	adds	r7, #20
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr
 8002070:	e000ed00 	.word	0xe000ed00

08002074 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002078:	4b04      	ldr	r3, [pc, #16]	; (800208c <__NVIC_GetPriorityGrouping+0x18>)
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	0a1b      	lsrs	r3, r3, #8
 800207e:	f003 0307 	and.w	r3, r3, #7
}
 8002082:	4618      	mov	r0, r3
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr
 800208c:	e000ed00 	.word	0xe000ed00

08002090 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	4603      	mov	r3, r0
 8002098:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800209a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	db0b      	blt.n	80020ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020a2:	79fb      	ldrb	r3, [r7, #7]
 80020a4:	f003 021f 	and.w	r2, r3, #31
 80020a8:	4907      	ldr	r1, [pc, #28]	; (80020c8 <__NVIC_EnableIRQ+0x38>)
 80020aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ae:	095b      	lsrs	r3, r3, #5
 80020b0:	2001      	movs	r0, #1
 80020b2:	fa00 f202 	lsl.w	r2, r0, r2
 80020b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020ba:	bf00      	nop
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	e000e100 	.word	0xe000e100

080020cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	4603      	mov	r3, r0
 80020d4:	6039      	str	r1, [r7, #0]
 80020d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	db0a      	blt.n	80020f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	b2da      	uxtb	r2, r3
 80020e4:	490c      	ldr	r1, [pc, #48]	; (8002118 <__NVIC_SetPriority+0x4c>)
 80020e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ea:	0112      	lsls	r2, r2, #4
 80020ec:	b2d2      	uxtb	r2, r2
 80020ee:	440b      	add	r3, r1
 80020f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020f4:	e00a      	b.n	800210c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	b2da      	uxtb	r2, r3
 80020fa:	4908      	ldr	r1, [pc, #32]	; (800211c <__NVIC_SetPriority+0x50>)
 80020fc:	79fb      	ldrb	r3, [r7, #7]
 80020fe:	f003 030f 	and.w	r3, r3, #15
 8002102:	3b04      	subs	r3, #4
 8002104:	0112      	lsls	r2, r2, #4
 8002106:	b2d2      	uxtb	r2, r2
 8002108:	440b      	add	r3, r1
 800210a:	761a      	strb	r2, [r3, #24]
}
 800210c:	bf00      	nop
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr
 8002118:	e000e100 	.word	0xe000e100
 800211c:	e000ed00 	.word	0xe000ed00

08002120 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002120:	b480      	push	{r7}
 8002122:	b089      	sub	sp, #36	; 0x24
 8002124:	af00      	add	r7, sp, #0
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f003 0307 	and.w	r3, r3, #7
 8002132:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	f1c3 0307 	rsb	r3, r3, #7
 800213a:	2b04      	cmp	r3, #4
 800213c:	bf28      	it	cs
 800213e:	2304      	movcs	r3, #4
 8002140:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	3304      	adds	r3, #4
 8002146:	2b06      	cmp	r3, #6
 8002148:	d902      	bls.n	8002150 <NVIC_EncodePriority+0x30>
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	3b03      	subs	r3, #3
 800214e:	e000      	b.n	8002152 <NVIC_EncodePriority+0x32>
 8002150:	2300      	movs	r3, #0
 8002152:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002154:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	43da      	mvns	r2, r3
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	401a      	ands	r2, r3
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002168:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	fa01 f303 	lsl.w	r3, r1, r3
 8002172:	43d9      	mvns	r1, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002178:	4313      	orrs	r3, r2
         );
}
 800217a:	4618      	mov	r0, r3
 800217c:	3724      	adds	r7, #36	; 0x24
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
	...

08002188 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	3b01      	subs	r3, #1
 8002194:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002198:	d301      	bcc.n	800219e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800219a:	2301      	movs	r3, #1
 800219c:	e00f      	b.n	80021be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800219e:	4a0a      	ldr	r2, [pc, #40]	; (80021c8 <SysTick_Config+0x40>)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	3b01      	subs	r3, #1
 80021a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021a6:	210f      	movs	r1, #15
 80021a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021ac:	f7ff ff8e 	bl	80020cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021b0:	4b05      	ldr	r3, [pc, #20]	; (80021c8 <SysTick_Config+0x40>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021b6:	4b04      	ldr	r3, [pc, #16]	; (80021c8 <SysTick_Config+0x40>)
 80021b8:	2207      	movs	r2, #7
 80021ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3708      	adds	r7, #8
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	e000e010 	.word	0xe000e010

080021cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f7ff ff29 	bl	800202c <__NVIC_SetPriorityGrouping>
}
 80021da:	bf00      	nop
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b086      	sub	sp, #24
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	4603      	mov	r3, r0
 80021ea:	60b9      	str	r1, [r7, #8]
 80021ec:	607a      	str	r2, [r7, #4]
 80021ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021f0:	2300      	movs	r3, #0
 80021f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021f4:	f7ff ff3e 	bl	8002074 <__NVIC_GetPriorityGrouping>
 80021f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	68b9      	ldr	r1, [r7, #8]
 80021fe:	6978      	ldr	r0, [r7, #20]
 8002200:	f7ff ff8e 	bl	8002120 <NVIC_EncodePriority>
 8002204:	4602      	mov	r2, r0
 8002206:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800220a:	4611      	mov	r1, r2
 800220c:	4618      	mov	r0, r3
 800220e:	f7ff ff5d 	bl	80020cc <__NVIC_SetPriority>
}
 8002212:	bf00      	nop
 8002214:	3718      	adds	r7, #24
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800221a:	b580      	push	{r7, lr}
 800221c:	b082      	sub	sp, #8
 800221e:	af00      	add	r7, sp, #0
 8002220:	4603      	mov	r3, r0
 8002222:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff ff31 	bl	8002090 <__NVIC_EnableIRQ>
}
 800222e:	bf00      	nop
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}

08002236 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	b082      	sub	sp, #8
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f7ff ffa2 	bl	8002188 <SysTick_Config>
 8002244:	4603      	mov	r3, r0
}
 8002246:	4618      	mov	r0, r3
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800224e:	b580      	push	{r7, lr}
 8002250:	b082      	sub	sp, #8
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d101      	bne.n	8002260 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e00e      	b.n	800227e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	795b      	ldrb	r3, [r3, #5]
 8002264:	b2db      	uxtb	r3, r3
 8002266:	2b00      	cmp	r3, #0
 8002268:	d105      	bne.n	8002276 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f7ff fae9 	bl	8001848 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2201      	movs	r2, #1
 800227a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
	...

08002288 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002290:	2300      	movs	r3, #0
 8002292:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002294:	f7ff fe9a 	bl	8001fcc <HAL_GetTick>
 8002298:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d101      	bne.n	80022a4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e099      	b.n	80023d8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2202      	movs	r2, #2
 80022a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f022 0201 	bic.w	r2, r2, #1
 80022c2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022c4:	e00f      	b.n	80022e6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022c6:	f7ff fe81 	bl	8001fcc <HAL_GetTick>
 80022ca:	4602      	mov	r2, r0
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	2b05      	cmp	r3, #5
 80022d2:	d908      	bls.n	80022e6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2220      	movs	r2, #32
 80022d8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2203      	movs	r2, #3
 80022de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e078      	b.n	80023d8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0301 	and.w	r3, r3, #1
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d1e8      	bne.n	80022c6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80022fc:	697a      	ldr	r2, [r7, #20]
 80022fe:	4b38      	ldr	r3, [pc, #224]	; (80023e0 <HAL_DMA_Init+0x158>)
 8002300:	4013      	ands	r3, r2
 8002302:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685a      	ldr	r2, [r3, #4]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002312:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	691b      	ldr	r3, [r3, #16]
 8002318:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800231e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	699b      	ldr	r3, [r3, #24]
 8002324:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800232a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a1b      	ldr	r3, [r3, #32]
 8002330:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002332:	697a      	ldr	r2, [r7, #20]
 8002334:	4313      	orrs	r3, r2
 8002336:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233c:	2b04      	cmp	r3, #4
 800233e:	d107      	bne.n	8002350 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002348:	4313      	orrs	r3, r2
 800234a:	697a      	ldr	r2, [r7, #20]
 800234c:	4313      	orrs	r3, r2
 800234e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	697a      	ldr	r2, [r7, #20]
 8002356:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	695b      	ldr	r3, [r3, #20]
 800235e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	f023 0307 	bic.w	r3, r3, #7
 8002366:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236c:	697a      	ldr	r2, [r7, #20]
 800236e:	4313      	orrs	r3, r2
 8002370:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002376:	2b04      	cmp	r3, #4
 8002378:	d117      	bne.n	80023aa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800237e:	697a      	ldr	r2, [r7, #20]
 8002380:	4313      	orrs	r3, r2
 8002382:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002388:	2b00      	cmp	r3, #0
 800238a:	d00e      	beq.n	80023aa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f000 fa7b 	bl	8002888 <DMA_CheckFifoParam>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d008      	beq.n	80023aa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2240      	movs	r2, #64	; 0x40
 800239c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2201      	movs	r2, #1
 80023a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80023a6:	2301      	movs	r3, #1
 80023a8:	e016      	b.n	80023d8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	697a      	ldr	r2, [r7, #20]
 80023b0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f000 fa32 	bl	800281c <DMA_CalcBaseAndBitshift>
 80023b8:	4603      	mov	r3, r0
 80023ba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023c0:	223f      	movs	r2, #63	; 0x3f
 80023c2:	409a      	lsls	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2201      	movs	r2, #1
 80023d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80023d6:	2300      	movs	r3, #0
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3718      	adds	r7, #24
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	f010803f 	.word	0xf010803f

080023e4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80023f2:	f7ff fdeb 	bl	8001fcc <HAL_GetTick>
 80023f6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	2b02      	cmp	r3, #2
 8002402:	d008      	beq.n	8002416 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2280      	movs	r2, #128	; 0x80
 8002408:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e052      	b.n	80024bc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f022 0216 	bic.w	r2, r2, #22
 8002424:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	695a      	ldr	r2, [r3, #20]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002434:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243a:	2b00      	cmp	r3, #0
 800243c:	d103      	bne.n	8002446 <HAL_DMA_Abort+0x62>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002442:	2b00      	cmp	r3, #0
 8002444:	d007      	beq.n	8002456 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f022 0208 	bic.w	r2, r2, #8
 8002454:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f022 0201 	bic.w	r2, r2, #1
 8002464:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002466:	e013      	b.n	8002490 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002468:	f7ff fdb0 	bl	8001fcc <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b05      	cmp	r3, #5
 8002474:	d90c      	bls.n	8002490 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2220      	movs	r2, #32
 800247a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2203      	movs	r2, #3
 8002480:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800248c:	2303      	movs	r3, #3
 800248e:	e015      	b.n	80024bc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	2b00      	cmp	r3, #0
 800249c:	d1e4      	bne.n	8002468 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024a2:	223f      	movs	r2, #63	; 0x3f
 80024a4:	409a      	lsls	r2, r3
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2201      	movs	r2, #1
 80024ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80024ba:	2300      	movs	r3, #0
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3710      	adds	r7, #16
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d004      	beq.n	80024e2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2280      	movs	r2, #128	; 0x80
 80024dc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e00c      	b.n	80024fc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2205      	movs	r2, #5
 80024e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f022 0201 	bic.w	r2, r2, #1
 80024f8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80024fa:	2300      	movs	r3, #0
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b086      	sub	sp, #24
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002510:	2300      	movs	r3, #0
 8002512:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002514:	4b8e      	ldr	r3, [pc, #568]	; (8002750 <HAL_DMA_IRQHandler+0x248>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a8e      	ldr	r2, [pc, #568]	; (8002754 <HAL_DMA_IRQHandler+0x24c>)
 800251a:	fba2 2303 	umull	r2, r3, r2, r3
 800251e:	0a9b      	lsrs	r3, r3, #10
 8002520:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002526:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002532:	2208      	movs	r2, #8
 8002534:	409a      	lsls	r2, r3
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	4013      	ands	r3, r2
 800253a:	2b00      	cmp	r3, #0
 800253c:	d01a      	beq.n	8002574 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0304 	and.w	r3, r3, #4
 8002548:	2b00      	cmp	r3, #0
 800254a:	d013      	beq.n	8002574 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f022 0204 	bic.w	r2, r2, #4
 800255a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002560:	2208      	movs	r2, #8
 8002562:	409a      	lsls	r2, r3
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800256c:	f043 0201 	orr.w	r2, r3, #1
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002578:	2201      	movs	r2, #1
 800257a:	409a      	lsls	r2, r3
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	4013      	ands	r3, r2
 8002580:	2b00      	cmp	r3, #0
 8002582:	d012      	beq.n	80025aa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	695b      	ldr	r3, [r3, #20]
 800258a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800258e:	2b00      	cmp	r3, #0
 8002590:	d00b      	beq.n	80025aa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002596:	2201      	movs	r2, #1
 8002598:	409a      	lsls	r2, r3
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a2:	f043 0202 	orr.w	r2, r3, #2
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ae:	2204      	movs	r2, #4
 80025b0:	409a      	lsls	r2, r3
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	4013      	ands	r3, r2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d012      	beq.n	80025e0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0302 	and.w	r3, r3, #2
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d00b      	beq.n	80025e0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025cc:	2204      	movs	r2, #4
 80025ce:	409a      	lsls	r2, r3
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025d8:	f043 0204 	orr.w	r2, r3, #4
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025e4:	2210      	movs	r2, #16
 80025e6:	409a      	lsls	r2, r3
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	4013      	ands	r3, r2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d043      	beq.n	8002678 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0308 	and.w	r3, r3, #8
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d03c      	beq.n	8002678 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002602:	2210      	movs	r2, #16
 8002604:	409a      	lsls	r2, r3
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d018      	beq.n	800264a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d108      	bne.n	8002638 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262a:	2b00      	cmp	r3, #0
 800262c:	d024      	beq.n	8002678 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	4798      	blx	r3
 8002636:	e01f      	b.n	8002678 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800263c:	2b00      	cmp	r3, #0
 800263e:	d01b      	beq.n	8002678 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	4798      	blx	r3
 8002648:	e016      	b.n	8002678 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002654:	2b00      	cmp	r3, #0
 8002656:	d107      	bne.n	8002668 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f022 0208 	bic.w	r2, r2, #8
 8002666:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266c:	2b00      	cmp	r3, #0
 800266e:	d003      	beq.n	8002678 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800267c:	2220      	movs	r2, #32
 800267e:	409a      	lsls	r2, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	4013      	ands	r3, r2
 8002684:	2b00      	cmp	r3, #0
 8002686:	f000 808f 	beq.w	80027a8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0310 	and.w	r3, r3, #16
 8002694:	2b00      	cmp	r3, #0
 8002696:	f000 8087 	beq.w	80027a8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800269e:	2220      	movs	r2, #32
 80026a0:	409a      	lsls	r2, r3
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2b05      	cmp	r3, #5
 80026b0:	d136      	bne.n	8002720 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f022 0216 	bic.w	r2, r2, #22
 80026c0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	695a      	ldr	r2, [r3, #20]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026d0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d103      	bne.n	80026e2 <HAL_DMA_IRQHandler+0x1da>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d007      	beq.n	80026f2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f022 0208 	bic.w	r2, r2, #8
 80026f0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f6:	223f      	movs	r2, #63	; 0x3f
 80026f8:	409a      	lsls	r2, r3
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2201      	movs	r2, #1
 8002702:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002712:	2b00      	cmp	r3, #0
 8002714:	d07e      	beq.n	8002814 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	4798      	blx	r3
        }
        return;
 800271e:	e079      	b.n	8002814 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d01d      	beq.n	800276a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d10d      	bne.n	8002758 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002740:	2b00      	cmp	r3, #0
 8002742:	d031      	beq.n	80027a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	4798      	blx	r3
 800274c:	e02c      	b.n	80027a8 <HAL_DMA_IRQHandler+0x2a0>
 800274e:	bf00      	nop
 8002750:	200000a8 	.word	0x200000a8
 8002754:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800275c:	2b00      	cmp	r3, #0
 800275e:	d023      	beq.n	80027a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	4798      	blx	r3
 8002768:	e01e      	b.n	80027a8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002774:	2b00      	cmp	r3, #0
 8002776:	d10f      	bne.n	8002798 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f022 0210 	bic.w	r2, r2, #16
 8002786:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800279c:	2b00      	cmp	r3, #0
 800279e:	d003      	beq.n	80027a8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d032      	beq.n	8002816 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027b4:	f003 0301 	and.w	r3, r3, #1
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d022      	beq.n	8002802 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2205      	movs	r2, #5
 80027c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f022 0201 	bic.w	r2, r2, #1
 80027d2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	3301      	adds	r3, #1
 80027d8:	60bb      	str	r3, [r7, #8]
 80027da:	697a      	ldr	r2, [r7, #20]
 80027dc:	429a      	cmp	r2, r3
 80027de:	d307      	bcc.n	80027f0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d1f2      	bne.n	80027d4 <HAL_DMA_IRQHandler+0x2cc>
 80027ee:	e000      	b.n	80027f2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80027f0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2201      	movs	r2, #1
 80027f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002806:	2b00      	cmp	r3, #0
 8002808:	d005      	beq.n	8002816 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	4798      	blx	r3
 8002812:	e000      	b.n	8002816 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002814:	bf00      	nop
    }
  }
}
 8002816:	3718      	adds	r7, #24
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800281c:	b480      	push	{r7}
 800281e:	b085      	sub	sp, #20
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	b2db      	uxtb	r3, r3
 800282a:	3b10      	subs	r3, #16
 800282c:	4a14      	ldr	r2, [pc, #80]	; (8002880 <DMA_CalcBaseAndBitshift+0x64>)
 800282e:	fba2 2303 	umull	r2, r3, r2, r3
 8002832:	091b      	lsrs	r3, r3, #4
 8002834:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002836:	4a13      	ldr	r2, [pc, #76]	; (8002884 <DMA_CalcBaseAndBitshift+0x68>)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	4413      	add	r3, r2
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	461a      	mov	r2, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2b03      	cmp	r3, #3
 8002848:	d909      	bls.n	800285e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002852:	f023 0303 	bic.w	r3, r3, #3
 8002856:	1d1a      	adds	r2, r3, #4
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	659a      	str	r2, [r3, #88]	; 0x58
 800285c:	e007      	b.n	800286e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002866:	f023 0303 	bic.w	r3, r3, #3
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002872:	4618      	mov	r0, r3
 8002874:	3714      	adds	r7, #20
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	aaaaaaab 	.word	0xaaaaaaab
 8002884:	0800e774 	.word	0x0800e774

08002888 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002888:	b480      	push	{r7}
 800288a:	b085      	sub	sp, #20
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002890:	2300      	movs	r3, #0
 8002892:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002898:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	699b      	ldr	r3, [r3, #24]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d11f      	bne.n	80028e2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	2b03      	cmp	r3, #3
 80028a6:	d856      	bhi.n	8002956 <DMA_CheckFifoParam+0xce>
 80028a8:	a201      	add	r2, pc, #4	; (adr r2, 80028b0 <DMA_CheckFifoParam+0x28>)
 80028aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ae:	bf00      	nop
 80028b0:	080028c1 	.word	0x080028c1
 80028b4:	080028d3 	.word	0x080028d3
 80028b8:	080028c1 	.word	0x080028c1
 80028bc:	08002957 	.word	0x08002957
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d046      	beq.n	800295a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028d0:	e043      	b.n	800295a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80028da:	d140      	bne.n	800295e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028e0:	e03d      	b.n	800295e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028ea:	d121      	bne.n	8002930 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	2b03      	cmp	r3, #3
 80028f0:	d837      	bhi.n	8002962 <DMA_CheckFifoParam+0xda>
 80028f2:	a201      	add	r2, pc, #4	; (adr r2, 80028f8 <DMA_CheckFifoParam+0x70>)
 80028f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028f8:	08002909 	.word	0x08002909
 80028fc:	0800290f 	.word	0x0800290f
 8002900:	08002909 	.word	0x08002909
 8002904:	08002921 	.word	0x08002921
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	73fb      	strb	r3, [r7, #15]
      break;
 800290c:	e030      	b.n	8002970 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002912:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d025      	beq.n	8002966 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800291e:	e022      	b.n	8002966 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002924:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002928:	d11f      	bne.n	800296a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800292e:	e01c      	b.n	800296a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	2b02      	cmp	r3, #2
 8002934:	d903      	bls.n	800293e <DMA_CheckFifoParam+0xb6>
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	2b03      	cmp	r3, #3
 800293a:	d003      	beq.n	8002944 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800293c:	e018      	b.n	8002970 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	73fb      	strb	r3, [r7, #15]
      break;
 8002942:	e015      	b.n	8002970 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002948:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d00e      	beq.n	800296e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	73fb      	strb	r3, [r7, #15]
      break;
 8002954:	e00b      	b.n	800296e <DMA_CheckFifoParam+0xe6>
      break;
 8002956:	bf00      	nop
 8002958:	e00a      	b.n	8002970 <DMA_CheckFifoParam+0xe8>
      break;
 800295a:	bf00      	nop
 800295c:	e008      	b.n	8002970 <DMA_CheckFifoParam+0xe8>
      break;
 800295e:	bf00      	nop
 8002960:	e006      	b.n	8002970 <DMA_CheckFifoParam+0xe8>
      break;
 8002962:	bf00      	nop
 8002964:	e004      	b.n	8002970 <DMA_CheckFifoParam+0xe8>
      break;
 8002966:	bf00      	nop
 8002968:	e002      	b.n	8002970 <DMA_CheckFifoParam+0xe8>
      break;   
 800296a:	bf00      	nop
 800296c:	e000      	b.n	8002970 <DMA_CheckFifoParam+0xe8>
      break;
 800296e:	bf00      	nop
    }
  } 
  
  return status; 
 8002970:	7bfb      	ldrb	r3, [r7, #15]
}
 8002972:	4618      	mov	r0, r3
 8002974:	3714      	adds	r7, #20
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop

08002980 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002980:	b480      	push	{r7}
 8002982:	b089      	sub	sp, #36	; 0x24
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800298a:	2300      	movs	r3, #0
 800298c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800298e:	2300      	movs	r3, #0
 8002990:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002992:	2300      	movs	r3, #0
 8002994:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002996:	2300      	movs	r3, #0
 8002998:	61fb      	str	r3, [r7, #28]
 800299a:	e177      	b.n	8002c8c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800299c:	2201      	movs	r2, #1
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	fa02 f303 	lsl.w	r3, r2, r3
 80029a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	697a      	ldr	r2, [r7, #20]
 80029ac:	4013      	ands	r3, r2
 80029ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029b0:	693a      	ldr	r2, [r7, #16]
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	f040 8166 	bne.w	8002c86 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f003 0303 	and.w	r3, r3, #3
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d005      	beq.n	80029d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d130      	bne.n	8002a34 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	005b      	lsls	r3, r3, #1
 80029dc:	2203      	movs	r2, #3
 80029de:	fa02 f303 	lsl.w	r3, r2, r3
 80029e2:	43db      	mvns	r3, r3
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	4013      	ands	r3, r2
 80029e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	68da      	ldr	r2, [r3, #12]
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	005b      	lsls	r3, r3, #1
 80029f2:	fa02 f303 	lsl.w	r3, r2, r3
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a08:	2201      	movs	r2, #1
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a10:	43db      	mvns	r3, r3
 8002a12:	69ba      	ldr	r2, [r7, #24]
 8002a14:	4013      	ands	r3, r2
 8002a16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	091b      	lsrs	r3, r3, #4
 8002a1e:	f003 0201 	and.w	r2, r3, #1
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	fa02 f303 	lsl.w	r3, r2, r3
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f003 0303 	and.w	r3, r3, #3
 8002a3c:	2b03      	cmp	r3, #3
 8002a3e:	d017      	beq.n	8002a70 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	005b      	lsls	r3, r3, #1
 8002a4a:	2203      	movs	r2, #3
 8002a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a50:	43db      	mvns	r3, r3
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	4013      	ands	r3, r2
 8002a56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	689a      	ldr	r2, [r3, #8]
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	005b      	lsls	r3, r3, #1
 8002a60:	fa02 f303 	lsl.w	r3, r2, r3
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f003 0303 	and.w	r3, r3, #3
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d123      	bne.n	8002ac4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	08da      	lsrs	r2, r3, #3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	3208      	adds	r2, #8
 8002a84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	f003 0307 	and.w	r3, r3, #7
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	220f      	movs	r2, #15
 8002a94:	fa02 f303 	lsl.w	r3, r2, r3
 8002a98:	43db      	mvns	r3, r3
 8002a9a:	69ba      	ldr	r2, [r7, #24]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	691a      	ldr	r2, [r3, #16]
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	f003 0307 	and.w	r3, r3, #7
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	08da      	lsrs	r2, r3, #3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	3208      	adds	r2, #8
 8002abe:	69b9      	ldr	r1, [r7, #24]
 8002ac0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	005b      	lsls	r3, r3, #1
 8002ace:	2203      	movs	r2, #3
 8002ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad4:	43db      	mvns	r3, r3
 8002ad6:	69ba      	ldr	r2, [r7, #24]
 8002ad8:	4013      	ands	r3, r2
 8002ada:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f003 0203 	and.w	r2, r3, #3
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	005b      	lsls	r3, r3, #1
 8002ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	f000 80c0 	beq.w	8002c86 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b06:	2300      	movs	r3, #0
 8002b08:	60fb      	str	r3, [r7, #12]
 8002b0a:	4b66      	ldr	r3, [pc, #408]	; (8002ca4 <HAL_GPIO_Init+0x324>)
 8002b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b0e:	4a65      	ldr	r2, [pc, #404]	; (8002ca4 <HAL_GPIO_Init+0x324>)
 8002b10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b14:	6453      	str	r3, [r2, #68]	; 0x44
 8002b16:	4b63      	ldr	r3, [pc, #396]	; (8002ca4 <HAL_GPIO_Init+0x324>)
 8002b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b1e:	60fb      	str	r3, [r7, #12]
 8002b20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b22:	4a61      	ldr	r2, [pc, #388]	; (8002ca8 <HAL_GPIO_Init+0x328>)
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	089b      	lsrs	r3, r3, #2
 8002b28:	3302      	adds	r3, #2
 8002b2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	f003 0303 	and.w	r3, r3, #3
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	220f      	movs	r2, #15
 8002b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3e:	43db      	mvns	r3, r3
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	4013      	ands	r3, r2
 8002b44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a58      	ldr	r2, [pc, #352]	; (8002cac <HAL_GPIO_Init+0x32c>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d037      	beq.n	8002bbe <HAL_GPIO_Init+0x23e>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a57      	ldr	r2, [pc, #348]	; (8002cb0 <HAL_GPIO_Init+0x330>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d031      	beq.n	8002bba <HAL_GPIO_Init+0x23a>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a56      	ldr	r2, [pc, #344]	; (8002cb4 <HAL_GPIO_Init+0x334>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d02b      	beq.n	8002bb6 <HAL_GPIO_Init+0x236>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a55      	ldr	r2, [pc, #340]	; (8002cb8 <HAL_GPIO_Init+0x338>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d025      	beq.n	8002bb2 <HAL_GPIO_Init+0x232>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a54      	ldr	r2, [pc, #336]	; (8002cbc <HAL_GPIO_Init+0x33c>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d01f      	beq.n	8002bae <HAL_GPIO_Init+0x22e>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a53      	ldr	r2, [pc, #332]	; (8002cc0 <HAL_GPIO_Init+0x340>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d019      	beq.n	8002baa <HAL_GPIO_Init+0x22a>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a52      	ldr	r2, [pc, #328]	; (8002cc4 <HAL_GPIO_Init+0x344>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d013      	beq.n	8002ba6 <HAL_GPIO_Init+0x226>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a51      	ldr	r2, [pc, #324]	; (8002cc8 <HAL_GPIO_Init+0x348>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d00d      	beq.n	8002ba2 <HAL_GPIO_Init+0x222>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a50      	ldr	r2, [pc, #320]	; (8002ccc <HAL_GPIO_Init+0x34c>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d007      	beq.n	8002b9e <HAL_GPIO_Init+0x21e>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a4f      	ldr	r2, [pc, #316]	; (8002cd0 <HAL_GPIO_Init+0x350>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d101      	bne.n	8002b9a <HAL_GPIO_Init+0x21a>
 8002b96:	2309      	movs	r3, #9
 8002b98:	e012      	b.n	8002bc0 <HAL_GPIO_Init+0x240>
 8002b9a:	230a      	movs	r3, #10
 8002b9c:	e010      	b.n	8002bc0 <HAL_GPIO_Init+0x240>
 8002b9e:	2308      	movs	r3, #8
 8002ba0:	e00e      	b.n	8002bc0 <HAL_GPIO_Init+0x240>
 8002ba2:	2307      	movs	r3, #7
 8002ba4:	e00c      	b.n	8002bc0 <HAL_GPIO_Init+0x240>
 8002ba6:	2306      	movs	r3, #6
 8002ba8:	e00a      	b.n	8002bc0 <HAL_GPIO_Init+0x240>
 8002baa:	2305      	movs	r3, #5
 8002bac:	e008      	b.n	8002bc0 <HAL_GPIO_Init+0x240>
 8002bae:	2304      	movs	r3, #4
 8002bb0:	e006      	b.n	8002bc0 <HAL_GPIO_Init+0x240>
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e004      	b.n	8002bc0 <HAL_GPIO_Init+0x240>
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	e002      	b.n	8002bc0 <HAL_GPIO_Init+0x240>
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e000      	b.n	8002bc0 <HAL_GPIO_Init+0x240>
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	69fa      	ldr	r2, [r7, #28]
 8002bc2:	f002 0203 	and.w	r2, r2, #3
 8002bc6:	0092      	lsls	r2, r2, #2
 8002bc8:	4093      	lsls	r3, r2
 8002bca:	69ba      	ldr	r2, [r7, #24]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bd0:	4935      	ldr	r1, [pc, #212]	; (8002ca8 <HAL_GPIO_Init+0x328>)
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	089b      	lsrs	r3, r3, #2
 8002bd6:	3302      	adds	r3, #2
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bde:	4b3d      	ldr	r3, [pc, #244]	; (8002cd4 <HAL_GPIO_Init+0x354>)
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	43db      	mvns	r3, r3
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	4013      	ands	r3, r2
 8002bec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d003      	beq.n	8002c02 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002bfa:	69ba      	ldr	r2, [r7, #24]
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c02:	4a34      	ldr	r2, [pc, #208]	; (8002cd4 <HAL_GPIO_Init+0x354>)
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c08:	4b32      	ldr	r3, [pc, #200]	; (8002cd4 <HAL_GPIO_Init+0x354>)
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	43db      	mvns	r3, r3
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	4013      	ands	r3, r2
 8002c16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d003      	beq.n	8002c2c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c2c:	4a29      	ldr	r2, [pc, #164]	; (8002cd4 <HAL_GPIO_Init+0x354>)
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c32:	4b28      	ldr	r3, [pc, #160]	; (8002cd4 <HAL_GPIO_Init+0x354>)
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	43db      	mvns	r3, r3
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	4013      	ands	r3, r2
 8002c40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d003      	beq.n	8002c56 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002c4e:	69ba      	ldr	r2, [r7, #24]
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c56:	4a1f      	ldr	r2, [pc, #124]	; (8002cd4 <HAL_GPIO_Init+0x354>)
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c5c:	4b1d      	ldr	r3, [pc, #116]	; (8002cd4 <HAL_GPIO_Init+0x354>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	43db      	mvns	r3, r3
 8002c66:	69ba      	ldr	r2, [r7, #24]
 8002c68:	4013      	ands	r3, r2
 8002c6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d003      	beq.n	8002c80 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c80:	4a14      	ldr	r2, [pc, #80]	; (8002cd4 <HAL_GPIO_Init+0x354>)
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	3301      	adds	r3, #1
 8002c8a:	61fb      	str	r3, [r7, #28]
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	2b0f      	cmp	r3, #15
 8002c90:	f67f ae84 	bls.w	800299c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c94:	bf00      	nop
 8002c96:	bf00      	nop
 8002c98:	3724      	adds	r7, #36	; 0x24
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	40023800 	.word	0x40023800
 8002ca8:	40013800 	.word	0x40013800
 8002cac:	40020000 	.word	0x40020000
 8002cb0:	40020400 	.word	0x40020400
 8002cb4:	40020800 	.word	0x40020800
 8002cb8:	40020c00 	.word	0x40020c00
 8002cbc:	40021000 	.word	0x40021000
 8002cc0:	40021400 	.word	0x40021400
 8002cc4:	40021800 	.word	0x40021800
 8002cc8:	40021c00 	.word	0x40021c00
 8002ccc:	40022000 	.word	0x40022000
 8002cd0:	40022400 	.word	0x40022400
 8002cd4:	40013c00 	.word	0x40013c00

08002cd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	807b      	strh	r3, [r7, #2]
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ce8:	787b      	ldrb	r3, [r7, #1]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d003      	beq.n	8002cf6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cee:	887a      	ldrh	r2, [r7, #2]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002cf4:	e003      	b.n	8002cfe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002cf6:	887b      	ldrh	r3, [r7, #2]
 8002cf8:	041a      	lsls	r2, r3, #16
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	619a      	str	r2, [r3, #24]
}
 8002cfe:	bf00      	nop
 8002d00:	370c      	adds	r7, #12
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr

08002d0a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002d0a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d0c:	b08f      	sub	sp, #60	; 0x3c
 8002d0e:	af0a      	add	r7, sp, #40	; 0x28
 8002d10:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d101      	bne.n	8002d1c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e054      	b.n	8002dc6 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d106      	bne.n	8002d3c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f00a f8e8 	bl	800cf0c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2203      	movs	r2, #3
 8002d40:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d102      	bne.n	8002d56 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f005 ff90 	bl	8008c80 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	603b      	str	r3, [r7, #0]
 8002d66:	687e      	ldr	r6, [r7, #4]
 8002d68:	466d      	mov	r5, sp
 8002d6a:	f106 0410 	add.w	r4, r6, #16
 8002d6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d76:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d7a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d7e:	1d33      	adds	r3, r6, #4
 8002d80:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d82:	6838      	ldr	r0, [r7, #0]
 8002d84:	f005 ff0a 	bl	8008b9c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2101      	movs	r1, #1
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f005 ff87 	bl	8008ca2 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	603b      	str	r3, [r7, #0]
 8002d9a:	687e      	ldr	r6, [r7, #4]
 8002d9c:	466d      	mov	r5, sp
 8002d9e:	f106 0410 	add.w	r4, r6, #16
 8002da2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002da4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002da6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002da8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002daa:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002dae:	e885 0003 	stmia.w	r5, {r0, r1}
 8002db2:	1d33      	adds	r3, r6, #4
 8002db4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002db6:	6838      	ldr	r0, [r7, #0]
 8002db8:	f006 f910 	bl	8008fdc <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3714      	adds	r7, #20
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002dce <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002dce:	b590      	push	{r4, r7, lr}
 8002dd0:	b089      	sub	sp, #36	; 0x24
 8002dd2:	af04      	add	r7, sp, #16
 8002dd4:	6078      	str	r0, [r7, #4]
 8002dd6:	4608      	mov	r0, r1
 8002dd8:	4611      	mov	r1, r2
 8002dda:	461a      	mov	r2, r3
 8002ddc:	4603      	mov	r3, r0
 8002dde:	70fb      	strb	r3, [r7, #3]
 8002de0:	460b      	mov	r3, r1
 8002de2:	70bb      	strb	r3, [r7, #2]
 8002de4:	4613      	mov	r3, r2
 8002de6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d101      	bne.n	8002df6 <HAL_HCD_HC_Init+0x28>
 8002df2:	2302      	movs	r3, #2
 8002df4:	e076      	b.n	8002ee4 <HAL_HCD_HC_Init+0x116>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002dfe:	78fb      	ldrb	r3, [r7, #3]
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	212c      	movs	r1, #44	; 0x2c
 8002e04:	fb01 f303 	mul.w	r3, r1, r3
 8002e08:	4413      	add	r3, r2
 8002e0a:	333d      	adds	r3, #61	; 0x3d
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002e10:	78fb      	ldrb	r3, [r7, #3]
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	212c      	movs	r1, #44	; 0x2c
 8002e16:	fb01 f303 	mul.w	r3, r1, r3
 8002e1a:	4413      	add	r3, r2
 8002e1c:	3338      	adds	r3, #56	; 0x38
 8002e1e:	787a      	ldrb	r2, [r7, #1]
 8002e20:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002e22:	78fb      	ldrb	r3, [r7, #3]
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	212c      	movs	r1, #44	; 0x2c
 8002e28:	fb01 f303 	mul.w	r3, r1, r3
 8002e2c:	4413      	add	r3, r2
 8002e2e:	3340      	adds	r3, #64	; 0x40
 8002e30:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002e32:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002e34:	78fb      	ldrb	r3, [r7, #3]
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	212c      	movs	r1, #44	; 0x2c
 8002e3a:	fb01 f303 	mul.w	r3, r1, r3
 8002e3e:	4413      	add	r3, r2
 8002e40:	3339      	adds	r3, #57	; 0x39
 8002e42:	78fa      	ldrb	r2, [r7, #3]
 8002e44:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002e46:	78fb      	ldrb	r3, [r7, #3]
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	212c      	movs	r1, #44	; 0x2c
 8002e4c:	fb01 f303 	mul.w	r3, r1, r3
 8002e50:	4413      	add	r3, r2
 8002e52:	333f      	adds	r3, #63	; 0x3f
 8002e54:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002e58:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002e5a:	78fb      	ldrb	r3, [r7, #3]
 8002e5c:	78ba      	ldrb	r2, [r7, #2]
 8002e5e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002e62:	b2d0      	uxtb	r0, r2
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	212c      	movs	r1, #44	; 0x2c
 8002e68:	fb01 f303 	mul.w	r3, r1, r3
 8002e6c:	4413      	add	r3, r2
 8002e6e:	333a      	adds	r3, #58	; 0x3a
 8002e70:	4602      	mov	r2, r0
 8002e72:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002e74:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	da09      	bge.n	8002e90 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002e7c:	78fb      	ldrb	r3, [r7, #3]
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	212c      	movs	r1, #44	; 0x2c
 8002e82:	fb01 f303 	mul.w	r3, r1, r3
 8002e86:	4413      	add	r3, r2
 8002e88:	333b      	adds	r3, #59	; 0x3b
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	701a      	strb	r2, [r3, #0]
 8002e8e:	e008      	b.n	8002ea2 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002e90:	78fb      	ldrb	r3, [r7, #3]
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	212c      	movs	r1, #44	; 0x2c
 8002e96:	fb01 f303 	mul.w	r3, r1, r3
 8002e9a:	4413      	add	r3, r2
 8002e9c:	333b      	adds	r3, #59	; 0x3b
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002ea2:	78fb      	ldrb	r3, [r7, #3]
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	212c      	movs	r1, #44	; 0x2c
 8002ea8:	fb01 f303 	mul.w	r3, r1, r3
 8002eac:	4413      	add	r3, r2
 8002eae:	333c      	adds	r3, #60	; 0x3c
 8002eb0:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002eb4:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6818      	ldr	r0, [r3, #0]
 8002eba:	787c      	ldrb	r4, [r7, #1]
 8002ebc:	78ba      	ldrb	r2, [r7, #2]
 8002ebe:	78f9      	ldrb	r1, [r7, #3]
 8002ec0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002ec2:	9302      	str	r3, [sp, #8]
 8002ec4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002ec8:	9301      	str	r3, [sp, #4]
 8002eca:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002ece:	9300      	str	r3, [sp, #0]
 8002ed0:	4623      	mov	r3, r4
 8002ed2:	f006 fa09 	bl	80092e8 <USB_HC_Init>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3714      	adds	r7, #20
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd90      	pop	{r4, r7, pc}

08002eec <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d101      	bne.n	8002f0a <HAL_HCD_HC_Halt+0x1e>
 8002f06:	2302      	movs	r3, #2
 8002f08:	e00f      	b.n	8002f2a <HAL_HCD_HC_Halt+0x3e>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	78fa      	ldrb	r2, [r7, #3]
 8002f18:	4611      	mov	r1, r2
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f006 fc59 	bl	80097d2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3710      	adds	r7, #16
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
	...

08002f34 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	4608      	mov	r0, r1
 8002f3e:	4611      	mov	r1, r2
 8002f40:	461a      	mov	r2, r3
 8002f42:	4603      	mov	r3, r0
 8002f44:	70fb      	strb	r3, [r7, #3]
 8002f46:	460b      	mov	r3, r1
 8002f48:	70bb      	strb	r3, [r7, #2]
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002f4e:	78fb      	ldrb	r3, [r7, #3]
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	212c      	movs	r1, #44	; 0x2c
 8002f54:	fb01 f303 	mul.w	r3, r1, r3
 8002f58:	4413      	add	r3, r2
 8002f5a:	333b      	adds	r3, #59	; 0x3b
 8002f5c:	78ba      	ldrb	r2, [r7, #2]
 8002f5e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002f60:	78fb      	ldrb	r3, [r7, #3]
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	212c      	movs	r1, #44	; 0x2c
 8002f66:	fb01 f303 	mul.w	r3, r1, r3
 8002f6a:	4413      	add	r3, r2
 8002f6c:	333f      	adds	r3, #63	; 0x3f
 8002f6e:	787a      	ldrb	r2, [r7, #1]
 8002f70:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002f72:	7c3b      	ldrb	r3, [r7, #16]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d112      	bne.n	8002f9e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002f78:	78fb      	ldrb	r3, [r7, #3]
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	212c      	movs	r1, #44	; 0x2c
 8002f7e:	fb01 f303 	mul.w	r3, r1, r3
 8002f82:	4413      	add	r3, r2
 8002f84:	3342      	adds	r3, #66	; 0x42
 8002f86:	2203      	movs	r2, #3
 8002f88:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002f8a:	78fb      	ldrb	r3, [r7, #3]
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	212c      	movs	r1, #44	; 0x2c
 8002f90:	fb01 f303 	mul.w	r3, r1, r3
 8002f94:	4413      	add	r3, r2
 8002f96:	333d      	adds	r3, #61	; 0x3d
 8002f98:	7f3a      	ldrb	r2, [r7, #28]
 8002f9a:	701a      	strb	r2, [r3, #0]
 8002f9c:	e008      	b.n	8002fb0 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002f9e:	78fb      	ldrb	r3, [r7, #3]
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	212c      	movs	r1, #44	; 0x2c
 8002fa4:	fb01 f303 	mul.w	r3, r1, r3
 8002fa8:	4413      	add	r3, r2
 8002faa:	3342      	adds	r3, #66	; 0x42
 8002fac:	2202      	movs	r2, #2
 8002fae:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002fb0:	787b      	ldrb	r3, [r7, #1]
 8002fb2:	2b03      	cmp	r3, #3
 8002fb4:	f200 80c6 	bhi.w	8003144 <HAL_HCD_HC_SubmitRequest+0x210>
 8002fb8:	a201      	add	r2, pc, #4	; (adr r2, 8002fc0 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fbe:	bf00      	nop
 8002fc0:	08002fd1 	.word	0x08002fd1
 8002fc4:	08003131 	.word	0x08003131
 8002fc8:	08003035 	.word	0x08003035
 8002fcc:	080030b3 	.word	0x080030b3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002fd0:	7c3b      	ldrb	r3, [r7, #16]
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	f040 80b8 	bne.w	8003148 <HAL_HCD_HC_SubmitRequest+0x214>
 8002fd8:	78bb      	ldrb	r3, [r7, #2]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	f040 80b4 	bne.w	8003148 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002fe0:	8b3b      	ldrh	r3, [r7, #24]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d108      	bne.n	8002ff8 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002fe6:	78fb      	ldrb	r3, [r7, #3]
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	212c      	movs	r1, #44	; 0x2c
 8002fec:	fb01 f303 	mul.w	r3, r1, r3
 8002ff0:	4413      	add	r3, r2
 8002ff2:	3355      	adds	r3, #85	; 0x55
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002ff8:	78fb      	ldrb	r3, [r7, #3]
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	212c      	movs	r1, #44	; 0x2c
 8002ffe:	fb01 f303 	mul.w	r3, r1, r3
 8003002:	4413      	add	r3, r2
 8003004:	3355      	adds	r3, #85	; 0x55
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d109      	bne.n	8003020 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800300c:	78fb      	ldrb	r3, [r7, #3]
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	212c      	movs	r1, #44	; 0x2c
 8003012:	fb01 f303 	mul.w	r3, r1, r3
 8003016:	4413      	add	r3, r2
 8003018:	3342      	adds	r3, #66	; 0x42
 800301a:	2200      	movs	r2, #0
 800301c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800301e:	e093      	b.n	8003148 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003020:	78fb      	ldrb	r3, [r7, #3]
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	212c      	movs	r1, #44	; 0x2c
 8003026:	fb01 f303 	mul.w	r3, r1, r3
 800302a:	4413      	add	r3, r2
 800302c:	3342      	adds	r3, #66	; 0x42
 800302e:	2202      	movs	r2, #2
 8003030:	701a      	strb	r2, [r3, #0]
      break;
 8003032:	e089      	b.n	8003148 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003034:	78bb      	ldrb	r3, [r7, #2]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d11d      	bne.n	8003076 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800303a:	78fb      	ldrb	r3, [r7, #3]
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	212c      	movs	r1, #44	; 0x2c
 8003040:	fb01 f303 	mul.w	r3, r1, r3
 8003044:	4413      	add	r3, r2
 8003046:	3355      	adds	r3, #85	; 0x55
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d109      	bne.n	8003062 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800304e:	78fb      	ldrb	r3, [r7, #3]
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	212c      	movs	r1, #44	; 0x2c
 8003054:	fb01 f303 	mul.w	r3, r1, r3
 8003058:	4413      	add	r3, r2
 800305a:	3342      	adds	r3, #66	; 0x42
 800305c:	2200      	movs	r2, #0
 800305e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003060:	e073      	b.n	800314a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003062:	78fb      	ldrb	r3, [r7, #3]
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	212c      	movs	r1, #44	; 0x2c
 8003068:	fb01 f303 	mul.w	r3, r1, r3
 800306c:	4413      	add	r3, r2
 800306e:	3342      	adds	r3, #66	; 0x42
 8003070:	2202      	movs	r2, #2
 8003072:	701a      	strb	r2, [r3, #0]
      break;
 8003074:	e069      	b.n	800314a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003076:	78fb      	ldrb	r3, [r7, #3]
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	212c      	movs	r1, #44	; 0x2c
 800307c:	fb01 f303 	mul.w	r3, r1, r3
 8003080:	4413      	add	r3, r2
 8003082:	3354      	adds	r3, #84	; 0x54
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d109      	bne.n	800309e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800308a:	78fb      	ldrb	r3, [r7, #3]
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	212c      	movs	r1, #44	; 0x2c
 8003090:	fb01 f303 	mul.w	r3, r1, r3
 8003094:	4413      	add	r3, r2
 8003096:	3342      	adds	r3, #66	; 0x42
 8003098:	2200      	movs	r2, #0
 800309a:	701a      	strb	r2, [r3, #0]
      break;
 800309c:	e055      	b.n	800314a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800309e:	78fb      	ldrb	r3, [r7, #3]
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	212c      	movs	r1, #44	; 0x2c
 80030a4:	fb01 f303 	mul.w	r3, r1, r3
 80030a8:	4413      	add	r3, r2
 80030aa:	3342      	adds	r3, #66	; 0x42
 80030ac:	2202      	movs	r2, #2
 80030ae:	701a      	strb	r2, [r3, #0]
      break;
 80030b0:	e04b      	b.n	800314a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80030b2:	78bb      	ldrb	r3, [r7, #2]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d11d      	bne.n	80030f4 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80030b8:	78fb      	ldrb	r3, [r7, #3]
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	212c      	movs	r1, #44	; 0x2c
 80030be:	fb01 f303 	mul.w	r3, r1, r3
 80030c2:	4413      	add	r3, r2
 80030c4:	3355      	adds	r3, #85	; 0x55
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d109      	bne.n	80030e0 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80030cc:	78fb      	ldrb	r3, [r7, #3]
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	212c      	movs	r1, #44	; 0x2c
 80030d2:	fb01 f303 	mul.w	r3, r1, r3
 80030d6:	4413      	add	r3, r2
 80030d8:	3342      	adds	r3, #66	; 0x42
 80030da:	2200      	movs	r2, #0
 80030dc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80030de:	e034      	b.n	800314a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80030e0:	78fb      	ldrb	r3, [r7, #3]
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	212c      	movs	r1, #44	; 0x2c
 80030e6:	fb01 f303 	mul.w	r3, r1, r3
 80030ea:	4413      	add	r3, r2
 80030ec:	3342      	adds	r3, #66	; 0x42
 80030ee:	2202      	movs	r2, #2
 80030f0:	701a      	strb	r2, [r3, #0]
      break;
 80030f2:	e02a      	b.n	800314a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80030f4:	78fb      	ldrb	r3, [r7, #3]
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	212c      	movs	r1, #44	; 0x2c
 80030fa:	fb01 f303 	mul.w	r3, r1, r3
 80030fe:	4413      	add	r3, r2
 8003100:	3354      	adds	r3, #84	; 0x54
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d109      	bne.n	800311c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003108:	78fb      	ldrb	r3, [r7, #3]
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	212c      	movs	r1, #44	; 0x2c
 800310e:	fb01 f303 	mul.w	r3, r1, r3
 8003112:	4413      	add	r3, r2
 8003114:	3342      	adds	r3, #66	; 0x42
 8003116:	2200      	movs	r2, #0
 8003118:	701a      	strb	r2, [r3, #0]
      break;
 800311a:	e016      	b.n	800314a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800311c:	78fb      	ldrb	r3, [r7, #3]
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	212c      	movs	r1, #44	; 0x2c
 8003122:	fb01 f303 	mul.w	r3, r1, r3
 8003126:	4413      	add	r3, r2
 8003128:	3342      	adds	r3, #66	; 0x42
 800312a:	2202      	movs	r2, #2
 800312c:	701a      	strb	r2, [r3, #0]
      break;
 800312e:	e00c      	b.n	800314a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003130:	78fb      	ldrb	r3, [r7, #3]
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	212c      	movs	r1, #44	; 0x2c
 8003136:	fb01 f303 	mul.w	r3, r1, r3
 800313a:	4413      	add	r3, r2
 800313c:	3342      	adds	r3, #66	; 0x42
 800313e:	2200      	movs	r2, #0
 8003140:	701a      	strb	r2, [r3, #0]
      break;
 8003142:	e002      	b.n	800314a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003144:	bf00      	nop
 8003146:	e000      	b.n	800314a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8003148:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800314a:	78fb      	ldrb	r3, [r7, #3]
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	212c      	movs	r1, #44	; 0x2c
 8003150:	fb01 f303 	mul.w	r3, r1, r3
 8003154:	4413      	add	r3, r2
 8003156:	3344      	adds	r3, #68	; 0x44
 8003158:	697a      	ldr	r2, [r7, #20]
 800315a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800315c:	78fb      	ldrb	r3, [r7, #3]
 800315e:	8b3a      	ldrh	r2, [r7, #24]
 8003160:	6879      	ldr	r1, [r7, #4]
 8003162:	202c      	movs	r0, #44	; 0x2c
 8003164:	fb00 f303 	mul.w	r3, r0, r3
 8003168:	440b      	add	r3, r1
 800316a:	334c      	adds	r3, #76	; 0x4c
 800316c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800316e:	78fb      	ldrb	r3, [r7, #3]
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	212c      	movs	r1, #44	; 0x2c
 8003174:	fb01 f303 	mul.w	r3, r1, r3
 8003178:	4413      	add	r3, r2
 800317a:	3360      	adds	r3, #96	; 0x60
 800317c:	2200      	movs	r2, #0
 800317e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003180:	78fb      	ldrb	r3, [r7, #3]
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	212c      	movs	r1, #44	; 0x2c
 8003186:	fb01 f303 	mul.w	r3, r1, r3
 800318a:	4413      	add	r3, r2
 800318c:	3350      	adds	r3, #80	; 0x50
 800318e:	2200      	movs	r2, #0
 8003190:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003192:	78fb      	ldrb	r3, [r7, #3]
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	212c      	movs	r1, #44	; 0x2c
 8003198:	fb01 f303 	mul.w	r3, r1, r3
 800319c:	4413      	add	r3, r2
 800319e:	3339      	adds	r3, #57	; 0x39
 80031a0:	78fa      	ldrb	r2, [r7, #3]
 80031a2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80031a4:	78fb      	ldrb	r3, [r7, #3]
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	212c      	movs	r1, #44	; 0x2c
 80031aa:	fb01 f303 	mul.w	r3, r1, r3
 80031ae:	4413      	add	r3, r2
 80031b0:	3361      	adds	r3, #97	; 0x61
 80031b2:	2200      	movs	r2, #0
 80031b4:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6818      	ldr	r0, [r3, #0]
 80031ba:	78fb      	ldrb	r3, [r7, #3]
 80031bc:	222c      	movs	r2, #44	; 0x2c
 80031be:	fb02 f303 	mul.w	r3, r2, r3
 80031c2:	3338      	adds	r3, #56	; 0x38
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	18d1      	adds	r1, r2, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	691b      	ldr	r3, [r3, #16]
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	461a      	mov	r2, r3
 80031d0:	f006 f9ac 	bl	800952c <USB_HC_StartXfer>
 80031d4:	4603      	mov	r3, r0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3708      	adds	r7, #8
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop

080031e0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b086      	sub	sp, #24
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f005 fead 	bl	8008f56 <USB_GetMode>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b01      	cmp	r3, #1
 8003200:	f040 80f6 	bne.w	80033f0 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4618      	mov	r0, r3
 800320a:	f005 fe91 	bl	8008f30 <USB_ReadInterrupts>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	f000 80ec 	beq.w	80033ee <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4618      	mov	r0, r3
 800321c:	f005 fe88 	bl	8008f30 <USB_ReadInterrupts>
 8003220:	4603      	mov	r3, r0
 8003222:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003226:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800322a:	d104      	bne.n	8003236 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003234:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4618      	mov	r0, r3
 800323c:	f005 fe78 	bl	8008f30 <USB_ReadInterrupts>
 8003240:	4603      	mov	r3, r0
 8003242:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003246:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800324a:	d104      	bne.n	8003256 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003254:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4618      	mov	r0, r3
 800325c:	f005 fe68 	bl	8008f30 <USB_ReadInterrupts>
 8003260:	4603      	mov	r3, r0
 8003262:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003266:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800326a:	d104      	bne.n	8003276 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003274:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4618      	mov	r0, r3
 800327c:	f005 fe58 	bl	8008f30 <USB_ReadInterrupts>
 8003280:	4603      	mov	r3, r0
 8003282:	f003 0302 	and.w	r3, r3, #2
 8003286:	2b02      	cmp	r3, #2
 8003288:	d103      	bne.n	8003292 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2202      	movs	r2, #2
 8003290:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4618      	mov	r0, r3
 8003298:	f005 fe4a 	bl	8008f30 <USB_ReadInterrupts>
 800329c:	4603      	mov	r3, r0
 800329e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032a6:	d11c      	bne.n	80032e2 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80032b0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0301 	and.w	r3, r3, #1
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d10f      	bne.n	80032e2 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80032c2:	2110      	movs	r1, #16
 80032c4:	6938      	ldr	r0, [r7, #16]
 80032c6:	f005 fd39 	bl	8008d3c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80032ca:	6938      	ldr	r0, [r7, #16]
 80032cc:	f005 fd6a 	bl	8008da4 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2101      	movs	r1, #1
 80032d6:	4618      	mov	r0, r3
 80032d8:	f005 ff40 	bl	800915c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f009 fe8f 	bl	800d000 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4618      	mov	r0, r3
 80032e8:	f005 fe22 	bl	8008f30 <USB_ReadInterrupts>
 80032ec:	4603      	mov	r3, r0
 80032ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032f2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032f6:	d102      	bne.n	80032fe <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f001 f89e 	bl	800443a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4618      	mov	r0, r3
 8003304:	f005 fe14 	bl	8008f30 <USB_ReadInterrupts>
 8003308:	4603      	mov	r3, r0
 800330a:	f003 0308 	and.w	r3, r3, #8
 800330e:	2b08      	cmp	r3, #8
 8003310:	d106      	bne.n	8003320 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f009 fe58 	bl	800cfc8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2208      	movs	r2, #8
 800331e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4618      	mov	r0, r3
 8003326:	f005 fe03 	bl	8008f30 <USB_ReadInterrupts>
 800332a:	4603      	mov	r3, r0
 800332c:	f003 0310 	and.w	r3, r3, #16
 8003330:	2b10      	cmp	r3, #16
 8003332:	d101      	bne.n	8003338 <HAL_HCD_IRQHandler+0x158>
 8003334:	2301      	movs	r3, #1
 8003336:	e000      	b.n	800333a <HAL_HCD_IRQHandler+0x15a>
 8003338:	2300      	movs	r3, #0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d012      	beq.n	8003364 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	699a      	ldr	r2, [r3, #24]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f022 0210 	bic.w	r2, r2, #16
 800334c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 ffa1 	bl	8004296 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	699a      	ldr	r2, [r3, #24]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f042 0210 	orr.w	r2, r2, #16
 8003362:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4618      	mov	r0, r3
 800336a:	f005 fde1 	bl	8008f30 <USB_ReadInterrupts>
 800336e:	4603      	mov	r3, r0
 8003370:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003374:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003378:	d13a      	bne.n	80033f0 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4618      	mov	r0, r3
 8003380:	f006 fa16 	bl	80097b0 <USB_HC_ReadInterrupt>
 8003384:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003386:	2300      	movs	r3, #0
 8003388:	617b      	str	r3, [r7, #20]
 800338a:	e025      	b.n	80033d8 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	f003 030f 	and.w	r3, r3, #15
 8003392:	68ba      	ldr	r2, [r7, #8]
 8003394:	fa22 f303 	lsr.w	r3, r2, r3
 8003398:	f003 0301 	and.w	r3, r3, #1
 800339c:	2b00      	cmp	r3, #0
 800339e:	d018      	beq.n	80033d2 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	015a      	lsls	r2, r3, #5
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	4413      	add	r3, r2
 80033a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033b6:	d106      	bne.n	80033c6 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	4619      	mov	r1, r3
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 f8ab 	bl	800351a <HCD_HC_IN_IRQHandler>
 80033c4:	e005      	b.n	80033d2 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	4619      	mov	r1, r3
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f000 fbf9 	bl	8003bc4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	3301      	adds	r3, #1
 80033d6:	617b      	str	r3, [r7, #20]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	697a      	ldr	r2, [r7, #20]
 80033de:	429a      	cmp	r2, r3
 80033e0:	d3d4      	bcc.n	800338c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033ea:	615a      	str	r2, [r3, #20]
 80033ec:	e000      	b.n	80033f0 <HAL_HCD_IRQHandler+0x210>
      return;
 80033ee:	bf00      	nop
    }
  }
}
 80033f0:	3718      	adds	r7, #24
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}

080033f6 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80033f6:	b580      	push	{r7, lr}
 80033f8:	b082      	sub	sp, #8
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003404:	2b01      	cmp	r3, #1
 8003406:	d101      	bne.n	800340c <HAL_HCD_Start+0x16>
 8003408:	2302      	movs	r3, #2
 800340a:	e013      	b.n	8003434 <HAL_HCD_Start+0x3e>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2101      	movs	r1, #1
 800341a:	4618      	mov	r0, r3
 800341c:	f005 ff02 	bl	8009224 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4618      	mov	r0, r3
 8003426:	f005 fc1a 	bl	8008c5e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003432:	2300      	movs	r3, #0
}
 8003434:	4618      	mov	r0, r3
 8003436:	3708      	adds	r7, #8
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800344a:	2b01      	cmp	r3, #1
 800344c:	d101      	bne.n	8003452 <HAL_HCD_Stop+0x16>
 800344e:	2302      	movs	r3, #2
 8003450:	e00d      	b.n	800346e <HAL_HCD_Stop+0x32>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2201      	movs	r2, #1
 8003456:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4618      	mov	r0, r3
 8003460:	f006 faf0 	bl	8009a44 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	3708      	adds	r7, #8
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}

08003476 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003476:	b580      	push	{r7, lr}
 8003478:	b082      	sub	sp, #8
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4618      	mov	r0, r3
 8003484:	f005 fea4 	bl	80091d0 <USB_ResetPort>
 8003488:	4603      	mov	r3, r0
}
 800348a:	4618      	mov	r0, r3
 800348c:	3708      	adds	r7, #8
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}

08003492 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003492:	b480      	push	{r7}
 8003494:	b083      	sub	sp, #12
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
 800349a:	460b      	mov	r3, r1
 800349c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800349e:	78fb      	ldrb	r3, [r7, #3]
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	212c      	movs	r1, #44	; 0x2c
 80034a4:	fb01 f303 	mul.w	r3, r1, r3
 80034a8:	4413      	add	r3, r2
 80034aa:	3360      	adds	r3, #96	; 0x60
 80034ac:	781b      	ldrb	r3, [r3, #0]
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	370c      	adds	r7, #12
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr

080034ba <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80034ba:	b480      	push	{r7}
 80034bc:	b083      	sub	sp, #12
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
 80034c2:	460b      	mov	r3, r1
 80034c4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80034c6:	78fb      	ldrb	r3, [r7, #3]
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	212c      	movs	r1, #44	; 0x2c
 80034cc:	fb01 f303 	mul.w	r3, r1, r3
 80034d0:	4413      	add	r3, r2
 80034d2:	3350      	adds	r3, #80	; 0x50
 80034d4:	681b      	ldr	r3, [r3, #0]
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	370c      	adds	r7, #12
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr

080034e2 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80034e2:	b580      	push	{r7, lr}
 80034e4:	b082      	sub	sp, #8
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4618      	mov	r0, r3
 80034f0:	f005 fee8 	bl	80092c4 <USB_GetCurrentFrame>
 80034f4:	4603      	mov	r3, r0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3708      	adds	r7, #8
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}

080034fe <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80034fe:	b580      	push	{r7, lr}
 8003500:	b082      	sub	sp, #8
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4618      	mov	r0, r3
 800350c:	f005 fec3 	bl	8009296 <USB_GetHostSpeed>
 8003510:	4603      	mov	r3, r0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3708      	adds	r7, #8
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}

0800351a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800351a:	b580      	push	{r7, lr}
 800351c:	b086      	sub	sp, #24
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
 8003522:	460b      	mov	r3, r1
 8003524:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003530:	78fb      	ldrb	r3, [r7, #3]
 8003532:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	015a      	lsls	r2, r3, #5
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	4413      	add	r3, r2
 800353c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f003 0304 	and.w	r3, r3, #4
 8003546:	2b04      	cmp	r3, #4
 8003548:	d11a      	bne.n	8003580 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	015a      	lsls	r2, r3, #5
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	4413      	add	r3, r2
 8003552:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003556:	461a      	mov	r2, r3
 8003558:	2304      	movs	r3, #4
 800355a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	212c      	movs	r1, #44	; 0x2c
 8003562:	fb01 f303 	mul.w	r3, r1, r3
 8003566:	4413      	add	r3, r2
 8003568:	3361      	adds	r3, #97	; 0x61
 800356a:	2206      	movs	r2, #6
 800356c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	68fa      	ldr	r2, [r7, #12]
 8003574:	b2d2      	uxtb	r2, r2
 8003576:	4611      	mov	r1, r2
 8003578:	4618      	mov	r0, r3
 800357a:	f006 f92a 	bl	80097d2 <USB_HC_Halt>
 800357e:	e0af      	b.n	80036e0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	015a      	lsls	r2, r3, #5
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	4413      	add	r3, r2
 8003588:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003592:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003596:	d11b      	bne.n	80035d0 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	015a      	lsls	r2, r3, #5
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	4413      	add	r3, r2
 80035a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035a4:	461a      	mov	r2, r3
 80035a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035aa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	212c      	movs	r1, #44	; 0x2c
 80035b2:	fb01 f303 	mul.w	r3, r1, r3
 80035b6:	4413      	add	r3, r2
 80035b8:	3361      	adds	r3, #97	; 0x61
 80035ba:	2207      	movs	r2, #7
 80035bc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	68fa      	ldr	r2, [r7, #12]
 80035c4:	b2d2      	uxtb	r2, r2
 80035c6:	4611      	mov	r1, r2
 80035c8:	4618      	mov	r0, r3
 80035ca:	f006 f902 	bl	80097d2 <USB_HC_Halt>
 80035ce:	e087      	b.n	80036e0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	015a      	lsls	r2, r3, #5
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	4413      	add	r3, r2
 80035d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f003 0320 	and.w	r3, r3, #32
 80035e2:	2b20      	cmp	r3, #32
 80035e4:	d109      	bne.n	80035fa <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	015a      	lsls	r2, r3, #5
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	4413      	add	r3, r2
 80035ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035f2:	461a      	mov	r2, r3
 80035f4:	2320      	movs	r3, #32
 80035f6:	6093      	str	r3, [r2, #8]
 80035f8:	e072      	b.n	80036e0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	015a      	lsls	r2, r3, #5
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	4413      	add	r3, r2
 8003602:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f003 0308 	and.w	r3, r3, #8
 800360c:	2b08      	cmp	r3, #8
 800360e:	d11a      	bne.n	8003646 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	015a      	lsls	r2, r3, #5
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	4413      	add	r3, r2
 8003618:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800361c:	461a      	mov	r2, r3
 800361e:	2308      	movs	r3, #8
 8003620:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	212c      	movs	r1, #44	; 0x2c
 8003628:	fb01 f303 	mul.w	r3, r1, r3
 800362c:	4413      	add	r3, r2
 800362e:	3361      	adds	r3, #97	; 0x61
 8003630:	2205      	movs	r2, #5
 8003632:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	68fa      	ldr	r2, [r7, #12]
 800363a:	b2d2      	uxtb	r2, r2
 800363c:	4611      	mov	r1, r2
 800363e:	4618      	mov	r0, r3
 8003640:	f006 f8c7 	bl	80097d2 <USB_HC_Halt>
 8003644:	e04c      	b.n	80036e0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	015a      	lsls	r2, r3, #5
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	4413      	add	r3, r2
 800364e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003658:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800365c:	d11b      	bne.n	8003696 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	015a      	lsls	r2, r3, #5
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	4413      	add	r3, r2
 8003666:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800366a:	461a      	mov	r2, r3
 800366c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003670:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	212c      	movs	r1, #44	; 0x2c
 8003678:	fb01 f303 	mul.w	r3, r1, r3
 800367c:	4413      	add	r3, r2
 800367e:	3361      	adds	r3, #97	; 0x61
 8003680:	2208      	movs	r2, #8
 8003682:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	b2d2      	uxtb	r2, r2
 800368c:	4611      	mov	r1, r2
 800368e:	4618      	mov	r0, r3
 8003690:	f006 f89f 	bl	80097d2 <USB_HC_Halt>
 8003694:	e024      	b.n	80036e0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	015a      	lsls	r2, r3, #5
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	4413      	add	r3, r2
 800369e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036a8:	2b80      	cmp	r3, #128	; 0x80
 80036aa:	d119      	bne.n	80036e0 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	015a      	lsls	r2, r3, #5
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	4413      	add	r3, r2
 80036b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036b8:	461a      	mov	r2, r3
 80036ba:	2380      	movs	r3, #128	; 0x80
 80036bc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	212c      	movs	r1, #44	; 0x2c
 80036c4:	fb01 f303 	mul.w	r3, r1, r3
 80036c8:	4413      	add	r3, r2
 80036ca:	3361      	adds	r3, #97	; 0x61
 80036cc:	2206      	movs	r2, #6
 80036ce:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	68fa      	ldr	r2, [r7, #12]
 80036d6:	b2d2      	uxtb	r2, r2
 80036d8:	4611      	mov	r1, r2
 80036da:	4618      	mov	r0, r3
 80036dc:	f006 f879 	bl	80097d2 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	015a      	lsls	r2, r3, #5
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	4413      	add	r3, r2
 80036e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036f6:	d112      	bne.n	800371e <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	68fa      	ldr	r2, [r7, #12]
 80036fe:	b2d2      	uxtb	r2, r2
 8003700:	4611      	mov	r1, r2
 8003702:	4618      	mov	r0, r3
 8003704:	f006 f865 	bl	80097d2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	015a      	lsls	r2, r3, #5
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	4413      	add	r3, r2
 8003710:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003714:	461a      	mov	r2, r3
 8003716:	f44f 7300 	mov.w	r3, #512	; 0x200
 800371a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800371c:	e24e      	b.n	8003bbc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	015a      	lsls	r2, r3, #5
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	4413      	add	r3, r2
 8003726:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	f003 0301 	and.w	r3, r3, #1
 8003730:	2b01      	cmp	r3, #1
 8003732:	f040 80df 	bne.w	80038f4 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	691b      	ldr	r3, [r3, #16]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d019      	beq.n	8003772 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	212c      	movs	r1, #44	; 0x2c
 8003744:	fb01 f303 	mul.w	r3, r1, r3
 8003748:	4413      	add	r3, r2
 800374a:	3348      	adds	r3, #72	; 0x48
 800374c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	0159      	lsls	r1, r3, #5
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	440b      	add	r3, r1
 8003756:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800375a:	691b      	ldr	r3, [r3, #16]
 800375c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003760:	1ad2      	subs	r2, r2, r3
 8003762:	6879      	ldr	r1, [r7, #4]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	202c      	movs	r0, #44	; 0x2c
 8003768:	fb00 f303 	mul.w	r3, r0, r3
 800376c:	440b      	add	r3, r1
 800376e:	3350      	adds	r3, #80	; 0x50
 8003770:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	212c      	movs	r1, #44	; 0x2c
 8003778:	fb01 f303 	mul.w	r3, r1, r3
 800377c:	4413      	add	r3, r2
 800377e:	3361      	adds	r3, #97	; 0x61
 8003780:	2201      	movs	r2, #1
 8003782:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	212c      	movs	r1, #44	; 0x2c
 800378a:	fb01 f303 	mul.w	r3, r1, r3
 800378e:	4413      	add	r3, r2
 8003790:	335c      	adds	r3, #92	; 0x5c
 8003792:	2200      	movs	r2, #0
 8003794:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	015a      	lsls	r2, r3, #5
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	4413      	add	r3, r2
 800379e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037a2:	461a      	mov	r2, r3
 80037a4:	2301      	movs	r3, #1
 80037a6:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	212c      	movs	r1, #44	; 0x2c
 80037ae:	fb01 f303 	mul.w	r3, r1, r3
 80037b2:	4413      	add	r3, r2
 80037b4:	333f      	adds	r3, #63	; 0x3f
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d009      	beq.n	80037d0 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	212c      	movs	r1, #44	; 0x2c
 80037c2:	fb01 f303 	mul.w	r3, r1, r3
 80037c6:	4413      	add	r3, r2
 80037c8:	333f      	adds	r3, #63	; 0x3f
 80037ca:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d111      	bne.n	80037f4 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	68fa      	ldr	r2, [r7, #12]
 80037d6:	b2d2      	uxtb	r2, r2
 80037d8:	4611      	mov	r1, r2
 80037da:	4618      	mov	r0, r3
 80037dc:	f005 fff9 	bl	80097d2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	015a      	lsls	r2, r3, #5
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	4413      	add	r3, r2
 80037e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037ec:	461a      	mov	r2, r3
 80037ee:	2310      	movs	r3, #16
 80037f0:	6093      	str	r3, [r2, #8]
 80037f2:	e03a      	b.n	800386a <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	212c      	movs	r1, #44	; 0x2c
 80037fa:	fb01 f303 	mul.w	r3, r1, r3
 80037fe:	4413      	add	r3, r2
 8003800:	333f      	adds	r3, #63	; 0x3f
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	2b03      	cmp	r3, #3
 8003806:	d009      	beq.n	800381c <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	212c      	movs	r1, #44	; 0x2c
 800380e:	fb01 f303 	mul.w	r3, r1, r3
 8003812:	4413      	add	r3, r2
 8003814:	333f      	adds	r3, #63	; 0x3f
 8003816:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003818:	2b01      	cmp	r3, #1
 800381a:	d126      	bne.n	800386a <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	015a      	lsls	r2, r3, #5
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	4413      	add	r3, r2
 8003824:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	68fa      	ldr	r2, [r7, #12]
 800382c:	0151      	lsls	r1, r2, #5
 800382e:	693a      	ldr	r2, [r7, #16]
 8003830:	440a      	add	r2, r1
 8003832:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003836:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800383a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	212c      	movs	r1, #44	; 0x2c
 8003842:	fb01 f303 	mul.w	r3, r1, r3
 8003846:	4413      	add	r3, r2
 8003848:	3360      	adds	r3, #96	; 0x60
 800384a:	2201      	movs	r2, #1
 800384c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	b2d9      	uxtb	r1, r3
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	202c      	movs	r0, #44	; 0x2c
 8003858:	fb00 f303 	mul.w	r3, r0, r3
 800385c:	4413      	add	r3, r2
 800385e:	3360      	adds	r3, #96	; 0x60
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	461a      	mov	r2, r3
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f009 fbd9 	bl	800d01c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	2b01      	cmp	r3, #1
 8003870:	d12b      	bne.n	80038ca <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	212c      	movs	r1, #44	; 0x2c
 8003878:	fb01 f303 	mul.w	r3, r1, r3
 800387c:	4413      	add	r3, r2
 800387e:	3348      	adds	r3, #72	; 0x48
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	6879      	ldr	r1, [r7, #4]
 8003884:	68fa      	ldr	r2, [r7, #12]
 8003886:	202c      	movs	r0, #44	; 0x2c
 8003888:	fb00 f202 	mul.w	r2, r0, r2
 800388c:	440a      	add	r2, r1
 800388e:	3240      	adds	r2, #64	; 0x40
 8003890:	8812      	ldrh	r2, [r2, #0]
 8003892:	fbb3 f3f2 	udiv	r3, r3, r2
 8003896:	f003 0301 	and.w	r3, r3, #1
 800389a:	2b00      	cmp	r3, #0
 800389c:	f000 818e 	beq.w	8003bbc <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	212c      	movs	r1, #44	; 0x2c
 80038a6:	fb01 f303 	mul.w	r3, r1, r3
 80038aa:	4413      	add	r3, r2
 80038ac:	3354      	adds	r3, #84	; 0x54
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	f083 0301 	eor.w	r3, r3, #1
 80038b4:	b2d8      	uxtb	r0, r3
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	212c      	movs	r1, #44	; 0x2c
 80038bc:	fb01 f303 	mul.w	r3, r1, r3
 80038c0:	4413      	add	r3, r2
 80038c2:	3354      	adds	r3, #84	; 0x54
 80038c4:	4602      	mov	r2, r0
 80038c6:	701a      	strb	r2, [r3, #0]
}
 80038c8:	e178      	b.n	8003bbc <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	212c      	movs	r1, #44	; 0x2c
 80038d0:	fb01 f303 	mul.w	r3, r1, r3
 80038d4:	4413      	add	r3, r2
 80038d6:	3354      	adds	r3, #84	; 0x54
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	f083 0301 	eor.w	r3, r3, #1
 80038de:	b2d8      	uxtb	r0, r3
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	212c      	movs	r1, #44	; 0x2c
 80038e6:	fb01 f303 	mul.w	r3, r1, r3
 80038ea:	4413      	add	r3, r2
 80038ec:	3354      	adds	r3, #84	; 0x54
 80038ee:	4602      	mov	r2, r0
 80038f0:	701a      	strb	r2, [r3, #0]
}
 80038f2:	e163      	b.n	8003bbc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	015a      	lsls	r2, r3, #5
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	4413      	add	r3, r2
 80038fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f003 0302 	and.w	r3, r3, #2
 8003906:	2b02      	cmp	r3, #2
 8003908:	f040 80f6 	bne.w	8003af8 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	212c      	movs	r1, #44	; 0x2c
 8003912:	fb01 f303 	mul.w	r3, r1, r3
 8003916:	4413      	add	r3, r2
 8003918:	3361      	adds	r3, #97	; 0x61
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	2b01      	cmp	r3, #1
 800391e:	d109      	bne.n	8003934 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	212c      	movs	r1, #44	; 0x2c
 8003926:	fb01 f303 	mul.w	r3, r1, r3
 800392a:	4413      	add	r3, r2
 800392c:	3360      	adds	r3, #96	; 0x60
 800392e:	2201      	movs	r2, #1
 8003930:	701a      	strb	r2, [r3, #0]
 8003932:	e0c9      	b.n	8003ac8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	212c      	movs	r1, #44	; 0x2c
 800393a:	fb01 f303 	mul.w	r3, r1, r3
 800393e:	4413      	add	r3, r2
 8003940:	3361      	adds	r3, #97	; 0x61
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	2b05      	cmp	r3, #5
 8003946:	d109      	bne.n	800395c <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	212c      	movs	r1, #44	; 0x2c
 800394e:	fb01 f303 	mul.w	r3, r1, r3
 8003952:	4413      	add	r3, r2
 8003954:	3360      	adds	r3, #96	; 0x60
 8003956:	2205      	movs	r2, #5
 8003958:	701a      	strb	r2, [r3, #0]
 800395a:	e0b5      	b.n	8003ac8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	212c      	movs	r1, #44	; 0x2c
 8003962:	fb01 f303 	mul.w	r3, r1, r3
 8003966:	4413      	add	r3, r2
 8003968:	3361      	adds	r3, #97	; 0x61
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	2b06      	cmp	r3, #6
 800396e:	d009      	beq.n	8003984 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	212c      	movs	r1, #44	; 0x2c
 8003976:	fb01 f303 	mul.w	r3, r1, r3
 800397a:	4413      	add	r3, r2
 800397c:	3361      	adds	r3, #97	; 0x61
 800397e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003980:	2b08      	cmp	r3, #8
 8003982:	d150      	bne.n	8003a26 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	212c      	movs	r1, #44	; 0x2c
 800398a:	fb01 f303 	mul.w	r3, r1, r3
 800398e:	4413      	add	r3, r2
 8003990:	335c      	adds	r3, #92	; 0x5c
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	1c5a      	adds	r2, r3, #1
 8003996:	6879      	ldr	r1, [r7, #4]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	202c      	movs	r0, #44	; 0x2c
 800399c:	fb00 f303 	mul.w	r3, r0, r3
 80039a0:	440b      	add	r3, r1
 80039a2:	335c      	adds	r3, #92	; 0x5c
 80039a4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	212c      	movs	r1, #44	; 0x2c
 80039ac:	fb01 f303 	mul.w	r3, r1, r3
 80039b0:	4413      	add	r3, r2
 80039b2:	335c      	adds	r3, #92	; 0x5c
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d912      	bls.n	80039e0 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	212c      	movs	r1, #44	; 0x2c
 80039c0:	fb01 f303 	mul.w	r3, r1, r3
 80039c4:	4413      	add	r3, r2
 80039c6:	335c      	adds	r3, #92	; 0x5c
 80039c8:	2200      	movs	r2, #0
 80039ca:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	212c      	movs	r1, #44	; 0x2c
 80039d2:	fb01 f303 	mul.w	r3, r1, r3
 80039d6:	4413      	add	r3, r2
 80039d8:	3360      	adds	r3, #96	; 0x60
 80039da:	2204      	movs	r2, #4
 80039dc:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80039de:	e073      	b.n	8003ac8 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	212c      	movs	r1, #44	; 0x2c
 80039e6:	fb01 f303 	mul.w	r3, r1, r3
 80039ea:	4413      	add	r3, r2
 80039ec:	3360      	adds	r3, #96	; 0x60
 80039ee:	2202      	movs	r2, #2
 80039f0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	015a      	lsls	r2, r3, #5
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	4413      	add	r3, r2
 80039fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003a08:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003a10:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	015a      	lsls	r2, r3, #5
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	4413      	add	r3, r2
 8003a1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a1e:	461a      	mov	r2, r3
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003a24:	e050      	b.n	8003ac8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	212c      	movs	r1, #44	; 0x2c
 8003a2c:	fb01 f303 	mul.w	r3, r1, r3
 8003a30:	4413      	add	r3, r2
 8003a32:	3361      	adds	r3, #97	; 0x61
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	2b03      	cmp	r3, #3
 8003a38:	d122      	bne.n	8003a80 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	212c      	movs	r1, #44	; 0x2c
 8003a40:	fb01 f303 	mul.w	r3, r1, r3
 8003a44:	4413      	add	r3, r2
 8003a46:	3360      	adds	r3, #96	; 0x60
 8003a48:	2202      	movs	r2, #2
 8003a4a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	015a      	lsls	r2, r3, #5
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	4413      	add	r3, r2
 8003a54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003a62:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003a6a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	015a      	lsls	r2, r3, #5
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	4413      	add	r3, r2
 8003a74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a78:	461a      	mov	r2, r3
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	6013      	str	r3, [r2, #0]
 8003a7e:	e023      	b.n	8003ac8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	212c      	movs	r1, #44	; 0x2c
 8003a86:	fb01 f303 	mul.w	r3, r1, r3
 8003a8a:	4413      	add	r3, r2
 8003a8c:	3361      	adds	r3, #97	; 0x61
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	2b07      	cmp	r3, #7
 8003a92:	d119      	bne.n	8003ac8 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	212c      	movs	r1, #44	; 0x2c
 8003a9a:	fb01 f303 	mul.w	r3, r1, r3
 8003a9e:	4413      	add	r3, r2
 8003aa0:	335c      	adds	r3, #92	; 0x5c
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	1c5a      	adds	r2, r3, #1
 8003aa6:	6879      	ldr	r1, [r7, #4]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	202c      	movs	r0, #44	; 0x2c
 8003aac:	fb00 f303 	mul.w	r3, r0, r3
 8003ab0:	440b      	add	r3, r1
 8003ab2:	335c      	adds	r3, #92	; 0x5c
 8003ab4:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	212c      	movs	r1, #44	; 0x2c
 8003abc:	fb01 f303 	mul.w	r3, r1, r3
 8003ac0:	4413      	add	r3, r2
 8003ac2:	3360      	adds	r3, #96	; 0x60
 8003ac4:	2204      	movs	r2, #4
 8003ac6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	015a      	lsls	r2, r3, #5
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	4413      	add	r3, r2
 8003ad0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	2302      	movs	r3, #2
 8003ad8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	b2d9      	uxtb	r1, r3
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	202c      	movs	r0, #44	; 0x2c
 8003ae4:	fb00 f303 	mul.w	r3, r0, r3
 8003ae8:	4413      	add	r3, r2
 8003aea:	3360      	adds	r3, #96	; 0x60
 8003aec:	781b      	ldrb	r3, [r3, #0]
 8003aee:	461a      	mov	r2, r3
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f009 fa93 	bl	800d01c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003af6:	e061      	b.n	8003bbc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	015a      	lsls	r2, r3, #5
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	4413      	add	r3, r2
 8003b00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f003 0310 	and.w	r3, r3, #16
 8003b0a:	2b10      	cmp	r3, #16
 8003b0c:	d156      	bne.n	8003bbc <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	212c      	movs	r1, #44	; 0x2c
 8003b14:	fb01 f303 	mul.w	r3, r1, r3
 8003b18:	4413      	add	r3, r2
 8003b1a:	333f      	adds	r3, #63	; 0x3f
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	2b03      	cmp	r3, #3
 8003b20:	d111      	bne.n	8003b46 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	212c      	movs	r1, #44	; 0x2c
 8003b28:	fb01 f303 	mul.w	r3, r1, r3
 8003b2c:	4413      	add	r3, r2
 8003b2e:	335c      	adds	r3, #92	; 0x5c
 8003b30:	2200      	movs	r2, #0
 8003b32:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	68fa      	ldr	r2, [r7, #12]
 8003b3a:	b2d2      	uxtb	r2, r2
 8003b3c:	4611      	mov	r1, r2
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f005 fe47 	bl	80097d2 <USB_HC_Halt>
 8003b44:	e031      	b.n	8003baa <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	212c      	movs	r1, #44	; 0x2c
 8003b4c:	fb01 f303 	mul.w	r3, r1, r3
 8003b50:	4413      	add	r3, r2
 8003b52:	333f      	adds	r3, #63	; 0x3f
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d009      	beq.n	8003b6e <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	212c      	movs	r1, #44	; 0x2c
 8003b60:	fb01 f303 	mul.w	r3, r1, r3
 8003b64:	4413      	add	r3, r2
 8003b66:	333f      	adds	r3, #63	; 0x3f
 8003b68:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d11d      	bne.n	8003baa <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	212c      	movs	r1, #44	; 0x2c
 8003b74:	fb01 f303 	mul.w	r3, r1, r3
 8003b78:	4413      	add	r3, r2
 8003b7a:	335c      	adds	r3, #92	; 0x5c
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	691b      	ldr	r3, [r3, #16]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d110      	bne.n	8003baa <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	212c      	movs	r1, #44	; 0x2c
 8003b8e:	fb01 f303 	mul.w	r3, r1, r3
 8003b92:	4413      	add	r3, r2
 8003b94:	3361      	adds	r3, #97	; 0x61
 8003b96:	2203      	movs	r2, #3
 8003b98:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68fa      	ldr	r2, [r7, #12]
 8003ba0:	b2d2      	uxtb	r2, r2
 8003ba2:	4611      	mov	r1, r2
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f005 fe14 	bl	80097d2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	015a      	lsls	r2, r3, #5
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	2310      	movs	r3, #16
 8003bba:	6093      	str	r3, [r2, #8]
}
 8003bbc:	bf00      	nop
 8003bbe:	3718      	adds	r7, #24
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}

08003bc4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b088      	sub	sp, #32
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	460b      	mov	r3, r1
 8003bce:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003bda:	78fb      	ldrb	r3, [r7, #3]
 8003bdc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	015a      	lsls	r2, r3, #5
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	4413      	add	r3, r2
 8003be6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	f003 0304 	and.w	r3, r3, #4
 8003bf0:	2b04      	cmp	r3, #4
 8003bf2:	d11a      	bne.n	8003c2a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	015a      	lsls	r2, r3, #5
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c00:	461a      	mov	r2, r3
 8003c02:	2304      	movs	r3, #4
 8003c04:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	212c      	movs	r1, #44	; 0x2c
 8003c0c:	fb01 f303 	mul.w	r3, r1, r3
 8003c10:	4413      	add	r3, r2
 8003c12:	3361      	adds	r3, #97	; 0x61
 8003c14:	2206      	movs	r2, #6
 8003c16:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	697a      	ldr	r2, [r7, #20]
 8003c1e:	b2d2      	uxtb	r2, r2
 8003c20:	4611      	mov	r1, r2
 8003c22:	4618      	mov	r0, r3
 8003c24:	f005 fdd5 	bl	80097d2 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8003c28:	e331      	b.n	800428e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	015a      	lsls	r2, r3, #5
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	4413      	add	r3, r2
 8003c32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	f003 0320 	and.w	r3, r3, #32
 8003c3c:	2b20      	cmp	r3, #32
 8003c3e:	d12e      	bne.n	8003c9e <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	015a      	lsls	r2, r3, #5
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	4413      	add	r3, r2
 8003c48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	2320      	movs	r3, #32
 8003c50:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	212c      	movs	r1, #44	; 0x2c
 8003c58:	fb01 f303 	mul.w	r3, r1, r3
 8003c5c:	4413      	add	r3, r2
 8003c5e:	333d      	adds	r3, #61	; 0x3d
 8003c60:	781b      	ldrb	r3, [r3, #0]
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	f040 8313 	bne.w	800428e <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	212c      	movs	r1, #44	; 0x2c
 8003c6e:	fb01 f303 	mul.w	r3, r1, r3
 8003c72:	4413      	add	r3, r2
 8003c74:	333d      	adds	r3, #61	; 0x3d
 8003c76:	2200      	movs	r2, #0
 8003c78:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	212c      	movs	r1, #44	; 0x2c
 8003c80:	fb01 f303 	mul.w	r3, r1, r3
 8003c84:	4413      	add	r3, r2
 8003c86:	3360      	adds	r3, #96	; 0x60
 8003c88:	2202      	movs	r2, #2
 8003c8a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	697a      	ldr	r2, [r7, #20]
 8003c92:	b2d2      	uxtb	r2, r2
 8003c94:	4611      	mov	r1, r2
 8003c96:	4618      	mov	r0, r3
 8003c98:	f005 fd9b 	bl	80097d2 <USB_HC_Halt>
}
 8003c9c:	e2f7      	b.n	800428e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	015a      	lsls	r2, r3, #5
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cb4:	d112      	bne.n	8003cdc <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	015a      	lsls	r2, r3, #5
 8003cba:	69bb      	ldr	r3, [r7, #24]
 8003cbc:	4413      	add	r3, r2
 8003cbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003cc8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	697a      	ldr	r2, [r7, #20]
 8003cd0:	b2d2      	uxtb	r2, r2
 8003cd2:	4611      	mov	r1, r2
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f005 fd7c 	bl	80097d2 <USB_HC_Halt>
}
 8003cda:	e2d8      	b.n	800428e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	015a      	lsls	r2, r3, #5
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	4413      	add	r3, r2
 8003ce4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	f003 0301 	and.w	r3, r3, #1
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d140      	bne.n	8003d74 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	212c      	movs	r1, #44	; 0x2c
 8003cf8:	fb01 f303 	mul.w	r3, r1, r3
 8003cfc:	4413      	add	r3, r2
 8003cfe:	335c      	adds	r3, #92	; 0x5c
 8003d00:	2200      	movs	r2, #0
 8003d02:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	015a      	lsls	r2, r3, #5
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d16:	2b40      	cmp	r3, #64	; 0x40
 8003d18:	d111      	bne.n	8003d3e <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	212c      	movs	r1, #44	; 0x2c
 8003d20:	fb01 f303 	mul.w	r3, r1, r3
 8003d24:	4413      	add	r3, r2
 8003d26:	333d      	adds	r3, #61	; 0x3d
 8003d28:	2201      	movs	r2, #1
 8003d2a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	015a      	lsls	r2, r3, #5
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	4413      	add	r3, r2
 8003d34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d38:	461a      	mov	r2, r3
 8003d3a:	2340      	movs	r3, #64	; 0x40
 8003d3c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	015a      	lsls	r2, r3, #5
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	4413      	add	r3, r2
 8003d46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	212c      	movs	r1, #44	; 0x2c
 8003d56:	fb01 f303 	mul.w	r3, r1, r3
 8003d5a:	4413      	add	r3, r2
 8003d5c:	3361      	adds	r3, #97	; 0x61
 8003d5e:	2201      	movs	r2, #1
 8003d60:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	697a      	ldr	r2, [r7, #20]
 8003d68:	b2d2      	uxtb	r2, r2
 8003d6a:	4611      	mov	r1, r2
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f005 fd30 	bl	80097d2 <USB_HC_Halt>
}
 8003d72:	e28c      	b.n	800428e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	015a      	lsls	r2, r3, #5
 8003d78:	69bb      	ldr	r3, [r7, #24]
 8003d7a:	4413      	add	r3, r2
 8003d7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d86:	2b40      	cmp	r3, #64	; 0x40
 8003d88:	d12c      	bne.n	8003de4 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	212c      	movs	r1, #44	; 0x2c
 8003d90:	fb01 f303 	mul.w	r3, r1, r3
 8003d94:	4413      	add	r3, r2
 8003d96:	3361      	adds	r3, #97	; 0x61
 8003d98:	2204      	movs	r2, #4
 8003d9a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	212c      	movs	r1, #44	; 0x2c
 8003da2:	fb01 f303 	mul.w	r3, r1, r3
 8003da6:	4413      	add	r3, r2
 8003da8:	333d      	adds	r3, #61	; 0x3d
 8003daa:	2201      	movs	r2, #1
 8003dac:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	212c      	movs	r1, #44	; 0x2c
 8003db4:	fb01 f303 	mul.w	r3, r1, r3
 8003db8:	4413      	add	r3, r2
 8003dba:	335c      	adds	r3, #92	; 0x5c
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	697a      	ldr	r2, [r7, #20]
 8003dc6:	b2d2      	uxtb	r2, r2
 8003dc8:	4611      	mov	r1, r2
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f005 fd01 	bl	80097d2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	015a      	lsls	r2, r3, #5
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	4413      	add	r3, r2
 8003dd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ddc:	461a      	mov	r2, r3
 8003dde:	2340      	movs	r3, #64	; 0x40
 8003de0:	6093      	str	r3, [r2, #8]
}
 8003de2:	e254      	b.n	800428e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	015a      	lsls	r2, r3, #5
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	4413      	add	r3, r2
 8003dec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f003 0308 	and.w	r3, r3, #8
 8003df6:	2b08      	cmp	r3, #8
 8003df8:	d11a      	bne.n	8003e30 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	015a      	lsls	r2, r3, #5
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	4413      	add	r3, r2
 8003e02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e06:	461a      	mov	r2, r3
 8003e08:	2308      	movs	r3, #8
 8003e0a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	212c      	movs	r1, #44	; 0x2c
 8003e12:	fb01 f303 	mul.w	r3, r1, r3
 8003e16:	4413      	add	r3, r2
 8003e18:	3361      	adds	r3, #97	; 0x61
 8003e1a:	2205      	movs	r2, #5
 8003e1c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	697a      	ldr	r2, [r7, #20]
 8003e24:	b2d2      	uxtb	r2, r2
 8003e26:	4611      	mov	r1, r2
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f005 fcd2 	bl	80097d2 <USB_HC_Halt>
}
 8003e2e:	e22e      	b.n	800428e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	015a      	lsls	r2, r3, #5
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	4413      	add	r3, r2
 8003e38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	f003 0310 	and.w	r3, r3, #16
 8003e42:	2b10      	cmp	r3, #16
 8003e44:	d140      	bne.n	8003ec8 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	212c      	movs	r1, #44	; 0x2c
 8003e4c:	fb01 f303 	mul.w	r3, r1, r3
 8003e50:	4413      	add	r3, r2
 8003e52:	335c      	adds	r3, #92	; 0x5c
 8003e54:	2200      	movs	r2, #0
 8003e56:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	212c      	movs	r1, #44	; 0x2c
 8003e5e:	fb01 f303 	mul.w	r3, r1, r3
 8003e62:	4413      	add	r3, r2
 8003e64:	3361      	adds	r3, #97	; 0x61
 8003e66:	2203      	movs	r2, #3
 8003e68:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	212c      	movs	r1, #44	; 0x2c
 8003e70:	fb01 f303 	mul.w	r3, r1, r3
 8003e74:	4413      	add	r3, r2
 8003e76:	333d      	adds	r3, #61	; 0x3d
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d112      	bne.n	8003ea4 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	212c      	movs	r1, #44	; 0x2c
 8003e84:	fb01 f303 	mul.w	r3, r1, r3
 8003e88:	4413      	add	r3, r2
 8003e8a:	333c      	adds	r3, #60	; 0x3c
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d108      	bne.n	8003ea4 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	212c      	movs	r1, #44	; 0x2c
 8003e98:	fb01 f303 	mul.w	r3, r1, r3
 8003e9c:	4413      	add	r3, r2
 8003e9e:	333d      	adds	r3, #61	; 0x3d
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	697a      	ldr	r2, [r7, #20]
 8003eaa:	b2d2      	uxtb	r2, r2
 8003eac:	4611      	mov	r1, r2
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f005 fc8f 	bl	80097d2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	015a      	lsls	r2, r3, #5
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	4413      	add	r3, r2
 8003ebc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	2310      	movs	r3, #16
 8003ec4:	6093      	str	r3, [r2, #8]
}
 8003ec6:	e1e2      	b.n	800428e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	015a      	lsls	r2, r3, #5
 8003ecc:	69bb      	ldr	r3, [r7, #24]
 8003ece:	4413      	add	r3, r2
 8003ed0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eda:	2b80      	cmp	r3, #128	; 0x80
 8003edc:	d164      	bne.n	8003fa8 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	691b      	ldr	r3, [r3, #16]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d111      	bne.n	8003f0a <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	212c      	movs	r1, #44	; 0x2c
 8003eec:	fb01 f303 	mul.w	r3, r1, r3
 8003ef0:	4413      	add	r3, r2
 8003ef2:	3361      	adds	r3, #97	; 0x61
 8003ef4:	2206      	movs	r2, #6
 8003ef6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	697a      	ldr	r2, [r7, #20]
 8003efe:	b2d2      	uxtb	r2, r2
 8003f00:	4611      	mov	r1, r2
 8003f02:	4618      	mov	r0, r3
 8003f04:	f005 fc65 	bl	80097d2 <USB_HC_Halt>
 8003f08:	e044      	b.n	8003f94 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	212c      	movs	r1, #44	; 0x2c
 8003f10:	fb01 f303 	mul.w	r3, r1, r3
 8003f14:	4413      	add	r3, r2
 8003f16:	335c      	adds	r3, #92	; 0x5c
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	1c5a      	adds	r2, r3, #1
 8003f1c:	6879      	ldr	r1, [r7, #4]
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	202c      	movs	r0, #44	; 0x2c
 8003f22:	fb00 f303 	mul.w	r3, r0, r3
 8003f26:	440b      	add	r3, r1
 8003f28:	335c      	adds	r3, #92	; 0x5c
 8003f2a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	212c      	movs	r1, #44	; 0x2c
 8003f32:	fb01 f303 	mul.w	r3, r1, r3
 8003f36:	4413      	add	r3, r2
 8003f38:	335c      	adds	r3, #92	; 0x5c
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d920      	bls.n	8003f82 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	212c      	movs	r1, #44	; 0x2c
 8003f46:	fb01 f303 	mul.w	r3, r1, r3
 8003f4a:	4413      	add	r3, r2
 8003f4c:	335c      	adds	r3, #92	; 0x5c
 8003f4e:	2200      	movs	r2, #0
 8003f50:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	212c      	movs	r1, #44	; 0x2c
 8003f58:	fb01 f303 	mul.w	r3, r1, r3
 8003f5c:	4413      	add	r3, r2
 8003f5e:	3360      	adds	r3, #96	; 0x60
 8003f60:	2204      	movs	r2, #4
 8003f62:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	b2d9      	uxtb	r1, r3
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	202c      	movs	r0, #44	; 0x2c
 8003f6e:	fb00 f303 	mul.w	r3, r0, r3
 8003f72:	4413      	add	r3, r2
 8003f74:	3360      	adds	r3, #96	; 0x60
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	461a      	mov	r2, r3
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f009 f84e 	bl	800d01c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003f80:	e008      	b.n	8003f94 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	212c      	movs	r1, #44	; 0x2c
 8003f88:	fb01 f303 	mul.w	r3, r1, r3
 8003f8c:	4413      	add	r3, r2
 8003f8e:	3360      	adds	r3, #96	; 0x60
 8003f90:	2202      	movs	r2, #2
 8003f92:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	015a      	lsls	r2, r3, #5
 8003f98:	69bb      	ldr	r3, [r7, #24]
 8003f9a:	4413      	add	r3, r2
 8003f9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	2380      	movs	r3, #128	; 0x80
 8003fa4:	6093      	str	r3, [r2, #8]
}
 8003fa6:	e172      	b.n	800428e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	015a      	lsls	r2, r3, #5
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	4413      	add	r3, r2
 8003fb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fbe:	d11b      	bne.n	8003ff8 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	212c      	movs	r1, #44	; 0x2c
 8003fc6:	fb01 f303 	mul.w	r3, r1, r3
 8003fca:	4413      	add	r3, r2
 8003fcc:	3361      	adds	r3, #97	; 0x61
 8003fce:	2208      	movs	r2, #8
 8003fd0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	697a      	ldr	r2, [r7, #20]
 8003fd8:	b2d2      	uxtb	r2, r2
 8003fda:	4611      	mov	r1, r2
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f005 fbf8 	bl	80097d2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	015a      	lsls	r2, r3, #5
 8003fe6:	69bb      	ldr	r3, [r7, #24]
 8003fe8:	4413      	add	r3, r2
 8003fea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fee:	461a      	mov	r2, r3
 8003ff0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ff4:	6093      	str	r3, [r2, #8]
}
 8003ff6:	e14a      	b.n	800428e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	015a      	lsls	r2, r3, #5
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	4413      	add	r3, r2
 8004000:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	f003 0302 	and.w	r3, r3, #2
 800400a:	2b02      	cmp	r3, #2
 800400c:	f040 813f 	bne.w	800428e <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	212c      	movs	r1, #44	; 0x2c
 8004016:	fb01 f303 	mul.w	r3, r1, r3
 800401a:	4413      	add	r3, r2
 800401c:	3361      	adds	r3, #97	; 0x61
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	2b01      	cmp	r3, #1
 8004022:	d17d      	bne.n	8004120 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	212c      	movs	r1, #44	; 0x2c
 800402a:	fb01 f303 	mul.w	r3, r1, r3
 800402e:	4413      	add	r3, r2
 8004030:	3360      	adds	r3, #96	; 0x60
 8004032:	2201      	movs	r2, #1
 8004034:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	212c      	movs	r1, #44	; 0x2c
 800403c:	fb01 f303 	mul.w	r3, r1, r3
 8004040:	4413      	add	r3, r2
 8004042:	333f      	adds	r3, #63	; 0x3f
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	2b02      	cmp	r3, #2
 8004048:	d00a      	beq.n	8004060 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	212c      	movs	r1, #44	; 0x2c
 8004050:	fb01 f303 	mul.w	r3, r1, r3
 8004054:	4413      	add	r3, r2
 8004056:	333f      	adds	r3, #63	; 0x3f
 8004058:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800405a:	2b03      	cmp	r3, #3
 800405c:	f040 8100 	bne.w	8004260 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	691b      	ldr	r3, [r3, #16]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d113      	bne.n	8004090 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	212c      	movs	r1, #44	; 0x2c
 800406e:	fb01 f303 	mul.w	r3, r1, r3
 8004072:	4413      	add	r3, r2
 8004074:	3355      	adds	r3, #85	; 0x55
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	f083 0301 	eor.w	r3, r3, #1
 800407c:	b2d8      	uxtb	r0, r3
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	212c      	movs	r1, #44	; 0x2c
 8004084:	fb01 f303 	mul.w	r3, r1, r3
 8004088:	4413      	add	r3, r2
 800408a:	3355      	adds	r3, #85	; 0x55
 800408c:	4602      	mov	r2, r0
 800408e:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	691b      	ldr	r3, [r3, #16]
 8004094:	2b01      	cmp	r3, #1
 8004096:	f040 80e3 	bne.w	8004260 <HCD_HC_OUT_IRQHandler+0x69c>
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	212c      	movs	r1, #44	; 0x2c
 80040a0:	fb01 f303 	mul.w	r3, r1, r3
 80040a4:	4413      	add	r3, r2
 80040a6:	334c      	adds	r3, #76	; 0x4c
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	f000 80d8 	beq.w	8004260 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	212c      	movs	r1, #44	; 0x2c
 80040b6:	fb01 f303 	mul.w	r3, r1, r3
 80040ba:	4413      	add	r3, r2
 80040bc:	334c      	adds	r3, #76	; 0x4c
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	6879      	ldr	r1, [r7, #4]
 80040c2:	697a      	ldr	r2, [r7, #20]
 80040c4:	202c      	movs	r0, #44	; 0x2c
 80040c6:	fb00 f202 	mul.w	r2, r0, r2
 80040ca:	440a      	add	r2, r1
 80040cc:	3240      	adds	r2, #64	; 0x40
 80040ce:	8812      	ldrh	r2, [r2, #0]
 80040d0:	4413      	add	r3, r2
 80040d2:	3b01      	subs	r3, #1
 80040d4:	6879      	ldr	r1, [r7, #4]
 80040d6:	697a      	ldr	r2, [r7, #20]
 80040d8:	202c      	movs	r0, #44	; 0x2c
 80040da:	fb00 f202 	mul.w	r2, r0, r2
 80040de:	440a      	add	r2, r1
 80040e0:	3240      	adds	r2, #64	; 0x40
 80040e2:	8812      	ldrh	r2, [r2, #0]
 80040e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80040e8:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f003 0301 	and.w	r3, r3, #1
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	f000 80b5 	beq.w	8004260 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	212c      	movs	r1, #44	; 0x2c
 80040fc:	fb01 f303 	mul.w	r3, r1, r3
 8004100:	4413      	add	r3, r2
 8004102:	3355      	adds	r3, #85	; 0x55
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	f083 0301 	eor.w	r3, r3, #1
 800410a:	b2d8      	uxtb	r0, r3
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	212c      	movs	r1, #44	; 0x2c
 8004112:	fb01 f303 	mul.w	r3, r1, r3
 8004116:	4413      	add	r3, r2
 8004118:	3355      	adds	r3, #85	; 0x55
 800411a:	4602      	mov	r2, r0
 800411c:	701a      	strb	r2, [r3, #0]
 800411e:	e09f      	b.n	8004260 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	212c      	movs	r1, #44	; 0x2c
 8004126:	fb01 f303 	mul.w	r3, r1, r3
 800412a:	4413      	add	r3, r2
 800412c:	3361      	adds	r3, #97	; 0x61
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	2b03      	cmp	r3, #3
 8004132:	d109      	bne.n	8004148 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	212c      	movs	r1, #44	; 0x2c
 800413a:	fb01 f303 	mul.w	r3, r1, r3
 800413e:	4413      	add	r3, r2
 8004140:	3360      	adds	r3, #96	; 0x60
 8004142:	2202      	movs	r2, #2
 8004144:	701a      	strb	r2, [r3, #0]
 8004146:	e08b      	b.n	8004260 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	212c      	movs	r1, #44	; 0x2c
 800414e:	fb01 f303 	mul.w	r3, r1, r3
 8004152:	4413      	add	r3, r2
 8004154:	3361      	adds	r3, #97	; 0x61
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	2b04      	cmp	r3, #4
 800415a:	d109      	bne.n	8004170 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	212c      	movs	r1, #44	; 0x2c
 8004162:	fb01 f303 	mul.w	r3, r1, r3
 8004166:	4413      	add	r3, r2
 8004168:	3360      	adds	r3, #96	; 0x60
 800416a:	2202      	movs	r2, #2
 800416c:	701a      	strb	r2, [r3, #0]
 800416e:	e077      	b.n	8004260 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	212c      	movs	r1, #44	; 0x2c
 8004176:	fb01 f303 	mul.w	r3, r1, r3
 800417a:	4413      	add	r3, r2
 800417c:	3361      	adds	r3, #97	; 0x61
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	2b05      	cmp	r3, #5
 8004182:	d109      	bne.n	8004198 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	212c      	movs	r1, #44	; 0x2c
 800418a:	fb01 f303 	mul.w	r3, r1, r3
 800418e:	4413      	add	r3, r2
 8004190:	3360      	adds	r3, #96	; 0x60
 8004192:	2205      	movs	r2, #5
 8004194:	701a      	strb	r2, [r3, #0]
 8004196:	e063      	b.n	8004260 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	212c      	movs	r1, #44	; 0x2c
 800419e:	fb01 f303 	mul.w	r3, r1, r3
 80041a2:	4413      	add	r3, r2
 80041a4:	3361      	adds	r3, #97	; 0x61
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	2b06      	cmp	r3, #6
 80041aa:	d009      	beq.n	80041c0 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	212c      	movs	r1, #44	; 0x2c
 80041b2:	fb01 f303 	mul.w	r3, r1, r3
 80041b6:	4413      	add	r3, r2
 80041b8:	3361      	adds	r3, #97	; 0x61
 80041ba:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80041bc:	2b08      	cmp	r3, #8
 80041be:	d14f      	bne.n	8004260 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	212c      	movs	r1, #44	; 0x2c
 80041c6:	fb01 f303 	mul.w	r3, r1, r3
 80041ca:	4413      	add	r3, r2
 80041cc:	335c      	adds	r3, #92	; 0x5c
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	1c5a      	adds	r2, r3, #1
 80041d2:	6879      	ldr	r1, [r7, #4]
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	202c      	movs	r0, #44	; 0x2c
 80041d8:	fb00 f303 	mul.w	r3, r0, r3
 80041dc:	440b      	add	r3, r1
 80041de:	335c      	adds	r3, #92	; 0x5c
 80041e0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	212c      	movs	r1, #44	; 0x2c
 80041e8:	fb01 f303 	mul.w	r3, r1, r3
 80041ec:	4413      	add	r3, r2
 80041ee:	335c      	adds	r3, #92	; 0x5c
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d912      	bls.n	800421c <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	212c      	movs	r1, #44	; 0x2c
 80041fc:	fb01 f303 	mul.w	r3, r1, r3
 8004200:	4413      	add	r3, r2
 8004202:	335c      	adds	r3, #92	; 0x5c
 8004204:	2200      	movs	r2, #0
 8004206:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	212c      	movs	r1, #44	; 0x2c
 800420e:	fb01 f303 	mul.w	r3, r1, r3
 8004212:	4413      	add	r3, r2
 8004214:	3360      	adds	r3, #96	; 0x60
 8004216:	2204      	movs	r2, #4
 8004218:	701a      	strb	r2, [r3, #0]
 800421a:	e021      	b.n	8004260 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	212c      	movs	r1, #44	; 0x2c
 8004222:	fb01 f303 	mul.w	r3, r1, r3
 8004226:	4413      	add	r3, r2
 8004228:	3360      	adds	r3, #96	; 0x60
 800422a:	2202      	movs	r2, #2
 800422c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	015a      	lsls	r2, r3, #5
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	4413      	add	r3, r2
 8004236:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004244:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800424c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	015a      	lsls	r2, r3, #5
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	4413      	add	r3, r2
 8004256:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800425a:	461a      	mov	r2, r3
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	015a      	lsls	r2, r3, #5
 8004264:	69bb      	ldr	r3, [r7, #24]
 8004266:	4413      	add	r3, r2
 8004268:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800426c:	461a      	mov	r2, r3
 800426e:	2302      	movs	r3, #2
 8004270:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	b2d9      	uxtb	r1, r3
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	202c      	movs	r0, #44	; 0x2c
 800427c:	fb00 f303 	mul.w	r3, r0, r3
 8004280:	4413      	add	r3, r2
 8004282:	3360      	adds	r3, #96	; 0x60
 8004284:	781b      	ldrb	r3, [r3, #0]
 8004286:	461a      	mov	r2, r3
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f008 fec7 	bl	800d01c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800428e:	bf00      	nop
 8004290:	3720      	adds	r7, #32
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}

08004296 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004296:	b580      	push	{r7, lr}
 8004298:	b08a      	sub	sp, #40	; 0x28
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	6a1b      	ldr	r3, [r3, #32]
 80042ae:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	f003 030f 	and.w	r3, r3, #15
 80042b6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	0c5b      	lsrs	r3, r3, #17
 80042bc:	f003 030f 	and.w	r3, r3, #15
 80042c0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	091b      	lsrs	r3, r3, #4
 80042c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80042ca:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	2b02      	cmp	r3, #2
 80042d0:	d004      	beq.n	80042dc <HCD_RXQLVL_IRQHandler+0x46>
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	2b05      	cmp	r3, #5
 80042d6:	f000 80a9 	beq.w	800442c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80042da:	e0aa      	b.n	8004432 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	f000 80a6 	beq.w	8004430 <HCD_RXQLVL_IRQHandler+0x19a>
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	212c      	movs	r1, #44	; 0x2c
 80042ea:	fb01 f303 	mul.w	r3, r1, r3
 80042ee:	4413      	add	r3, r2
 80042f0:	3344      	adds	r3, #68	; 0x44
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	f000 809b 	beq.w	8004430 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	69bb      	ldr	r3, [r7, #24]
 80042fe:	212c      	movs	r1, #44	; 0x2c
 8004300:	fb01 f303 	mul.w	r3, r1, r3
 8004304:	4413      	add	r3, r2
 8004306:	3350      	adds	r3, #80	; 0x50
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	441a      	add	r2, r3
 800430e:	6879      	ldr	r1, [r7, #4]
 8004310:	69bb      	ldr	r3, [r7, #24]
 8004312:	202c      	movs	r0, #44	; 0x2c
 8004314:	fb00 f303 	mul.w	r3, r0, r3
 8004318:	440b      	add	r3, r1
 800431a:	334c      	adds	r3, #76	; 0x4c
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	429a      	cmp	r2, r3
 8004320:	d87a      	bhi.n	8004418 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6818      	ldr	r0, [r3, #0]
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	69bb      	ldr	r3, [r7, #24]
 800432a:	212c      	movs	r1, #44	; 0x2c
 800432c:	fb01 f303 	mul.w	r3, r1, r3
 8004330:	4413      	add	r3, r2
 8004332:	3344      	adds	r3, #68	; 0x44
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	693a      	ldr	r2, [r7, #16]
 8004338:	b292      	uxth	r2, r2
 800433a:	4619      	mov	r1, r3
 800433c:	f004 fda0 	bl	8008e80 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	212c      	movs	r1, #44	; 0x2c
 8004346:	fb01 f303 	mul.w	r3, r1, r3
 800434a:	4413      	add	r3, r2
 800434c:	3344      	adds	r3, #68	; 0x44
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	441a      	add	r2, r3
 8004354:	6879      	ldr	r1, [r7, #4]
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	202c      	movs	r0, #44	; 0x2c
 800435a:	fb00 f303 	mul.w	r3, r0, r3
 800435e:	440b      	add	r3, r1
 8004360:	3344      	adds	r3, #68	; 0x44
 8004362:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	69bb      	ldr	r3, [r7, #24]
 8004368:	212c      	movs	r1, #44	; 0x2c
 800436a:	fb01 f303 	mul.w	r3, r1, r3
 800436e:	4413      	add	r3, r2
 8004370:	3350      	adds	r3, #80	; 0x50
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	441a      	add	r2, r3
 8004378:	6879      	ldr	r1, [r7, #4]
 800437a:	69bb      	ldr	r3, [r7, #24]
 800437c:	202c      	movs	r0, #44	; 0x2c
 800437e:	fb00 f303 	mul.w	r3, r0, r3
 8004382:	440b      	add	r3, r1
 8004384:	3350      	adds	r3, #80	; 0x50
 8004386:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004388:	69bb      	ldr	r3, [r7, #24]
 800438a:	015a      	lsls	r2, r3, #5
 800438c:	6a3b      	ldr	r3, [r7, #32]
 800438e:	4413      	add	r3, r2
 8004390:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	0cdb      	lsrs	r3, r3, #19
 8004398:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800439c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	212c      	movs	r1, #44	; 0x2c
 80043a4:	fb01 f303 	mul.w	r3, r1, r3
 80043a8:	4413      	add	r3, r2
 80043aa:	3340      	adds	r3, #64	; 0x40
 80043ac:	881b      	ldrh	r3, [r3, #0]
 80043ae:	461a      	mov	r2, r3
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d13c      	bne.n	8004430 <HCD_RXQLVL_IRQHandler+0x19a>
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d039      	beq.n	8004430 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	015a      	lsls	r2, r3, #5
 80043c0:	6a3b      	ldr	r3, [r7, #32]
 80043c2:	4413      	add	r3, r2
 80043c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80043d2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80043da:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80043dc:	69bb      	ldr	r3, [r7, #24]
 80043de:	015a      	lsls	r2, r3, #5
 80043e0:	6a3b      	ldr	r3, [r7, #32]
 80043e2:	4413      	add	r3, r2
 80043e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043e8:	461a      	mov	r2, r3
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	212c      	movs	r1, #44	; 0x2c
 80043f4:	fb01 f303 	mul.w	r3, r1, r3
 80043f8:	4413      	add	r3, r2
 80043fa:	3354      	adds	r3, #84	; 0x54
 80043fc:	781b      	ldrb	r3, [r3, #0]
 80043fe:	f083 0301 	eor.w	r3, r3, #1
 8004402:	b2d8      	uxtb	r0, r3
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	212c      	movs	r1, #44	; 0x2c
 800440a:	fb01 f303 	mul.w	r3, r1, r3
 800440e:	4413      	add	r3, r2
 8004410:	3354      	adds	r3, #84	; 0x54
 8004412:	4602      	mov	r2, r0
 8004414:	701a      	strb	r2, [r3, #0]
      break;
 8004416:	e00b      	b.n	8004430 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	69bb      	ldr	r3, [r7, #24]
 800441c:	212c      	movs	r1, #44	; 0x2c
 800441e:	fb01 f303 	mul.w	r3, r1, r3
 8004422:	4413      	add	r3, r2
 8004424:	3360      	adds	r3, #96	; 0x60
 8004426:	2204      	movs	r2, #4
 8004428:	701a      	strb	r2, [r3, #0]
      break;
 800442a:	e001      	b.n	8004430 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800442c:	bf00      	nop
 800442e:	e000      	b.n	8004432 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004430:	bf00      	nop
  }
}
 8004432:	bf00      	nop
 8004434:	3728      	adds	r7, #40	; 0x28
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}

0800443a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800443a:	b580      	push	{r7, lr}
 800443c:	b086      	sub	sp, #24
 800443e:	af00      	add	r7, sp, #0
 8004440:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004466:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f003 0302 	and.w	r3, r3, #2
 800446e:	2b02      	cmp	r3, #2
 8004470:	d10b      	bne.n	800448a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f003 0301 	and.w	r3, r3, #1
 8004478:	2b01      	cmp	r3, #1
 800447a:	d102      	bne.n	8004482 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f008 fdb1 	bl	800cfe4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	f043 0302 	orr.w	r3, r3, #2
 8004488:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	f003 0308 	and.w	r3, r3, #8
 8004490:	2b08      	cmp	r3, #8
 8004492:	d132      	bne.n	80044fa <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	f043 0308 	orr.w	r3, r3, #8
 800449a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f003 0304 	and.w	r3, r3, #4
 80044a2:	2b04      	cmp	r3, #4
 80044a4:	d126      	bne.n	80044f4 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	699b      	ldr	r3, [r3, #24]
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d113      	bne.n	80044d6 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80044b4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80044b8:	d106      	bne.n	80044c8 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	2102      	movs	r1, #2
 80044c0:	4618      	mov	r0, r3
 80044c2:	f004 fe4b 	bl	800915c <USB_InitFSLSPClkSel>
 80044c6:	e011      	b.n	80044ec <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2101      	movs	r1, #1
 80044ce:	4618      	mov	r0, r3
 80044d0:	f004 fe44 	bl	800915c <USB_InitFSLSPClkSel>
 80044d4:	e00a      	b.n	80044ec <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d106      	bne.n	80044ec <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80044e4:	461a      	mov	r2, r3
 80044e6:	f64e 2360 	movw	r3, #60000	; 0xea60
 80044ea:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f008 fda3 	bl	800d038 <HAL_HCD_PortEnabled_Callback>
 80044f2:	e002      	b.n	80044fa <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f008 fdad 	bl	800d054 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f003 0320 	and.w	r3, r3, #32
 8004500:	2b20      	cmp	r3, #32
 8004502:	d103      	bne.n	800450c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	f043 0320 	orr.w	r3, r3, #32
 800450a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004512:	461a      	mov	r2, r3
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	6013      	str	r3, [r2, #0]
}
 8004518:	bf00      	nop
 800451a:	3718      	adds	r7, #24
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}

08004520 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d101      	bne.n	8004532 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e12b      	b.n	800478a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004538:	b2db      	uxtb	r3, r3
 800453a:	2b00      	cmp	r3, #0
 800453c:	d106      	bne.n	800454c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f7fd f9a0 	bl	800188c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2224      	movs	r2, #36	; 0x24
 8004550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f022 0201 	bic.w	r2, r2, #1
 8004562:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004572:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004582:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004584:	f001 fc4c 	bl	8005e20 <HAL_RCC_GetPCLK1Freq>
 8004588:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	4a81      	ldr	r2, [pc, #516]	; (8004794 <HAL_I2C_Init+0x274>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d807      	bhi.n	80045a4 <HAL_I2C_Init+0x84>
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	4a80      	ldr	r2, [pc, #512]	; (8004798 <HAL_I2C_Init+0x278>)
 8004598:	4293      	cmp	r3, r2
 800459a:	bf94      	ite	ls
 800459c:	2301      	movls	r3, #1
 800459e:	2300      	movhi	r3, #0
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	e006      	b.n	80045b2 <HAL_I2C_Init+0x92>
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	4a7d      	ldr	r2, [pc, #500]	; (800479c <HAL_I2C_Init+0x27c>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	bf94      	ite	ls
 80045ac:	2301      	movls	r3, #1
 80045ae:	2300      	movhi	r3, #0
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d001      	beq.n	80045ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e0e7      	b.n	800478a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	4a78      	ldr	r2, [pc, #480]	; (80047a0 <HAL_I2C_Init+0x280>)
 80045be:	fba2 2303 	umull	r2, r3, r2, r3
 80045c2:	0c9b      	lsrs	r3, r3, #18
 80045c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	68ba      	ldr	r2, [r7, #8]
 80045d6:	430a      	orrs	r2, r1
 80045d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	6a1b      	ldr	r3, [r3, #32]
 80045e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	4a6a      	ldr	r2, [pc, #424]	; (8004794 <HAL_I2C_Init+0x274>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d802      	bhi.n	80045f4 <HAL_I2C_Init+0xd4>
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	3301      	adds	r3, #1
 80045f2:	e009      	b.n	8004608 <HAL_I2C_Init+0xe8>
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80045fa:	fb02 f303 	mul.w	r3, r2, r3
 80045fe:	4a69      	ldr	r2, [pc, #420]	; (80047a4 <HAL_I2C_Init+0x284>)
 8004600:	fba2 2303 	umull	r2, r3, r2, r3
 8004604:	099b      	lsrs	r3, r3, #6
 8004606:	3301      	adds	r3, #1
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	6812      	ldr	r2, [r2, #0]
 800460c:	430b      	orrs	r3, r1
 800460e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	69db      	ldr	r3, [r3, #28]
 8004616:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800461a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	495c      	ldr	r1, [pc, #368]	; (8004794 <HAL_I2C_Init+0x274>)
 8004624:	428b      	cmp	r3, r1
 8004626:	d819      	bhi.n	800465c <HAL_I2C_Init+0x13c>
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	1e59      	subs	r1, r3, #1
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	005b      	lsls	r3, r3, #1
 8004632:	fbb1 f3f3 	udiv	r3, r1, r3
 8004636:	1c59      	adds	r1, r3, #1
 8004638:	f640 73fc 	movw	r3, #4092	; 0xffc
 800463c:	400b      	ands	r3, r1
 800463e:	2b00      	cmp	r3, #0
 8004640:	d00a      	beq.n	8004658 <HAL_I2C_Init+0x138>
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	1e59      	subs	r1, r3, #1
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	005b      	lsls	r3, r3, #1
 800464c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004650:	3301      	adds	r3, #1
 8004652:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004656:	e051      	b.n	80046fc <HAL_I2C_Init+0x1dc>
 8004658:	2304      	movs	r3, #4
 800465a:	e04f      	b.n	80046fc <HAL_I2C_Init+0x1dc>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d111      	bne.n	8004688 <HAL_I2C_Init+0x168>
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	1e58      	subs	r0, r3, #1
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6859      	ldr	r1, [r3, #4]
 800466c:	460b      	mov	r3, r1
 800466e:	005b      	lsls	r3, r3, #1
 8004670:	440b      	add	r3, r1
 8004672:	fbb0 f3f3 	udiv	r3, r0, r3
 8004676:	3301      	adds	r3, #1
 8004678:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800467c:	2b00      	cmp	r3, #0
 800467e:	bf0c      	ite	eq
 8004680:	2301      	moveq	r3, #1
 8004682:	2300      	movne	r3, #0
 8004684:	b2db      	uxtb	r3, r3
 8004686:	e012      	b.n	80046ae <HAL_I2C_Init+0x18e>
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	1e58      	subs	r0, r3, #1
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6859      	ldr	r1, [r3, #4]
 8004690:	460b      	mov	r3, r1
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	440b      	add	r3, r1
 8004696:	0099      	lsls	r1, r3, #2
 8004698:	440b      	add	r3, r1
 800469a:	fbb0 f3f3 	udiv	r3, r0, r3
 800469e:	3301      	adds	r3, #1
 80046a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	bf0c      	ite	eq
 80046a8:	2301      	moveq	r3, #1
 80046aa:	2300      	movne	r3, #0
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d001      	beq.n	80046b6 <HAL_I2C_Init+0x196>
 80046b2:	2301      	movs	r3, #1
 80046b4:	e022      	b.n	80046fc <HAL_I2C_Init+0x1dc>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d10e      	bne.n	80046dc <HAL_I2C_Init+0x1bc>
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	1e58      	subs	r0, r3, #1
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6859      	ldr	r1, [r3, #4]
 80046c6:	460b      	mov	r3, r1
 80046c8:	005b      	lsls	r3, r3, #1
 80046ca:	440b      	add	r3, r1
 80046cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80046d0:	3301      	adds	r3, #1
 80046d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046da:	e00f      	b.n	80046fc <HAL_I2C_Init+0x1dc>
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	1e58      	subs	r0, r3, #1
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6859      	ldr	r1, [r3, #4]
 80046e4:	460b      	mov	r3, r1
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	440b      	add	r3, r1
 80046ea:	0099      	lsls	r1, r3, #2
 80046ec:	440b      	add	r3, r1
 80046ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80046f2:	3301      	adds	r3, #1
 80046f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046fc:	6879      	ldr	r1, [r7, #4]
 80046fe:	6809      	ldr	r1, [r1, #0]
 8004700:	4313      	orrs	r3, r2
 8004702:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	69da      	ldr	r2, [r3, #28]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a1b      	ldr	r3, [r3, #32]
 8004716:	431a      	orrs	r2, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	430a      	orrs	r2, r1
 800471e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800472a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	6911      	ldr	r1, [r2, #16]
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	68d2      	ldr	r2, [r2, #12]
 8004736:	4311      	orrs	r1, r2
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	6812      	ldr	r2, [r2, #0]
 800473c:	430b      	orrs	r3, r1
 800473e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	695a      	ldr	r2, [r3, #20]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	699b      	ldr	r3, [r3, #24]
 8004752:	431a      	orrs	r2, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	430a      	orrs	r2, r1
 800475a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f042 0201 	orr.w	r2, r2, #1
 800476a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2220      	movs	r2, #32
 8004776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3710      	adds	r7, #16
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	000186a0 	.word	0x000186a0
 8004798:	001e847f 	.word	0x001e847f
 800479c:	003d08ff 	.word	0x003d08ff
 80047a0:	431bde83 	.word	0x431bde83
 80047a4:	10624dd3 	.word	0x10624dd3

080047a8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b088      	sub	sp, #32
 80047ac:	af02      	add	r7, sp, #8
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	607a      	str	r2, [r7, #4]
 80047b2:	461a      	mov	r2, r3
 80047b4:	460b      	mov	r3, r1
 80047b6:	817b      	strh	r3, [r7, #10]
 80047b8:	4613      	mov	r3, r2
 80047ba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80047bc:	f7fd fc06 	bl	8001fcc <HAL_GetTick>
 80047c0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	2b20      	cmp	r3, #32
 80047cc:	f040 80e0 	bne.w	8004990 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	9300      	str	r3, [sp, #0]
 80047d4:	2319      	movs	r3, #25
 80047d6:	2201      	movs	r2, #1
 80047d8:	4970      	ldr	r1, [pc, #448]	; (800499c <HAL_I2C_Master_Transmit+0x1f4>)
 80047da:	68f8      	ldr	r0, [r7, #12]
 80047dc:	f000 fc58 	bl	8005090 <I2C_WaitOnFlagUntilTimeout>
 80047e0:	4603      	mov	r3, r0
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d001      	beq.n	80047ea <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80047e6:	2302      	movs	r3, #2
 80047e8:	e0d3      	b.n	8004992 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d101      	bne.n	80047f8 <HAL_I2C_Master_Transmit+0x50>
 80047f4:	2302      	movs	r3, #2
 80047f6:	e0cc      	b.n	8004992 <HAL_I2C_Master_Transmit+0x1ea>
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0301 	and.w	r3, r3, #1
 800480a:	2b01      	cmp	r3, #1
 800480c:	d007      	beq.n	800481e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f042 0201 	orr.w	r2, r2, #1
 800481c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800482c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2221      	movs	r2, #33	; 0x21
 8004832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2210      	movs	r2, #16
 800483a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2200      	movs	r2, #0
 8004842:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	893a      	ldrh	r2, [r7, #8]
 800484e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004854:	b29a      	uxth	r2, r3
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	4a50      	ldr	r2, [pc, #320]	; (80049a0 <HAL_I2C_Master_Transmit+0x1f8>)
 800485e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004860:	8979      	ldrh	r1, [r7, #10]
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	6a3a      	ldr	r2, [r7, #32]
 8004866:	68f8      	ldr	r0, [r7, #12]
 8004868:	f000 fac2 	bl	8004df0 <I2C_MasterRequestWrite>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	d001      	beq.n	8004876 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e08d      	b.n	8004992 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004876:	2300      	movs	r3, #0
 8004878:	613b      	str	r3, [r7, #16]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	695b      	ldr	r3, [r3, #20]
 8004880:	613b      	str	r3, [r7, #16]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	699b      	ldr	r3, [r3, #24]
 8004888:	613b      	str	r3, [r7, #16]
 800488a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800488c:	e066      	b.n	800495c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800488e:	697a      	ldr	r2, [r7, #20]
 8004890:	6a39      	ldr	r1, [r7, #32]
 8004892:	68f8      	ldr	r0, [r7, #12]
 8004894:	f000 fcd2 	bl	800523c <I2C_WaitOnTXEFlagUntilTimeout>
 8004898:	4603      	mov	r3, r0
 800489a:	2b00      	cmp	r3, #0
 800489c:	d00d      	beq.n	80048ba <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a2:	2b04      	cmp	r3, #4
 80048a4:	d107      	bne.n	80048b6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e06b      	b.n	8004992 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048be:	781a      	ldrb	r2, [r3, #0]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ca:	1c5a      	adds	r2, r3, #1
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	3b01      	subs	r3, #1
 80048d8:	b29a      	uxth	r2, r3
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048e2:	3b01      	subs	r3, #1
 80048e4:	b29a      	uxth	r2, r3
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	695b      	ldr	r3, [r3, #20]
 80048f0:	f003 0304 	and.w	r3, r3, #4
 80048f4:	2b04      	cmp	r3, #4
 80048f6:	d11b      	bne.n	8004930 <HAL_I2C_Master_Transmit+0x188>
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d017      	beq.n	8004930 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004904:	781a      	ldrb	r2, [r3, #0]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004910:	1c5a      	adds	r2, r3, #1
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800491a:	b29b      	uxth	r3, r3
 800491c:	3b01      	subs	r3, #1
 800491e:	b29a      	uxth	r2, r3
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004928:	3b01      	subs	r3, #1
 800492a:	b29a      	uxth	r2, r3
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004930:	697a      	ldr	r2, [r7, #20]
 8004932:	6a39      	ldr	r1, [r7, #32]
 8004934:	68f8      	ldr	r0, [r7, #12]
 8004936:	f000 fcc2 	bl	80052be <I2C_WaitOnBTFFlagUntilTimeout>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d00d      	beq.n	800495c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004944:	2b04      	cmp	r3, #4
 8004946:	d107      	bne.n	8004958 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004956:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	e01a      	b.n	8004992 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004960:	2b00      	cmp	r3, #0
 8004962:	d194      	bne.n	800488e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004972:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2220      	movs	r2, #32
 8004978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2200      	movs	r2, #0
 8004980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2200      	movs	r2, #0
 8004988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800498c:	2300      	movs	r3, #0
 800498e:	e000      	b.n	8004992 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004990:	2302      	movs	r3, #2
  }
}
 8004992:	4618      	mov	r0, r3
 8004994:	3718      	adds	r7, #24
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop
 800499c:	00100002 	.word	0x00100002
 80049a0:	ffff0000 	.word	0xffff0000

080049a4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b08c      	sub	sp, #48	; 0x30
 80049a8:	af02      	add	r7, sp, #8
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	607a      	str	r2, [r7, #4]
 80049ae:	461a      	mov	r2, r3
 80049b0:	460b      	mov	r3, r1
 80049b2:	817b      	strh	r3, [r7, #10]
 80049b4:	4613      	mov	r3, r2
 80049b6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80049b8:	f7fd fb08 	bl	8001fcc <HAL_GetTick>
 80049bc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	2b20      	cmp	r3, #32
 80049c8:	f040 820b 	bne.w	8004de2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80049cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ce:	9300      	str	r3, [sp, #0]
 80049d0:	2319      	movs	r3, #25
 80049d2:	2201      	movs	r2, #1
 80049d4:	497c      	ldr	r1, [pc, #496]	; (8004bc8 <HAL_I2C_Master_Receive+0x224>)
 80049d6:	68f8      	ldr	r0, [r7, #12]
 80049d8:	f000 fb5a 	bl	8005090 <I2C_WaitOnFlagUntilTimeout>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d001      	beq.n	80049e6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80049e2:	2302      	movs	r3, #2
 80049e4:	e1fe      	b.n	8004de4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d101      	bne.n	80049f4 <HAL_I2C_Master_Receive+0x50>
 80049f0:	2302      	movs	r3, #2
 80049f2:	e1f7      	b.n	8004de4 <HAL_I2C_Master_Receive+0x440>
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0301 	and.w	r3, r3, #1
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d007      	beq.n	8004a1a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f042 0201 	orr.w	r2, r2, #1
 8004a18:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a28:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2222      	movs	r2, #34	; 0x22
 8004a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2210      	movs	r2, #16
 8004a36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	893a      	ldrh	r2, [r7, #8]
 8004a4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a50:	b29a      	uxth	r2, r3
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	4a5c      	ldr	r2, [pc, #368]	; (8004bcc <HAL_I2C_Master_Receive+0x228>)
 8004a5a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004a5c:	8979      	ldrh	r1, [r7, #10]
 8004a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a62:	68f8      	ldr	r0, [r7, #12]
 8004a64:	f000 fa46 	bl	8004ef4 <I2C_MasterRequestRead>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d001      	beq.n	8004a72 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e1b8      	b.n	8004de4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d113      	bne.n	8004aa2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	623b      	str	r3, [r7, #32]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	695b      	ldr	r3, [r3, #20]
 8004a84:	623b      	str	r3, [r7, #32]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	699b      	ldr	r3, [r3, #24]
 8004a8c:	623b      	str	r3, [r7, #32]
 8004a8e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a9e:	601a      	str	r2, [r3, #0]
 8004aa0:	e18c      	b.n	8004dbc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d11b      	bne.n	8004ae2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ab8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004aba:	2300      	movs	r3, #0
 8004abc:	61fb      	str	r3, [r7, #28]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	695b      	ldr	r3, [r3, #20]
 8004ac4:	61fb      	str	r3, [r7, #28]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	699b      	ldr	r3, [r3, #24]
 8004acc:	61fb      	str	r3, [r7, #28]
 8004ace:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ade:	601a      	str	r2, [r3, #0]
 8004ae0:	e16c      	b.n	8004dbc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ae6:	2b02      	cmp	r3, #2
 8004ae8:	d11b      	bne.n	8004b22 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004af8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b08:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	61bb      	str	r3, [r7, #24]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	695b      	ldr	r3, [r3, #20]
 8004b14:	61bb      	str	r3, [r7, #24]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	699b      	ldr	r3, [r3, #24]
 8004b1c:	61bb      	str	r3, [r7, #24]
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	e14c      	b.n	8004dbc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b30:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b32:	2300      	movs	r3, #0
 8004b34:	617b      	str	r3, [r7, #20]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	695b      	ldr	r3, [r3, #20]
 8004b3c:	617b      	str	r3, [r7, #20]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	699b      	ldr	r3, [r3, #24]
 8004b44:	617b      	str	r3, [r7, #20]
 8004b46:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004b48:	e138      	b.n	8004dbc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b4e:	2b03      	cmp	r3, #3
 8004b50:	f200 80f1 	bhi.w	8004d36 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d123      	bne.n	8004ba4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b5e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b60:	68f8      	ldr	r0, [r7, #12]
 8004b62:	f000 fbed 	bl	8005340 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d001      	beq.n	8004b70 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e139      	b.n	8004de4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	691a      	ldr	r2, [r3, #16]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7a:	b2d2      	uxtb	r2, r2
 8004b7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b82:	1c5a      	adds	r2, r3, #1
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b8c:	3b01      	subs	r3, #1
 8004b8e:	b29a      	uxth	r2, r3
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	3b01      	subs	r3, #1
 8004b9c:	b29a      	uxth	r2, r3
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ba2:	e10b      	b.n	8004dbc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ba8:	2b02      	cmp	r3, #2
 8004baa:	d14e      	bne.n	8004c4a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bae:	9300      	str	r3, [sp, #0]
 8004bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	4906      	ldr	r1, [pc, #24]	; (8004bd0 <HAL_I2C_Master_Receive+0x22c>)
 8004bb6:	68f8      	ldr	r0, [r7, #12]
 8004bb8:	f000 fa6a 	bl	8005090 <I2C_WaitOnFlagUntilTimeout>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d008      	beq.n	8004bd4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e10e      	b.n	8004de4 <HAL_I2C_Master_Receive+0x440>
 8004bc6:	bf00      	nop
 8004bc8:	00100002 	.word	0x00100002
 8004bcc:	ffff0000 	.word	0xffff0000
 8004bd0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004be2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	691a      	ldr	r2, [r3, #16]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bee:	b2d2      	uxtb	r2, r2
 8004bf0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf6:	1c5a      	adds	r2, r3, #1
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c00:	3b01      	subs	r3, #1
 8004c02:	b29a      	uxth	r2, r3
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	3b01      	subs	r3, #1
 8004c10:	b29a      	uxth	r2, r3
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	691a      	ldr	r2, [r3, #16]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c20:	b2d2      	uxtb	r2, r2
 8004c22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c28:	1c5a      	adds	r2, r3, #1
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c32:	3b01      	subs	r3, #1
 8004c34:	b29a      	uxth	r2, r3
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	3b01      	subs	r3, #1
 8004c42:	b29a      	uxth	r2, r3
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c48:	e0b8      	b.n	8004dbc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4c:	9300      	str	r3, [sp, #0]
 8004c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c50:	2200      	movs	r2, #0
 8004c52:	4966      	ldr	r1, [pc, #408]	; (8004dec <HAL_I2C_Master_Receive+0x448>)
 8004c54:	68f8      	ldr	r0, [r7, #12]
 8004c56:	f000 fa1b 	bl	8005090 <I2C_WaitOnFlagUntilTimeout>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d001      	beq.n	8004c64 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e0bf      	b.n	8004de4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	691a      	ldr	r2, [r3, #16]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7e:	b2d2      	uxtb	r2, r2
 8004c80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c86:	1c5a      	adds	r2, r3, #1
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c90:	3b01      	subs	r3, #1
 8004c92:	b29a      	uxth	r2, r3
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	b29a      	uxth	r2, r3
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca8:	9300      	str	r3, [sp, #0]
 8004caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cac:	2200      	movs	r2, #0
 8004cae:	494f      	ldr	r1, [pc, #316]	; (8004dec <HAL_I2C_Master_Receive+0x448>)
 8004cb0:	68f8      	ldr	r0, [r7, #12]
 8004cb2:	f000 f9ed 	bl	8005090 <I2C_WaitOnFlagUntilTimeout>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d001      	beq.n	8004cc0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e091      	b.n	8004de4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	691a      	ldr	r2, [r3, #16]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cda:	b2d2      	uxtb	r2, r2
 8004cdc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce2:	1c5a      	adds	r2, r3, #1
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cec:	3b01      	subs	r3, #1
 8004cee:	b29a      	uxth	r2, r3
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	3b01      	subs	r3, #1
 8004cfc:	b29a      	uxth	r2, r3
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	691a      	ldr	r2, [r3, #16]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0c:	b2d2      	uxtb	r2, r2
 8004d0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d14:	1c5a      	adds	r2, r3, #1
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d1e:	3b01      	subs	r3, #1
 8004d20:	b29a      	uxth	r2, r3
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	3b01      	subs	r3, #1
 8004d2e:	b29a      	uxth	r2, r3
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d34:	e042      	b.n	8004dbc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d38:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d3a:	68f8      	ldr	r0, [r7, #12]
 8004d3c:	f000 fb00 	bl	8005340 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d001      	beq.n	8004d4a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e04c      	b.n	8004de4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	691a      	ldr	r2, [r3, #16]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d54:	b2d2      	uxtb	r2, r2
 8004d56:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5c:	1c5a      	adds	r2, r3, #1
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d66:	3b01      	subs	r3, #1
 8004d68:	b29a      	uxth	r2, r3
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	3b01      	subs	r3, #1
 8004d76:	b29a      	uxth	r2, r3
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	695b      	ldr	r3, [r3, #20]
 8004d82:	f003 0304 	and.w	r3, r3, #4
 8004d86:	2b04      	cmp	r3, #4
 8004d88:	d118      	bne.n	8004dbc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	691a      	ldr	r2, [r3, #16]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d94:	b2d2      	uxtb	r2, r2
 8004d96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9c:	1c5a      	adds	r2, r3, #1
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004da6:	3b01      	subs	r3, #1
 8004da8:	b29a      	uxth	r2, r3
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	3b01      	subs	r3, #1
 8004db6:	b29a      	uxth	r2, r3
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	f47f aec2 	bne.w	8004b4a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2220      	movs	r2, #32
 8004dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004dde:	2300      	movs	r3, #0
 8004de0:	e000      	b.n	8004de4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004de2:	2302      	movs	r3, #2
  }
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3728      	adds	r7, #40	; 0x28
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	00010004 	.word	0x00010004

08004df0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b088      	sub	sp, #32
 8004df4:	af02      	add	r7, sp, #8
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	607a      	str	r2, [r7, #4]
 8004dfa:	603b      	str	r3, [r7, #0]
 8004dfc:	460b      	mov	r3, r1
 8004dfe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e04:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	2b08      	cmp	r3, #8
 8004e0a:	d006      	beq.n	8004e1a <I2C_MasterRequestWrite+0x2a>
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d003      	beq.n	8004e1a <I2C_MasterRequestWrite+0x2a>
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004e18:	d108      	bne.n	8004e2c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e28:	601a      	str	r2, [r3, #0]
 8004e2a:	e00b      	b.n	8004e44 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e30:	2b12      	cmp	r3, #18
 8004e32:	d107      	bne.n	8004e44 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e42:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	9300      	str	r3, [sp, #0]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e50:	68f8      	ldr	r0, [r7, #12]
 8004e52:	f000 f91d 	bl	8005090 <I2C_WaitOnFlagUntilTimeout>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d00d      	beq.n	8004e78 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e6a:	d103      	bne.n	8004e74 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e72:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004e74:	2303      	movs	r3, #3
 8004e76:	e035      	b.n	8004ee4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	691b      	ldr	r3, [r3, #16]
 8004e7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e80:	d108      	bne.n	8004e94 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004e82:	897b      	ldrh	r3, [r7, #10]
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	461a      	mov	r2, r3
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004e90:	611a      	str	r2, [r3, #16]
 8004e92:	e01b      	b.n	8004ecc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004e94:	897b      	ldrh	r3, [r7, #10]
 8004e96:	11db      	asrs	r3, r3, #7
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	f003 0306 	and.w	r3, r3, #6
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	f063 030f 	orn	r3, r3, #15
 8004ea4:	b2da      	uxtb	r2, r3
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	490e      	ldr	r1, [pc, #56]	; (8004eec <I2C_MasterRequestWrite+0xfc>)
 8004eb2:	68f8      	ldr	r0, [r7, #12]
 8004eb4:	f000 f943 	bl	800513e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d001      	beq.n	8004ec2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e010      	b.n	8004ee4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004ec2:	897b      	ldrh	r3, [r7, #10]
 8004ec4:	b2da      	uxtb	r2, r3
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	4907      	ldr	r1, [pc, #28]	; (8004ef0 <I2C_MasterRequestWrite+0x100>)
 8004ed2:	68f8      	ldr	r0, [r7, #12]
 8004ed4:	f000 f933 	bl	800513e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d001      	beq.n	8004ee2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e000      	b.n	8004ee4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004ee2:	2300      	movs	r3, #0
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3718      	adds	r7, #24
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}
 8004eec:	00010008 	.word	0x00010008
 8004ef0:	00010002 	.word	0x00010002

08004ef4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b088      	sub	sp, #32
 8004ef8:	af02      	add	r7, sp, #8
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	607a      	str	r2, [r7, #4]
 8004efe:	603b      	str	r3, [r7, #0]
 8004f00:	460b      	mov	r3, r1
 8004f02:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f08:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f18:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	2b08      	cmp	r3, #8
 8004f1e:	d006      	beq.n	8004f2e <I2C_MasterRequestRead+0x3a>
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d003      	beq.n	8004f2e <I2C_MasterRequestRead+0x3a>
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f2c:	d108      	bne.n	8004f40 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f3c:	601a      	str	r2, [r3, #0]
 8004f3e:	e00b      	b.n	8004f58 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f44:	2b11      	cmp	r3, #17
 8004f46:	d107      	bne.n	8004f58 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f56:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	9300      	str	r3, [sp, #0]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f64:	68f8      	ldr	r0, [r7, #12]
 8004f66:	f000 f893 	bl	8005090 <I2C_WaitOnFlagUntilTimeout>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d00d      	beq.n	8004f8c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f7e:	d103      	bne.n	8004f88 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f86:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	e079      	b.n	8005080 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	691b      	ldr	r3, [r3, #16]
 8004f90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f94:	d108      	bne.n	8004fa8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004f96:	897b      	ldrh	r3, [r7, #10]
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	f043 0301 	orr.w	r3, r3, #1
 8004f9e:	b2da      	uxtb	r2, r3
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	611a      	str	r2, [r3, #16]
 8004fa6:	e05f      	b.n	8005068 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004fa8:	897b      	ldrh	r3, [r7, #10]
 8004faa:	11db      	asrs	r3, r3, #7
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	f003 0306 	and.w	r3, r3, #6
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	f063 030f 	orn	r3, r3, #15
 8004fb8:	b2da      	uxtb	r2, r3
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	4930      	ldr	r1, [pc, #192]	; (8005088 <I2C_MasterRequestRead+0x194>)
 8004fc6:	68f8      	ldr	r0, [r7, #12]
 8004fc8:	f000 f8b9 	bl	800513e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d001      	beq.n	8004fd6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e054      	b.n	8005080 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004fd6:	897b      	ldrh	r3, [r7, #10]
 8004fd8:	b2da      	uxtb	r2, r3
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	4929      	ldr	r1, [pc, #164]	; (800508c <I2C_MasterRequestRead+0x198>)
 8004fe6:	68f8      	ldr	r0, [r7, #12]
 8004fe8:	f000 f8a9 	bl	800513e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fec:	4603      	mov	r3, r0
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d001      	beq.n	8004ff6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e044      	b.n	8005080 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	613b      	str	r3, [r7, #16]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	695b      	ldr	r3, [r3, #20]
 8005000:	613b      	str	r3, [r7, #16]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	699b      	ldr	r3, [r3, #24]
 8005008:	613b      	str	r3, [r7, #16]
 800500a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800501a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	9300      	str	r3, [sp, #0]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005028:	68f8      	ldr	r0, [r7, #12]
 800502a:	f000 f831 	bl	8005090 <I2C_WaitOnFlagUntilTimeout>
 800502e:	4603      	mov	r3, r0
 8005030:	2b00      	cmp	r3, #0
 8005032:	d00d      	beq.n	8005050 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800503e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005042:	d103      	bne.n	800504c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f44f 7200 	mov.w	r2, #512	; 0x200
 800504a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800504c:	2303      	movs	r3, #3
 800504e:	e017      	b.n	8005080 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005050:	897b      	ldrh	r3, [r7, #10]
 8005052:	11db      	asrs	r3, r3, #7
 8005054:	b2db      	uxtb	r3, r3
 8005056:	f003 0306 	and.w	r3, r3, #6
 800505a:	b2db      	uxtb	r3, r3
 800505c:	f063 030e 	orn	r3, r3, #14
 8005060:	b2da      	uxtb	r2, r3
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	4907      	ldr	r1, [pc, #28]	; (800508c <I2C_MasterRequestRead+0x198>)
 800506e:	68f8      	ldr	r0, [r7, #12]
 8005070:	f000 f865 	bl	800513e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005074:	4603      	mov	r3, r0
 8005076:	2b00      	cmp	r3, #0
 8005078:	d001      	beq.n	800507e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e000      	b.n	8005080 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800507e:	2300      	movs	r3, #0
}
 8005080:	4618      	mov	r0, r3
 8005082:	3718      	adds	r7, #24
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}
 8005088:	00010008 	.word	0x00010008
 800508c:	00010002 	.word	0x00010002

08005090 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af00      	add	r7, sp, #0
 8005096:	60f8      	str	r0, [r7, #12]
 8005098:	60b9      	str	r1, [r7, #8]
 800509a:	603b      	str	r3, [r7, #0]
 800509c:	4613      	mov	r3, r2
 800509e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050a0:	e025      	b.n	80050ee <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050a8:	d021      	beq.n	80050ee <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050aa:	f7fc ff8f 	bl	8001fcc <HAL_GetTick>
 80050ae:	4602      	mov	r2, r0
 80050b0:	69bb      	ldr	r3, [r7, #24]
 80050b2:	1ad3      	subs	r3, r2, r3
 80050b4:	683a      	ldr	r2, [r7, #0]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d302      	bcc.n	80050c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d116      	bne.n	80050ee <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2200      	movs	r2, #0
 80050c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2220      	movs	r2, #32
 80050ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2200      	movs	r2, #0
 80050d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050da:	f043 0220 	orr.w	r2, r3, #32
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2200      	movs	r2, #0
 80050e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e023      	b.n	8005136 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	0c1b      	lsrs	r3, r3, #16
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d10d      	bne.n	8005114 <I2C_WaitOnFlagUntilTimeout+0x84>
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	695b      	ldr	r3, [r3, #20]
 80050fe:	43da      	mvns	r2, r3
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	4013      	ands	r3, r2
 8005104:	b29b      	uxth	r3, r3
 8005106:	2b00      	cmp	r3, #0
 8005108:	bf0c      	ite	eq
 800510a:	2301      	moveq	r3, #1
 800510c:	2300      	movne	r3, #0
 800510e:	b2db      	uxtb	r3, r3
 8005110:	461a      	mov	r2, r3
 8005112:	e00c      	b.n	800512e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	699b      	ldr	r3, [r3, #24]
 800511a:	43da      	mvns	r2, r3
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	4013      	ands	r3, r2
 8005120:	b29b      	uxth	r3, r3
 8005122:	2b00      	cmp	r3, #0
 8005124:	bf0c      	ite	eq
 8005126:	2301      	moveq	r3, #1
 8005128:	2300      	movne	r3, #0
 800512a:	b2db      	uxtb	r3, r3
 800512c:	461a      	mov	r2, r3
 800512e:	79fb      	ldrb	r3, [r7, #7]
 8005130:	429a      	cmp	r2, r3
 8005132:	d0b6      	beq.n	80050a2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005134:	2300      	movs	r3, #0
}
 8005136:	4618      	mov	r0, r3
 8005138:	3710      	adds	r7, #16
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}

0800513e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800513e:	b580      	push	{r7, lr}
 8005140:	b084      	sub	sp, #16
 8005142:	af00      	add	r7, sp, #0
 8005144:	60f8      	str	r0, [r7, #12]
 8005146:	60b9      	str	r1, [r7, #8]
 8005148:	607a      	str	r2, [r7, #4]
 800514a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800514c:	e051      	b.n	80051f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	695b      	ldr	r3, [r3, #20]
 8005154:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005158:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800515c:	d123      	bne.n	80051a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800516c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005176:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2200      	movs	r2, #0
 800517c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2220      	movs	r2, #32
 8005182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2200      	movs	r2, #0
 800518a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005192:	f043 0204 	orr.w	r2, r3, #4
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2200      	movs	r2, #0
 800519e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e046      	b.n	8005234 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051ac:	d021      	beq.n	80051f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051ae:	f7fc ff0d 	bl	8001fcc <HAL_GetTick>
 80051b2:	4602      	mov	r2, r0
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	1ad3      	subs	r3, r2, r3
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d302      	bcc.n	80051c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d116      	bne.n	80051f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2200      	movs	r2, #0
 80051c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2220      	movs	r2, #32
 80051ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2200      	movs	r2, #0
 80051d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051de:	f043 0220 	orr.w	r2, r3, #32
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e020      	b.n	8005234 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	0c1b      	lsrs	r3, r3, #16
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d10c      	bne.n	8005216 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	695b      	ldr	r3, [r3, #20]
 8005202:	43da      	mvns	r2, r3
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	4013      	ands	r3, r2
 8005208:	b29b      	uxth	r3, r3
 800520a:	2b00      	cmp	r3, #0
 800520c:	bf14      	ite	ne
 800520e:	2301      	movne	r3, #1
 8005210:	2300      	moveq	r3, #0
 8005212:	b2db      	uxtb	r3, r3
 8005214:	e00b      	b.n	800522e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	699b      	ldr	r3, [r3, #24]
 800521c:	43da      	mvns	r2, r3
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	4013      	ands	r3, r2
 8005222:	b29b      	uxth	r3, r3
 8005224:	2b00      	cmp	r3, #0
 8005226:	bf14      	ite	ne
 8005228:	2301      	movne	r3, #1
 800522a:	2300      	moveq	r3, #0
 800522c:	b2db      	uxtb	r3, r3
 800522e:	2b00      	cmp	r3, #0
 8005230:	d18d      	bne.n	800514e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005232:	2300      	movs	r3, #0
}
 8005234:	4618      	mov	r0, r3
 8005236:	3710      	adds	r7, #16
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}

0800523c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b084      	sub	sp, #16
 8005240:	af00      	add	r7, sp, #0
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005248:	e02d      	b.n	80052a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800524a:	68f8      	ldr	r0, [r7, #12]
 800524c:	f000 f8ce 	bl	80053ec <I2C_IsAcknowledgeFailed>
 8005250:	4603      	mov	r3, r0
 8005252:	2b00      	cmp	r3, #0
 8005254:	d001      	beq.n	800525a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e02d      	b.n	80052b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005260:	d021      	beq.n	80052a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005262:	f7fc feb3 	bl	8001fcc <HAL_GetTick>
 8005266:	4602      	mov	r2, r0
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	1ad3      	subs	r3, r2, r3
 800526c:	68ba      	ldr	r2, [r7, #8]
 800526e:	429a      	cmp	r2, r3
 8005270:	d302      	bcc.n	8005278 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d116      	bne.n	80052a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2200      	movs	r2, #0
 800527c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2220      	movs	r2, #32
 8005282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2200      	movs	r2, #0
 800528a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005292:	f043 0220 	orr.w	r2, r3, #32
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2200      	movs	r2, #0
 800529e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e007      	b.n	80052b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	695b      	ldr	r3, [r3, #20]
 80052ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052b0:	2b80      	cmp	r3, #128	; 0x80
 80052b2:	d1ca      	bne.n	800524a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3710      	adds	r7, #16
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}

080052be <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052be:	b580      	push	{r7, lr}
 80052c0:	b084      	sub	sp, #16
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	60f8      	str	r0, [r7, #12]
 80052c6:	60b9      	str	r1, [r7, #8]
 80052c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80052ca:	e02d      	b.n	8005328 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80052cc:	68f8      	ldr	r0, [r7, #12]
 80052ce:	f000 f88d 	bl	80053ec <I2C_IsAcknowledgeFailed>
 80052d2:	4603      	mov	r3, r0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d001      	beq.n	80052dc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	e02d      	b.n	8005338 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052e2:	d021      	beq.n	8005328 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052e4:	f7fc fe72 	bl	8001fcc <HAL_GetTick>
 80052e8:	4602      	mov	r2, r0
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	1ad3      	subs	r3, r2, r3
 80052ee:	68ba      	ldr	r2, [r7, #8]
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d302      	bcc.n	80052fa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d116      	bne.n	8005328 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2200      	movs	r2, #0
 80052fe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2220      	movs	r2, #32
 8005304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2200      	movs	r2, #0
 800530c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005314:	f043 0220 	orr.w	r2, r3, #32
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2200      	movs	r2, #0
 8005320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	e007      	b.n	8005338 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	695b      	ldr	r3, [r3, #20]
 800532e:	f003 0304 	and.w	r3, r3, #4
 8005332:	2b04      	cmp	r3, #4
 8005334:	d1ca      	bne.n	80052cc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005336:	2300      	movs	r3, #0
}
 8005338:	4618      	mov	r0, r3
 800533a:	3710      	adds	r7, #16
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}

08005340 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b084      	sub	sp, #16
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800534c:	e042      	b.n	80053d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	695b      	ldr	r3, [r3, #20]
 8005354:	f003 0310 	and.w	r3, r3, #16
 8005358:	2b10      	cmp	r3, #16
 800535a:	d119      	bne.n	8005390 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f06f 0210 	mvn.w	r2, #16
 8005364:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2200      	movs	r2, #0
 800536a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2220      	movs	r2, #32
 8005370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2200      	movs	r2, #0
 8005378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2200      	movs	r2, #0
 8005388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	e029      	b.n	80053e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005390:	f7fc fe1c 	bl	8001fcc <HAL_GetTick>
 8005394:	4602      	mov	r2, r0
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	1ad3      	subs	r3, r2, r3
 800539a:	68ba      	ldr	r2, [r7, #8]
 800539c:	429a      	cmp	r2, r3
 800539e:	d302      	bcc.n	80053a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d116      	bne.n	80053d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2200      	movs	r2, #0
 80053aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2220      	movs	r2, #32
 80053b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2200      	movs	r2, #0
 80053b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c0:	f043 0220 	orr.w	r2, r3, #32
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2200      	movs	r2, #0
 80053cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	e007      	b.n	80053e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	695b      	ldr	r3, [r3, #20]
 80053da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053de:	2b40      	cmp	r3, #64	; 0x40
 80053e0:	d1b5      	bne.n	800534e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80053e2:	2300      	movs	r3, #0
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3710      	adds	r7, #16
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}

080053ec <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b083      	sub	sp, #12
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	695b      	ldr	r3, [r3, #20]
 80053fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005402:	d11b      	bne.n	800543c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800540c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2220      	movs	r2, #32
 8005418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005428:	f043 0204 	orr.w	r2, r3, #4
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2200      	movs	r2, #0
 8005434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	e000      	b.n	800543e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	370c      	adds	r7, #12
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr

0800544a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800544a:	b480      	push	{r7}
 800544c:	b083      	sub	sp, #12
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
 8005452:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800545a:	b2db      	uxtb	r3, r3
 800545c:	2b20      	cmp	r3, #32
 800545e:	d129      	bne.n	80054b4 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2224      	movs	r2, #36	; 0x24
 8005464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f022 0201 	bic.w	r2, r2, #1
 8005476:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f022 0210 	bic.w	r2, r2, #16
 8005486:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	683a      	ldr	r2, [r7, #0]
 8005494:	430a      	orrs	r2, r1
 8005496:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f042 0201 	orr.w	r2, r2, #1
 80054a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2220      	movs	r2, #32
 80054ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80054b0:	2300      	movs	r3, #0
 80054b2:	e000      	b.n	80054b6 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80054b4:	2302      	movs	r3, #2
  }
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	370c      	adds	r7, #12
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr

080054c2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80054c2:	b480      	push	{r7}
 80054c4:	b085      	sub	sp, #20
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
 80054ca:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80054cc:	2300      	movs	r3, #0
 80054ce:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	2b20      	cmp	r3, #32
 80054da:	d12a      	bne.n	8005532 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2224      	movs	r2, #36	; 0x24
 80054e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f022 0201 	bic.w	r2, r2, #1
 80054f2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fa:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80054fc:	89fb      	ldrh	r3, [r7, #14]
 80054fe:	f023 030f 	bic.w	r3, r3, #15
 8005502:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	b29a      	uxth	r2, r3
 8005508:	89fb      	ldrh	r3, [r7, #14]
 800550a:	4313      	orrs	r3, r2
 800550c:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	89fa      	ldrh	r2, [r7, #14]
 8005514:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f042 0201 	orr.w	r2, r2, #1
 8005524:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2220      	movs	r2, #32
 800552a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800552e:	2300      	movs	r3, #0
 8005530:	e000      	b.n	8005534 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005532:	2302      	movs	r3, #2
  }
}
 8005534:	4618      	mov	r0, r3
 8005536:	3714      	adds	r7, #20
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr

08005540 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b086      	sub	sp, #24
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d101      	bne.n	8005552 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e267      	b.n	8005a22 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 0301 	and.w	r3, r3, #1
 800555a:	2b00      	cmp	r3, #0
 800555c:	d075      	beq.n	800564a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800555e:	4b88      	ldr	r3, [pc, #544]	; (8005780 <HAL_RCC_OscConfig+0x240>)
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	f003 030c 	and.w	r3, r3, #12
 8005566:	2b04      	cmp	r3, #4
 8005568:	d00c      	beq.n	8005584 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800556a:	4b85      	ldr	r3, [pc, #532]	; (8005780 <HAL_RCC_OscConfig+0x240>)
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005572:	2b08      	cmp	r3, #8
 8005574:	d112      	bne.n	800559c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005576:	4b82      	ldr	r3, [pc, #520]	; (8005780 <HAL_RCC_OscConfig+0x240>)
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800557e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005582:	d10b      	bne.n	800559c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005584:	4b7e      	ldr	r3, [pc, #504]	; (8005780 <HAL_RCC_OscConfig+0x240>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800558c:	2b00      	cmp	r3, #0
 800558e:	d05b      	beq.n	8005648 <HAL_RCC_OscConfig+0x108>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d157      	bne.n	8005648 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	e242      	b.n	8005a22 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055a4:	d106      	bne.n	80055b4 <HAL_RCC_OscConfig+0x74>
 80055a6:	4b76      	ldr	r3, [pc, #472]	; (8005780 <HAL_RCC_OscConfig+0x240>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a75      	ldr	r2, [pc, #468]	; (8005780 <HAL_RCC_OscConfig+0x240>)
 80055ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055b0:	6013      	str	r3, [r2, #0]
 80055b2:	e01d      	b.n	80055f0 <HAL_RCC_OscConfig+0xb0>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80055bc:	d10c      	bne.n	80055d8 <HAL_RCC_OscConfig+0x98>
 80055be:	4b70      	ldr	r3, [pc, #448]	; (8005780 <HAL_RCC_OscConfig+0x240>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a6f      	ldr	r2, [pc, #444]	; (8005780 <HAL_RCC_OscConfig+0x240>)
 80055c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055c8:	6013      	str	r3, [r2, #0]
 80055ca:	4b6d      	ldr	r3, [pc, #436]	; (8005780 <HAL_RCC_OscConfig+0x240>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a6c      	ldr	r2, [pc, #432]	; (8005780 <HAL_RCC_OscConfig+0x240>)
 80055d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055d4:	6013      	str	r3, [r2, #0]
 80055d6:	e00b      	b.n	80055f0 <HAL_RCC_OscConfig+0xb0>
 80055d8:	4b69      	ldr	r3, [pc, #420]	; (8005780 <HAL_RCC_OscConfig+0x240>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a68      	ldr	r2, [pc, #416]	; (8005780 <HAL_RCC_OscConfig+0x240>)
 80055de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055e2:	6013      	str	r3, [r2, #0]
 80055e4:	4b66      	ldr	r3, [pc, #408]	; (8005780 <HAL_RCC_OscConfig+0x240>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a65      	ldr	r2, [pc, #404]	; (8005780 <HAL_RCC_OscConfig+0x240>)
 80055ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d013      	beq.n	8005620 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055f8:	f7fc fce8 	bl	8001fcc <HAL_GetTick>
 80055fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055fe:	e008      	b.n	8005612 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005600:	f7fc fce4 	bl	8001fcc <HAL_GetTick>
 8005604:	4602      	mov	r2, r0
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	1ad3      	subs	r3, r2, r3
 800560a:	2b64      	cmp	r3, #100	; 0x64
 800560c:	d901      	bls.n	8005612 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800560e:	2303      	movs	r3, #3
 8005610:	e207      	b.n	8005a22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005612:	4b5b      	ldr	r3, [pc, #364]	; (8005780 <HAL_RCC_OscConfig+0x240>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800561a:	2b00      	cmp	r3, #0
 800561c:	d0f0      	beq.n	8005600 <HAL_RCC_OscConfig+0xc0>
 800561e:	e014      	b.n	800564a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005620:	f7fc fcd4 	bl	8001fcc <HAL_GetTick>
 8005624:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005626:	e008      	b.n	800563a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005628:	f7fc fcd0 	bl	8001fcc <HAL_GetTick>
 800562c:	4602      	mov	r2, r0
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	1ad3      	subs	r3, r2, r3
 8005632:	2b64      	cmp	r3, #100	; 0x64
 8005634:	d901      	bls.n	800563a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005636:	2303      	movs	r3, #3
 8005638:	e1f3      	b.n	8005a22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800563a:	4b51      	ldr	r3, [pc, #324]	; (8005780 <HAL_RCC_OscConfig+0x240>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005642:	2b00      	cmp	r3, #0
 8005644:	d1f0      	bne.n	8005628 <HAL_RCC_OscConfig+0xe8>
 8005646:	e000      	b.n	800564a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005648:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 0302 	and.w	r3, r3, #2
 8005652:	2b00      	cmp	r3, #0
 8005654:	d063      	beq.n	800571e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005656:	4b4a      	ldr	r3, [pc, #296]	; (8005780 <HAL_RCC_OscConfig+0x240>)
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	f003 030c 	and.w	r3, r3, #12
 800565e:	2b00      	cmp	r3, #0
 8005660:	d00b      	beq.n	800567a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005662:	4b47      	ldr	r3, [pc, #284]	; (8005780 <HAL_RCC_OscConfig+0x240>)
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800566a:	2b08      	cmp	r3, #8
 800566c:	d11c      	bne.n	80056a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800566e:	4b44      	ldr	r3, [pc, #272]	; (8005780 <HAL_RCC_OscConfig+0x240>)
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005676:	2b00      	cmp	r3, #0
 8005678:	d116      	bne.n	80056a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800567a:	4b41      	ldr	r3, [pc, #260]	; (8005780 <HAL_RCC_OscConfig+0x240>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f003 0302 	and.w	r3, r3, #2
 8005682:	2b00      	cmp	r3, #0
 8005684:	d005      	beq.n	8005692 <HAL_RCC_OscConfig+0x152>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	68db      	ldr	r3, [r3, #12]
 800568a:	2b01      	cmp	r3, #1
 800568c:	d001      	beq.n	8005692 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e1c7      	b.n	8005a22 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005692:	4b3b      	ldr	r3, [pc, #236]	; (8005780 <HAL_RCC_OscConfig+0x240>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	691b      	ldr	r3, [r3, #16]
 800569e:	00db      	lsls	r3, r3, #3
 80056a0:	4937      	ldr	r1, [pc, #220]	; (8005780 <HAL_RCC_OscConfig+0x240>)
 80056a2:	4313      	orrs	r3, r2
 80056a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056a6:	e03a      	b.n	800571e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	68db      	ldr	r3, [r3, #12]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d020      	beq.n	80056f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80056b0:	4b34      	ldr	r3, [pc, #208]	; (8005784 <HAL_RCC_OscConfig+0x244>)
 80056b2:	2201      	movs	r2, #1
 80056b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056b6:	f7fc fc89 	bl	8001fcc <HAL_GetTick>
 80056ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056bc:	e008      	b.n	80056d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80056be:	f7fc fc85 	bl	8001fcc <HAL_GetTick>
 80056c2:	4602      	mov	r2, r0
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	2b02      	cmp	r3, #2
 80056ca:	d901      	bls.n	80056d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80056cc:	2303      	movs	r3, #3
 80056ce:	e1a8      	b.n	8005a22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056d0:	4b2b      	ldr	r3, [pc, #172]	; (8005780 <HAL_RCC_OscConfig+0x240>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 0302 	and.w	r3, r3, #2
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d0f0      	beq.n	80056be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056dc:	4b28      	ldr	r3, [pc, #160]	; (8005780 <HAL_RCC_OscConfig+0x240>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	691b      	ldr	r3, [r3, #16]
 80056e8:	00db      	lsls	r3, r3, #3
 80056ea:	4925      	ldr	r1, [pc, #148]	; (8005780 <HAL_RCC_OscConfig+0x240>)
 80056ec:	4313      	orrs	r3, r2
 80056ee:	600b      	str	r3, [r1, #0]
 80056f0:	e015      	b.n	800571e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056f2:	4b24      	ldr	r3, [pc, #144]	; (8005784 <HAL_RCC_OscConfig+0x244>)
 80056f4:	2200      	movs	r2, #0
 80056f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056f8:	f7fc fc68 	bl	8001fcc <HAL_GetTick>
 80056fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056fe:	e008      	b.n	8005712 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005700:	f7fc fc64 	bl	8001fcc <HAL_GetTick>
 8005704:	4602      	mov	r2, r0
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	1ad3      	subs	r3, r2, r3
 800570a:	2b02      	cmp	r3, #2
 800570c:	d901      	bls.n	8005712 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	e187      	b.n	8005a22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005712:	4b1b      	ldr	r3, [pc, #108]	; (8005780 <HAL_RCC_OscConfig+0x240>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f003 0302 	and.w	r3, r3, #2
 800571a:	2b00      	cmp	r3, #0
 800571c:	d1f0      	bne.n	8005700 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 0308 	and.w	r3, r3, #8
 8005726:	2b00      	cmp	r3, #0
 8005728:	d036      	beq.n	8005798 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	695b      	ldr	r3, [r3, #20]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d016      	beq.n	8005760 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005732:	4b15      	ldr	r3, [pc, #84]	; (8005788 <HAL_RCC_OscConfig+0x248>)
 8005734:	2201      	movs	r2, #1
 8005736:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005738:	f7fc fc48 	bl	8001fcc <HAL_GetTick>
 800573c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800573e:	e008      	b.n	8005752 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005740:	f7fc fc44 	bl	8001fcc <HAL_GetTick>
 8005744:	4602      	mov	r2, r0
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	2b02      	cmp	r3, #2
 800574c:	d901      	bls.n	8005752 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800574e:	2303      	movs	r3, #3
 8005750:	e167      	b.n	8005a22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005752:	4b0b      	ldr	r3, [pc, #44]	; (8005780 <HAL_RCC_OscConfig+0x240>)
 8005754:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005756:	f003 0302 	and.w	r3, r3, #2
 800575a:	2b00      	cmp	r3, #0
 800575c:	d0f0      	beq.n	8005740 <HAL_RCC_OscConfig+0x200>
 800575e:	e01b      	b.n	8005798 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005760:	4b09      	ldr	r3, [pc, #36]	; (8005788 <HAL_RCC_OscConfig+0x248>)
 8005762:	2200      	movs	r2, #0
 8005764:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005766:	f7fc fc31 	bl	8001fcc <HAL_GetTick>
 800576a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800576c:	e00e      	b.n	800578c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800576e:	f7fc fc2d 	bl	8001fcc <HAL_GetTick>
 8005772:	4602      	mov	r2, r0
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	1ad3      	subs	r3, r2, r3
 8005778:	2b02      	cmp	r3, #2
 800577a:	d907      	bls.n	800578c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800577c:	2303      	movs	r3, #3
 800577e:	e150      	b.n	8005a22 <HAL_RCC_OscConfig+0x4e2>
 8005780:	40023800 	.word	0x40023800
 8005784:	42470000 	.word	0x42470000
 8005788:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800578c:	4b88      	ldr	r3, [pc, #544]	; (80059b0 <HAL_RCC_OscConfig+0x470>)
 800578e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005790:	f003 0302 	and.w	r3, r3, #2
 8005794:	2b00      	cmp	r3, #0
 8005796:	d1ea      	bne.n	800576e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 0304 	and.w	r3, r3, #4
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	f000 8097 	beq.w	80058d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057a6:	2300      	movs	r3, #0
 80057a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057aa:	4b81      	ldr	r3, [pc, #516]	; (80059b0 <HAL_RCC_OscConfig+0x470>)
 80057ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d10f      	bne.n	80057d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057b6:	2300      	movs	r3, #0
 80057b8:	60bb      	str	r3, [r7, #8]
 80057ba:	4b7d      	ldr	r3, [pc, #500]	; (80059b0 <HAL_RCC_OscConfig+0x470>)
 80057bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057be:	4a7c      	ldr	r2, [pc, #496]	; (80059b0 <HAL_RCC_OscConfig+0x470>)
 80057c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057c4:	6413      	str	r3, [r2, #64]	; 0x40
 80057c6:	4b7a      	ldr	r3, [pc, #488]	; (80059b0 <HAL_RCC_OscConfig+0x470>)
 80057c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057ce:	60bb      	str	r3, [r7, #8]
 80057d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057d2:	2301      	movs	r3, #1
 80057d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057d6:	4b77      	ldr	r3, [pc, #476]	; (80059b4 <HAL_RCC_OscConfig+0x474>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d118      	bne.n	8005814 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80057e2:	4b74      	ldr	r3, [pc, #464]	; (80059b4 <HAL_RCC_OscConfig+0x474>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a73      	ldr	r2, [pc, #460]	; (80059b4 <HAL_RCC_OscConfig+0x474>)
 80057e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057ee:	f7fc fbed 	bl	8001fcc <HAL_GetTick>
 80057f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057f4:	e008      	b.n	8005808 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057f6:	f7fc fbe9 	bl	8001fcc <HAL_GetTick>
 80057fa:	4602      	mov	r2, r0
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	1ad3      	subs	r3, r2, r3
 8005800:	2b02      	cmp	r3, #2
 8005802:	d901      	bls.n	8005808 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005804:	2303      	movs	r3, #3
 8005806:	e10c      	b.n	8005a22 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005808:	4b6a      	ldr	r3, [pc, #424]	; (80059b4 <HAL_RCC_OscConfig+0x474>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005810:	2b00      	cmp	r3, #0
 8005812:	d0f0      	beq.n	80057f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	2b01      	cmp	r3, #1
 800581a:	d106      	bne.n	800582a <HAL_RCC_OscConfig+0x2ea>
 800581c:	4b64      	ldr	r3, [pc, #400]	; (80059b0 <HAL_RCC_OscConfig+0x470>)
 800581e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005820:	4a63      	ldr	r2, [pc, #396]	; (80059b0 <HAL_RCC_OscConfig+0x470>)
 8005822:	f043 0301 	orr.w	r3, r3, #1
 8005826:	6713      	str	r3, [r2, #112]	; 0x70
 8005828:	e01c      	b.n	8005864 <HAL_RCC_OscConfig+0x324>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	2b05      	cmp	r3, #5
 8005830:	d10c      	bne.n	800584c <HAL_RCC_OscConfig+0x30c>
 8005832:	4b5f      	ldr	r3, [pc, #380]	; (80059b0 <HAL_RCC_OscConfig+0x470>)
 8005834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005836:	4a5e      	ldr	r2, [pc, #376]	; (80059b0 <HAL_RCC_OscConfig+0x470>)
 8005838:	f043 0304 	orr.w	r3, r3, #4
 800583c:	6713      	str	r3, [r2, #112]	; 0x70
 800583e:	4b5c      	ldr	r3, [pc, #368]	; (80059b0 <HAL_RCC_OscConfig+0x470>)
 8005840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005842:	4a5b      	ldr	r2, [pc, #364]	; (80059b0 <HAL_RCC_OscConfig+0x470>)
 8005844:	f043 0301 	orr.w	r3, r3, #1
 8005848:	6713      	str	r3, [r2, #112]	; 0x70
 800584a:	e00b      	b.n	8005864 <HAL_RCC_OscConfig+0x324>
 800584c:	4b58      	ldr	r3, [pc, #352]	; (80059b0 <HAL_RCC_OscConfig+0x470>)
 800584e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005850:	4a57      	ldr	r2, [pc, #348]	; (80059b0 <HAL_RCC_OscConfig+0x470>)
 8005852:	f023 0301 	bic.w	r3, r3, #1
 8005856:	6713      	str	r3, [r2, #112]	; 0x70
 8005858:	4b55      	ldr	r3, [pc, #340]	; (80059b0 <HAL_RCC_OscConfig+0x470>)
 800585a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800585c:	4a54      	ldr	r2, [pc, #336]	; (80059b0 <HAL_RCC_OscConfig+0x470>)
 800585e:	f023 0304 	bic.w	r3, r3, #4
 8005862:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d015      	beq.n	8005898 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800586c:	f7fc fbae 	bl	8001fcc <HAL_GetTick>
 8005870:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005872:	e00a      	b.n	800588a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005874:	f7fc fbaa 	bl	8001fcc <HAL_GetTick>
 8005878:	4602      	mov	r2, r0
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	1ad3      	subs	r3, r2, r3
 800587e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005882:	4293      	cmp	r3, r2
 8005884:	d901      	bls.n	800588a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005886:	2303      	movs	r3, #3
 8005888:	e0cb      	b.n	8005a22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800588a:	4b49      	ldr	r3, [pc, #292]	; (80059b0 <HAL_RCC_OscConfig+0x470>)
 800588c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800588e:	f003 0302 	and.w	r3, r3, #2
 8005892:	2b00      	cmp	r3, #0
 8005894:	d0ee      	beq.n	8005874 <HAL_RCC_OscConfig+0x334>
 8005896:	e014      	b.n	80058c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005898:	f7fc fb98 	bl	8001fcc <HAL_GetTick>
 800589c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800589e:	e00a      	b.n	80058b6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058a0:	f7fc fb94 	bl	8001fcc <HAL_GetTick>
 80058a4:	4602      	mov	r2, r0
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	1ad3      	subs	r3, r2, r3
 80058aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d901      	bls.n	80058b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80058b2:	2303      	movs	r3, #3
 80058b4:	e0b5      	b.n	8005a22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058b6:	4b3e      	ldr	r3, [pc, #248]	; (80059b0 <HAL_RCC_OscConfig+0x470>)
 80058b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ba:	f003 0302 	and.w	r3, r3, #2
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d1ee      	bne.n	80058a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80058c2:	7dfb      	ldrb	r3, [r7, #23]
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d105      	bne.n	80058d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058c8:	4b39      	ldr	r3, [pc, #228]	; (80059b0 <HAL_RCC_OscConfig+0x470>)
 80058ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058cc:	4a38      	ldr	r2, [pc, #224]	; (80059b0 <HAL_RCC_OscConfig+0x470>)
 80058ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	699b      	ldr	r3, [r3, #24]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	f000 80a1 	beq.w	8005a20 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80058de:	4b34      	ldr	r3, [pc, #208]	; (80059b0 <HAL_RCC_OscConfig+0x470>)
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	f003 030c 	and.w	r3, r3, #12
 80058e6:	2b08      	cmp	r3, #8
 80058e8:	d05c      	beq.n	80059a4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	699b      	ldr	r3, [r3, #24]
 80058ee:	2b02      	cmp	r3, #2
 80058f0:	d141      	bne.n	8005976 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058f2:	4b31      	ldr	r3, [pc, #196]	; (80059b8 <HAL_RCC_OscConfig+0x478>)
 80058f4:	2200      	movs	r2, #0
 80058f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058f8:	f7fc fb68 	bl	8001fcc <HAL_GetTick>
 80058fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058fe:	e008      	b.n	8005912 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005900:	f7fc fb64 	bl	8001fcc <HAL_GetTick>
 8005904:	4602      	mov	r2, r0
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	1ad3      	subs	r3, r2, r3
 800590a:	2b02      	cmp	r3, #2
 800590c:	d901      	bls.n	8005912 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800590e:	2303      	movs	r3, #3
 8005910:	e087      	b.n	8005a22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005912:	4b27      	ldr	r3, [pc, #156]	; (80059b0 <HAL_RCC_OscConfig+0x470>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800591a:	2b00      	cmp	r3, #0
 800591c:	d1f0      	bne.n	8005900 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	69da      	ldr	r2, [r3, #28]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6a1b      	ldr	r3, [r3, #32]
 8005926:	431a      	orrs	r2, r3
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592c:	019b      	lsls	r3, r3, #6
 800592e:	431a      	orrs	r2, r3
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005934:	085b      	lsrs	r3, r3, #1
 8005936:	3b01      	subs	r3, #1
 8005938:	041b      	lsls	r3, r3, #16
 800593a:	431a      	orrs	r2, r3
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005940:	061b      	lsls	r3, r3, #24
 8005942:	491b      	ldr	r1, [pc, #108]	; (80059b0 <HAL_RCC_OscConfig+0x470>)
 8005944:	4313      	orrs	r3, r2
 8005946:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005948:	4b1b      	ldr	r3, [pc, #108]	; (80059b8 <HAL_RCC_OscConfig+0x478>)
 800594a:	2201      	movs	r2, #1
 800594c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800594e:	f7fc fb3d 	bl	8001fcc <HAL_GetTick>
 8005952:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005954:	e008      	b.n	8005968 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005956:	f7fc fb39 	bl	8001fcc <HAL_GetTick>
 800595a:	4602      	mov	r2, r0
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	1ad3      	subs	r3, r2, r3
 8005960:	2b02      	cmp	r3, #2
 8005962:	d901      	bls.n	8005968 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005964:	2303      	movs	r3, #3
 8005966:	e05c      	b.n	8005a22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005968:	4b11      	ldr	r3, [pc, #68]	; (80059b0 <HAL_RCC_OscConfig+0x470>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005970:	2b00      	cmp	r3, #0
 8005972:	d0f0      	beq.n	8005956 <HAL_RCC_OscConfig+0x416>
 8005974:	e054      	b.n	8005a20 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005976:	4b10      	ldr	r3, [pc, #64]	; (80059b8 <HAL_RCC_OscConfig+0x478>)
 8005978:	2200      	movs	r2, #0
 800597a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800597c:	f7fc fb26 	bl	8001fcc <HAL_GetTick>
 8005980:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005982:	e008      	b.n	8005996 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005984:	f7fc fb22 	bl	8001fcc <HAL_GetTick>
 8005988:	4602      	mov	r2, r0
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	1ad3      	subs	r3, r2, r3
 800598e:	2b02      	cmp	r3, #2
 8005990:	d901      	bls.n	8005996 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005992:	2303      	movs	r3, #3
 8005994:	e045      	b.n	8005a22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005996:	4b06      	ldr	r3, [pc, #24]	; (80059b0 <HAL_RCC_OscConfig+0x470>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d1f0      	bne.n	8005984 <HAL_RCC_OscConfig+0x444>
 80059a2:	e03d      	b.n	8005a20 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	699b      	ldr	r3, [r3, #24]
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d107      	bne.n	80059bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	e038      	b.n	8005a22 <HAL_RCC_OscConfig+0x4e2>
 80059b0:	40023800 	.word	0x40023800
 80059b4:	40007000 	.word	0x40007000
 80059b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80059bc:	4b1b      	ldr	r3, [pc, #108]	; (8005a2c <HAL_RCC_OscConfig+0x4ec>)
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	699b      	ldr	r3, [r3, #24]
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d028      	beq.n	8005a1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d121      	bne.n	8005a1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d11a      	bne.n	8005a1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80059e6:	68fa      	ldr	r2, [r7, #12]
 80059e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80059ec:	4013      	ands	r3, r2
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80059f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d111      	bne.n	8005a1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a02:	085b      	lsrs	r3, r3, #1
 8005a04:	3b01      	subs	r3, #1
 8005a06:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d107      	bne.n	8005a1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a16:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d001      	beq.n	8005a20 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	e000      	b.n	8005a22 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005a20:	2300      	movs	r3, #0
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3718      	adds	r7, #24
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
 8005a2a:	bf00      	nop
 8005a2c:	40023800 	.word	0x40023800

08005a30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b084      	sub	sp, #16
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d101      	bne.n	8005a44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	e0cc      	b.n	8005bde <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a44:	4b68      	ldr	r3, [pc, #416]	; (8005be8 <HAL_RCC_ClockConfig+0x1b8>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 030f 	and.w	r3, r3, #15
 8005a4c:	683a      	ldr	r2, [r7, #0]
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d90c      	bls.n	8005a6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a52:	4b65      	ldr	r3, [pc, #404]	; (8005be8 <HAL_RCC_ClockConfig+0x1b8>)
 8005a54:	683a      	ldr	r2, [r7, #0]
 8005a56:	b2d2      	uxtb	r2, r2
 8005a58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a5a:	4b63      	ldr	r3, [pc, #396]	; (8005be8 <HAL_RCC_ClockConfig+0x1b8>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f003 030f 	and.w	r3, r3, #15
 8005a62:	683a      	ldr	r2, [r7, #0]
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d001      	beq.n	8005a6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e0b8      	b.n	8005bde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f003 0302 	and.w	r3, r3, #2
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d020      	beq.n	8005aba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f003 0304 	and.w	r3, r3, #4
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d005      	beq.n	8005a90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a84:	4b59      	ldr	r3, [pc, #356]	; (8005bec <HAL_RCC_ClockConfig+0x1bc>)
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	4a58      	ldr	r2, [pc, #352]	; (8005bec <HAL_RCC_ClockConfig+0x1bc>)
 8005a8a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005a8e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 0308 	and.w	r3, r3, #8
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d005      	beq.n	8005aa8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a9c:	4b53      	ldr	r3, [pc, #332]	; (8005bec <HAL_RCC_ClockConfig+0x1bc>)
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	4a52      	ldr	r2, [pc, #328]	; (8005bec <HAL_RCC_ClockConfig+0x1bc>)
 8005aa2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005aa6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005aa8:	4b50      	ldr	r3, [pc, #320]	; (8005bec <HAL_RCC_ClockConfig+0x1bc>)
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	494d      	ldr	r1, [pc, #308]	; (8005bec <HAL_RCC_ClockConfig+0x1bc>)
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f003 0301 	and.w	r3, r3, #1
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d044      	beq.n	8005b50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d107      	bne.n	8005ade <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ace:	4b47      	ldr	r3, [pc, #284]	; (8005bec <HAL_RCC_ClockConfig+0x1bc>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d119      	bne.n	8005b0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	e07f      	b.n	8005bde <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	2b02      	cmp	r3, #2
 8005ae4:	d003      	beq.n	8005aee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005aea:	2b03      	cmp	r3, #3
 8005aec:	d107      	bne.n	8005afe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005aee:	4b3f      	ldr	r3, [pc, #252]	; (8005bec <HAL_RCC_ClockConfig+0x1bc>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d109      	bne.n	8005b0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	e06f      	b.n	8005bde <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005afe:	4b3b      	ldr	r3, [pc, #236]	; (8005bec <HAL_RCC_ClockConfig+0x1bc>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f003 0302 	and.w	r3, r3, #2
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d101      	bne.n	8005b0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e067      	b.n	8005bde <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b0e:	4b37      	ldr	r3, [pc, #220]	; (8005bec <HAL_RCC_ClockConfig+0x1bc>)
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	f023 0203 	bic.w	r2, r3, #3
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	4934      	ldr	r1, [pc, #208]	; (8005bec <HAL_RCC_ClockConfig+0x1bc>)
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b20:	f7fc fa54 	bl	8001fcc <HAL_GetTick>
 8005b24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b26:	e00a      	b.n	8005b3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b28:	f7fc fa50 	bl	8001fcc <HAL_GetTick>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	1ad3      	subs	r3, r2, r3
 8005b32:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d901      	bls.n	8005b3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005b3a:	2303      	movs	r3, #3
 8005b3c:	e04f      	b.n	8005bde <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b3e:	4b2b      	ldr	r3, [pc, #172]	; (8005bec <HAL_RCC_ClockConfig+0x1bc>)
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	f003 020c 	and.w	r2, r3, #12
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d1eb      	bne.n	8005b28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b50:	4b25      	ldr	r3, [pc, #148]	; (8005be8 <HAL_RCC_ClockConfig+0x1b8>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f003 030f 	and.w	r3, r3, #15
 8005b58:	683a      	ldr	r2, [r7, #0]
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d20c      	bcs.n	8005b78 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b5e:	4b22      	ldr	r3, [pc, #136]	; (8005be8 <HAL_RCC_ClockConfig+0x1b8>)
 8005b60:	683a      	ldr	r2, [r7, #0]
 8005b62:	b2d2      	uxtb	r2, r2
 8005b64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b66:	4b20      	ldr	r3, [pc, #128]	; (8005be8 <HAL_RCC_ClockConfig+0x1b8>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 030f 	and.w	r3, r3, #15
 8005b6e:	683a      	ldr	r2, [r7, #0]
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d001      	beq.n	8005b78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005b74:	2301      	movs	r3, #1
 8005b76:	e032      	b.n	8005bde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f003 0304 	and.w	r3, r3, #4
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d008      	beq.n	8005b96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b84:	4b19      	ldr	r3, [pc, #100]	; (8005bec <HAL_RCC_ClockConfig+0x1bc>)
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	4916      	ldr	r1, [pc, #88]	; (8005bec <HAL_RCC_ClockConfig+0x1bc>)
 8005b92:	4313      	orrs	r3, r2
 8005b94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f003 0308 	and.w	r3, r3, #8
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d009      	beq.n	8005bb6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ba2:	4b12      	ldr	r3, [pc, #72]	; (8005bec <HAL_RCC_ClockConfig+0x1bc>)
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	691b      	ldr	r3, [r3, #16]
 8005bae:	00db      	lsls	r3, r3, #3
 8005bb0:	490e      	ldr	r1, [pc, #56]	; (8005bec <HAL_RCC_ClockConfig+0x1bc>)
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005bb6:	f000 f821 	bl	8005bfc <HAL_RCC_GetSysClockFreq>
 8005bba:	4602      	mov	r2, r0
 8005bbc:	4b0b      	ldr	r3, [pc, #44]	; (8005bec <HAL_RCC_ClockConfig+0x1bc>)
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	091b      	lsrs	r3, r3, #4
 8005bc2:	f003 030f 	and.w	r3, r3, #15
 8005bc6:	490a      	ldr	r1, [pc, #40]	; (8005bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8005bc8:	5ccb      	ldrb	r3, [r1, r3]
 8005bca:	fa22 f303 	lsr.w	r3, r2, r3
 8005bce:	4a09      	ldr	r2, [pc, #36]	; (8005bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8005bd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005bd2:	4b09      	ldr	r3, [pc, #36]	; (8005bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f7fc f9b4 	bl	8001f44 <HAL_InitTick>

  return HAL_OK;
 8005bdc:	2300      	movs	r3, #0
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3710      	adds	r7, #16
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop
 8005be8:	40023c00 	.word	0x40023c00
 8005bec:	40023800 	.word	0x40023800
 8005bf0:	0800e75c 	.word	0x0800e75c
 8005bf4:	200000a8 	.word	0x200000a8
 8005bf8:	200000ac 	.word	0x200000ac

08005bfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005bfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c00:	b094      	sub	sp, #80	; 0x50
 8005c02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005c04:	2300      	movs	r3, #0
 8005c06:	647b      	str	r3, [r7, #68]	; 0x44
 8005c08:	2300      	movs	r3, #0
 8005c0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005c10:	2300      	movs	r3, #0
 8005c12:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c14:	4b79      	ldr	r3, [pc, #484]	; (8005dfc <HAL_RCC_GetSysClockFreq+0x200>)
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	f003 030c 	and.w	r3, r3, #12
 8005c1c:	2b08      	cmp	r3, #8
 8005c1e:	d00d      	beq.n	8005c3c <HAL_RCC_GetSysClockFreq+0x40>
 8005c20:	2b08      	cmp	r3, #8
 8005c22:	f200 80e1 	bhi.w	8005de8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d002      	beq.n	8005c30 <HAL_RCC_GetSysClockFreq+0x34>
 8005c2a:	2b04      	cmp	r3, #4
 8005c2c:	d003      	beq.n	8005c36 <HAL_RCC_GetSysClockFreq+0x3a>
 8005c2e:	e0db      	b.n	8005de8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005c30:	4b73      	ldr	r3, [pc, #460]	; (8005e00 <HAL_RCC_GetSysClockFreq+0x204>)
 8005c32:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005c34:	e0db      	b.n	8005dee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005c36:	4b73      	ldr	r3, [pc, #460]	; (8005e04 <HAL_RCC_GetSysClockFreq+0x208>)
 8005c38:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005c3a:	e0d8      	b.n	8005dee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005c3c:	4b6f      	ldr	r3, [pc, #444]	; (8005dfc <HAL_RCC_GetSysClockFreq+0x200>)
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c44:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005c46:	4b6d      	ldr	r3, [pc, #436]	; (8005dfc <HAL_RCC_GetSysClockFreq+0x200>)
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d063      	beq.n	8005d1a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c52:	4b6a      	ldr	r3, [pc, #424]	; (8005dfc <HAL_RCC_GetSysClockFreq+0x200>)
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	099b      	lsrs	r3, r3, #6
 8005c58:	2200      	movs	r2, #0
 8005c5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c5c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c64:	633b      	str	r3, [r7, #48]	; 0x30
 8005c66:	2300      	movs	r3, #0
 8005c68:	637b      	str	r3, [r7, #52]	; 0x34
 8005c6a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005c6e:	4622      	mov	r2, r4
 8005c70:	462b      	mov	r3, r5
 8005c72:	f04f 0000 	mov.w	r0, #0
 8005c76:	f04f 0100 	mov.w	r1, #0
 8005c7a:	0159      	lsls	r1, r3, #5
 8005c7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c80:	0150      	lsls	r0, r2, #5
 8005c82:	4602      	mov	r2, r0
 8005c84:	460b      	mov	r3, r1
 8005c86:	4621      	mov	r1, r4
 8005c88:	1a51      	subs	r1, r2, r1
 8005c8a:	6139      	str	r1, [r7, #16]
 8005c8c:	4629      	mov	r1, r5
 8005c8e:	eb63 0301 	sbc.w	r3, r3, r1
 8005c92:	617b      	str	r3, [r7, #20]
 8005c94:	f04f 0200 	mov.w	r2, #0
 8005c98:	f04f 0300 	mov.w	r3, #0
 8005c9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005ca0:	4659      	mov	r1, fp
 8005ca2:	018b      	lsls	r3, r1, #6
 8005ca4:	4651      	mov	r1, sl
 8005ca6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005caa:	4651      	mov	r1, sl
 8005cac:	018a      	lsls	r2, r1, #6
 8005cae:	4651      	mov	r1, sl
 8005cb0:	ebb2 0801 	subs.w	r8, r2, r1
 8005cb4:	4659      	mov	r1, fp
 8005cb6:	eb63 0901 	sbc.w	r9, r3, r1
 8005cba:	f04f 0200 	mov.w	r2, #0
 8005cbe:	f04f 0300 	mov.w	r3, #0
 8005cc2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005cc6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005cca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005cce:	4690      	mov	r8, r2
 8005cd0:	4699      	mov	r9, r3
 8005cd2:	4623      	mov	r3, r4
 8005cd4:	eb18 0303 	adds.w	r3, r8, r3
 8005cd8:	60bb      	str	r3, [r7, #8]
 8005cda:	462b      	mov	r3, r5
 8005cdc:	eb49 0303 	adc.w	r3, r9, r3
 8005ce0:	60fb      	str	r3, [r7, #12]
 8005ce2:	f04f 0200 	mov.w	r2, #0
 8005ce6:	f04f 0300 	mov.w	r3, #0
 8005cea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005cee:	4629      	mov	r1, r5
 8005cf0:	024b      	lsls	r3, r1, #9
 8005cf2:	4621      	mov	r1, r4
 8005cf4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005cf8:	4621      	mov	r1, r4
 8005cfa:	024a      	lsls	r2, r1, #9
 8005cfc:	4610      	mov	r0, r2
 8005cfe:	4619      	mov	r1, r3
 8005d00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d02:	2200      	movs	r2, #0
 8005d04:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d08:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005d0c:	f7fa fac0 	bl	8000290 <__aeabi_uldivmod>
 8005d10:	4602      	mov	r2, r0
 8005d12:	460b      	mov	r3, r1
 8005d14:	4613      	mov	r3, r2
 8005d16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d18:	e058      	b.n	8005dcc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d1a:	4b38      	ldr	r3, [pc, #224]	; (8005dfc <HAL_RCC_GetSysClockFreq+0x200>)
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	099b      	lsrs	r3, r3, #6
 8005d20:	2200      	movs	r2, #0
 8005d22:	4618      	mov	r0, r3
 8005d24:	4611      	mov	r1, r2
 8005d26:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005d2a:	623b      	str	r3, [r7, #32]
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	627b      	str	r3, [r7, #36]	; 0x24
 8005d30:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005d34:	4642      	mov	r2, r8
 8005d36:	464b      	mov	r3, r9
 8005d38:	f04f 0000 	mov.w	r0, #0
 8005d3c:	f04f 0100 	mov.w	r1, #0
 8005d40:	0159      	lsls	r1, r3, #5
 8005d42:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005d46:	0150      	lsls	r0, r2, #5
 8005d48:	4602      	mov	r2, r0
 8005d4a:	460b      	mov	r3, r1
 8005d4c:	4641      	mov	r1, r8
 8005d4e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005d52:	4649      	mov	r1, r9
 8005d54:	eb63 0b01 	sbc.w	fp, r3, r1
 8005d58:	f04f 0200 	mov.w	r2, #0
 8005d5c:	f04f 0300 	mov.w	r3, #0
 8005d60:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005d64:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005d68:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005d6c:	ebb2 040a 	subs.w	r4, r2, sl
 8005d70:	eb63 050b 	sbc.w	r5, r3, fp
 8005d74:	f04f 0200 	mov.w	r2, #0
 8005d78:	f04f 0300 	mov.w	r3, #0
 8005d7c:	00eb      	lsls	r3, r5, #3
 8005d7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d82:	00e2      	lsls	r2, r4, #3
 8005d84:	4614      	mov	r4, r2
 8005d86:	461d      	mov	r5, r3
 8005d88:	4643      	mov	r3, r8
 8005d8a:	18e3      	adds	r3, r4, r3
 8005d8c:	603b      	str	r3, [r7, #0]
 8005d8e:	464b      	mov	r3, r9
 8005d90:	eb45 0303 	adc.w	r3, r5, r3
 8005d94:	607b      	str	r3, [r7, #4]
 8005d96:	f04f 0200 	mov.w	r2, #0
 8005d9a:	f04f 0300 	mov.w	r3, #0
 8005d9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005da2:	4629      	mov	r1, r5
 8005da4:	028b      	lsls	r3, r1, #10
 8005da6:	4621      	mov	r1, r4
 8005da8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005dac:	4621      	mov	r1, r4
 8005dae:	028a      	lsls	r2, r1, #10
 8005db0:	4610      	mov	r0, r2
 8005db2:	4619      	mov	r1, r3
 8005db4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005db6:	2200      	movs	r2, #0
 8005db8:	61bb      	str	r3, [r7, #24]
 8005dba:	61fa      	str	r2, [r7, #28]
 8005dbc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005dc0:	f7fa fa66 	bl	8000290 <__aeabi_uldivmod>
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	460b      	mov	r3, r1
 8005dc8:	4613      	mov	r3, r2
 8005dca:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005dcc:	4b0b      	ldr	r3, [pc, #44]	; (8005dfc <HAL_RCC_GetSysClockFreq+0x200>)
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	0c1b      	lsrs	r3, r3, #16
 8005dd2:	f003 0303 	and.w	r3, r3, #3
 8005dd6:	3301      	adds	r3, #1
 8005dd8:	005b      	lsls	r3, r3, #1
 8005dda:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005ddc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005dde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005de4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005de6:	e002      	b.n	8005dee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005de8:	4b05      	ldr	r3, [pc, #20]	; (8005e00 <HAL_RCC_GetSysClockFreq+0x204>)
 8005dea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005dec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005dee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3750      	adds	r7, #80	; 0x50
 8005df4:	46bd      	mov	sp, r7
 8005df6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005dfa:	bf00      	nop
 8005dfc:	40023800 	.word	0x40023800
 8005e00:	00f42400 	.word	0x00f42400
 8005e04:	007a1200 	.word	0x007a1200

08005e08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e0c:	4b03      	ldr	r3, [pc, #12]	; (8005e1c <HAL_RCC_GetHCLKFreq+0x14>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr
 8005e1a:	bf00      	nop
 8005e1c:	200000a8 	.word	0x200000a8

08005e20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005e24:	f7ff fff0 	bl	8005e08 <HAL_RCC_GetHCLKFreq>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	4b05      	ldr	r3, [pc, #20]	; (8005e40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	0a9b      	lsrs	r3, r3, #10
 8005e30:	f003 0307 	and.w	r3, r3, #7
 8005e34:	4903      	ldr	r1, [pc, #12]	; (8005e44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e36:	5ccb      	ldrb	r3, [r1, r3]
 8005e38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	bd80      	pop	{r7, pc}
 8005e40:	40023800 	.word	0x40023800
 8005e44:	0800e76c 	.word	0x0800e76c

08005e48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005e4c:	f7ff ffdc 	bl	8005e08 <HAL_RCC_GetHCLKFreq>
 8005e50:	4602      	mov	r2, r0
 8005e52:	4b05      	ldr	r3, [pc, #20]	; (8005e68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	0b5b      	lsrs	r3, r3, #13
 8005e58:	f003 0307 	and.w	r3, r3, #7
 8005e5c:	4903      	ldr	r1, [pc, #12]	; (8005e6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e5e:	5ccb      	ldrb	r3, [r1, r3]
 8005e60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	bd80      	pop	{r7, pc}
 8005e68:	40023800 	.word	0x40023800
 8005e6c:	0800e76c 	.word	0x0800e76c

08005e70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b082      	sub	sp, #8
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d101      	bne.n	8005e82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e07b      	b.n	8005f7a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d108      	bne.n	8005e9c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e92:	d009      	beq.n	8005ea8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	61da      	str	r2, [r3, #28]
 8005e9a:	e005      	b.n	8005ea8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005eb4:	b2db      	uxtb	r3, r3
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d106      	bne.n	8005ec8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f7fb fd82 	bl	80019cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2202      	movs	r2, #2
 8005ecc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ede:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005ef0:	431a      	orrs	r2, r3
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	68db      	ldr	r3, [r3, #12]
 8005ef6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005efa:	431a      	orrs	r2, r3
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	691b      	ldr	r3, [r3, #16]
 8005f00:	f003 0302 	and.w	r3, r3, #2
 8005f04:	431a      	orrs	r2, r3
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	695b      	ldr	r3, [r3, #20]
 8005f0a:	f003 0301 	and.w	r3, r3, #1
 8005f0e:	431a      	orrs	r2, r3
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	699b      	ldr	r3, [r3, #24]
 8005f14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f18:	431a      	orrs	r2, r3
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	69db      	ldr	r3, [r3, #28]
 8005f1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f22:	431a      	orrs	r2, r3
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6a1b      	ldr	r3, [r3, #32]
 8005f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f2c:	ea42 0103 	orr.w	r1, r2, r3
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f34:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	430a      	orrs	r2, r1
 8005f3e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	699b      	ldr	r3, [r3, #24]
 8005f44:	0c1b      	lsrs	r3, r3, #16
 8005f46:	f003 0104 	and.w	r1, r3, #4
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f4e:	f003 0210 	and.w	r2, r3, #16
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	430a      	orrs	r2, r1
 8005f58:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	69da      	ldr	r2, [r3, #28]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f68:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005f78:	2300      	movs	r3, #0
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3708      	adds	r7, #8
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}

08005f82 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f82:	b580      	push	{r7, lr}
 8005f84:	b088      	sub	sp, #32
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	60f8      	str	r0, [r7, #12]
 8005f8a:	60b9      	str	r1, [r7, #8]
 8005f8c:	603b      	str	r3, [r7, #0]
 8005f8e:	4613      	mov	r3, r2
 8005f90:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005f92:	2300      	movs	r3, #0
 8005f94:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	d101      	bne.n	8005fa4 <HAL_SPI_Transmit+0x22>
 8005fa0:	2302      	movs	r3, #2
 8005fa2:	e126      	b.n	80061f2 <HAL_SPI_Transmit+0x270>
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005fac:	f7fc f80e 	bl	8001fcc <HAL_GetTick>
 8005fb0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005fb2:	88fb      	ldrh	r3, [r7, #6]
 8005fb4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d002      	beq.n	8005fc8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005fc2:	2302      	movs	r3, #2
 8005fc4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005fc6:	e10b      	b.n	80061e0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d002      	beq.n	8005fd4 <HAL_SPI_Transmit+0x52>
 8005fce:	88fb      	ldrh	r3, [r7, #6]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d102      	bne.n	8005fda <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005fd8:	e102      	b.n	80061e0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2203      	movs	r2, #3
 8005fde:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	68ba      	ldr	r2, [r7, #8]
 8005fec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	88fa      	ldrh	r2, [r7, #6]
 8005ff2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	88fa      	ldrh	r2, [r7, #6]
 8005ff8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2200      	movs	r2, #0
 8006004:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2200      	movs	r2, #0
 800600a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2200      	movs	r2, #0
 8006010:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2200      	movs	r2, #0
 8006016:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006020:	d10f      	bne.n	8006042 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006030:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	681a      	ldr	r2, [r3, #0]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006040:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800604c:	2b40      	cmp	r3, #64	; 0x40
 800604e:	d007      	beq.n	8006060 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800605e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006068:	d14b      	bne.n	8006102 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d002      	beq.n	8006078 <HAL_SPI_Transmit+0xf6>
 8006072:	8afb      	ldrh	r3, [r7, #22]
 8006074:	2b01      	cmp	r3, #1
 8006076:	d13e      	bne.n	80060f6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800607c:	881a      	ldrh	r2, [r3, #0]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006088:	1c9a      	adds	r2, r3, #2
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006092:	b29b      	uxth	r3, r3
 8006094:	3b01      	subs	r3, #1
 8006096:	b29a      	uxth	r2, r3
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800609c:	e02b      	b.n	80060f6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	f003 0302 	and.w	r3, r3, #2
 80060a8:	2b02      	cmp	r3, #2
 80060aa:	d112      	bne.n	80060d2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b0:	881a      	ldrh	r2, [r3, #0]
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060bc:	1c9a      	adds	r2, r3, #2
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	3b01      	subs	r3, #1
 80060ca:	b29a      	uxth	r2, r3
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	86da      	strh	r2, [r3, #54]	; 0x36
 80060d0:	e011      	b.n	80060f6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060d2:	f7fb ff7b 	bl	8001fcc <HAL_GetTick>
 80060d6:	4602      	mov	r2, r0
 80060d8:	69bb      	ldr	r3, [r7, #24]
 80060da:	1ad3      	subs	r3, r2, r3
 80060dc:	683a      	ldr	r2, [r7, #0]
 80060de:	429a      	cmp	r2, r3
 80060e0:	d803      	bhi.n	80060ea <HAL_SPI_Transmit+0x168>
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060e8:	d102      	bne.n	80060f0 <HAL_SPI_Transmit+0x16e>
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d102      	bne.n	80060f6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80060f0:	2303      	movs	r3, #3
 80060f2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80060f4:	e074      	b.n	80061e0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d1ce      	bne.n	800609e <HAL_SPI_Transmit+0x11c>
 8006100:	e04c      	b.n	800619c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d002      	beq.n	8006110 <HAL_SPI_Transmit+0x18e>
 800610a:	8afb      	ldrh	r3, [r7, #22]
 800610c:	2b01      	cmp	r3, #1
 800610e:	d140      	bne.n	8006192 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	330c      	adds	r3, #12
 800611a:	7812      	ldrb	r2, [r2, #0]
 800611c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006122:	1c5a      	adds	r2, r3, #1
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800612c:	b29b      	uxth	r3, r3
 800612e:	3b01      	subs	r3, #1
 8006130:	b29a      	uxth	r2, r3
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006136:	e02c      	b.n	8006192 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	f003 0302 	and.w	r3, r3, #2
 8006142:	2b02      	cmp	r3, #2
 8006144:	d113      	bne.n	800616e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	330c      	adds	r3, #12
 8006150:	7812      	ldrb	r2, [r2, #0]
 8006152:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006158:	1c5a      	adds	r2, r3, #1
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006162:	b29b      	uxth	r3, r3
 8006164:	3b01      	subs	r3, #1
 8006166:	b29a      	uxth	r2, r3
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	86da      	strh	r2, [r3, #54]	; 0x36
 800616c:	e011      	b.n	8006192 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800616e:	f7fb ff2d 	bl	8001fcc <HAL_GetTick>
 8006172:	4602      	mov	r2, r0
 8006174:	69bb      	ldr	r3, [r7, #24]
 8006176:	1ad3      	subs	r3, r2, r3
 8006178:	683a      	ldr	r2, [r7, #0]
 800617a:	429a      	cmp	r2, r3
 800617c:	d803      	bhi.n	8006186 <HAL_SPI_Transmit+0x204>
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006184:	d102      	bne.n	800618c <HAL_SPI_Transmit+0x20a>
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d102      	bne.n	8006192 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800618c:	2303      	movs	r3, #3
 800618e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006190:	e026      	b.n	80061e0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006196:	b29b      	uxth	r3, r3
 8006198:	2b00      	cmp	r3, #0
 800619a:	d1cd      	bne.n	8006138 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800619c:	69ba      	ldr	r2, [r7, #24]
 800619e:	6839      	ldr	r1, [r7, #0]
 80061a0:	68f8      	ldr	r0, [r7, #12]
 80061a2:	f000 fbcb 	bl	800693c <SPI_EndRxTxTransaction>
 80061a6:	4603      	mov	r3, r0
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d002      	beq.n	80061b2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2220      	movs	r2, #32
 80061b0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d10a      	bne.n	80061d0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80061ba:	2300      	movs	r3, #0
 80061bc:	613b      	str	r3, [r7, #16]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	613b      	str	r3, [r7, #16]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	689b      	ldr	r3, [r3, #8]
 80061cc:	613b      	str	r3, [r7, #16]
 80061ce:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d002      	beq.n	80061de <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80061d8:	2301      	movs	r3, #1
 80061da:	77fb      	strb	r3, [r7, #31]
 80061dc:	e000      	b.n	80061e0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80061de:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2201      	movs	r2, #1
 80061e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2200      	movs	r2, #0
 80061ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80061f0:	7ffb      	ldrb	r3, [r7, #31]
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3720      	adds	r7, #32
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}

080061fa <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061fa:	b580      	push	{r7, lr}
 80061fc:	b088      	sub	sp, #32
 80061fe:	af02      	add	r7, sp, #8
 8006200:	60f8      	str	r0, [r7, #12]
 8006202:	60b9      	str	r1, [r7, #8]
 8006204:	603b      	str	r3, [r7, #0]
 8006206:	4613      	mov	r3, r2
 8006208:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800620a:	2300      	movs	r3, #0
 800620c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006216:	d112      	bne.n	800623e <HAL_SPI_Receive+0x44>
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d10e      	bne.n	800623e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2204      	movs	r2, #4
 8006224:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006228:	88fa      	ldrh	r2, [r7, #6]
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	9300      	str	r3, [sp, #0]
 800622e:	4613      	mov	r3, r2
 8006230:	68ba      	ldr	r2, [r7, #8]
 8006232:	68b9      	ldr	r1, [r7, #8]
 8006234:	68f8      	ldr	r0, [r7, #12]
 8006236:	f000 f8f1 	bl	800641c <HAL_SPI_TransmitReceive>
 800623a:	4603      	mov	r3, r0
 800623c:	e0ea      	b.n	8006414 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006244:	2b01      	cmp	r3, #1
 8006246:	d101      	bne.n	800624c <HAL_SPI_Receive+0x52>
 8006248:	2302      	movs	r3, #2
 800624a:	e0e3      	b.n	8006414 <HAL_SPI_Receive+0x21a>
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2201      	movs	r2, #1
 8006250:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006254:	f7fb feba 	bl	8001fcc <HAL_GetTick>
 8006258:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006260:	b2db      	uxtb	r3, r3
 8006262:	2b01      	cmp	r3, #1
 8006264:	d002      	beq.n	800626c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006266:	2302      	movs	r3, #2
 8006268:	75fb      	strb	r3, [r7, #23]
    goto error;
 800626a:	e0ca      	b.n	8006402 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d002      	beq.n	8006278 <HAL_SPI_Receive+0x7e>
 8006272:	88fb      	ldrh	r3, [r7, #6]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d102      	bne.n	800627e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006278:	2301      	movs	r3, #1
 800627a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800627c:	e0c1      	b.n	8006402 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2204      	movs	r2, #4
 8006282:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2200      	movs	r2, #0
 800628a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	68ba      	ldr	r2, [r7, #8]
 8006290:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	88fa      	ldrh	r2, [r7, #6]
 8006296:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	88fa      	ldrh	r2, [r7, #6]
 800629c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2200      	movs	r2, #0
 80062a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2200      	movs	r2, #0
 80062a8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2200      	movs	r2, #0
 80062ae:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2200      	movs	r2, #0
 80062b4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2200      	movs	r2, #0
 80062ba:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062c4:	d10f      	bne.n	80062e6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80062e4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062f0:	2b40      	cmp	r3, #64	; 0x40
 80062f2:	d007      	beq.n	8006304 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006302:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	68db      	ldr	r3, [r3, #12]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d162      	bne.n	80063d2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800630c:	e02e      	b.n	800636c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	f003 0301 	and.w	r3, r3, #1
 8006318:	2b01      	cmp	r3, #1
 800631a:	d115      	bne.n	8006348 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f103 020c 	add.w	r2, r3, #12
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006328:	7812      	ldrb	r2, [r2, #0]
 800632a:	b2d2      	uxtb	r2, r2
 800632c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006332:	1c5a      	adds	r2, r3, #1
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800633c:	b29b      	uxth	r3, r3
 800633e:	3b01      	subs	r3, #1
 8006340:	b29a      	uxth	r2, r3
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006346:	e011      	b.n	800636c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006348:	f7fb fe40 	bl	8001fcc <HAL_GetTick>
 800634c:	4602      	mov	r2, r0
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	1ad3      	subs	r3, r2, r3
 8006352:	683a      	ldr	r2, [r7, #0]
 8006354:	429a      	cmp	r2, r3
 8006356:	d803      	bhi.n	8006360 <HAL_SPI_Receive+0x166>
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800635e:	d102      	bne.n	8006366 <HAL_SPI_Receive+0x16c>
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d102      	bne.n	800636c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8006366:	2303      	movs	r3, #3
 8006368:	75fb      	strb	r3, [r7, #23]
          goto error;
 800636a:	e04a      	b.n	8006402 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006370:	b29b      	uxth	r3, r3
 8006372:	2b00      	cmp	r3, #0
 8006374:	d1cb      	bne.n	800630e <HAL_SPI_Receive+0x114>
 8006376:	e031      	b.n	80063dc <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	f003 0301 	and.w	r3, r3, #1
 8006382:	2b01      	cmp	r3, #1
 8006384:	d113      	bne.n	80063ae <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	68da      	ldr	r2, [r3, #12]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006390:	b292      	uxth	r2, r2
 8006392:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006398:	1c9a      	adds	r2, r3, #2
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	3b01      	subs	r3, #1
 80063a6:	b29a      	uxth	r2, r3
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80063ac:	e011      	b.n	80063d2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063ae:	f7fb fe0d 	bl	8001fcc <HAL_GetTick>
 80063b2:	4602      	mov	r2, r0
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	1ad3      	subs	r3, r2, r3
 80063b8:	683a      	ldr	r2, [r7, #0]
 80063ba:	429a      	cmp	r2, r3
 80063bc:	d803      	bhi.n	80063c6 <HAL_SPI_Receive+0x1cc>
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063c4:	d102      	bne.n	80063cc <HAL_SPI_Receive+0x1d2>
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d102      	bne.n	80063d2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80063cc:	2303      	movs	r3, #3
 80063ce:	75fb      	strb	r3, [r7, #23]
          goto error;
 80063d0:	e017      	b.n	8006402 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d1cd      	bne.n	8006378 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80063dc:	693a      	ldr	r2, [r7, #16]
 80063de:	6839      	ldr	r1, [r7, #0]
 80063e0:	68f8      	ldr	r0, [r7, #12]
 80063e2:	f000 fa45 	bl	8006870 <SPI_EndRxTransaction>
 80063e6:	4603      	mov	r3, r0
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d002      	beq.n	80063f2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2220      	movs	r2, #32
 80063f0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d002      	beq.n	8006400 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	75fb      	strb	r3, [r7, #23]
 80063fe:	e000      	b.n	8006402 <HAL_SPI_Receive+0x208>
  }

error :
 8006400:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2201      	movs	r2, #1
 8006406:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2200      	movs	r2, #0
 800640e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006412:	7dfb      	ldrb	r3, [r7, #23]
}
 8006414:	4618      	mov	r0, r3
 8006416:	3718      	adds	r7, #24
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}

0800641c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b08c      	sub	sp, #48	; 0x30
 8006420:	af00      	add	r7, sp, #0
 8006422:	60f8      	str	r0, [r7, #12]
 8006424:	60b9      	str	r1, [r7, #8]
 8006426:	607a      	str	r2, [r7, #4]
 8006428:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800642a:	2301      	movs	r3, #1
 800642c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800642e:	2300      	movs	r3, #0
 8006430:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800643a:	2b01      	cmp	r3, #1
 800643c:	d101      	bne.n	8006442 <HAL_SPI_TransmitReceive+0x26>
 800643e:	2302      	movs	r3, #2
 8006440:	e18a      	b.n	8006758 <HAL_SPI_TransmitReceive+0x33c>
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2201      	movs	r2, #1
 8006446:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800644a:	f7fb fdbf 	bl	8001fcc <HAL_GetTick>
 800644e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006456:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006460:	887b      	ldrh	r3, [r7, #2]
 8006462:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006464:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006468:	2b01      	cmp	r3, #1
 800646a:	d00f      	beq.n	800648c <HAL_SPI_TransmitReceive+0x70>
 800646c:	69fb      	ldr	r3, [r7, #28]
 800646e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006472:	d107      	bne.n	8006484 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d103      	bne.n	8006484 <HAL_SPI_TransmitReceive+0x68>
 800647c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006480:	2b04      	cmp	r3, #4
 8006482:	d003      	beq.n	800648c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006484:	2302      	movs	r3, #2
 8006486:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800648a:	e15b      	b.n	8006744 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d005      	beq.n	800649e <HAL_SPI_TransmitReceive+0x82>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d002      	beq.n	800649e <HAL_SPI_TransmitReceive+0x82>
 8006498:	887b      	ldrh	r3, [r7, #2]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d103      	bne.n	80064a6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80064a4:	e14e      	b.n	8006744 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	2b04      	cmp	r3, #4
 80064b0:	d003      	beq.n	80064ba <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2205      	movs	r2, #5
 80064b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2200      	movs	r2, #0
 80064be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	887a      	ldrh	r2, [r7, #2]
 80064ca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	887a      	ldrh	r2, [r7, #2]
 80064d0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	68ba      	ldr	r2, [r7, #8]
 80064d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	887a      	ldrh	r2, [r7, #2]
 80064dc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	887a      	ldrh	r2, [r7, #2]
 80064e2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2200      	movs	r2, #0
 80064e8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2200      	movs	r2, #0
 80064ee:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064fa:	2b40      	cmp	r3, #64	; 0x40
 80064fc:	d007      	beq.n	800650e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800650c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	68db      	ldr	r3, [r3, #12]
 8006512:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006516:	d178      	bne.n	800660a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d002      	beq.n	8006526 <HAL_SPI_TransmitReceive+0x10a>
 8006520:	8b7b      	ldrh	r3, [r7, #26]
 8006522:	2b01      	cmp	r3, #1
 8006524:	d166      	bne.n	80065f4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800652a:	881a      	ldrh	r2, [r3, #0]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006536:	1c9a      	adds	r2, r3, #2
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006540:	b29b      	uxth	r3, r3
 8006542:	3b01      	subs	r3, #1
 8006544:	b29a      	uxth	r2, r3
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800654a:	e053      	b.n	80065f4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	f003 0302 	and.w	r3, r3, #2
 8006556:	2b02      	cmp	r3, #2
 8006558:	d11b      	bne.n	8006592 <HAL_SPI_TransmitReceive+0x176>
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800655e:	b29b      	uxth	r3, r3
 8006560:	2b00      	cmp	r3, #0
 8006562:	d016      	beq.n	8006592 <HAL_SPI_TransmitReceive+0x176>
 8006564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006566:	2b01      	cmp	r3, #1
 8006568:	d113      	bne.n	8006592 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800656e:	881a      	ldrh	r2, [r3, #0]
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800657a:	1c9a      	adds	r2, r3, #2
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006584:	b29b      	uxth	r3, r3
 8006586:	3b01      	subs	r3, #1
 8006588:	b29a      	uxth	r2, r3
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800658e:	2300      	movs	r3, #0
 8006590:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	f003 0301 	and.w	r3, r3, #1
 800659c:	2b01      	cmp	r3, #1
 800659e:	d119      	bne.n	80065d4 <HAL_SPI_TransmitReceive+0x1b8>
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d014      	beq.n	80065d4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	68da      	ldr	r2, [r3, #12]
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b4:	b292      	uxth	r2, r2
 80065b6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065bc:	1c9a      	adds	r2, r3, #2
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	3b01      	subs	r3, #1
 80065ca:	b29a      	uxth	r2, r3
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80065d0:	2301      	movs	r3, #1
 80065d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80065d4:	f7fb fcfa 	bl	8001fcc <HAL_GetTick>
 80065d8:	4602      	mov	r2, r0
 80065da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065dc:	1ad3      	subs	r3, r2, r3
 80065de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d807      	bhi.n	80065f4 <HAL_SPI_TransmitReceive+0x1d8>
 80065e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065ea:	d003      	beq.n	80065f4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80065ec:	2303      	movs	r3, #3
 80065ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80065f2:	e0a7      	b.n	8006744 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d1a6      	bne.n	800654c <HAL_SPI_TransmitReceive+0x130>
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006602:	b29b      	uxth	r3, r3
 8006604:	2b00      	cmp	r3, #0
 8006606:	d1a1      	bne.n	800654c <HAL_SPI_TransmitReceive+0x130>
 8006608:	e07c      	b.n	8006704 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d002      	beq.n	8006618 <HAL_SPI_TransmitReceive+0x1fc>
 8006612:	8b7b      	ldrh	r3, [r7, #26]
 8006614:	2b01      	cmp	r3, #1
 8006616:	d16b      	bne.n	80066f0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	330c      	adds	r3, #12
 8006622:	7812      	ldrb	r2, [r2, #0]
 8006624:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800662a:	1c5a      	adds	r2, r3, #1
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006634:	b29b      	uxth	r3, r3
 8006636:	3b01      	subs	r3, #1
 8006638:	b29a      	uxth	r2, r3
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800663e:	e057      	b.n	80066f0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	f003 0302 	and.w	r3, r3, #2
 800664a:	2b02      	cmp	r3, #2
 800664c:	d11c      	bne.n	8006688 <HAL_SPI_TransmitReceive+0x26c>
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006652:	b29b      	uxth	r3, r3
 8006654:	2b00      	cmp	r3, #0
 8006656:	d017      	beq.n	8006688 <HAL_SPI_TransmitReceive+0x26c>
 8006658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800665a:	2b01      	cmp	r3, #1
 800665c:	d114      	bne.n	8006688 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	330c      	adds	r3, #12
 8006668:	7812      	ldrb	r2, [r2, #0]
 800666a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006670:	1c5a      	adds	r2, r3, #1
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800667a:	b29b      	uxth	r3, r3
 800667c:	3b01      	subs	r3, #1
 800667e:	b29a      	uxth	r2, r3
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006684:	2300      	movs	r3, #0
 8006686:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	f003 0301 	and.w	r3, r3, #1
 8006692:	2b01      	cmp	r3, #1
 8006694:	d119      	bne.n	80066ca <HAL_SPI_TransmitReceive+0x2ae>
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800669a:	b29b      	uxth	r3, r3
 800669c:	2b00      	cmp	r3, #0
 800669e:	d014      	beq.n	80066ca <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	68da      	ldr	r2, [r3, #12]
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066aa:	b2d2      	uxtb	r2, r2
 80066ac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066b2:	1c5a      	adds	r2, r3, #1
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066bc:	b29b      	uxth	r3, r3
 80066be:	3b01      	subs	r3, #1
 80066c0:	b29a      	uxth	r2, r3
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80066c6:	2301      	movs	r3, #1
 80066c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80066ca:	f7fb fc7f 	bl	8001fcc <HAL_GetTick>
 80066ce:	4602      	mov	r2, r0
 80066d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d2:	1ad3      	subs	r3, r2, r3
 80066d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d803      	bhi.n	80066e2 <HAL_SPI_TransmitReceive+0x2c6>
 80066da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066e0:	d102      	bne.n	80066e8 <HAL_SPI_TransmitReceive+0x2cc>
 80066e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d103      	bne.n	80066f0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80066e8:	2303      	movs	r3, #3
 80066ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80066ee:	e029      	b.n	8006744 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d1a2      	bne.n	8006640 <HAL_SPI_TransmitReceive+0x224>
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066fe:	b29b      	uxth	r3, r3
 8006700:	2b00      	cmp	r3, #0
 8006702:	d19d      	bne.n	8006640 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006704:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006706:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006708:	68f8      	ldr	r0, [r7, #12]
 800670a:	f000 f917 	bl	800693c <SPI_EndRxTxTransaction>
 800670e:	4603      	mov	r3, r0
 8006710:	2b00      	cmp	r3, #0
 8006712:	d006      	beq.n	8006722 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006714:	2301      	movs	r3, #1
 8006716:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2220      	movs	r2, #32
 800671e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006720:	e010      	b.n	8006744 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d10b      	bne.n	8006742 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800672a:	2300      	movs	r3, #0
 800672c:	617b      	str	r3, [r7, #20]
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	68db      	ldr	r3, [r3, #12]
 8006734:	617b      	str	r3, [r7, #20]
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	617b      	str	r3, [r7, #20]
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	e000      	b.n	8006744 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006742:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2201      	movs	r2, #1
 8006748:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2200      	movs	r2, #0
 8006750:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006754:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006758:	4618      	mov	r0, r3
 800675a:	3730      	adds	r7, #48	; 0x30
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}

08006760 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b088      	sub	sp, #32
 8006764:	af00      	add	r7, sp, #0
 8006766:	60f8      	str	r0, [r7, #12]
 8006768:	60b9      	str	r1, [r7, #8]
 800676a:	603b      	str	r3, [r7, #0]
 800676c:	4613      	mov	r3, r2
 800676e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006770:	f7fb fc2c 	bl	8001fcc <HAL_GetTick>
 8006774:	4602      	mov	r2, r0
 8006776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006778:	1a9b      	subs	r3, r3, r2
 800677a:	683a      	ldr	r2, [r7, #0]
 800677c:	4413      	add	r3, r2
 800677e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006780:	f7fb fc24 	bl	8001fcc <HAL_GetTick>
 8006784:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006786:	4b39      	ldr	r3, [pc, #228]	; (800686c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	015b      	lsls	r3, r3, #5
 800678c:	0d1b      	lsrs	r3, r3, #20
 800678e:	69fa      	ldr	r2, [r7, #28]
 8006790:	fb02 f303 	mul.w	r3, r2, r3
 8006794:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006796:	e054      	b.n	8006842 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800679e:	d050      	beq.n	8006842 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80067a0:	f7fb fc14 	bl	8001fcc <HAL_GetTick>
 80067a4:	4602      	mov	r2, r0
 80067a6:	69bb      	ldr	r3, [r7, #24]
 80067a8:	1ad3      	subs	r3, r2, r3
 80067aa:	69fa      	ldr	r2, [r7, #28]
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d902      	bls.n	80067b6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80067b0:	69fb      	ldr	r3, [r7, #28]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d13d      	bne.n	8006832 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	685a      	ldr	r2, [r3, #4]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80067c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067ce:	d111      	bne.n	80067f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067d8:	d004      	beq.n	80067e4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067e2:	d107      	bne.n	80067f4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067fc:	d10f      	bne.n	800681e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	681a      	ldr	r2, [r3, #0]
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800680c:	601a      	str	r2, [r3, #0]
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	681a      	ldr	r2, [r3, #0]
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800681c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2201      	movs	r2, #1
 8006822:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2200      	movs	r2, #0
 800682a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800682e:	2303      	movs	r3, #3
 8006830:	e017      	b.n	8006862 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d101      	bne.n	800683c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006838:	2300      	movs	r3, #0
 800683a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	3b01      	subs	r3, #1
 8006840:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	689a      	ldr	r2, [r3, #8]
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	4013      	ands	r3, r2
 800684c:	68ba      	ldr	r2, [r7, #8]
 800684e:	429a      	cmp	r2, r3
 8006850:	bf0c      	ite	eq
 8006852:	2301      	moveq	r3, #1
 8006854:	2300      	movne	r3, #0
 8006856:	b2db      	uxtb	r3, r3
 8006858:	461a      	mov	r2, r3
 800685a:	79fb      	ldrb	r3, [r7, #7]
 800685c:	429a      	cmp	r2, r3
 800685e:	d19b      	bne.n	8006798 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006860:	2300      	movs	r3, #0
}
 8006862:	4618      	mov	r0, r3
 8006864:	3720      	adds	r7, #32
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}
 800686a:	bf00      	nop
 800686c:	200000a8 	.word	0x200000a8

08006870 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b086      	sub	sp, #24
 8006874:	af02      	add	r7, sp, #8
 8006876:	60f8      	str	r0, [r7, #12]
 8006878:	60b9      	str	r1, [r7, #8]
 800687a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006884:	d111      	bne.n	80068aa <SPI_EndRxTransaction+0x3a>
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800688e:	d004      	beq.n	800689a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006898:	d107      	bne.n	80068aa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068a8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068b2:	d12a      	bne.n	800690a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068bc:	d012      	beq.n	80068e4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	9300      	str	r3, [sp, #0]
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	2200      	movs	r2, #0
 80068c6:	2180      	movs	r1, #128	; 0x80
 80068c8:	68f8      	ldr	r0, [r7, #12]
 80068ca:	f7ff ff49 	bl	8006760 <SPI_WaitFlagStateUntilTimeout>
 80068ce:	4603      	mov	r3, r0
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d02d      	beq.n	8006930 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068d8:	f043 0220 	orr.w	r2, r3, #32
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80068e0:	2303      	movs	r3, #3
 80068e2:	e026      	b.n	8006932 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	9300      	str	r3, [sp, #0]
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	2200      	movs	r2, #0
 80068ec:	2101      	movs	r1, #1
 80068ee:	68f8      	ldr	r0, [r7, #12]
 80068f0:	f7ff ff36 	bl	8006760 <SPI_WaitFlagStateUntilTimeout>
 80068f4:	4603      	mov	r3, r0
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d01a      	beq.n	8006930 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068fe:	f043 0220 	orr.w	r2, r3, #32
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006906:	2303      	movs	r3, #3
 8006908:	e013      	b.n	8006932 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	9300      	str	r3, [sp, #0]
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	2200      	movs	r2, #0
 8006912:	2101      	movs	r1, #1
 8006914:	68f8      	ldr	r0, [r7, #12]
 8006916:	f7ff ff23 	bl	8006760 <SPI_WaitFlagStateUntilTimeout>
 800691a:	4603      	mov	r3, r0
 800691c:	2b00      	cmp	r3, #0
 800691e:	d007      	beq.n	8006930 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006924:	f043 0220 	orr.w	r2, r3, #32
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800692c:	2303      	movs	r3, #3
 800692e:	e000      	b.n	8006932 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006930:	2300      	movs	r3, #0
}
 8006932:	4618      	mov	r0, r3
 8006934:	3710      	adds	r7, #16
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}
	...

0800693c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b088      	sub	sp, #32
 8006940:	af02      	add	r7, sp, #8
 8006942:	60f8      	str	r0, [r7, #12]
 8006944:	60b9      	str	r1, [r7, #8]
 8006946:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006948:	4b1b      	ldr	r3, [pc, #108]	; (80069b8 <SPI_EndRxTxTransaction+0x7c>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a1b      	ldr	r2, [pc, #108]	; (80069bc <SPI_EndRxTxTransaction+0x80>)
 800694e:	fba2 2303 	umull	r2, r3, r2, r3
 8006952:	0d5b      	lsrs	r3, r3, #21
 8006954:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006958:	fb02 f303 	mul.w	r3, r2, r3
 800695c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006966:	d112      	bne.n	800698e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	9300      	str	r3, [sp, #0]
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	2200      	movs	r2, #0
 8006970:	2180      	movs	r1, #128	; 0x80
 8006972:	68f8      	ldr	r0, [r7, #12]
 8006974:	f7ff fef4 	bl	8006760 <SPI_WaitFlagStateUntilTimeout>
 8006978:	4603      	mov	r3, r0
 800697a:	2b00      	cmp	r3, #0
 800697c:	d016      	beq.n	80069ac <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006982:	f043 0220 	orr.w	r2, r3, #32
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800698a:	2303      	movs	r3, #3
 800698c:	e00f      	b.n	80069ae <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d00a      	beq.n	80069aa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	3b01      	subs	r3, #1
 8006998:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069a4:	2b80      	cmp	r3, #128	; 0x80
 80069a6:	d0f2      	beq.n	800698e <SPI_EndRxTxTransaction+0x52>
 80069a8:	e000      	b.n	80069ac <SPI_EndRxTxTransaction+0x70>
        break;
 80069aa:	bf00      	nop
  }

  return HAL_OK;
 80069ac:	2300      	movs	r3, #0
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3718      	adds	r7, #24
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}
 80069b6:	bf00      	nop
 80069b8:	200000a8 	.word	0x200000a8
 80069bc:	165e9f81 	.word	0x165e9f81

080069c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b082      	sub	sp, #8
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d101      	bne.n	80069d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80069ce:	2301      	movs	r3, #1
 80069d0:	e041      	b.n	8006a56 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069d8:	b2db      	uxtb	r3, r3
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d106      	bne.n	80069ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2200      	movs	r2, #0
 80069e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f7fb f890 	bl	8001b0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2202      	movs	r2, #2
 80069f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681a      	ldr	r2, [r3, #0]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	3304      	adds	r3, #4
 80069fc:	4619      	mov	r1, r3
 80069fe:	4610      	mov	r0, r2
 8006a00:	f000 fc12 	bl	8007228 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2201      	movs	r2, #1
 8006a08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2201      	movs	r2, #1
 8006a10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2201      	movs	r2, #1
 8006a18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2201      	movs	r2, #1
 8006a28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2201      	movs	r2, #1
 8006a38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2201      	movs	r2, #1
 8006a40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2201      	movs	r2, #1
 8006a48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2201      	movs	r2, #1
 8006a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a54:	2300      	movs	r3, #0
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3708      	adds	r7, #8
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}

08006a5e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006a5e:	b580      	push	{r7, lr}
 8006a60:	b082      	sub	sp, #8
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d101      	bne.n	8006a70 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	e041      	b.n	8006af4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a76:	b2db      	uxtb	r3, r3
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d106      	bne.n	8006a8a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f000 f839 	bl	8006afc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2202      	movs	r2, #2
 8006a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681a      	ldr	r2, [r3, #0]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	3304      	adds	r3, #4
 8006a9a:	4619      	mov	r1, r3
 8006a9c:	4610      	mov	r0, r2
 8006a9e:	f000 fbc3 	bl	8007228 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2201      	movs	r2, #1
 8006aae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2201      	movs	r2, #1
 8006ab6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2201      	movs	r2, #1
 8006abe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2201      	movs	r2, #1
 8006ac6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2201      	movs	r2, #1
 8006ace:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2201      	movs	r2, #1
 8006ade:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2201      	movs	r2, #1
 8006aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006af2:	2300      	movs	r3, #0
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3708      	adds	r7, #8
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}

08006afc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b083      	sub	sp, #12
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006b04:	bf00      	nop
 8006b06:	370c      	adds	r7, #12
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr

08006b10 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b084      	sub	sp, #16
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	2b0c      	cmp	r3, #12
 8006b22:	d855      	bhi.n	8006bd0 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8006b24:	a201      	add	r2, pc, #4	; (adr r2, 8006b2c <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8006b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b2a:	bf00      	nop
 8006b2c:	08006b61 	.word	0x08006b61
 8006b30:	08006bd1 	.word	0x08006bd1
 8006b34:	08006bd1 	.word	0x08006bd1
 8006b38:	08006bd1 	.word	0x08006bd1
 8006b3c:	08006b7d 	.word	0x08006b7d
 8006b40:	08006bd1 	.word	0x08006bd1
 8006b44:	08006bd1 	.word	0x08006bd1
 8006b48:	08006bd1 	.word	0x08006bd1
 8006b4c:	08006b99 	.word	0x08006b99
 8006b50:	08006bd1 	.word	0x08006bd1
 8006b54:	08006bd1 	.word	0x08006bd1
 8006b58:	08006bd1 	.word	0x08006bd1
 8006b5c:	08006bb5 	.word	0x08006bb5
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	68da      	ldr	r2, [r3, #12]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006b6e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b74:	4618      	mov	r0, r3
 8006b76:	f7fb fca5 	bl	80024c4 <HAL_DMA_Abort_IT>
      break;
 8006b7a:	e02c      	b.n	8006bd6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	68da      	ldr	r2, [r3, #12]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b8a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b90:	4618      	mov	r0, r3
 8006b92:	f7fb fc97 	bl	80024c4 <HAL_DMA_Abort_IT>
      break;
 8006b96:	e01e      	b.n	8006bd6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	68da      	ldr	r2, [r3, #12]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ba6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bac:	4618      	mov	r0, r3
 8006bae:	f7fb fc89 	bl	80024c4 <HAL_DMA_Abort_IT>
      break;
 8006bb2:	e010      	b.n	8006bd6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	68da      	ldr	r2, [r3, #12]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006bc2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f7fb fc7b 	bl	80024c4 <HAL_DMA_Abort_IT>
      break;
 8006bce:	e002      	b.n	8006bd6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	73fb      	strb	r3, [r7, #15]
      break;
 8006bd4:	bf00      	nop
  }

  if (status == HAL_OK)
 8006bd6:	7bfb      	ldrb	r3, [r7, #15]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d161      	bne.n	8006ca0 <HAL_TIM_PWM_Stop_DMA+0x190>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	2200      	movs	r2, #0
 8006be2:	6839      	ldr	r1, [r7, #0]
 8006be4:	4618      	mov	r0, r3
 8006be6:	f000 fe09 	bl	80077fc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a2f      	ldr	r2, [pc, #188]	; (8006cac <HAL_TIM_PWM_Stop_DMA+0x19c>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d004      	beq.n	8006bfe <HAL_TIM_PWM_Stop_DMA+0xee>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a2d      	ldr	r2, [pc, #180]	; (8006cb0 <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d101      	bne.n	8006c02 <HAL_TIM_PWM_Stop_DMA+0xf2>
 8006bfe:	2301      	movs	r3, #1
 8006c00:	e000      	b.n	8006c04 <HAL_TIM_PWM_Stop_DMA+0xf4>
 8006c02:	2300      	movs	r3, #0
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d017      	beq.n	8006c38 <HAL_TIM_PWM_Stop_DMA+0x128>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	6a1a      	ldr	r2, [r3, #32]
 8006c0e:	f241 1311 	movw	r3, #4369	; 0x1111
 8006c12:	4013      	ands	r3, r2
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d10f      	bne.n	8006c38 <HAL_TIM_PWM_Stop_DMA+0x128>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	6a1a      	ldr	r2, [r3, #32]
 8006c1e:	f240 4344 	movw	r3, #1092	; 0x444
 8006c22:	4013      	ands	r3, r2
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d107      	bne.n	8006c38 <HAL_TIM_PWM_Stop_DMA+0x128>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006c36:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	6a1a      	ldr	r2, [r3, #32]
 8006c3e:	f241 1311 	movw	r3, #4369	; 0x1111
 8006c42:	4013      	ands	r3, r2
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d10f      	bne.n	8006c68 <HAL_TIM_PWM_Stop_DMA+0x158>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	6a1a      	ldr	r2, [r3, #32]
 8006c4e:	f240 4344 	movw	r3, #1092	; 0x444
 8006c52:	4013      	ands	r3, r2
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d107      	bne.n	8006c68 <HAL_TIM_PWM_Stop_DMA+0x158>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	681a      	ldr	r2, [r3, #0]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f022 0201 	bic.w	r2, r2, #1
 8006c66:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d104      	bne.n	8006c78 <HAL_TIM_PWM_Stop_DMA+0x168>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2201      	movs	r2, #1
 8006c72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c76:	e013      	b.n	8006ca0 <HAL_TIM_PWM_Stop_DMA+0x190>
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	2b04      	cmp	r3, #4
 8006c7c:	d104      	bne.n	8006c88 <HAL_TIM_PWM_Stop_DMA+0x178>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2201      	movs	r2, #1
 8006c82:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c86:	e00b      	b.n	8006ca0 <HAL_TIM_PWM_Stop_DMA+0x190>
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	2b08      	cmp	r3, #8
 8006c8c:	d104      	bne.n	8006c98 <HAL_TIM_PWM_Stop_DMA+0x188>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2201      	movs	r2, #1
 8006c92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c96:	e003      	b.n	8006ca0 <HAL_TIM_PWM_Stop_DMA+0x190>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8006ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3710      	adds	r7, #16
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}
 8006caa:	bf00      	nop
 8006cac:	40010000 	.word	0x40010000
 8006cb0:	40010400 	.word	0x40010400

08006cb4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b082      	sub	sp, #8
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	691b      	ldr	r3, [r3, #16]
 8006cc2:	f003 0302 	and.w	r3, r3, #2
 8006cc6:	2b02      	cmp	r3, #2
 8006cc8:	d122      	bne.n	8006d10 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	68db      	ldr	r3, [r3, #12]
 8006cd0:	f003 0302 	and.w	r3, r3, #2
 8006cd4:	2b02      	cmp	r3, #2
 8006cd6:	d11b      	bne.n	8006d10 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f06f 0202 	mvn.w	r2, #2
 8006ce0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2201      	movs	r2, #1
 8006ce6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	699b      	ldr	r3, [r3, #24]
 8006cee:	f003 0303 	and.w	r3, r3, #3
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d003      	beq.n	8006cfe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f000 fa81 	bl	80071fe <HAL_TIM_IC_CaptureCallback>
 8006cfc:	e005      	b.n	8006d0a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f000 fa73 	bl	80071ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f7fa fce3 	bl	80016d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	691b      	ldr	r3, [r3, #16]
 8006d16:	f003 0304 	and.w	r3, r3, #4
 8006d1a:	2b04      	cmp	r3, #4
 8006d1c:	d122      	bne.n	8006d64 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	68db      	ldr	r3, [r3, #12]
 8006d24:	f003 0304 	and.w	r3, r3, #4
 8006d28:	2b04      	cmp	r3, #4
 8006d2a:	d11b      	bne.n	8006d64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f06f 0204 	mvn.w	r2, #4
 8006d34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2202      	movs	r2, #2
 8006d3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	699b      	ldr	r3, [r3, #24]
 8006d42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d003      	beq.n	8006d52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f000 fa57 	bl	80071fe <HAL_TIM_IC_CaptureCallback>
 8006d50:	e005      	b.n	8006d5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f000 fa49 	bl	80071ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f7fa fcb9 	bl	80016d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2200      	movs	r2, #0
 8006d62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	691b      	ldr	r3, [r3, #16]
 8006d6a:	f003 0308 	and.w	r3, r3, #8
 8006d6e:	2b08      	cmp	r3, #8
 8006d70:	d122      	bne.n	8006db8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	68db      	ldr	r3, [r3, #12]
 8006d78:	f003 0308 	and.w	r3, r3, #8
 8006d7c:	2b08      	cmp	r3, #8
 8006d7e:	d11b      	bne.n	8006db8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f06f 0208 	mvn.w	r2, #8
 8006d88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2204      	movs	r2, #4
 8006d8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	69db      	ldr	r3, [r3, #28]
 8006d96:	f003 0303 	and.w	r3, r3, #3
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d003      	beq.n	8006da6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 fa2d 	bl	80071fe <HAL_TIM_IC_CaptureCallback>
 8006da4:	e005      	b.n	8006db2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f000 fa1f 	bl	80071ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f7fa fc8f 	bl	80016d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2200      	movs	r2, #0
 8006db6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	691b      	ldr	r3, [r3, #16]
 8006dbe:	f003 0310 	and.w	r3, r3, #16
 8006dc2:	2b10      	cmp	r3, #16
 8006dc4:	d122      	bne.n	8006e0c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	68db      	ldr	r3, [r3, #12]
 8006dcc:	f003 0310 	and.w	r3, r3, #16
 8006dd0:	2b10      	cmp	r3, #16
 8006dd2:	d11b      	bne.n	8006e0c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f06f 0210 	mvn.w	r2, #16
 8006ddc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2208      	movs	r2, #8
 8006de2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	69db      	ldr	r3, [r3, #28]
 8006dea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d003      	beq.n	8006dfa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f000 fa03 	bl	80071fe <HAL_TIM_IC_CaptureCallback>
 8006df8:	e005      	b.n	8006e06 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 f9f5 	bl	80071ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f7fa fc65 	bl	80016d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	691b      	ldr	r3, [r3, #16]
 8006e12:	f003 0301 	and.w	r3, r3, #1
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d10e      	bne.n	8006e38 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	68db      	ldr	r3, [r3, #12]
 8006e20:	f003 0301 	and.w	r3, r3, #1
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	d107      	bne.n	8006e38 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f06f 0201 	mvn.w	r2, #1
 8006e30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f000 f9cf 	bl	80071d6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	691b      	ldr	r3, [r3, #16]
 8006e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e42:	2b80      	cmp	r3, #128	; 0x80
 8006e44:	d10e      	bne.n	8006e64 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	68db      	ldr	r3, [r3, #12]
 8006e4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e50:	2b80      	cmp	r3, #128	; 0x80
 8006e52:	d107      	bne.n	8006e64 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006e5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f000 fd78 	bl	8007954 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	691b      	ldr	r3, [r3, #16]
 8006e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e6e:	2b40      	cmp	r3, #64	; 0x40
 8006e70:	d10e      	bne.n	8006e90 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	68db      	ldr	r3, [r3, #12]
 8006e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e7c:	2b40      	cmp	r3, #64	; 0x40
 8006e7e:	d107      	bne.n	8006e90 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006e88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f000 f9c1 	bl	8007212 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	691b      	ldr	r3, [r3, #16]
 8006e96:	f003 0320 	and.w	r3, r3, #32
 8006e9a:	2b20      	cmp	r3, #32
 8006e9c:	d10e      	bne.n	8006ebc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	68db      	ldr	r3, [r3, #12]
 8006ea4:	f003 0320 	and.w	r3, r3, #32
 8006ea8:	2b20      	cmp	r3, #32
 8006eaa:	d107      	bne.n	8006ebc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f06f 0220 	mvn.w	r2, #32
 8006eb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f000 fd42 	bl	8007940 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006ebc:	bf00      	nop
 8006ebe:	3708      	adds	r7, #8
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}

08006ec4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b086      	sub	sp, #24
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	60f8      	str	r0, [r7, #12]
 8006ecc:	60b9      	str	r1, [r7, #8]
 8006ece:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	d101      	bne.n	8006ee2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006ede:	2302      	movs	r3, #2
 8006ee0:	e0ae      	b.n	8007040 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2b0c      	cmp	r3, #12
 8006eee:	f200 809f 	bhi.w	8007030 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006ef2:	a201      	add	r2, pc, #4	; (adr r2, 8006ef8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ef8:	08006f2d 	.word	0x08006f2d
 8006efc:	08007031 	.word	0x08007031
 8006f00:	08007031 	.word	0x08007031
 8006f04:	08007031 	.word	0x08007031
 8006f08:	08006f6d 	.word	0x08006f6d
 8006f0c:	08007031 	.word	0x08007031
 8006f10:	08007031 	.word	0x08007031
 8006f14:	08007031 	.word	0x08007031
 8006f18:	08006faf 	.word	0x08006faf
 8006f1c:	08007031 	.word	0x08007031
 8006f20:	08007031 	.word	0x08007031
 8006f24:	08007031 	.word	0x08007031
 8006f28:	08006fef 	.word	0x08006fef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	68b9      	ldr	r1, [r7, #8]
 8006f32:	4618      	mov	r0, r3
 8006f34:	f000 fa18 	bl	8007368 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	699a      	ldr	r2, [r3, #24]
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f042 0208 	orr.w	r2, r2, #8
 8006f46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	699a      	ldr	r2, [r3, #24]
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f022 0204 	bic.w	r2, r2, #4
 8006f56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	6999      	ldr	r1, [r3, #24]
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	691a      	ldr	r2, [r3, #16]
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	430a      	orrs	r2, r1
 8006f68:	619a      	str	r2, [r3, #24]
      break;
 8006f6a:	e064      	b.n	8007036 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	68b9      	ldr	r1, [r7, #8]
 8006f72:	4618      	mov	r0, r3
 8006f74:	f000 fa68 	bl	8007448 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	699a      	ldr	r2, [r3, #24]
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	699a      	ldr	r2, [r3, #24]
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	6999      	ldr	r1, [r3, #24]
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	691b      	ldr	r3, [r3, #16]
 8006fa2:	021a      	lsls	r2, r3, #8
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	430a      	orrs	r2, r1
 8006faa:	619a      	str	r2, [r3, #24]
      break;
 8006fac:	e043      	b.n	8007036 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	68b9      	ldr	r1, [r7, #8]
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f000 fabd 	bl	8007534 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	69da      	ldr	r2, [r3, #28]
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f042 0208 	orr.w	r2, r2, #8
 8006fc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	69da      	ldr	r2, [r3, #28]
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f022 0204 	bic.w	r2, r2, #4
 8006fd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	69d9      	ldr	r1, [r3, #28]
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	691a      	ldr	r2, [r3, #16]
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	430a      	orrs	r2, r1
 8006fea:	61da      	str	r2, [r3, #28]
      break;
 8006fec:	e023      	b.n	8007036 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	68b9      	ldr	r1, [r7, #8]
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f000 fb11 	bl	800761c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	69da      	ldr	r2, [r3, #28]
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007008:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	69da      	ldr	r2, [r3, #28]
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007018:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	69d9      	ldr	r1, [r3, #28]
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	691b      	ldr	r3, [r3, #16]
 8007024:	021a      	lsls	r2, r3, #8
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	430a      	orrs	r2, r1
 800702c:	61da      	str	r2, [r3, #28]
      break;
 800702e:	e002      	b.n	8007036 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007030:	2301      	movs	r3, #1
 8007032:	75fb      	strb	r3, [r7, #23]
      break;
 8007034:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2200      	movs	r2, #0
 800703a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800703e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007040:	4618      	mov	r0, r3
 8007042:	3718      	adds	r7, #24
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}

08007048 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b084      	sub	sp, #16
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007052:	2300      	movs	r3, #0
 8007054:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800705c:	2b01      	cmp	r3, #1
 800705e:	d101      	bne.n	8007064 <HAL_TIM_ConfigClockSource+0x1c>
 8007060:	2302      	movs	r3, #2
 8007062:	e0b4      	b.n	80071ce <HAL_TIM_ConfigClockSource+0x186>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2201      	movs	r2, #1
 8007068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2202      	movs	r2, #2
 8007070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007082:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800708a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	68ba      	ldr	r2, [r7, #8]
 8007092:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800709c:	d03e      	beq.n	800711c <HAL_TIM_ConfigClockSource+0xd4>
 800709e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070a2:	f200 8087 	bhi.w	80071b4 <HAL_TIM_ConfigClockSource+0x16c>
 80070a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070aa:	f000 8086 	beq.w	80071ba <HAL_TIM_ConfigClockSource+0x172>
 80070ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070b2:	d87f      	bhi.n	80071b4 <HAL_TIM_ConfigClockSource+0x16c>
 80070b4:	2b70      	cmp	r3, #112	; 0x70
 80070b6:	d01a      	beq.n	80070ee <HAL_TIM_ConfigClockSource+0xa6>
 80070b8:	2b70      	cmp	r3, #112	; 0x70
 80070ba:	d87b      	bhi.n	80071b4 <HAL_TIM_ConfigClockSource+0x16c>
 80070bc:	2b60      	cmp	r3, #96	; 0x60
 80070be:	d050      	beq.n	8007162 <HAL_TIM_ConfigClockSource+0x11a>
 80070c0:	2b60      	cmp	r3, #96	; 0x60
 80070c2:	d877      	bhi.n	80071b4 <HAL_TIM_ConfigClockSource+0x16c>
 80070c4:	2b50      	cmp	r3, #80	; 0x50
 80070c6:	d03c      	beq.n	8007142 <HAL_TIM_ConfigClockSource+0xfa>
 80070c8:	2b50      	cmp	r3, #80	; 0x50
 80070ca:	d873      	bhi.n	80071b4 <HAL_TIM_ConfigClockSource+0x16c>
 80070cc:	2b40      	cmp	r3, #64	; 0x40
 80070ce:	d058      	beq.n	8007182 <HAL_TIM_ConfigClockSource+0x13a>
 80070d0:	2b40      	cmp	r3, #64	; 0x40
 80070d2:	d86f      	bhi.n	80071b4 <HAL_TIM_ConfigClockSource+0x16c>
 80070d4:	2b30      	cmp	r3, #48	; 0x30
 80070d6:	d064      	beq.n	80071a2 <HAL_TIM_ConfigClockSource+0x15a>
 80070d8:	2b30      	cmp	r3, #48	; 0x30
 80070da:	d86b      	bhi.n	80071b4 <HAL_TIM_ConfigClockSource+0x16c>
 80070dc:	2b20      	cmp	r3, #32
 80070de:	d060      	beq.n	80071a2 <HAL_TIM_ConfigClockSource+0x15a>
 80070e0:	2b20      	cmp	r3, #32
 80070e2:	d867      	bhi.n	80071b4 <HAL_TIM_ConfigClockSource+0x16c>
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d05c      	beq.n	80071a2 <HAL_TIM_ConfigClockSource+0x15a>
 80070e8:	2b10      	cmp	r3, #16
 80070ea:	d05a      	beq.n	80071a2 <HAL_TIM_ConfigClockSource+0x15a>
 80070ec:	e062      	b.n	80071b4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6818      	ldr	r0, [r3, #0]
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	6899      	ldr	r1, [r3, #8]
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	685a      	ldr	r2, [r3, #4]
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	68db      	ldr	r3, [r3, #12]
 80070fe:	f000 fb5d 	bl	80077bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	689b      	ldr	r3, [r3, #8]
 8007108:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007110:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	68ba      	ldr	r2, [r7, #8]
 8007118:	609a      	str	r2, [r3, #8]
      break;
 800711a:	e04f      	b.n	80071bc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6818      	ldr	r0, [r3, #0]
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	6899      	ldr	r1, [r3, #8]
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	685a      	ldr	r2, [r3, #4]
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	68db      	ldr	r3, [r3, #12]
 800712c:	f000 fb46 	bl	80077bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	689a      	ldr	r2, [r3, #8]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800713e:	609a      	str	r2, [r3, #8]
      break;
 8007140:	e03c      	b.n	80071bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6818      	ldr	r0, [r3, #0]
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	6859      	ldr	r1, [r3, #4]
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	68db      	ldr	r3, [r3, #12]
 800714e:	461a      	mov	r2, r3
 8007150:	f000 faba 	bl	80076c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	2150      	movs	r1, #80	; 0x50
 800715a:	4618      	mov	r0, r3
 800715c:	f000 fb13 	bl	8007786 <TIM_ITRx_SetConfig>
      break;
 8007160:	e02c      	b.n	80071bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6818      	ldr	r0, [r3, #0]
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	6859      	ldr	r1, [r3, #4]
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	68db      	ldr	r3, [r3, #12]
 800716e:	461a      	mov	r2, r3
 8007170:	f000 fad9 	bl	8007726 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	2160      	movs	r1, #96	; 0x60
 800717a:	4618      	mov	r0, r3
 800717c:	f000 fb03 	bl	8007786 <TIM_ITRx_SetConfig>
      break;
 8007180:	e01c      	b.n	80071bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6818      	ldr	r0, [r3, #0]
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	6859      	ldr	r1, [r3, #4]
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	68db      	ldr	r3, [r3, #12]
 800718e:	461a      	mov	r2, r3
 8007190:	f000 fa9a 	bl	80076c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	2140      	movs	r1, #64	; 0x40
 800719a:	4618      	mov	r0, r3
 800719c:	f000 faf3 	bl	8007786 <TIM_ITRx_SetConfig>
      break;
 80071a0:	e00c      	b.n	80071bc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681a      	ldr	r2, [r3, #0]
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4619      	mov	r1, r3
 80071ac:	4610      	mov	r0, r2
 80071ae:	f000 faea 	bl	8007786 <TIM_ITRx_SetConfig>
      break;
 80071b2:	e003      	b.n	80071bc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80071b4:	2301      	movs	r3, #1
 80071b6:	73fb      	strb	r3, [r7, #15]
      break;
 80071b8:	e000      	b.n	80071bc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80071ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2201      	movs	r2, #1
 80071c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2200      	movs	r2, #0
 80071c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80071cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3710      	adds	r7, #16
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}

080071d6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80071d6:	b480      	push	{r7}
 80071d8:	b083      	sub	sp, #12
 80071da:	af00      	add	r7, sp, #0
 80071dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80071de:	bf00      	nop
 80071e0:	370c      	adds	r7, #12
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr

080071ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80071ea:	b480      	push	{r7}
 80071ec:	b083      	sub	sp, #12
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80071f2:	bf00      	nop
 80071f4:	370c      	adds	r7, #12
 80071f6:	46bd      	mov	sp, r7
 80071f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fc:	4770      	bx	lr

080071fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80071fe:	b480      	push	{r7}
 8007200:	b083      	sub	sp, #12
 8007202:	af00      	add	r7, sp, #0
 8007204:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007206:	bf00      	nop
 8007208:	370c      	adds	r7, #12
 800720a:	46bd      	mov	sp, r7
 800720c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007210:	4770      	bx	lr

08007212 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007212:	b480      	push	{r7}
 8007214:	b083      	sub	sp, #12
 8007216:	af00      	add	r7, sp, #0
 8007218:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800721a:	bf00      	nop
 800721c:	370c      	adds	r7, #12
 800721e:	46bd      	mov	sp, r7
 8007220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007224:	4770      	bx	lr
	...

08007228 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007228:	b480      	push	{r7}
 800722a:	b085      	sub	sp, #20
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	4a40      	ldr	r2, [pc, #256]	; (800733c <TIM_Base_SetConfig+0x114>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d013      	beq.n	8007268 <TIM_Base_SetConfig+0x40>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007246:	d00f      	beq.n	8007268 <TIM_Base_SetConfig+0x40>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	4a3d      	ldr	r2, [pc, #244]	; (8007340 <TIM_Base_SetConfig+0x118>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d00b      	beq.n	8007268 <TIM_Base_SetConfig+0x40>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	4a3c      	ldr	r2, [pc, #240]	; (8007344 <TIM_Base_SetConfig+0x11c>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d007      	beq.n	8007268 <TIM_Base_SetConfig+0x40>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	4a3b      	ldr	r2, [pc, #236]	; (8007348 <TIM_Base_SetConfig+0x120>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d003      	beq.n	8007268 <TIM_Base_SetConfig+0x40>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	4a3a      	ldr	r2, [pc, #232]	; (800734c <TIM_Base_SetConfig+0x124>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d108      	bne.n	800727a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800726e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	68fa      	ldr	r2, [r7, #12]
 8007276:	4313      	orrs	r3, r2
 8007278:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	4a2f      	ldr	r2, [pc, #188]	; (800733c <TIM_Base_SetConfig+0x114>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d02b      	beq.n	80072da <TIM_Base_SetConfig+0xb2>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007288:	d027      	beq.n	80072da <TIM_Base_SetConfig+0xb2>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	4a2c      	ldr	r2, [pc, #176]	; (8007340 <TIM_Base_SetConfig+0x118>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d023      	beq.n	80072da <TIM_Base_SetConfig+0xb2>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	4a2b      	ldr	r2, [pc, #172]	; (8007344 <TIM_Base_SetConfig+0x11c>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d01f      	beq.n	80072da <TIM_Base_SetConfig+0xb2>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	4a2a      	ldr	r2, [pc, #168]	; (8007348 <TIM_Base_SetConfig+0x120>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d01b      	beq.n	80072da <TIM_Base_SetConfig+0xb2>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	4a29      	ldr	r2, [pc, #164]	; (800734c <TIM_Base_SetConfig+0x124>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d017      	beq.n	80072da <TIM_Base_SetConfig+0xb2>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	4a28      	ldr	r2, [pc, #160]	; (8007350 <TIM_Base_SetConfig+0x128>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d013      	beq.n	80072da <TIM_Base_SetConfig+0xb2>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	4a27      	ldr	r2, [pc, #156]	; (8007354 <TIM_Base_SetConfig+0x12c>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d00f      	beq.n	80072da <TIM_Base_SetConfig+0xb2>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	4a26      	ldr	r2, [pc, #152]	; (8007358 <TIM_Base_SetConfig+0x130>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d00b      	beq.n	80072da <TIM_Base_SetConfig+0xb2>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	4a25      	ldr	r2, [pc, #148]	; (800735c <TIM_Base_SetConfig+0x134>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d007      	beq.n	80072da <TIM_Base_SetConfig+0xb2>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	4a24      	ldr	r2, [pc, #144]	; (8007360 <TIM_Base_SetConfig+0x138>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d003      	beq.n	80072da <TIM_Base_SetConfig+0xb2>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	4a23      	ldr	r2, [pc, #140]	; (8007364 <TIM_Base_SetConfig+0x13c>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d108      	bne.n	80072ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	68db      	ldr	r3, [r3, #12]
 80072e6:	68fa      	ldr	r2, [r7, #12]
 80072e8:	4313      	orrs	r3, r2
 80072ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	695b      	ldr	r3, [r3, #20]
 80072f6:	4313      	orrs	r3, r2
 80072f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	68fa      	ldr	r2, [r7, #12]
 80072fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	689a      	ldr	r2, [r3, #8]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	681a      	ldr	r2, [r3, #0]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	4a0a      	ldr	r2, [pc, #40]	; (800733c <TIM_Base_SetConfig+0x114>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d003      	beq.n	8007320 <TIM_Base_SetConfig+0xf8>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	4a0c      	ldr	r2, [pc, #48]	; (800734c <TIM_Base_SetConfig+0x124>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d103      	bne.n	8007328 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	691a      	ldr	r2, [r3, #16]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2201      	movs	r2, #1
 800732c:	615a      	str	r2, [r3, #20]
}
 800732e:	bf00      	nop
 8007330:	3714      	adds	r7, #20
 8007332:	46bd      	mov	sp, r7
 8007334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007338:	4770      	bx	lr
 800733a:	bf00      	nop
 800733c:	40010000 	.word	0x40010000
 8007340:	40000400 	.word	0x40000400
 8007344:	40000800 	.word	0x40000800
 8007348:	40000c00 	.word	0x40000c00
 800734c:	40010400 	.word	0x40010400
 8007350:	40014000 	.word	0x40014000
 8007354:	40014400 	.word	0x40014400
 8007358:	40014800 	.word	0x40014800
 800735c:	40001800 	.word	0x40001800
 8007360:	40001c00 	.word	0x40001c00
 8007364:	40002000 	.word	0x40002000

08007368 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007368:	b480      	push	{r7}
 800736a:	b087      	sub	sp, #28
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
 8007370:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6a1b      	ldr	r3, [r3, #32]
 8007376:	f023 0201 	bic.w	r2, r3, #1
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6a1b      	ldr	r3, [r3, #32]
 8007382:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	699b      	ldr	r3, [r3, #24]
 800738e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007396:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	f023 0303 	bic.w	r3, r3, #3
 800739e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	68fa      	ldr	r2, [r7, #12]
 80073a6:	4313      	orrs	r3, r2
 80073a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	f023 0302 	bic.w	r3, r3, #2
 80073b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	689b      	ldr	r3, [r3, #8]
 80073b6:	697a      	ldr	r2, [r7, #20]
 80073b8:	4313      	orrs	r3, r2
 80073ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	4a20      	ldr	r2, [pc, #128]	; (8007440 <TIM_OC1_SetConfig+0xd8>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d003      	beq.n	80073cc <TIM_OC1_SetConfig+0x64>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	4a1f      	ldr	r2, [pc, #124]	; (8007444 <TIM_OC1_SetConfig+0xdc>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d10c      	bne.n	80073e6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	f023 0308 	bic.w	r3, r3, #8
 80073d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	68db      	ldr	r3, [r3, #12]
 80073d8:	697a      	ldr	r2, [r7, #20]
 80073da:	4313      	orrs	r3, r2
 80073dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	f023 0304 	bic.w	r3, r3, #4
 80073e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	4a15      	ldr	r2, [pc, #84]	; (8007440 <TIM_OC1_SetConfig+0xd8>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d003      	beq.n	80073f6 <TIM_OC1_SetConfig+0x8e>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	4a14      	ldr	r2, [pc, #80]	; (8007444 <TIM_OC1_SetConfig+0xdc>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d111      	bne.n	800741a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007404:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	695b      	ldr	r3, [r3, #20]
 800740a:	693a      	ldr	r2, [r7, #16]
 800740c:	4313      	orrs	r3, r2
 800740e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	699b      	ldr	r3, [r3, #24]
 8007414:	693a      	ldr	r2, [r7, #16]
 8007416:	4313      	orrs	r3, r2
 8007418:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	693a      	ldr	r2, [r7, #16]
 800741e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	68fa      	ldr	r2, [r7, #12]
 8007424:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	685a      	ldr	r2, [r3, #4]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	697a      	ldr	r2, [r7, #20]
 8007432:	621a      	str	r2, [r3, #32]
}
 8007434:	bf00      	nop
 8007436:	371c      	adds	r7, #28
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr
 8007440:	40010000 	.word	0x40010000
 8007444:	40010400 	.word	0x40010400

08007448 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007448:	b480      	push	{r7}
 800744a:	b087      	sub	sp, #28
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
 8007450:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6a1b      	ldr	r3, [r3, #32]
 8007456:	f023 0210 	bic.w	r2, r3, #16
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6a1b      	ldr	r3, [r3, #32]
 8007462:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	699b      	ldr	r3, [r3, #24]
 800746e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007476:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800747e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	021b      	lsls	r3, r3, #8
 8007486:	68fa      	ldr	r2, [r7, #12]
 8007488:	4313      	orrs	r3, r2
 800748a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	f023 0320 	bic.w	r3, r3, #32
 8007492:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	689b      	ldr	r3, [r3, #8]
 8007498:	011b      	lsls	r3, r3, #4
 800749a:	697a      	ldr	r2, [r7, #20]
 800749c:	4313      	orrs	r3, r2
 800749e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	4a22      	ldr	r2, [pc, #136]	; (800752c <TIM_OC2_SetConfig+0xe4>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d003      	beq.n	80074b0 <TIM_OC2_SetConfig+0x68>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	4a21      	ldr	r2, [pc, #132]	; (8007530 <TIM_OC2_SetConfig+0xe8>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d10d      	bne.n	80074cc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80074b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	68db      	ldr	r3, [r3, #12]
 80074bc:	011b      	lsls	r3, r3, #4
 80074be:	697a      	ldr	r2, [r7, #20]
 80074c0:	4313      	orrs	r3, r2
 80074c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	4a17      	ldr	r2, [pc, #92]	; (800752c <TIM_OC2_SetConfig+0xe4>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d003      	beq.n	80074dc <TIM_OC2_SetConfig+0x94>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	4a16      	ldr	r2, [pc, #88]	; (8007530 <TIM_OC2_SetConfig+0xe8>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d113      	bne.n	8007504 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80074dc:	693b      	ldr	r3, [r7, #16]
 80074de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80074e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80074e4:	693b      	ldr	r3, [r7, #16]
 80074e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80074ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	695b      	ldr	r3, [r3, #20]
 80074f0:	009b      	lsls	r3, r3, #2
 80074f2:	693a      	ldr	r2, [r7, #16]
 80074f4:	4313      	orrs	r3, r2
 80074f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	699b      	ldr	r3, [r3, #24]
 80074fc:	009b      	lsls	r3, r3, #2
 80074fe:	693a      	ldr	r2, [r7, #16]
 8007500:	4313      	orrs	r3, r2
 8007502:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	693a      	ldr	r2, [r7, #16]
 8007508:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	68fa      	ldr	r2, [r7, #12]
 800750e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	685a      	ldr	r2, [r3, #4]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	697a      	ldr	r2, [r7, #20]
 800751c:	621a      	str	r2, [r3, #32]
}
 800751e:	bf00      	nop
 8007520:	371c      	adds	r7, #28
 8007522:	46bd      	mov	sp, r7
 8007524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007528:	4770      	bx	lr
 800752a:	bf00      	nop
 800752c:	40010000 	.word	0x40010000
 8007530:	40010400 	.word	0x40010400

08007534 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007534:	b480      	push	{r7}
 8007536:	b087      	sub	sp, #28
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
 800753c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6a1b      	ldr	r3, [r3, #32]
 8007542:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6a1b      	ldr	r3, [r3, #32]
 800754e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	69db      	ldr	r3, [r3, #28]
 800755a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007562:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	f023 0303 	bic.w	r3, r3, #3
 800756a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	68fa      	ldr	r2, [r7, #12]
 8007572:	4313      	orrs	r3, r2
 8007574:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800757c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	689b      	ldr	r3, [r3, #8]
 8007582:	021b      	lsls	r3, r3, #8
 8007584:	697a      	ldr	r2, [r7, #20]
 8007586:	4313      	orrs	r3, r2
 8007588:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	4a21      	ldr	r2, [pc, #132]	; (8007614 <TIM_OC3_SetConfig+0xe0>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d003      	beq.n	800759a <TIM_OC3_SetConfig+0x66>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	4a20      	ldr	r2, [pc, #128]	; (8007618 <TIM_OC3_SetConfig+0xe4>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d10d      	bne.n	80075b6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80075a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	68db      	ldr	r3, [r3, #12]
 80075a6:	021b      	lsls	r3, r3, #8
 80075a8:	697a      	ldr	r2, [r7, #20]
 80075aa:	4313      	orrs	r3, r2
 80075ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80075b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	4a16      	ldr	r2, [pc, #88]	; (8007614 <TIM_OC3_SetConfig+0xe0>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d003      	beq.n	80075c6 <TIM_OC3_SetConfig+0x92>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	4a15      	ldr	r2, [pc, #84]	; (8007618 <TIM_OC3_SetConfig+0xe4>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d113      	bne.n	80075ee <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80075cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80075d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	695b      	ldr	r3, [r3, #20]
 80075da:	011b      	lsls	r3, r3, #4
 80075dc:	693a      	ldr	r2, [r7, #16]
 80075de:	4313      	orrs	r3, r2
 80075e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	699b      	ldr	r3, [r3, #24]
 80075e6:	011b      	lsls	r3, r3, #4
 80075e8:	693a      	ldr	r2, [r7, #16]
 80075ea:	4313      	orrs	r3, r2
 80075ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	693a      	ldr	r2, [r7, #16]
 80075f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	68fa      	ldr	r2, [r7, #12]
 80075f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	685a      	ldr	r2, [r3, #4]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	697a      	ldr	r2, [r7, #20]
 8007606:	621a      	str	r2, [r3, #32]
}
 8007608:	bf00      	nop
 800760a:	371c      	adds	r7, #28
 800760c:	46bd      	mov	sp, r7
 800760e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007612:	4770      	bx	lr
 8007614:	40010000 	.word	0x40010000
 8007618:	40010400 	.word	0x40010400

0800761c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800761c:	b480      	push	{r7}
 800761e:	b087      	sub	sp, #28
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6a1b      	ldr	r3, [r3, #32]
 800762a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6a1b      	ldr	r3, [r3, #32]
 8007636:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	69db      	ldr	r3, [r3, #28]
 8007642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800764a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007652:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	021b      	lsls	r3, r3, #8
 800765a:	68fa      	ldr	r2, [r7, #12]
 800765c:	4313      	orrs	r3, r2
 800765e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007666:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	689b      	ldr	r3, [r3, #8]
 800766c:	031b      	lsls	r3, r3, #12
 800766e:	693a      	ldr	r2, [r7, #16]
 8007670:	4313      	orrs	r3, r2
 8007672:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	4a12      	ldr	r2, [pc, #72]	; (80076c0 <TIM_OC4_SetConfig+0xa4>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d003      	beq.n	8007684 <TIM_OC4_SetConfig+0x68>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	4a11      	ldr	r2, [pc, #68]	; (80076c4 <TIM_OC4_SetConfig+0xa8>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d109      	bne.n	8007698 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800768a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	695b      	ldr	r3, [r3, #20]
 8007690:	019b      	lsls	r3, r3, #6
 8007692:	697a      	ldr	r2, [r7, #20]
 8007694:	4313      	orrs	r3, r2
 8007696:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	697a      	ldr	r2, [r7, #20]
 800769c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	68fa      	ldr	r2, [r7, #12]
 80076a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	685a      	ldr	r2, [r3, #4]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	693a      	ldr	r2, [r7, #16]
 80076b0:	621a      	str	r2, [r3, #32]
}
 80076b2:	bf00      	nop
 80076b4:	371c      	adds	r7, #28
 80076b6:	46bd      	mov	sp, r7
 80076b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076bc:	4770      	bx	lr
 80076be:	bf00      	nop
 80076c0:	40010000 	.word	0x40010000
 80076c4:	40010400 	.word	0x40010400

080076c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b087      	sub	sp, #28
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	60f8      	str	r0, [r7, #12]
 80076d0:	60b9      	str	r1, [r7, #8]
 80076d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	6a1b      	ldr	r3, [r3, #32]
 80076d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	6a1b      	ldr	r3, [r3, #32]
 80076de:	f023 0201 	bic.w	r2, r3, #1
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	699b      	ldr	r3, [r3, #24]
 80076ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80076f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	011b      	lsls	r3, r3, #4
 80076f8:	693a      	ldr	r2, [r7, #16]
 80076fa:	4313      	orrs	r3, r2
 80076fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	f023 030a 	bic.w	r3, r3, #10
 8007704:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007706:	697a      	ldr	r2, [r7, #20]
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	4313      	orrs	r3, r2
 800770c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	693a      	ldr	r2, [r7, #16]
 8007712:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	697a      	ldr	r2, [r7, #20]
 8007718:	621a      	str	r2, [r3, #32]
}
 800771a:	bf00      	nop
 800771c:	371c      	adds	r7, #28
 800771e:	46bd      	mov	sp, r7
 8007720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007724:	4770      	bx	lr

08007726 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007726:	b480      	push	{r7}
 8007728:	b087      	sub	sp, #28
 800772a:	af00      	add	r7, sp, #0
 800772c:	60f8      	str	r0, [r7, #12]
 800772e:	60b9      	str	r1, [r7, #8]
 8007730:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	6a1b      	ldr	r3, [r3, #32]
 8007736:	f023 0210 	bic.w	r2, r3, #16
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	699b      	ldr	r3, [r3, #24]
 8007742:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	6a1b      	ldr	r3, [r3, #32]
 8007748:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007750:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	031b      	lsls	r3, r3, #12
 8007756:	697a      	ldr	r2, [r7, #20]
 8007758:	4313      	orrs	r3, r2
 800775a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007762:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	011b      	lsls	r3, r3, #4
 8007768:	693a      	ldr	r2, [r7, #16]
 800776a:	4313      	orrs	r3, r2
 800776c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	697a      	ldr	r2, [r7, #20]
 8007772:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	693a      	ldr	r2, [r7, #16]
 8007778:	621a      	str	r2, [r3, #32]
}
 800777a:	bf00      	nop
 800777c:	371c      	adds	r7, #28
 800777e:	46bd      	mov	sp, r7
 8007780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007784:	4770      	bx	lr

08007786 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007786:	b480      	push	{r7}
 8007788:	b085      	sub	sp, #20
 800778a:	af00      	add	r7, sp, #0
 800778c:	6078      	str	r0, [r7, #4]
 800778e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	689b      	ldr	r3, [r3, #8]
 8007794:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800779c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800779e:	683a      	ldr	r2, [r7, #0]
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	4313      	orrs	r3, r2
 80077a4:	f043 0307 	orr.w	r3, r3, #7
 80077a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	68fa      	ldr	r2, [r7, #12]
 80077ae:	609a      	str	r2, [r3, #8]
}
 80077b0:	bf00      	nop
 80077b2:	3714      	adds	r7, #20
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr

080077bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80077bc:	b480      	push	{r7}
 80077be:	b087      	sub	sp, #28
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	60f8      	str	r0, [r7, #12]
 80077c4:	60b9      	str	r1, [r7, #8]
 80077c6:	607a      	str	r2, [r7, #4]
 80077c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	689b      	ldr	r3, [r3, #8]
 80077ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80077d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	021a      	lsls	r2, r3, #8
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	431a      	orrs	r2, r3
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	4313      	orrs	r3, r2
 80077e4:	697a      	ldr	r2, [r7, #20]
 80077e6:	4313      	orrs	r3, r2
 80077e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	697a      	ldr	r2, [r7, #20]
 80077ee:	609a      	str	r2, [r3, #8]
}
 80077f0:	bf00      	nop
 80077f2:	371c      	adds	r7, #28
 80077f4:	46bd      	mov	sp, r7
 80077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fa:	4770      	bx	lr

080077fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b087      	sub	sp, #28
 8007800:	af00      	add	r7, sp, #0
 8007802:	60f8      	str	r0, [r7, #12]
 8007804:	60b9      	str	r1, [r7, #8]
 8007806:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	f003 031f 	and.w	r3, r3, #31
 800780e:	2201      	movs	r2, #1
 8007810:	fa02 f303 	lsl.w	r3, r2, r3
 8007814:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	6a1a      	ldr	r2, [r3, #32]
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	43db      	mvns	r3, r3
 800781e:	401a      	ands	r2, r3
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	6a1a      	ldr	r2, [r3, #32]
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	f003 031f 	and.w	r3, r3, #31
 800782e:	6879      	ldr	r1, [r7, #4]
 8007830:	fa01 f303 	lsl.w	r3, r1, r3
 8007834:	431a      	orrs	r2, r3
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	621a      	str	r2, [r3, #32]
}
 800783a:	bf00      	nop
 800783c:	371c      	adds	r7, #28
 800783e:	46bd      	mov	sp, r7
 8007840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007844:	4770      	bx	lr
	...

08007848 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007848:	b480      	push	{r7}
 800784a:	b085      	sub	sp, #20
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
 8007850:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007858:	2b01      	cmp	r3, #1
 800785a:	d101      	bne.n	8007860 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800785c:	2302      	movs	r3, #2
 800785e:	e05a      	b.n	8007916 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2201      	movs	r2, #1
 8007864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2202      	movs	r2, #2
 800786c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007886:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	68fa      	ldr	r2, [r7, #12]
 800788e:	4313      	orrs	r3, r2
 8007890:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	68fa      	ldr	r2, [r7, #12]
 8007898:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4a21      	ldr	r2, [pc, #132]	; (8007924 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d022      	beq.n	80078ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078ac:	d01d      	beq.n	80078ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4a1d      	ldr	r2, [pc, #116]	; (8007928 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d018      	beq.n	80078ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a1b      	ldr	r2, [pc, #108]	; (800792c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d013      	beq.n	80078ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4a1a      	ldr	r2, [pc, #104]	; (8007930 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d00e      	beq.n	80078ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a18      	ldr	r2, [pc, #96]	; (8007934 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d009      	beq.n	80078ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a17      	ldr	r2, [pc, #92]	; (8007938 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d004      	beq.n	80078ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4a15      	ldr	r2, [pc, #84]	; (800793c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d10c      	bne.n	8007904 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80078f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	685b      	ldr	r3, [r3, #4]
 80078f6:	68ba      	ldr	r2, [r7, #8]
 80078f8:	4313      	orrs	r3, r2
 80078fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	68ba      	ldr	r2, [r7, #8]
 8007902:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2201      	movs	r2, #1
 8007908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2200      	movs	r2, #0
 8007910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007914:	2300      	movs	r3, #0
}
 8007916:	4618      	mov	r0, r3
 8007918:	3714      	adds	r7, #20
 800791a:	46bd      	mov	sp, r7
 800791c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007920:	4770      	bx	lr
 8007922:	bf00      	nop
 8007924:	40010000 	.word	0x40010000
 8007928:	40000400 	.word	0x40000400
 800792c:	40000800 	.word	0x40000800
 8007930:	40000c00 	.word	0x40000c00
 8007934:	40010400 	.word	0x40010400
 8007938:	40014000 	.word	0x40014000
 800793c:	40001800 	.word	0x40001800

08007940 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007940:	b480      	push	{r7}
 8007942:	b083      	sub	sp, #12
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007948:	bf00      	nop
 800794a:	370c      	adds	r7, #12
 800794c:	46bd      	mov	sp, r7
 800794e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007952:	4770      	bx	lr

08007954 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007954:	b480      	push	{r7}
 8007956:	b083      	sub	sp, #12
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800795c:	bf00      	nop
 800795e:	370c      	adds	r7, #12
 8007960:	46bd      	mov	sp, r7
 8007962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007966:	4770      	bx	lr

08007968 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b082      	sub	sp, #8
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d101      	bne.n	800797a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007976:	2301      	movs	r3, #1
 8007978:	e03f      	b.n	80079fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007980:	b2db      	uxtb	r3, r3
 8007982:	2b00      	cmp	r3, #0
 8007984:	d106      	bne.n	8007994 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2200      	movs	r2, #0
 800798a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f7fa f964 	bl	8001c5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2224      	movs	r2, #36	; 0x24
 8007998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	68da      	ldr	r2, [r3, #12]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80079aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f000 fe81 	bl	80086b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	691a      	ldr	r2, [r3, #16]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80079c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	695a      	ldr	r2, [r3, #20]
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80079d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	68da      	ldr	r2, [r3, #12]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80079e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2200      	movs	r2, #0
 80079e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2220      	movs	r2, #32
 80079ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2220      	movs	r2, #32
 80079f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80079f8:	2300      	movs	r3, #0
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3708      	adds	r7, #8
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}

08007a02 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a02:	b580      	push	{r7, lr}
 8007a04:	b08a      	sub	sp, #40	; 0x28
 8007a06:	af02      	add	r7, sp, #8
 8007a08:	60f8      	str	r0, [r7, #12]
 8007a0a:	60b9      	str	r1, [r7, #8]
 8007a0c:	603b      	str	r3, [r7, #0]
 8007a0e:	4613      	mov	r3, r2
 8007a10:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007a12:	2300      	movs	r3, #0
 8007a14:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a1c:	b2db      	uxtb	r3, r3
 8007a1e:	2b20      	cmp	r3, #32
 8007a20:	d17c      	bne.n	8007b1c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d002      	beq.n	8007a2e <HAL_UART_Transmit+0x2c>
 8007a28:	88fb      	ldrh	r3, [r7, #6]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d101      	bne.n	8007a32 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	e075      	b.n	8007b1e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	d101      	bne.n	8007a40 <HAL_UART_Transmit+0x3e>
 8007a3c:	2302      	movs	r3, #2
 8007a3e:	e06e      	b.n	8007b1e <HAL_UART_Transmit+0x11c>
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2201      	movs	r2, #1
 8007a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	2221      	movs	r2, #33	; 0x21
 8007a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007a56:	f7fa fab9 	bl	8001fcc <HAL_GetTick>
 8007a5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	88fa      	ldrh	r2, [r7, #6]
 8007a60:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	88fa      	ldrh	r2, [r7, #6]
 8007a66:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	689b      	ldr	r3, [r3, #8]
 8007a6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a70:	d108      	bne.n	8007a84 <HAL_UART_Transmit+0x82>
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	691b      	ldr	r3, [r3, #16]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d104      	bne.n	8007a84 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	61bb      	str	r3, [r7, #24]
 8007a82:	e003      	b.n	8007a8c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007a94:	e02a      	b.n	8007aec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	9300      	str	r3, [sp, #0]
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	2180      	movs	r1, #128	; 0x80
 8007aa0:	68f8      	ldr	r0, [r7, #12]
 8007aa2:	f000 fbc1 	bl	8008228 <UART_WaitOnFlagUntilTimeout>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d001      	beq.n	8007ab0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007aac:	2303      	movs	r3, #3
 8007aae:	e036      	b.n	8007b1e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007ab0:	69fb      	ldr	r3, [r7, #28]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d10b      	bne.n	8007ace <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007ab6:	69bb      	ldr	r3, [r7, #24]
 8007ab8:	881b      	ldrh	r3, [r3, #0]
 8007aba:	461a      	mov	r2, r3
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007ac4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007ac6:	69bb      	ldr	r3, [r7, #24]
 8007ac8:	3302      	adds	r3, #2
 8007aca:	61bb      	str	r3, [r7, #24]
 8007acc:	e007      	b.n	8007ade <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007ace:	69fb      	ldr	r3, [r7, #28]
 8007ad0:	781a      	ldrb	r2, [r3, #0]
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007ad8:	69fb      	ldr	r3, [r7, #28]
 8007ada:	3301      	adds	r3, #1
 8007adc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007ae2:	b29b      	uxth	r3, r3
 8007ae4:	3b01      	subs	r3, #1
 8007ae6:	b29a      	uxth	r2, r3
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007af0:	b29b      	uxth	r3, r3
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d1cf      	bne.n	8007a96 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	9300      	str	r3, [sp, #0]
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	2200      	movs	r2, #0
 8007afe:	2140      	movs	r1, #64	; 0x40
 8007b00:	68f8      	ldr	r0, [r7, #12]
 8007b02:	f000 fb91 	bl	8008228 <UART_WaitOnFlagUntilTimeout>
 8007b06:	4603      	mov	r3, r0
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d001      	beq.n	8007b10 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007b0c:	2303      	movs	r3, #3
 8007b0e:	e006      	b.n	8007b1e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	2220      	movs	r2, #32
 8007b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007b18:	2300      	movs	r3, #0
 8007b1a:	e000      	b.n	8007b1e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007b1c:	2302      	movs	r3, #2
  }
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3720      	adds	r7, #32
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}

08007b26 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b26:	b580      	push	{r7, lr}
 8007b28:	b08a      	sub	sp, #40	; 0x28
 8007b2a:	af02      	add	r7, sp, #8
 8007b2c:	60f8      	str	r0, [r7, #12]
 8007b2e:	60b9      	str	r1, [r7, #8]
 8007b30:	603b      	str	r3, [r7, #0]
 8007b32:	4613      	mov	r3, r2
 8007b34:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007b36:	2300      	movs	r3, #0
 8007b38:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007b40:	b2db      	uxtb	r3, r3
 8007b42:	2b20      	cmp	r3, #32
 8007b44:	f040 808c 	bne.w	8007c60 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d002      	beq.n	8007b54 <HAL_UART_Receive+0x2e>
 8007b4e:	88fb      	ldrh	r3, [r7, #6]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d101      	bne.n	8007b58 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8007b54:	2301      	movs	r3, #1
 8007b56:	e084      	b.n	8007c62 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b5e:	2b01      	cmp	r3, #1
 8007b60:	d101      	bne.n	8007b66 <HAL_UART_Receive+0x40>
 8007b62:	2302      	movs	r3, #2
 8007b64:	e07d      	b.n	8007c62 <HAL_UART_Receive+0x13c>
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	2201      	movs	r2, #1
 8007b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2200      	movs	r2, #0
 8007b72:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2222      	movs	r2, #34	; 0x22
 8007b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007b82:	f7fa fa23 	bl	8001fcc <HAL_GetTick>
 8007b86:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	88fa      	ldrh	r2, [r7, #6]
 8007b8c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	88fa      	ldrh	r2, [r7, #6]
 8007b92:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	689b      	ldr	r3, [r3, #8]
 8007b98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b9c:	d108      	bne.n	8007bb0 <HAL_UART_Receive+0x8a>
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	691b      	ldr	r3, [r3, #16]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d104      	bne.n	8007bb0 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	61bb      	str	r3, [r7, #24]
 8007bae:	e003      	b.n	8007bb8 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8007bc0:	e043      	b.n	8007c4a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	9300      	str	r3, [sp, #0]
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	2120      	movs	r1, #32
 8007bcc:	68f8      	ldr	r0, [r7, #12]
 8007bce:	f000 fb2b 	bl	8008228 <UART_WaitOnFlagUntilTimeout>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d001      	beq.n	8007bdc <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8007bd8:	2303      	movs	r3, #3
 8007bda:	e042      	b.n	8007c62 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8007bdc:	69fb      	ldr	r3, [r7, #28]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d10c      	bne.n	8007bfc <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	b29b      	uxth	r3, r3
 8007bea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bee:	b29a      	uxth	r2, r3
 8007bf0:	69bb      	ldr	r3, [r7, #24]
 8007bf2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007bf4:	69bb      	ldr	r3, [r7, #24]
 8007bf6:	3302      	adds	r3, #2
 8007bf8:	61bb      	str	r3, [r7, #24]
 8007bfa:	e01f      	b.n	8007c3c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	689b      	ldr	r3, [r3, #8]
 8007c00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c04:	d007      	beq.n	8007c16 <HAL_UART_Receive+0xf0>
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	689b      	ldr	r3, [r3, #8]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d10a      	bne.n	8007c24 <HAL_UART_Receive+0xfe>
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	691b      	ldr	r3, [r3, #16]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d106      	bne.n	8007c24 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	b2da      	uxtb	r2, r3
 8007c1e:	69fb      	ldr	r3, [r7, #28]
 8007c20:	701a      	strb	r2, [r3, #0]
 8007c22:	e008      	b.n	8007c36 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	685b      	ldr	r3, [r3, #4]
 8007c2a:	b2db      	uxtb	r3, r3
 8007c2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c30:	b2da      	uxtb	r2, r3
 8007c32:	69fb      	ldr	r3, [r7, #28]
 8007c34:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8007c36:	69fb      	ldr	r3, [r7, #28]
 8007c38:	3301      	adds	r3, #1
 8007c3a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007c40:	b29b      	uxth	r3, r3
 8007c42:	3b01      	subs	r3, #1
 8007c44:	b29a      	uxth	r2, r3
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d1b6      	bne.n	8007bc2 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	2220      	movs	r2, #32
 8007c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	e000      	b.n	8007c62 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8007c60:	2302      	movs	r3, #2
  }
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	3720      	adds	r7, #32
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}

08007c6a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007c6a:	b580      	push	{r7, lr}
 8007c6c:	b084      	sub	sp, #16
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	60f8      	str	r0, [r7, #12]
 8007c72:	60b9      	str	r1, [r7, #8]
 8007c74:	4613      	mov	r3, r2
 8007c76:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c7e:	b2db      	uxtb	r3, r3
 8007c80:	2b20      	cmp	r3, #32
 8007c82:	d11d      	bne.n	8007cc0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d002      	beq.n	8007c90 <HAL_UART_Receive_IT+0x26>
 8007c8a:	88fb      	ldrh	r3, [r7, #6]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d101      	bne.n	8007c94 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007c90:	2301      	movs	r3, #1
 8007c92:	e016      	b.n	8007cc2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c9a:	2b01      	cmp	r3, #1
 8007c9c:	d101      	bne.n	8007ca2 <HAL_UART_Receive_IT+0x38>
 8007c9e:	2302      	movs	r3, #2
 8007ca0:	e00f      	b.n	8007cc2 <HAL_UART_Receive_IT+0x58>
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	2201      	movs	r2, #1
 8007ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	2200      	movs	r2, #0
 8007cae:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007cb0:	88fb      	ldrh	r3, [r7, #6]
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	68b9      	ldr	r1, [r7, #8]
 8007cb6:	68f8      	ldr	r0, [r7, #12]
 8007cb8:	f000 fb24 	bl	8008304 <UART_Start_Receive_IT>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	e000      	b.n	8007cc2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007cc0:	2302      	movs	r3, #2
  }
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3710      	adds	r7, #16
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}
	...

08007ccc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b0ba      	sub	sp, #232	; 0xe8
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	68db      	ldr	r3, [r3, #12]
 8007ce4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	695b      	ldr	r3, [r3, #20]
 8007cee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007cfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d02:	f003 030f 	and.w	r3, r3, #15
 8007d06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007d0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d10f      	bne.n	8007d32 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007d12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d16:	f003 0320 	and.w	r3, r3, #32
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d009      	beq.n	8007d32 <HAL_UART_IRQHandler+0x66>
 8007d1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d22:	f003 0320 	and.w	r3, r3, #32
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d003      	beq.n	8007d32 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f000 fc07 	bl	800853e <UART_Receive_IT>
      return;
 8007d30:	e256      	b.n	80081e0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007d32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	f000 80de 	beq.w	8007ef8 <HAL_UART_IRQHandler+0x22c>
 8007d3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d40:	f003 0301 	and.w	r3, r3, #1
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d106      	bne.n	8007d56 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007d48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d4c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	f000 80d1 	beq.w	8007ef8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007d56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d5a:	f003 0301 	and.w	r3, r3, #1
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d00b      	beq.n	8007d7a <HAL_UART_IRQHandler+0xae>
 8007d62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d005      	beq.n	8007d7a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d72:	f043 0201 	orr.w	r2, r3, #1
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007d7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d7e:	f003 0304 	and.w	r3, r3, #4
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d00b      	beq.n	8007d9e <HAL_UART_IRQHandler+0xd2>
 8007d86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d8a:	f003 0301 	and.w	r3, r3, #1
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d005      	beq.n	8007d9e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d96:	f043 0202 	orr.w	r2, r3, #2
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007d9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007da2:	f003 0302 	and.w	r3, r3, #2
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d00b      	beq.n	8007dc2 <HAL_UART_IRQHandler+0xf6>
 8007daa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007dae:	f003 0301 	and.w	r3, r3, #1
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d005      	beq.n	8007dc2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dba:	f043 0204 	orr.w	r2, r3, #4
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007dc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dc6:	f003 0308 	and.w	r3, r3, #8
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d011      	beq.n	8007df2 <HAL_UART_IRQHandler+0x126>
 8007dce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007dd2:	f003 0320 	and.w	r3, r3, #32
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d105      	bne.n	8007de6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007dda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007dde:	f003 0301 	and.w	r3, r3, #1
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d005      	beq.n	8007df2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dea:	f043 0208 	orr.w	r2, r3, #8
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	f000 81ed 	beq.w	80081d6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007dfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e00:	f003 0320 	and.w	r3, r3, #32
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d008      	beq.n	8007e1a <HAL_UART_IRQHandler+0x14e>
 8007e08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e0c:	f003 0320 	and.w	r3, r3, #32
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d002      	beq.n	8007e1a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f000 fb92 	bl	800853e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	695b      	ldr	r3, [r3, #20]
 8007e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e24:	2b40      	cmp	r3, #64	; 0x40
 8007e26:	bf0c      	ite	eq
 8007e28:	2301      	moveq	r3, #1
 8007e2a:	2300      	movne	r3, #0
 8007e2c:	b2db      	uxtb	r3, r3
 8007e2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e36:	f003 0308 	and.w	r3, r3, #8
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d103      	bne.n	8007e46 <HAL_UART_IRQHandler+0x17a>
 8007e3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d04f      	beq.n	8007ee6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f000 fa9a 	bl	8008380 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	695b      	ldr	r3, [r3, #20]
 8007e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e56:	2b40      	cmp	r3, #64	; 0x40
 8007e58:	d141      	bne.n	8007ede <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	3314      	adds	r3, #20
 8007e60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007e68:	e853 3f00 	ldrex	r3, [r3]
 8007e6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007e70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	3314      	adds	r3, #20
 8007e82:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007e86:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007e8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e8e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007e92:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007e96:	e841 2300 	strex	r3, r2, [r1]
 8007e9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007e9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d1d9      	bne.n	8007e5a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d013      	beq.n	8007ed6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eb2:	4a7d      	ldr	r2, [pc, #500]	; (80080a8 <HAL_UART_IRQHandler+0x3dc>)
 8007eb4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f7fa fb02 	bl	80024c4 <HAL_DMA_Abort_IT>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d016      	beq.n	8007ef4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ecc:	687a      	ldr	r2, [r7, #4]
 8007ece:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007ed0:	4610      	mov	r0, r2
 8007ed2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ed4:	e00e      	b.n	8007ef4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f000 f990 	bl	80081fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007edc:	e00a      	b.n	8007ef4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f000 f98c 	bl	80081fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ee4:	e006      	b.n	8007ef4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f000 f988 	bl	80081fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007ef2:	e170      	b.n	80081d6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ef4:	bf00      	nop
    return;
 8007ef6:	e16e      	b.n	80081d6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007efc:	2b01      	cmp	r3, #1
 8007efe:	f040 814a 	bne.w	8008196 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f06:	f003 0310 	and.w	r3, r3, #16
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	f000 8143 	beq.w	8008196 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007f10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f14:	f003 0310 	and.w	r3, r3, #16
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	f000 813c 	beq.w	8008196 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007f1e:	2300      	movs	r3, #0
 8007f20:	60bb      	str	r3, [r7, #8]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	60bb      	str	r3, [r7, #8]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	60bb      	str	r3, [r7, #8]
 8007f32:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	695b      	ldr	r3, [r3, #20]
 8007f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f3e:	2b40      	cmp	r3, #64	; 0x40
 8007f40:	f040 80b4 	bne.w	80080ac <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	685b      	ldr	r3, [r3, #4]
 8007f4c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007f50:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	f000 8140 	beq.w	80081da <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007f5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007f62:	429a      	cmp	r2, r3
 8007f64:	f080 8139 	bcs.w	80081da <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007f6e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f74:	69db      	ldr	r3, [r3, #28]
 8007f76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f7a:	f000 8088 	beq.w	800808e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	330c      	adds	r3, #12
 8007f84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f88:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007f8c:	e853 3f00 	ldrex	r3, [r3]
 8007f90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007f94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007f98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	330c      	adds	r3, #12
 8007fa6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007faa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007fae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fb2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007fb6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007fba:	e841 2300 	strex	r3, r2, [r1]
 8007fbe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007fc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d1d9      	bne.n	8007f7e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	3314      	adds	r3, #20
 8007fd0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007fd4:	e853 3f00 	ldrex	r3, [r3]
 8007fd8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007fda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007fdc:	f023 0301 	bic.w	r3, r3, #1
 8007fe0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	3314      	adds	r3, #20
 8007fea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007fee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007ff2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ff4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007ff6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007ffa:	e841 2300 	strex	r3, r2, [r1]
 8007ffe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008000:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008002:	2b00      	cmp	r3, #0
 8008004:	d1e1      	bne.n	8007fca <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	3314      	adds	r3, #20
 800800c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800800e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008010:	e853 3f00 	ldrex	r3, [r3]
 8008014:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008016:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008018:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800801c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	3314      	adds	r3, #20
 8008026:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800802a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800802c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800802e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008030:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008032:	e841 2300 	strex	r3, r2, [r1]
 8008036:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008038:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800803a:	2b00      	cmp	r3, #0
 800803c:	d1e3      	bne.n	8008006 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2220      	movs	r2, #32
 8008042:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2200      	movs	r2, #0
 800804a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	330c      	adds	r3, #12
 8008052:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008054:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008056:	e853 3f00 	ldrex	r3, [r3]
 800805a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800805c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800805e:	f023 0310 	bic.w	r3, r3, #16
 8008062:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	330c      	adds	r3, #12
 800806c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008070:	65ba      	str	r2, [r7, #88]	; 0x58
 8008072:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008074:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008076:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008078:	e841 2300 	strex	r3, r2, [r1]
 800807c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800807e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008080:	2b00      	cmp	r3, #0
 8008082:	d1e3      	bne.n	800804c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008088:	4618      	mov	r0, r3
 800808a:	f7fa f9ab 	bl	80023e4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008096:	b29b      	uxth	r3, r3
 8008098:	1ad3      	subs	r3, r2, r3
 800809a:	b29b      	uxth	r3, r3
 800809c:	4619      	mov	r1, r3
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f000 f8b6 	bl	8008210 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80080a4:	e099      	b.n	80081da <HAL_UART_IRQHandler+0x50e>
 80080a6:	bf00      	nop
 80080a8:	08008447 	.word	0x08008447
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80080b4:	b29b      	uxth	r3, r3
 80080b6:	1ad3      	subs	r3, r2, r3
 80080b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80080c0:	b29b      	uxth	r3, r3
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	f000 808b 	beq.w	80081de <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80080c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	f000 8086 	beq.w	80081de <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	330c      	adds	r3, #12
 80080d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080dc:	e853 3f00 	ldrex	r3, [r3]
 80080e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80080e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80080e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	330c      	adds	r3, #12
 80080f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80080f6:	647a      	str	r2, [r7, #68]	; 0x44
 80080f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80080fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80080fe:	e841 2300 	strex	r3, r2, [r1]
 8008102:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008104:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008106:	2b00      	cmp	r3, #0
 8008108:	d1e3      	bne.n	80080d2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	3314      	adds	r3, #20
 8008110:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008114:	e853 3f00 	ldrex	r3, [r3]
 8008118:	623b      	str	r3, [r7, #32]
   return(result);
 800811a:	6a3b      	ldr	r3, [r7, #32]
 800811c:	f023 0301 	bic.w	r3, r3, #1
 8008120:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	3314      	adds	r3, #20
 800812a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800812e:	633a      	str	r2, [r7, #48]	; 0x30
 8008130:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008132:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008134:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008136:	e841 2300 	strex	r3, r2, [r1]
 800813a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800813c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800813e:	2b00      	cmp	r3, #0
 8008140:	d1e3      	bne.n	800810a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2220      	movs	r2, #32
 8008146:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2200      	movs	r2, #0
 800814e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	330c      	adds	r3, #12
 8008156:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008158:	693b      	ldr	r3, [r7, #16]
 800815a:	e853 3f00 	ldrex	r3, [r3]
 800815e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	f023 0310 	bic.w	r3, r3, #16
 8008166:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	330c      	adds	r3, #12
 8008170:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008174:	61fa      	str	r2, [r7, #28]
 8008176:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008178:	69b9      	ldr	r1, [r7, #24]
 800817a:	69fa      	ldr	r2, [r7, #28]
 800817c:	e841 2300 	strex	r3, r2, [r1]
 8008180:	617b      	str	r3, [r7, #20]
   return(result);
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d1e3      	bne.n	8008150 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008188:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800818c:	4619      	mov	r1, r3
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f000 f83e 	bl	8008210 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008194:	e023      	b.n	80081de <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800819a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d009      	beq.n	80081b6 <HAL_UART_IRQHandler+0x4ea>
 80081a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d003      	beq.n	80081b6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f000 f95d 	bl	800846e <UART_Transmit_IT>
    return;
 80081b4:	e014      	b.n	80081e0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80081b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d00e      	beq.n	80081e0 <HAL_UART_IRQHandler+0x514>
 80081c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d008      	beq.n	80081e0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f000 f99d 	bl	800850e <UART_EndTransmit_IT>
    return;
 80081d4:	e004      	b.n	80081e0 <HAL_UART_IRQHandler+0x514>
    return;
 80081d6:	bf00      	nop
 80081d8:	e002      	b.n	80081e0 <HAL_UART_IRQHandler+0x514>
      return;
 80081da:	bf00      	nop
 80081dc:	e000      	b.n	80081e0 <HAL_UART_IRQHandler+0x514>
      return;
 80081de:	bf00      	nop
  }
}
 80081e0:	37e8      	adds	r7, #232	; 0xe8
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bd80      	pop	{r7, pc}
 80081e6:	bf00      	nop

080081e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b083      	sub	sp, #12
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80081f0:	bf00      	nop
 80081f2:	370c      	adds	r7, #12
 80081f4:	46bd      	mov	sp, r7
 80081f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fa:	4770      	bx	lr

080081fc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80081fc:	b480      	push	{r7}
 80081fe:	b083      	sub	sp, #12
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008204:	bf00      	nop
 8008206:	370c      	adds	r7, #12
 8008208:	46bd      	mov	sp, r7
 800820a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820e:	4770      	bx	lr

08008210 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008210:	b480      	push	{r7}
 8008212:	b083      	sub	sp, #12
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	460b      	mov	r3, r1
 800821a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800821c:	bf00      	nop
 800821e:	370c      	adds	r7, #12
 8008220:	46bd      	mov	sp, r7
 8008222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008226:	4770      	bx	lr

08008228 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b090      	sub	sp, #64	; 0x40
 800822c:	af00      	add	r7, sp, #0
 800822e:	60f8      	str	r0, [r7, #12]
 8008230:	60b9      	str	r1, [r7, #8]
 8008232:	603b      	str	r3, [r7, #0]
 8008234:	4613      	mov	r3, r2
 8008236:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008238:	e050      	b.n	80082dc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800823a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800823c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008240:	d04c      	beq.n	80082dc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008242:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008244:	2b00      	cmp	r3, #0
 8008246:	d007      	beq.n	8008258 <UART_WaitOnFlagUntilTimeout+0x30>
 8008248:	f7f9 fec0 	bl	8001fcc <HAL_GetTick>
 800824c:	4602      	mov	r2, r0
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	1ad3      	subs	r3, r2, r3
 8008252:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008254:	429a      	cmp	r2, r3
 8008256:	d241      	bcs.n	80082dc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	330c      	adds	r3, #12
 800825e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008262:	e853 3f00 	ldrex	r3, [r3]
 8008266:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800826a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800826e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	330c      	adds	r3, #12
 8008276:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008278:	637a      	str	r2, [r7, #52]	; 0x34
 800827a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800827c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800827e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008280:	e841 2300 	strex	r3, r2, [r1]
 8008284:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008288:	2b00      	cmp	r3, #0
 800828a:	d1e5      	bne.n	8008258 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	3314      	adds	r3, #20
 8008292:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	e853 3f00 	ldrex	r3, [r3]
 800829a:	613b      	str	r3, [r7, #16]
   return(result);
 800829c:	693b      	ldr	r3, [r7, #16]
 800829e:	f023 0301 	bic.w	r3, r3, #1
 80082a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	3314      	adds	r3, #20
 80082aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80082ac:	623a      	str	r2, [r7, #32]
 80082ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082b0:	69f9      	ldr	r1, [r7, #28]
 80082b2:	6a3a      	ldr	r2, [r7, #32]
 80082b4:	e841 2300 	strex	r3, r2, [r1]
 80082b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80082ba:	69bb      	ldr	r3, [r7, #24]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d1e5      	bne.n	800828c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	2220      	movs	r2, #32
 80082c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	2220      	movs	r2, #32
 80082cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	2200      	movs	r2, #0
 80082d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80082d8:	2303      	movs	r3, #3
 80082da:	e00f      	b.n	80082fc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	681a      	ldr	r2, [r3, #0]
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	4013      	ands	r3, r2
 80082e6:	68ba      	ldr	r2, [r7, #8]
 80082e8:	429a      	cmp	r2, r3
 80082ea:	bf0c      	ite	eq
 80082ec:	2301      	moveq	r3, #1
 80082ee:	2300      	movne	r3, #0
 80082f0:	b2db      	uxtb	r3, r3
 80082f2:	461a      	mov	r2, r3
 80082f4:	79fb      	ldrb	r3, [r7, #7]
 80082f6:	429a      	cmp	r2, r3
 80082f8:	d09f      	beq.n	800823a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80082fa:	2300      	movs	r3, #0
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	3740      	adds	r7, #64	; 0x40
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}

08008304 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008304:	b480      	push	{r7}
 8008306:	b085      	sub	sp, #20
 8008308:	af00      	add	r7, sp, #0
 800830a:	60f8      	str	r0, [r7, #12]
 800830c:	60b9      	str	r1, [r7, #8]
 800830e:	4613      	mov	r3, r2
 8008310:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	68ba      	ldr	r2, [r7, #8]
 8008316:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	88fa      	ldrh	r2, [r7, #6]
 800831c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	88fa      	ldrh	r2, [r7, #6]
 8008322:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2200      	movs	r2, #0
 8008328:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	2222      	movs	r2, #34	; 0x22
 800832e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	2200      	movs	r2, #0
 8008336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	691b      	ldr	r3, [r3, #16]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d007      	beq.n	8008352 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	68da      	ldr	r2, [r3, #12]
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008350:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	695a      	ldr	r2, [r3, #20]
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f042 0201 	orr.w	r2, r2, #1
 8008360:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	68da      	ldr	r2, [r3, #12]
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f042 0220 	orr.w	r2, r2, #32
 8008370:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008372:	2300      	movs	r3, #0
}
 8008374:	4618      	mov	r0, r3
 8008376:	3714      	adds	r7, #20
 8008378:	46bd      	mov	sp, r7
 800837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837e:	4770      	bx	lr

08008380 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008380:	b480      	push	{r7}
 8008382:	b095      	sub	sp, #84	; 0x54
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	330c      	adds	r3, #12
 800838e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008392:	e853 3f00 	ldrex	r3, [r3]
 8008396:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800839a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800839e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	330c      	adds	r3, #12
 80083a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80083a8:	643a      	str	r2, [r7, #64]	; 0x40
 80083aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80083ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80083b0:	e841 2300 	strex	r3, r2, [r1]
 80083b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80083b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d1e5      	bne.n	8008388 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	3314      	adds	r3, #20
 80083c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083c4:	6a3b      	ldr	r3, [r7, #32]
 80083c6:	e853 3f00 	ldrex	r3, [r3]
 80083ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80083cc:	69fb      	ldr	r3, [r7, #28]
 80083ce:	f023 0301 	bic.w	r3, r3, #1
 80083d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	3314      	adds	r3, #20
 80083da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80083dc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80083de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80083e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80083e4:	e841 2300 	strex	r3, r2, [r1]
 80083e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80083ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d1e5      	bne.n	80083bc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083f4:	2b01      	cmp	r3, #1
 80083f6:	d119      	bne.n	800842c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	330c      	adds	r3, #12
 80083fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	e853 3f00 	ldrex	r3, [r3]
 8008406:	60bb      	str	r3, [r7, #8]
   return(result);
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	f023 0310 	bic.w	r3, r3, #16
 800840e:	647b      	str	r3, [r7, #68]	; 0x44
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	330c      	adds	r3, #12
 8008416:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008418:	61ba      	str	r2, [r7, #24]
 800841a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800841c:	6979      	ldr	r1, [r7, #20]
 800841e:	69ba      	ldr	r2, [r7, #24]
 8008420:	e841 2300 	strex	r3, r2, [r1]
 8008424:	613b      	str	r3, [r7, #16]
   return(result);
 8008426:	693b      	ldr	r3, [r7, #16]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d1e5      	bne.n	80083f8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2220      	movs	r2, #32
 8008430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2200      	movs	r2, #0
 8008438:	631a      	str	r2, [r3, #48]	; 0x30
}
 800843a:	bf00      	nop
 800843c:	3754      	adds	r7, #84	; 0x54
 800843e:	46bd      	mov	sp, r7
 8008440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008444:	4770      	bx	lr

08008446 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008446:	b580      	push	{r7, lr}
 8008448:	b084      	sub	sp, #16
 800844a:	af00      	add	r7, sp, #0
 800844c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008452:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	2200      	movs	r2, #0
 8008458:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2200      	movs	r2, #0
 800845e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008460:	68f8      	ldr	r0, [r7, #12]
 8008462:	f7ff fecb 	bl	80081fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008466:	bf00      	nop
 8008468:	3710      	adds	r7, #16
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}

0800846e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800846e:	b480      	push	{r7}
 8008470:	b085      	sub	sp, #20
 8008472:	af00      	add	r7, sp, #0
 8008474:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800847c:	b2db      	uxtb	r3, r3
 800847e:	2b21      	cmp	r3, #33	; 0x21
 8008480:	d13e      	bne.n	8008500 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	689b      	ldr	r3, [r3, #8]
 8008486:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800848a:	d114      	bne.n	80084b6 <UART_Transmit_IT+0x48>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	691b      	ldr	r3, [r3, #16]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d110      	bne.n	80084b6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6a1b      	ldr	r3, [r3, #32]
 8008498:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	881b      	ldrh	r3, [r3, #0]
 800849e:	461a      	mov	r2, r3
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80084a8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6a1b      	ldr	r3, [r3, #32]
 80084ae:	1c9a      	adds	r2, r3, #2
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	621a      	str	r2, [r3, #32]
 80084b4:	e008      	b.n	80084c8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6a1b      	ldr	r3, [r3, #32]
 80084ba:	1c59      	adds	r1, r3, #1
 80084bc:	687a      	ldr	r2, [r7, #4]
 80084be:	6211      	str	r1, [r2, #32]
 80084c0:	781a      	ldrb	r2, [r3, #0]
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80084cc:	b29b      	uxth	r3, r3
 80084ce:	3b01      	subs	r3, #1
 80084d0:	b29b      	uxth	r3, r3
 80084d2:	687a      	ldr	r2, [r7, #4]
 80084d4:	4619      	mov	r1, r3
 80084d6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d10f      	bne.n	80084fc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	68da      	ldr	r2, [r3, #12]
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80084ea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	68da      	ldr	r2, [r3, #12]
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80084fa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80084fc:	2300      	movs	r3, #0
 80084fe:	e000      	b.n	8008502 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008500:	2302      	movs	r3, #2
  }
}
 8008502:	4618      	mov	r0, r3
 8008504:	3714      	adds	r7, #20
 8008506:	46bd      	mov	sp, r7
 8008508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850c:	4770      	bx	lr

0800850e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800850e:	b580      	push	{r7, lr}
 8008510:	b082      	sub	sp, #8
 8008512:	af00      	add	r7, sp, #0
 8008514:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	68da      	ldr	r2, [r3, #12]
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008524:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2220      	movs	r2, #32
 800852a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f7ff fe5a 	bl	80081e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008534:	2300      	movs	r3, #0
}
 8008536:	4618      	mov	r0, r3
 8008538:	3708      	adds	r7, #8
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}

0800853e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800853e:	b580      	push	{r7, lr}
 8008540:	b08c      	sub	sp, #48	; 0x30
 8008542:	af00      	add	r7, sp, #0
 8008544:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800854c:	b2db      	uxtb	r3, r3
 800854e:	2b22      	cmp	r3, #34	; 0x22
 8008550:	f040 80ab 	bne.w	80086aa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	689b      	ldr	r3, [r3, #8]
 8008558:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800855c:	d117      	bne.n	800858e <UART_Receive_IT+0x50>
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	691b      	ldr	r3, [r3, #16]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d113      	bne.n	800858e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008566:	2300      	movs	r3, #0
 8008568:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800856e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	685b      	ldr	r3, [r3, #4]
 8008576:	b29b      	uxth	r3, r3
 8008578:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800857c:	b29a      	uxth	r2, r3
 800857e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008580:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008586:	1c9a      	adds	r2, r3, #2
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	629a      	str	r2, [r3, #40]	; 0x28
 800858c:	e026      	b.n	80085dc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008592:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008594:	2300      	movs	r3, #0
 8008596:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	689b      	ldr	r3, [r3, #8]
 800859c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085a0:	d007      	beq.n	80085b2 <UART_Receive_IT+0x74>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	689b      	ldr	r3, [r3, #8]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d10a      	bne.n	80085c0 <UART_Receive_IT+0x82>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	691b      	ldr	r3, [r3, #16]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d106      	bne.n	80085c0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	685b      	ldr	r3, [r3, #4]
 80085b8:	b2da      	uxtb	r2, r3
 80085ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085bc:	701a      	strb	r2, [r3, #0]
 80085be:	e008      	b.n	80085d2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	685b      	ldr	r3, [r3, #4]
 80085c6:	b2db      	uxtb	r3, r3
 80085c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085cc:	b2da      	uxtb	r2, r3
 80085ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085d0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085d6:	1c5a      	adds	r2, r3, #1
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80085e0:	b29b      	uxth	r3, r3
 80085e2:	3b01      	subs	r3, #1
 80085e4:	b29b      	uxth	r3, r3
 80085e6:	687a      	ldr	r2, [r7, #4]
 80085e8:	4619      	mov	r1, r3
 80085ea:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d15a      	bne.n	80086a6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	68da      	ldr	r2, [r3, #12]
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f022 0220 	bic.w	r2, r2, #32
 80085fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	68da      	ldr	r2, [r3, #12]
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800860e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	695a      	ldr	r2, [r3, #20]
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f022 0201 	bic.w	r2, r2, #1
 800861e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2220      	movs	r2, #32
 8008624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800862c:	2b01      	cmp	r3, #1
 800862e:	d135      	bne.n	800869c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2200      	movs	r2, #0
 8008634:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	330c      	adds	r3, #12
 800863c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	e853 3f00 	ldrex	r3, [r3]
 8008644:	613b      	str	r3, [r7, #16]
   return(result);
 8008646:	693b      	ldr	r3, [r7, #16]
 8008648:	f023 0310 	bic.w	r3, r3, #16
 800864c:	627b      	str	r3, [r7, #36]	; 0x24
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	330c      	adds	r3, #12
 8008654:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008656:	623a      	str	r2, [r7, #32]
 8008658:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800865a:	69f9      	ldr	r1, [r7, #28]
 800865c:	6a3a      	ldr	r2, [r7, #32]
 800865e:	e841 2300 	strex	r3, r2, [r1]
 8008662:	61bb      	str	r3, [r7, #24]
   return(result);
 8008664:	69bb      	ldr	r3, [r7, #24]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d1e5      	bne.n	8008636 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f003 0310 	and.w	r3, r3, #16
 8008674:	2b10      	cmp	r3, #16
 8008676:	d10a      	bne.n	800868e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008678:	2300      	movs	r3, #0
 800867a:	60fb      	str	r3, [r7, #12]
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	60fb      	str	r3, [r7, #12]
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	685b      	ldr	r3, [r3, #4]
 800868a:	60fb      	str	r3, [r7, #12]
 800868c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008692:	4619      	mov	r1, r3
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f7ff fdbb 	bl	8008210 <HAL_UARTEx_RxEventCallback>
 800869a:	e002      	b.n	80086a2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f7f8 f8f5 	bl	800088c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80086a2:	2300      	movs	r3, #0
 80086a4:	e002      	b.n	80086ac <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80086a6:	2300      	movs	r3, #0
 80086a8:	e000      	b.n	80086ac <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80086aa:	2302      	movs	r3, #2
  }
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	3730      	adds	r7, #48	; 0x30
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}

080086b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80086b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80086b8:	b0c0      	sub	sp, #256	; 0x100
 80086ba:	af00      	add	r7, sp, #0
 80086bc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80086c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	691b      	ldr	r3, [r3, #16]
 80086c8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80086cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086d0:	68d9      	ldr	r1, [r3, #12]
 80086d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086d6:	681a      	ldr	r2, [r3, #0]
 80086d8:	ea40 0301 	orr.w	r3, r0, r1
 80086dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80086de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086e2:	689a      	ldr	r2, [r3, #8]
 80086e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086e8:	691b      	ldr	r3, [r3, #16]
 80086ea:	431a      	orrs	r2, r3
 80086ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086f0:	695b      	ldr	r3, [r3, #20]
 80086f2:	431a      	orrs	r2, r3
 80086f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086f8:	69db      	ldr	r3, [r3, #28]
 80086fa:	4313      	orrs	r3, r2
 80086fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	68db      	ldr	r3, [r3, #12]
 8008708:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800870c:	f021 010c 	bic.w	r1, r1, #12
 8008710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008714:	681a      	ldr	r2, [r3, #0]
 8008716:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800871a:	430b      	orrs	r3, r1
 800871c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800871e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	695b      	ldr	r3, [r3, #20]
 8008726:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800872a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800872e:	6999      	ldr	r1, [r3, #24]
 8008730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008734:	681a      	ldr	r2, [r3, #0]
 8008736:	ea40 0301 	orr.w	r3, r0, r1
 800873a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800873c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008740:	681a      	ldr	r2, [r3, #0]
 8008742:	4b8f      	ldr	r3, [pc, #572]	; (8008980 <UART_SetConfig+0x2cc>)
 8008744:	429a      	cmp	r2, r3
 8008746:	d005      	beq.n	8008754 <UART_SetConfig+0xa0>
 8008748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800874c:	681a      	ldr	r2, [r3, #0]
 800874e:	4b8d      	ldr	r3, [pc, #564]	; (8008984 <UART_SetConfig+0x2d0>)
 8008750:	429a      	cmp	r2, r3
 8008752:	d104      	bne.n	800875e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008754:	f7fd fb78 	bl	8005e48 <HAL_RCC_GetPCLK2Freq>
 8008758:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800875c:	e003      	b.n	8008766 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800875e:	f7fd fb5f 	bl	8005e20 <HAL_RCC_GetPCLK1Freq>
 8008762:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800876a:	69db      	ldr	r3, [r3, #28]
 800876c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008770:	f040 810c 	bne.w	800898c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008774:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008778:	2200      	movs	r2, #0
 800877a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800877e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008782:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008786:	4622      	mov	r2, r4
 8008788:	462b      	mov	r3, r5
 800878a:	1891      	adds	r1, r2, r2
 800878c:	65b9      	str	r1, [r7, #88]	; 0x58
 800878e:	415b      	adcs	r3, r3
 8008790:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008792:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008796:	4621      	mov	r1, r4
 8008798:	eb12 0801 	adds.w	r8, r2, r1
 800879c:	4629      	mov	r1, r5
 800879e:	eb43 0901 	adc.w	r9, r3, r1
 80087a2:	f04f 0200 	mov.w	r2, #0
 80087a6:	f04f 0300 	mov.w	r3, #0
 80087aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80087ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80087b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80087b6:	4690      	mov	r8, r2
 80087b8:	4699      	mov	r9, r3
 80087ba:	4623      	mov	r3, r4
 80087bc:	eb18 0303 	adds.w	r3, r8, r3
 80087c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80087c4:	462b      	mov	r3, r5
 80087c6:	eb49 0303 	adc.w	r3, r9, r3
 80087ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80087ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087d2:	685b      	ldr	r3, [r3, #4]
 80087d4:	2200      	movs	r2, #0
 80087d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80087da:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80087de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80087e2:	460b      	mov	r3, r1
 80087e4:	18db      	adds	r3, r3, r3
 80087e6:	653b      	str	r3, [r7, #80]	; 0x50
 80087e8:	4613      	mov	r3, r2
 80087ea:	eb42 0303 	adc.w	r3, r2, r3
 80087ee:	657b      	str	r3, [r7, #84]	; 0x54
 80087f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80087f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80087f8:	f7f7 fd4a 	bl	8000290 <__aeabi_uldivmod>
 80087fc:	4602      	mov	r2, r0
 80087fe:	460b      	mov	r3, r1
 8008800:	4b61      	ldr	r3, [pc, #388]	; (8008988 <UART_SetConfig+0x2d4>)
 8008802:	fba3 2302 	umull	r2, r3, r3, r2
 8008806:	095b      	lsrs	r3, r3, #5
 8008808:	011c      	lsls	r4, r3, #4
 800880a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800880e:	2200      	movs	r2, #0
 8008810:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008814:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008818:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800881c:	4642      	mov	r2, r8
 800881e:	464b      	mov	r3, r9
 8008820:	1891      	adds	r1, r2, r2
 8008822:	64b9      	str	r1, [r7, #72]	; 0x48
 8008824:	415b      	adcs	r3, r3
 8008826:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008828:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800882c:	4641      	mov	r1, r8
 800882e:	eb12 0a01 	adds.w	sl, r2, r1
 8008832:	4649      	mov	r1, r9
 8008834:	eb43 0b01 	adc.w	fp, r3, r1
 8008838:	f04f 0200 	mov.w	r2, #0
 800883c:	f04f 0300 	mov.w	r3, #0
 8008840:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008844:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008848:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800884c:	4692      	mov	sl, r2
 800884e:	469b      	mov	fp, r3
 8008850:	4643      	mov	r3, r8
 8008852:	eb1a 0303 	adds.w	r3, sl, r3
 8008856:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800885a:	464b      	mov	r3, r9
 800885c:	eb4b 0303 	adc.w	r3, fp, r3
 8008860:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008868:	685b      	ldr	r3, [r3, #4]
 800886a:	2200      	movs	r2, #0
 800886c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008870:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008874:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008878:	460b      	mov	r3, r1
 800887a:	18db      	adds	r3, r3, r3
 800887c:	643b      	str	r3, [r7, #64]	; 0x40
 800887e:	4613      	mov	r3, r2
 8008880:	eb42 0303 	adc.w	r3, r2, r3
 8008884:	647b      	str	r3, [r7, #68]	; 0x44
 8008886:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800888a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800888e:	f7f7 fcff 	bl	8000290 <__aeabi_uldivmod>
 8008892:	4602      	mov	r2, r0
 8008894:	460b      	mov	r3, r1
 8008896:	4611      	mov	r1, r2
 8008898:	4b3b      	ldr	r3, [pc, #236]	; (8008988 <UART_SetConfig+0x2d4>)
 800889a:	fba3 2301 	umull	r2, r3, r3, r1
 800889e:	095b      	lsrs	r3, r3, #5
 80088a0:	2264      	movs	r2, #100	; 0x64
 80088a2:	fb02 f303 	mul.w	r3, r2, r3
 80088a6:	1acb      	subs	r3, r1, r3
 80088a8:	00db      	lsls	r3, r3, #3
 80088aa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80088ae:	4b36      	ldr	r3, [pc, #216]	; (8008988 <UART_SetConfig+0x2d4>)
 80088b0:	fba3 2302 	umull	r2, r3, r3, r2
 80088b4:	095b      	lsrs	r3, r3, #5
 80088b6:	005b      	lsls	r3, r3, #1
 80088b8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80088bc:	441c      	add	r4, r3
 80088be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80088c2:	2200      	movs	r2, #0
 80088c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80088c8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80088cc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80088d0:	4642      	mov	r2, r8
 80088d2:	464b      	mov	r3, r9
 80088d4:	1891      	adds	r1, r2, r2
 80088d6:	63b9      	str	r1, [r7, #56]	; 0x38
 80088d8:	415b      	adcs	r3, r3
 80088da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80088dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80088e0:	4641      	mov	r1, r8
 80088e2:	1851      	adds	r1, r2, r1
 80088e4:	6339      	str	r1, [r7, #48]	; 0x30
 80088e6:	4649      	mov	r1, r9
 80088e8:	414b      	adcs	r3, r1
 80088ea:	637b      	str	r3, [r7, #52]	; 0x34
 80088ec:	f04f 0200 	mov.w	r2, #0
 80088f0:	f04f 0300 	mov.w	r3, #0
 80088f4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80088f8:	4659      	mov	r1, fp
 80088fa:	00cb      	lsls	r3, r1, #3
 80088fc:	4651      	mov	r1, sl
 80088fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008902:	4651      	mov	r1, sl
 8008904:	00ca      	lsls	r2, r1, #3
 8008906:	4610      	mov	r0, r2
 8008908:	4619      	mov	r1, r3
 800890a:	4603      	mov	r3, r0
 800890c:	4642      	mov	r2, r8
 800890e:	189b      	adds	r3, r3, r2
 8008910:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008914:	464b      	mov	r3, r9
 8008916:	460a      	mov	r2, r1
 8008918:	eb42 0303 	adc.w	r3, r2, r3
 800891c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008924:	685b      	ldr	r3, [r3, #4]
 8008926:	2200      	movs	r2, #0
 8008928:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800892c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008930:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008934:	460b      	mov	r3, r1
 8008936:	18db      	adds	r3, r3, r3
 8008938:	62bb      	str	r3, [r7, #40]	; 0x28
 800893a:	4613      	mov	r3, r2
 800893c:	eb42 0303 	adc.w	r3, r2, r3
 8008940:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008942:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008946:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800894a:	f7f7 fca1 	bl	8000290 <__aeabi_uldivmod>
 800894e:	4602      	mov	r2, r0
 8008950:	460b      	mov	r3, r1
 8008952:	4b0d      	ldr	r3, [pc, #52]	; (8008988 <UART_SetConfig+0x2d4>)
 8008954:	fba3 1302 	umull	r1, r3, r3, r2
 8008958:	095b      	lsrs	r3, r3, #5
 800895a:	2164      	movs	r1, #100	; 0x64
 800895c:	fb01 f303 	mul.w	r3, r1, r3
 8008960:	1ad3      	subs	r3, r2, r3
 8008962:	00db      	lsls	r3, r3, #3
 8008964:	3332      	adds	r3, #50	; 0x32
 8008966:	4a08      	ldr	r2, [pc, #32]	; (8008988 <UART_SetConfig+0x2d4>)
 8008968:	fba2 2303 	umull	r2, r3, r2, r3
 800896c:	095b      	lsrs	r3, r3, #5
 800896e:	f003 0207 	and.w	r2, r3, #7
 8008972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	4422      	add	r2, r4
 800897a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800897c:	e105      	b.n	8008b8a <UART_SetConfig+0x4d6>
 800897e:	bf00      	nop
 8008980:	40011000 	.word	0x40011000
 8008984:	40011400 	.word	0x40011400
 8008988:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800898c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008990:	2200      	movs	r2, #0
 8008992:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008996:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800899a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800899e:	4642      	mov	r2, r8
 80089a0:	464b      	mov	r3, r9
 80089a2:	1891      	adds	r1, r2, r2
 80089a4:	6239      	str	r1, [r7, #32]
 80089a6:	415b      	adcs	r3, r3
 80089a8:	627b      	str	r3, [r7, #36]	; 0x24
 80089aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80089ae:	4641      	mov	r1, r8
 80089b0:	1854      	adds	r4, r2, r1
 80089b2:	4649      	mov	r1, r9
 80089b4:	eb43 0501 	adc.w	r5, r3, r1
 80089b8:	f04f 0200 	mov.w	r2, #0
 80089bc:	f04f 0300 	mov.w	r3, #0
 80089c0:	00eb      	lsls	r3, r5, #3
 80089c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80089c6:	00e2      	lsls	r2, r4, #3
 80089c8:	4614      	mov	r4, r2
 80089ca:	461d      	mov	r5, r3
 80089cc:	4643      	mov	r3, r8
 80089ce:	18e3      	adds	r3, r4, r3
 80089d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80089d4:	464b      	mov	r3, r9
 80089d6:	eb45 0303 	adc.w	r3, r5, r3
 80089da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80089de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089e2:	685b      	ldr	r3, [r3, #4]
 80089e4:	2200      	movs	r2, #0
 80089e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80089ea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80089ee:	f04f 0200 	mov.w	r2, #0
 80089f2:	f04f 0300 	mov.w	r3, #0
 80089f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80089fa:	4629      	mov	r1, r5
 80089fc:	008b      	lsls	r3, r1, #2
 80089fe:	4621      	mov	r1, r4
 8008a00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008a04:	4621      	mov	r1, r4
 8008a06:	008a      	lsls	r2, r1, #2
 8008a08:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008a0c:	f7f7 fc40 	bl	8000290 <__aeabi_uldivmod>
 8008a10:	4602      	mov	r2, r0
 8008a12:	460b      	mov	r3, r1
 8008a14:	4b60      	ldr	r3, [pc, #384]	; (8008b98 <UART_SetConfig+0x4e4>)
 8008a16:	fba3 2302 	umull	r2, r3, r3, r2
 8008a1a:	095b      	lsrs	r3, r3, #5
 8008a1c:	011c      	lsls	r4, r3, #4
 8008a1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008a22:	2200      	movs	r2, #0
 8008a24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008a28:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008a2c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008a30:	4642      	mov	r2, r8
 8008a32:	464b      	mov	r3, r9
 8008a34:	1891      	adds	r1, r2, r2
 8008a36:	61b9      	str	r1, [r7, #24]
 8008a38:	415b      	adcs	r3, r3
 8008a3a:	61fb      	str	r3, [r7, #28]
 8008a3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008a40:	4641      	mov	r1, r8
 8008a42:	1851      	adds	r1, r2, r1
 8008a44:	6139      	str	r1, [r7, #16]
 8008a46:	4649      	mov	r1, r9
 8008a48:	414b      	adcs	r3, r1
 8008a4a:	617b      	str	r3, [r7, #20]
 8008a4c:	f04f 0200 	mov.w	r2, #0
 8008a50:	f04f 0300 	mov.w	r3, #0
 8008a54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008a58:	4659      	mov	r1, fp
 8008a5a:	00cb      	lsls	r3, r1, #3
 8008a5c:	4651      	mov	r1, sl
 8008a5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008a62:	4651      	mov	r1, sl
 8008a64:	00ca      	lsls	r2, r1, #3
 8008a66:	4610      	mov	r0, r2
 8008a68:	4619      	mov	r1, r3
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	4642      	mov	r2, r8
 8008a6e:	189b      	adds	r3, r3, r2
 8008a70:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008a74:	464b      	mov	r3, r9
 8008a76:	460a      	mov	r2, r1
 8008a78:	eb42 0303 	adc.w	r3, r2, r3
 8008a7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a84:	685b      	ldr	r3, [r3, #4]
 8008a86:	2200      	movs	r2, #0
 8008a88:	67bb      	str	r3, [r7, #120]	; 0x78
 8008a8a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008a8c:	f04f 0200 	mov.w	r2, #0
 8008a90:	f04f 0300 	mov.w	r3, #0
 8008a94:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008a98:	4649      	mov	r1, r9
 8008a9a:	008b      	lsls	r3, r1, #2
 8008a9c:	4641      	mov	r1, r8
 8008a9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008aa2:	4641      	mov	r1, r8
 8008aa4:	008a      	lsls	r2, r1, #2
 8008aa6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008aaa:	f7f7 fbf1 	bl	8000290 <__aeabi_uldivmod>
 8008aae:	4602      	mov	r2, r0
 8008ab0:	460b      	mov	r3, r1
 8008ab2:	4b39      	ldr	r3, [pc, #228]	; (8008b98 <UART_SetConfig+0x4e4>)
 8008ab4:	fba3 1302 	umull	r1, r3, r3, r2
 8008ab8:	095b      	lsrs	r3, r3, #5
 8008aba:	2164      	movs	r1, #100	; 0x64
 8008abc:	fb01 f303 	mul.w	r3, r1, r3
 8008ac0:	1ad3      	subs	r3, r2, r3
 8008ac2:	011b      	lsls	r3, r3, #4
 8008ac4:	3332      	adds	r3, #50	; 0x32
 8008ac6:	4a34      	ldr	r2, [pc, #208]	; (8008b98 <UART_SetConfig+0x4e4>)
 8008ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8008acc:	095b      	lsrs	r3, r3, #5
 8008ace:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008ad2:	441c      	add	r4, r3
 8008ad4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ad8:	2200      	movs	r2, #0
 8008ada:	673b      	str	r3, [r7, #112]	; 0x70
 8008adc:	677a      	str	r2, [r7, #116]	; 0x74
 8008ade:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008ae2:	4642      	mov	r2, r8
 8008ae4:	464b      	mov	r3, r9
 8008ae6:	1891      	adds	r1, r2, r2
 8008ae8:	60b9      	str	r1, [r7, #8]
 8008aea:	415b      	adcs	r3, r3
 8008aec:	60fb      	str	r3, [r7, #12]
 8008aee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008af2:	4641      	mov	r1, r8
 8008af4:	1851      	adds	r1, r2, r1
 8008af6:	6039      	str	r1, [r7, #0]
 8008af8:	4649      	mov	r1, r9
 8008afa:	414b      	adcs	r3, r1
 8008afc:	607b      	str	r3, [r7, #4]
 8008afe:	f04f 0200 	mov.w	r2, #0
 8008b02:	f04f 0300 	mov.w	r3, #0
 8008b06:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008b0a:	4659      	mov	r1, fp
 8008b0c:	00cb      	lsls	r3, r1, #3
 8008b0e:	4651      	mov	r1, sl
 8008b10:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008b14:	4651      	mov	r1, sl
 8008b16:	00ca      	lsls	r2, r1, #3
 8008b18:	4610      	mov	r0, r2
 8008b1a:	4619      	mov	r1, r3
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	4642      	mov	r2, r8
 8008b20:	189b      	adds	r3, r3, r2
 8008b22:	66bb      	str	r3, [r7, #104]	; 0x68
 8008b24:	464b      	mov	r3, r9
 8008b26:	460a      	mov	r2, r1
 8008b28:	eb42 0303 	adc.w	r3, r2, r3
 8008b2c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008b2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b32:	685b      	ldr	r3, [r3, #4]
 8008b34:	2200      	movs	r2, #0
 8008b36:	663b      	str	r3, [r7, #96]	; 0x60
 8008b38:	667a      	str	r2, [r7, #100]	; 0x64
 8008b3a:	f04f 0200 	mov.w	r2, #0
 8008b3e:	f04f 0300 	mov.w	r3, #0
 8008b42:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008b46:	4649      	mov	r1, r9
 8008b48:	008b      	lsls	r3, r1, #2
 8008b4a:	4641      	mov	r1, r8
 8008b4c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008b50:	4641      	mov	r1, r8
 8008b52:	008a      	lsls	r2, r1, #2
 8008b54:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008b58:	f7f7 fb9a 	bl	8000290 <__aeabi_uldivmod>
 8008b5c:	4602      	mov	r2, r0
 8008b5e:	460b      	mov	r3, r1
 8008b60:	4b0d      	ldr	r3, [pc, #52]	; (8008b98 <UART_SetConfig+0x4e4>)
 8008b62:	fba3 1302 	umull	r1, r3, r3, r2
 8008b66:	095b      	lsrs	r3, r3, #5
 8008b68:	2164      	movs	r1, #100	; 0x64
 8008b6a:	fb01 f303 	mul.w	r3, r1, r3
 8008b6e:	1ad3      	subs	r3, r2, r3
 8008b70:	011b      	lsls	r3, r3, #4
 8008b72:	3332      	adds	r3, #50	; 0x32
 8008b74:	4a08      	ldr	r2, [pc, #32]	; (8008b98 <UART_SetConfig+0x4e4>)
 8008b76:	fba2 2303 	umull	r2, r3, r2, r3
 8008b7a:	095b      	lsrs	r3, r3, #5
 8008b7c:	f003 020f 	and.w	r2, r3, #15
 8008b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	4422      	add	r2, r4
 8008b88:	609a      	str	r2, [r3, #8]
}
 8008b8a:	bf00      	nop
 8008b8c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008b90:	46bd      	mov	sp, r7
 8008b92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008b96:	bf00      	nop
 8008b98:	51eb851f 	.word	0x51eb851f

08008b9c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008b9c:	b084      	sub	sp, #16
 8008b9e:	b580      	push	{r7, lr}
 8008ba0:	b084      	sub	sp, #16
 8008ba2:	af00      	add	r7, sp, #0
 8008ba4:	6078      	str	r0, [r7, #4]
 8008ba6:	f107 001c 	add.w	r0, r7, #28
 8008baa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bb0:	2b01      	cmp	r3, #1
 8008bb2:	d122      	bne.n	8008bfa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bb8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	68db      	ldr	r3, [r3, #12]
 8008bc4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008bc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008bcc:	687a      	ldr	r2, [r7, #4]
 8008bce:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	68db      	ldr	r3, [r3, #12]
 8008bd4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008bdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bde:	2b01      	cmp	r3, #1
 8008be0:	d105      	bne.n	8008bee <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	68db      	ldr	r3, [r3, #12]
 8008be6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f000 f9c0 	bl	8008f74 <USB_CoreReset>
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	73fb      	strb	r3, [r7, #15]
 8008bf8:	e01a      	b.n	8008c30 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	68db      	ldr	r3, [r3, #12]
 8008bfe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f000 f9b4 	bl	8008f74 <USB_CoreReset>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008c10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d106      	bne.n	8008c24 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c1a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	639a      	str	r2, [r3, #56]	; 0x38
 8008c22:	e005      	b.n	8008c30 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c28:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c32:	2b01      	cmp	r3, #1
 8008c34:	d10b      	bne.n	8008c4e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	689b      	ldr	r3, [r3, #8]
 8008c3a:	f043 0206 	orr.w	r2, r3, #6
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	689b      	ldr	r3, [r3, #8]
 8008c46:	f043 0220 	orr.w	r2, r3, #32
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	3710      	adds	r7, #16
 8008c54:	46bd      	mov	sp, r7
 8008c56:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008c5a:	b004      	add	sp, #16
 8008c5c:	4770      	bx	lr

08008c5e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008c5e:	b480      	push	{r7}
 8008c60:	b083      	sub	sp, #12
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	689b      	ldr	r3, [r3, #8]
 8008c6a:	f043 0201 	orr.w	r2, r3, #1
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008c72:	2300      	movs	r3, #0
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	370c      	adds	r7, #12
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7e:	4770      	bx	lr

08008c80 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008c80:	b480      	push	{r7}
 8008c82:	b083      	sub	sp, #12
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	689b      	ldr	r3, [r3, #8]
 8008c8c:	f023 0201 	bic.w	r2, r3, #1
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008c94:	2300      	movs	r3, #0
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	370c      	adds	r7, #12
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca0:	4770      	bx	lr

08008ca2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008ca2:	b580      	push	{r7, lr}
 8008ca4:	b084      	sub	sp, #16
 8008ca6:	af00      	add	r7, sp, #0
 8008ca8:	6078      	str	r0, [r7, #4]
 8008caa:	460b      	mov	r3, r1
 8008cac:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	68db      	ldr	r3, [r3, #12]
 8008cb6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008cbe:	78fb      	ldrb	r3, [r7, #3]
 8008cc0:	2b01      	cmp	r3, #1
 8008cc2:	d115      	bne.n	8008cf0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	68db      	ldr	r3, [r3, #12]
 8008cc8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008cd0:	2001      	movs	r0, #1
 8008cd2:	f7f9 f987 	bl	8001fe4 <HAL_Delay>
      ms++;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	3301      	adds	r3, #1
 8008cda:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f000 f93a 	bl	8008f56 <USB_GetMode>
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	2b01      	cmp	r3, #1
 8008ce6:	d01e      	beq.n	8008d26 <USB_SetCurrentMode+0x84>
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	2b31      	cmp	r3, #49	; 0x31
 8008cec:	d9f0      	bls.n	8008cd0 <USB_SetCurrentMode+0x2e>
 8008cee:	e01a      	b.n	8008d26 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008cf0:	78fb      	ldrb	r3, [r7, #3]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d115      	bne.n	8008d22 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	68db      	ldr	r3, [r3, #12]
 8008cfa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008d02:	2001      	movs	r0, #1
 8008d04:	f7f9 f96e 	bl	8001fe4 <HAL_Delay>
      ms++;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	3301      	adds	r3, #1
 8008d0c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f000 f921 	bl	8008f56 <USB_GetMode>
 8008d14:	4603      	mov	r3, r0
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d005      	beq.n	8008d26 <USB_SetCurrentMode+0x84>
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	2b31      	cmp	r3, #49	; 0x31
 8008d1e:	d9f0      	bls.n	8008d02 <USB_SetCurrentMode+0x60>
 8008d20:	e001      	b.n	8008d26 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008d22:	2301      	movs	r3, #1
 8008d24:	e005      	b.n	8008d32 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	2b32      	cmp	r3, #50	; 0x32
 8008d2a:	d101      	bne.n	8008d30 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	e000      	b.n	8008d32 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008d30:	2300      	movs	r3, #0
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	3710      	adds	r7, #16
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}
	...

08008d3c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b085      	sub	sp, #20
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
 8008d44:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008d46:	2300      	movs	r3, #0
 8008d48:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	3301      	adds	r3, #1
 8008d4e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	4a13      	ldr	r2, [pc, #76]	; (8008da0 <USB_FlushTxFifo+0x64>)
 8008d54:	4293      	cmp	r3, r2
 8008d56:	d901      	bls.n	8008d5c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008d58:	2303      	movs	r3, #3
 8008d5a:	e01b      	b.n	8008d94 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	691b      	ldr	r3, [r3, #16]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	daf2      	bge.n	8008d4a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008d64:	2300      	movs	r3, #0
 8008d66:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	019b      	lsls	r3, r3, #6
 8008d6c:	f043 0220 	orr.w	r2, r3, #32
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	3301      	adds	r3, #1
 8008d78:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	4a08      	ldr	r2, [pc, #32]	; (8008da0 <USB_FlushTxFifo+0x64>)
 8008d7e:	4293      	cmp	r3, r2
 8008d80:	d901      	bls.n	8008d86 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008d82:	2303      	movs	r3, #3
 8008d84:	e006      	b.n	8008d94 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	691b      	ldr	r3, [r3, #16]
 8008d8a:	f003 0320 	and.w	r3, r3, #32
 8008d8e:	2b20      	cmp	r3, #32
 8008d90:	d0f0      	beq.n	8008d74 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008d92:	2300      	movs	r3, #0
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	3714      	adds	r7, #20
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9e:	4770      	bx	lr
 8008da0:	00030d40 	.word	0x00030d40

08008da4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008da4:	b480      	push	{r7}
 8008da6:	b085      	sub	sp, #20
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008dac:	2300      	movs	r3, #0
 8008dae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	3301      	adds	r3, #1
 8008db4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	4a11      	ldr	r2, [pc, #68]	; (8008e00 <USB_FlushRxFifo+0x5c>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d901      	bls.n	8008dc2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008dbe:	2303      	movs	r3, #3
 8008dc0:	e018      	b.n	8008df4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	691b      	ldr	r3, [r3, #16]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	daf2      	bge.n	8008db0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008dca:	2300      	movs	r3, #0
 8008dcc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2210      	movs	r2, #16
 8008dd2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	3301      	adds	r3, #1
 8008dd8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	4a08      	ldr	r2, [pc, #32]	; (8008e00 <USB_FlushRxFifo+0x5c>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d901      	bls.n	8008de6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008de2:	2303      	movs	r3, #3
 8008de4:	e006      	b.n	8008df4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	691b      	ldr	r3, [r3, #16]
 8008dea:	f003 0310 	and.w	r3, r3, #16
 8008dee:	2b10      	cmp	r3, #16
 8008df0:	d0f0      	beq.n	8008dd4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008df2:	2300      	movs	r3, #0
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	3714      	adds	r7, #20
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfe:	4770      	bx	lr
 8008e00:	00030d40 	.word	0x00030d40

08008e04 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b089      	sub	sp, #36	; 0x24
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	60f8      	str	r0, [r7, #12]
 8008e0c:	60b9      	str	r1, [r7, #8]
 8008e0e:	4611      	mov	r1, r2
 8008e10:	461a      	mov	r2, r3
 8008e12:	460b      	mov	r3, r1
 8008e14:	71fb      	strb	r3, [r7, #7]
 8008e16:	4613      	mov	r3, r2
 8008e18:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008e22:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d123      	bne.n	8008e72 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008e2a:	88bb      	ldrh	r3, [r7, #4]
 8008e2c:	3303      	adds	r3, #3
 8008e2e:	089b      	lsrs	r3, r3, #2
 8008e30:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008e32:	2300      	movs	r3, #0
 8008e34:	61bb      	str	r3, [r7, #24]
 8008e36:	e018      	b.n	8008e6a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008e38:	79fb      	ldrb	r3, [r7, #7]
 8008e3a:	031a      	lsls	r2, r3, #12
 8008e3c:	697b      	ldr	r3, [r7, #20]
 8008e3e:	4413      	add	r3, r2
 8008e40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e44:	461a      	mov	r2, r3
 8008e46:	69fb      	ldr	r3, [r7, #28]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008e4c:	69fb      	ldr	r3, [r7, #28]
 8008e4e:	3301      	adds	r3, #1
 8008e50:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008e52:	69fb      	ldr	r3, [r7, #28]
 8008e54:	3301      	adds	r3, #1
 8008e56:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008e58:	69fb      	ldr	r3, [r7, #28]
 8008e5a:	3301      	adds	r3, #1
 8008e5c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008e5e:	69fb      	ldr	r3, [r7, #28]
 8008e60:	3301      	adds	r3, #1
 8008e62:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008e64:	69bb      	ldr	r3, [r7, #24]
 8008e66:	3301      	adds	r3, #1
 8008e68:	61bb      	str	r3, [r7, #24]
 8008e6a:	69ba      	ldr	r2, [r7, #24]
 8008e6c:	693b      	ldr	r3, [r7, #16]
 8008e6e:	429a      	cmp	r2, r3
 8008e70:	d3e2      	bcc.n	8008e38 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008e72:	2300      	movs	r3, #0
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	3724      	adds	r7, #36	; 0x24
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7e:	4770      	bx	lr

08008e80 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008e80:	b480      	push	{r7}
 8008e82:	b08b      	sub	sp, #44	; 0x2c
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	60f8      	str	r0, [r7, #12]
 8008e88:	60b9      	str	r1, [r7, #8]
 8008e8a:	4613      	mov	r3, r2
 8008e8c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008e92:	68bb      	ldr	r3, [r7, #8]
 8008e94:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008e96:	88fb      	ldrh	r3, [r7, #6]
 8008e98:	089b      	lsrs	r3, r3, #2
 8008e9a:	b29b      	uxth	r3, r3
 8008e9c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008e9e:	88fb      	ldrh	r3, [r7, #6]
 8008ea0:	f003 0303 	and.w	r3, r3, #3
 8008ea4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	623b      	str	r3, [r7, #32]
 8008eaa:	e014      	b.n	8008ed6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008eac:	69bb      	ldr	r3, [r7, #24]
 8008eae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008eb2:	681a      	ldr	r2, [r3, #0]
 8008eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb6:	601a      	str	r2, [r3, #0]
    pDest++;
 8008eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eba:	3301      	adds	r3, #1
 8008ebc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec0:	3301      	adds	r3, #1
 8008ec2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec6:	3301      	adds	r3, #1
 8008ec8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ecc:	3301      	adds	r3, #1
 8008ece:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008ed0:	6a3b      	ldr	r3, [r7, #32]
 8008ed2:	3301      	adds	r3, #1
 8008ed4:	623b      	str	r3, [r7, #32]
 8008ed6:	6a3a      	ldr	r2, [r7, #32]
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	429a      	cmp	r2, r3
 8008edc:	d3e6      	bcc.n	8008eac <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008ede:	8bfb      	ldrh	r3, [r7, #30]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d01e      	beq.n	8008f22 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008ee8:	69bb      	ldr	r3, [r7, #24]
 8008eea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008eee:	461a      	mov	r2, r3
 8008ef0:	f107 0310 	add.w	r3, r7, #16
 8008ef4:	6812      	ldr	r2, [r2, #0]
 8008ef6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008ef8:	693a      	ldr	r2, [r7, #16]
 8008efa:	6a3b      	ldr	r3, [r7, #32]
 8008efc:	b2db      	uxtb	r3, r3
 8008efe:	00db      	lsls	r3, r3, #3
 8008f00:	fa22 f303 	lsr.w	r3, r2, r3
 8008f04:	b2da      	uxtb	r2, r3
 8008f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f08:	701a      	strb	r2, [r3, #0]
      i++;
 8008f0a:	6a3b      	ldr	r3, [r7, #32]
 8008f0c:	3301      	adds	r3, #1
 8008f0e:	623b      	str	r3, [r7, #32]
      pDest++;
 8008f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f12:	3301      	adds	r3, #1
 8008f14:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008f16:	8bfb      	ldrh	r3, [r7, #30]
 8008f18:	3b01      	subs	r3, #1
 8008f1a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008f1c:	8bfb      	ldrh	r3, [r7, #30]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d1ea      	bne.n	8008ef8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	372c      	adds	r7, #44	; 0x2c
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2e:	4770      	bx	lr

08008f30 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008f30:	b480      	push	{r7}
 8008f32:	b085      	sub	sp, #20
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	695b      	ldr	r3, [r3, #20]
 8008f3c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	699b      	ldr	r3, [r3, #24]
 8008f42:	68fa      	ldr	r2, [r7, #12]
 8008f44:	4013      	ands	r3, r2
 8008f46:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008f48:	68fb      	ldr	r3, [r7, #12]
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3714      	adds	r7, #20
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f54:	4770      	bx	lr

08008f56 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008f56:	b480      	push	{r7}
 8008f58:	b083      	sub	sp, #12
 8008f5a:	af00      	add	r7, sp, #0
 8008f5c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	695b      	ldr	r3, [r3, #20]
 8008f62:	f003 0301 	and.w	r3, r3, #1
}
 8008f66:	4618      	mov	r0, r3
 8008f68:	370c      	adds	r7, #12
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f70:	4770      	bx	lr
	...

08008f74 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008f74:	b480      	push	{r7}
 8008f76:	b085      	sub	sp, #20
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	3301      	adds	r3, #1
 8008f84:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	4a13      	ldr	r2, [pc, #76]	; (8008fd8 <USB_CoreReset+0x64>)
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d901      	bls.n	8008f92 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008f8e:	2303      	movs	r3, #3
 8008f90:	e01b      	b.n	8008fca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	691b      	ldr	r3, [r3, #16]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	daf2      	bge.n	8008f80 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	691b      	ldr	r3, [r3, #16]
 8008fa2:	f043 0201 	orr.w	r2, r3, #1
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	3301      	adds	r3, #1
 8008fae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	4a09      	ldr	r2, [pc, #36]	; (8008fd8 <USB_CoreReset+0x64>)
 8008fb4:	4293      	cmp	r3, r2
 8008fb6:	d901      	bls.n	8008fbc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008fb8:	2303      	movs	r3, #3
 8008fba:	e006      	b.n	8008fca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	691b      	ldr	r3, [r3, #16]
 8008fc0:	f003 0301 	and.w	r3, r3, #1
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d0f0      	beq.n	8008faa <USB_CoreReset+0x36>

  return HAL_OK;
 8008fc8:	2300      	movs	r3, #0
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3714      	adds	r7, #20
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd4:	4770      	bx	lr
 8008fd6:	bf00      	nop
 8008fd8:	00030d40 	.word	0x00030d40

08008fdc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008fdc:	b084      	sub	sp, #16
 8008fde:	b580      	push	{r7, lr}
 8008fe0:	b086      	sub	sp, #24
 8008fe2:	af00      	add	r7, sp, #0
 8008fe4:	6078      	str	r0, [r7, #4]
 8008fe6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008fea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008ffc:	461a      	mov	r2, r3
 8008ffe:	2300      	movs	r3, #0
 8009000:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009006:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009012:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800901e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800902a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800902e:	2b00      	cmp	r3, #0
 8009030:	d018      	beq.n	8009064 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8009032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009034:	2b01      	cmp	r3, #1
 8009036:	d10a      	bne.n	800904e <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	68fa      	ldr	r2, [r7, #12]
 8009042:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009046:	f043 0304 	orr.w	r3, r3, #4
 800904a:	6013      	str	r3, [r2, #0]
 800904c:	e014      	b.n	8009078 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	68fa      	ldr	r2, [r7, #12]
 8009058:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800905c:	f023 0304 	bic.w	r3, r3, #4
 8009060:	6013      	str	r3, [r2, #0]
 8009062:	e009      	b.n	8009078 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	68fa      	ldr	r2, [r7, #12]
 800906e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009072:	f023 0304 	bic.w	r3, r3, #4
 8009076:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009078:	2110      	movs	r1, #16
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f7ff fe5e 	bl	8008d3c <USB_FlushTxFifo>
 8009080:	4603      	mov	r3, r0
 8009082:	2b00      	cmp	r3, #0
 8009084:	d001      	beq.n	800908a <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8009086:	2301      	movs	r3, #1
 8009088:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f7ff fe8a 	bl	8008da4 <USB_FlushRxFifo>
 8009090:	4603      	mov	r3, r0
 8009092:	2b00      	cmp	r3, #0
 8009094:	d001      	beq.n	800909a <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8009096:	2301      	movs	r3, #1
 8009098:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800909a:	2300      	movs	r3, #0
 800909c:	613b      	str	r3, [r7, #16]
 800909e:	e015      	b.n	80090cc <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80090a0:	693b      	ldr	r3, [r7, #16]
 80090a2:	015a      	lsls	r2, r3, #5
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	4413      	add	r3, r2
 80090a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090ac:	461a      	mov	r2, r3
 80090ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80090b2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80090b4:	693b      	ldr	r3, [r7, #16]
 80090b6:	015a      	lsls	r2, r3, #5
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	4413      	add	r3, r2
 80090bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090c0:	461a      	mov	r2, r3
 80090c2:	2300      	movs	r3, #0
 80090c4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80090c6:	693b      	ldr	r3, [r7, #16]
 80090c8:	3301      	adds	r3, #1
 80090ca:	613b      	str	r3, [r7, #16]
 80090cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ce:	693a      	ldr	r2, [r7, #16]
 80090d0:	429a      	cmp	r2, r3
 80090d2:	d3e5      	bcc.n	80090a0 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2200      	movs	r2, #0
 80090d8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80090e0:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d00b      	beq.n	8009106 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80090f4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	4a13      	ldr	r2, [pc, #76]	; (8009148 <USB_HostInit+0x16c>)
 80090fa:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	4a13      	ldr	r2, [pc, #76]	; (800914c <USB_HostInit+0x170>)
 8009100:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8009104:	e009      	b.n	800911a <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2280      	movs	r2, #128	; 0x80
 800910a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	4a10      	ldr	r2, [pc, #64]	; (8009150 <USB_HostInit+0x174>)
 8009110:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	4a0f      	ldr	r2, [pc, #60]	; (8009154 <USB_HostInit+0x178>)
 8009116:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800911a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800911c:	2b00      	cmp	r3, #0
 800911e:	d105      	bne.n	800912c <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	699b      	ldr	r3, [r3, #24]
 8009124:	f043 0210 	orr.w	r2, r3, #16
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	699a      	ldr	r2, [r3, #24]
 8009130:	4b09      	ldr	r3, [pc, #36]	; (8009158 <USB_HostInit+0x17c>)
 8009132:	4313      	orrs	r3, r2
 8009134:	687a      	ldr	r2, [r7, #4]
 8009136:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8009138:	7dfb      	ldrb	r3, [r7, #23]
}
 800913a:	4618      	mov	r0, r3
 800913c:	3718      	adds	r7, #24
 800913e:	46bd      	mov	sp, r7
 8009140:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009144:	b004      	add	sp, #16
 8009146:	4770      	bx	lr
 8009148:	01000200 	.word	0x01000200
 800914c:	00e00300 	.word	0x00e00300
 8009150:	00600080 	.word	0x00600080
 8009154:	004000e0 	.word	0x004000e0
 8009158:	a3200008 	.word	0xa3200008

0800915c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800915c:	b480      	push	{r7}
 800915e:	b085      	sub	sp, #20
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
 8009164:	460b      	mov	r3, r1
 8009166:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	68fa      	ldr	r2, [r7, #12]
 8009176:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800917a:	f023 0303 	bic.w	r3, r3, #3
 800917e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009186:	681a      	ldr	r2, [r3, #0]
 8009188:	78fb      	ldrb	r3, [r7, #3]
 800918a:	f003 0303 	and.w	r3, r3, #3
 800918e:	68f9      	ldr	r1, [r7, #12]
 8009190:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009194:	4313      	orrs	r3, r2
 8009196:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8009198:	78fb      	ldrb	r3, [r7, #3]
 800919a:	2b01      	cmp	r3, #1
 800919c:	d107      	bne.n	80091ae <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80091a4:	461a      	mov	r2, r3
 80091a6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80091aa:	6053      	str	r3, [r2, #4]
 80091ac:	e009      	b.n	80091c2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80091ae:	78fb      	ldrb	r3, [r7, #3]
 80091b0:	2b02      	cmp	r3, #2
 80091b2:	d106      	bne.n	80091c2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80091ba:	461a      	mov	r2, r3
 80091bc:	f241 7370 	movw	r3, #6000	; 0x1770
 80091c0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80091c2:	2300      	movs	r3, #0
}
 80091c4:	4618      	mov	r0, r3
 80091c6:	3714      	adds	r7, #20
 80091c8:	46bd      	mov	sp, r7
 80091ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ce:	4770      	bx	lr

080091d0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b084      	sub	sp, #16
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80091dc:	2300      	movs	r3, #0
 80091de:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80091f0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	68fa      	ldr	r2, [r7, #12]
 80091f6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80091fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80091fe:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8009200:	2064      	movs	r0, #100	; 0x64
 8009202:	f7f8 feef 	bl	8001fe4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	68fa      	ldr	r2, [r7, #12]
 800920a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800920e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009212:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8009214:	200a      	movs	r0, #10
 8009216:	f7f8 fee5 	bl	8001fe4 <HAL_Delay>

  return HAL_OK;
 800921a:	2300      	movs	r3, #0
}
 800921c:	4618      	mov	r0, r3
 800921e:	3710      	adds	r7, #16
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}

08009224 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8009224:	b480      	push	{r7}
 8009226:	b085      	sub	sp, #20
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
 800922c:	460b      	mov	r3, r1
 800922e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009234:	2300      	movs	r3, #0
 8009236:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009248:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009250:	2b00      	cmp	r3, #0
 8009252:	d109      	bne.n	8009268 <USB_DriveVbus+0x44>
 8009254:	78fb      	ldrb	r3, [r7, #3]
 8009256:	2b01      	cmp	r3, #1
 8009258:	d106      	bne.n	8009268 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	68fa      	ldr	r2, [r7, #12]
 800925e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009262:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009266:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800926e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009272:	d109      	bne.n	8009288 <USB_DriveVbus+0x64>
 8009274:	78fb      	ldrb	r3, [r7, #3]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d106      	bne.n	8009288 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	68fa      	ldr	r2, [r7, #12]
 800927e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009282:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009286:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8009288:	2300      	movs	r3, #0
}
 800928a:	4618      	mov	r0, r3
 800928c:	3714      	adds	r7, #20
 800928e:	46bd      	mov	sp, r7
 8009290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009294:	4770      	bx	lr

08009296 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009296:	b480      	push	{r7}
 8009298:	b085      	sub	sp, #20
 800929a:	af00      	add	r7, sp, #0
 800929c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80092a2:	2300      	movs	r3, #0
 80092a4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	0c5b      	lsrs	r3, r3, #17
 80092b4:	f003 0303 	and.w	r3, r3, #3
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3714      	adds	r7, #20
 80092bc:	46bd      	mov	sp, r7
 80092be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c2:	4770      	bx	lr

080092c4 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80092c4:	b480      	push	{r7}
 80092c6:	b085      	sub	sp, #20
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80092d6:	689b      	ldr	r3, [r3, #8]
 80092d8:	b29b      	uxth	r3, r3
}
 80092da:	4618      	mov	r0, r3
 80092dc:	3714      	adds	r7, #20
 80092de:	46bd      	mov	sp, r7
 80092e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e4:	4770      	bx	lr
	...

080092e8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b088      	sub	sp, #32
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
 80092f0:	4608      	mov	r0, r1
 80092f2:	4611      	mov	r1, r2
 80092f4:	461a      	mov	r2, r3
 80092f6:	4603      	mov	r3, r0
 80092f8:	70fb      	strb	r3, [r7, #3]
 80092fa:	460b      	mov	r3, r1
 80092fc:	70bb      	strb	r3, [r7, #2]
 80092fe:	4613      	mov	r3, r2
 8009300:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8009302:	2300      	movs	r3, #0
 8009304:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800930a:	78fb      	ldrb	r3, [r7, #3]
 800930c:	015a      	lsls	r2, r3, #5
 800930e:	693b      	ldr	r3, [r7, #16]
 8009310:	4413      	add	r3, r2
 8009312:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009316:	461a      	mov	r2, r3
 8009318:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800931c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800931e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009322:	2b03      	cmp	r3, #3
 8009324:	d87e      	bhi.n	8009424 <USB_HC_Init+0x13c>
 8009326:	a201      	add	r2, pc, #4	; (adr r2, 800932c <USB_HC_Init+0x44>)
 8009328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800932c:	0800933d 	.word	0x0800933d
 8009330:	080093e7 	.word	0x080093e7
 8009334:	0800933d 	.word	0x0800933d
 8009338:	080093a9 	.word	0x080093a9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800933c:	78fb      	ldrb	r3, [r7, #3]
 800933e:	015a      	lsls	r2, r3, #5
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	4413      	add	r3, r2
 8009344:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009348:	461a      	mov	r2, r3
 800934a:	f240 439d 	movw	r3, #1181	; 0x49d
 800934e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8009350:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009354:	2b00      	cmp	r3, #0
 8009356:	da10      	bge.n	800937a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009358:	78fb      	ldrb	r3, [r7, #3]
 800935a:	015a      	lsls	r2, r3, #5
 800935c:	693b      	ldr	r3, [r7, #16]
 800935e:	4413      	add	r3, r2
 8009360:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009364:	68db      	ldr	r3, [r3, #12]
 8009366:	78fa      	ldrb	r2, [r7, #3]
 8009368:	0151      	lsls	r1, r2, #5
 800936a:	693a      	ldr	r2, [r7, #16]
 800936c:	440a      	add	r2, r1
 800936e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009372:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009376:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8009378:	e057      	b.n	800942a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800937e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009382:	2b00      	cmp	r3, #0
 8009384:	d051      	beq.n	800942a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8009386:	78fb      	ldrb	r3, [r7, #3]
 8009388:	015a      	lsls	r2, r3, #5
 800938a:	693b      	ldr	r3, [r7, #16]
 800938c:	4413      	add	r3, r2
 800938e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009392:	68db      	ldr	r3, [r3, #12]
 8009394:	78fa      	ldrb	r2, [r7, #3]
 8009396:	0151      	lsls	r1, r2, #5
 8009398:	693a      	ldr	r2, [r7, #16]
 800939a:	440a      	add	r2, r1
 800939c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80093a0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80093a4:	60d3      	str	r3, [r2, #12]
      break;
 80093a6:	e040      	b.n	800942a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80093a8:	78fb      	ldrb	r3, [r7, #3]
 80093aa:	015a      	lsls	r2, r3, #5
 80093ac:	693b      	ldr	r3, [r7, #16]
 80093ae:	4413      	add	r3, r2
 80093b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093b4:	461a      	mov	r2, r3
 80093b6:	f240 639d 	movw	r3, #1693	; 0x69d
 80093ba:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80093bc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	da34      	bge.n	800942e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80093c4:	78fb      	ldrb	r3, [r7, #3]
 80093c6:	015a      	lsls	r2, r3, #5
 80093c8:	693b      	ldr	r3, [r7, #16]
 80093ca:	4413      	add	r3, r2
 80093cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093d0:	68db      	ldr	r3, [r3, #12]
 80093d2:	78fa      	ldrb	r2, [r7, #3]
 80093d4:	0151      	lsls	r1, r2, #5
 80093d6:	693a      	ldr	r2, [r7, #16]
 80093d8:	440a      	add	r2, r1
 80093da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80093de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80093e2:	60d3      	str	r3, [r2, #12]
      }

      break;
 80093e4:	e023      	b.n	800942e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80093e6:	78fb      	ldrb	r3, [r7, #3]
 80093e8:	015a      	lsls	r2, r3, #5
 80093ea:	693b      	ldr	r3, [r7, #16]
 80093ec:	4413      	add	r3, r2
 80093ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093f2:	461a      	mov	r2, r3
 80093f4:	f240 2325 	movw	r3, #549	; 0x225
 80093f8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80093fa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	da17      	bge.n	8009432 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8009402:	78fb      	ldrb	r3, [r7, #3]
 8009404:	015a      	lsls	r2, r3, #5
 8009406:	693b      	ldr	r3, [r7, #16]
 8009408:	4413      	add	r3, r2
 800940a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800940e:	68db      	ldr	r3, [r3, #12]
 8009410:	78fa      	ldrb	r2, [r7, #3]
 8009412:	0151      	lsls	r1, r2, #5
 8009414:	693a      	ldr	r2, [r7, #16]
 8009416:	440a      	add	r2, r1
 8009418:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800941c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8009420:	60d3      	str	r3, [r2, #12]
      }
      break;
 8009422:	e006      	b.n	8009432 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8009424:	2301      	movs	r3, #1
 8009426:	77fb      	strb	r3, [r7, #31]
      break;
 8009428:	e004      	b.n	8009434 <USB_HC_Init+0x14c>
      break;
 800942a:	bf00      	nop
 800942c:	e002      	b.n	8009434 <USB_HC_Init+0x14c>
      break;
 800942e:	bf00      	nop
 8009430:	e000      	b.n	8009434 <USB_HC_Init+0x14c>
      break;
 8009432:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8009434:	78fb      	ldrb	r3, [r7, #3]
 8009436:	015a      	lsls	r2, r3, #5
 8009438:	693b      	ldr	r3, [r7, #16]
 800943a:	4413      	add	r3, r2
 800943c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009440:	68db      	ldr	r3, [r3, #12]
 8009442:	78fa      	ldrb	r2, [r7, #3]
 8009444:	0151      	lsls	r1, r2, #5
 8009446:	693a      	ldr	r2, [r7, #16]
 8009448:	440a      	add	r2, r1
 800944a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800944e:	f043 0302 	orr.w	r3, r3, #2
 8009452:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8009454:	693b      	ldr	r3, [r7, #16]
 8009456:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800945a:	699a      	ldr	r2, [r3, #24]
 800945c:	78fb      	ldrb	r3, [r7, #3]
 800945e:	f003 030f 	and.w	r3, r3, #15
 8009462:	2101      	movs	r1, #1
 8009464:	fa01 f303 	lsl.w	r3, r1, r3
 8009468:	6939      	ldr	r1, [r7, #16]
 800946a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800946e:	4313      	orrs	r3, r2
 8009470:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	699b      	ldr	r3, [r3, #24]
 8009476:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800947e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009482:	2b00      	cmp	r3, #0
 8009484:	da03      	bge.n	800948e <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8009486:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800948a:	61bb      	str	r3, [r7, #24]
 800948c:	e001      	b.n	8009492 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800948e:	2300      	movs	r3, #0
 8009490:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f7ff feff 	bl	8009296 <USB_GetHostSpeed>
 8009498:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800949a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800949e:	2b02      	cmp	r3, #2
 80094a0:	d106      	bne.n	80094b0 <USB_HC_Init+0x1c8>
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	2b02      	cmp	r3, #2
 80094a6:	d003      	beq.n	80094b0 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80094a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80094ac:	617b      	str	r3, [r7, #20]
 80094ae:	e001      	b.n	80094b4 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80094b0:	2300      	movs	r3, #0
 80094b2:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80094b4:	787b      	ldrb	r3, [r7, #1]
 80094b6:	059b      	lsls	r3, r3, #22
 80094b8:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80094bc:	78bb      	ldrb	r3, [r7, #2]
 80094be:	02db      	lsls	r3, r3, #11
 80094c0:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80094c4:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80094c6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80094ca:	049b      	lsls	r3, r3, #18
 80094cc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80094d0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80094d2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80094d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80094d8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80094da:	69bb      	ldr	r3, [r7, #24]
 80094dc:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80094de:	78fb      	ldrb	r3, [r7, #3]
 80094e0:	0159      	lsls	r1, r3, #5
 80094e2:	693b      	ldr	r3, [r7, #16]
 80094e4:	440b      	add	r3, r1
 80094e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094ea:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80094f0:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80094f2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80094f6:	2b03      	cmp	r3, #3
 80094f8:	d003      	beq.n	8009502 <USB_HC_Init+0x21a>
 80094fa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80094fe:	2b01      	cmp	r3, #1
 8009500:	d10f      	bne.n	8009522 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8009502:	78fb      	ldrb	r3, [r7, #3]
 8009504:	015a      	lsls	r2, r3, #5
 8009506:	693b      	ldr	r3, [r7, #16]
 8009508:	4413      	add	r3, r2
 800950a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	78fa      	ldrb	r2, [r7, #3]
 8009512:	0151      	lsls	r1, r2, #5
 8009514:	693a      	ldr	r2, [r7, #16]
 8009516:	440a      	add	r2, r1
 8009518:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800951c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009520:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8009522:	7ffb      	ldrb	r3, [r7, #31]
}
 8009524:	4618      	mov	r0, r3
 8009526:	3720      	adds	r7, #32
 8009528:	46bd      	mov	sp, r7
 800952a:	bd80      	pop	{r7, pc}

0800952c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b08c      	sub	sp, #48	; 0x30
 8009530:	af02      	add	r7, sp, #8
 8009532:	60f8      	str	r0, [r7, #12]
 8009534:	60b9      	str	r1, [r7, #8]
 8009536:	4613      	mov	r3, r2
 8009538:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800953e:	68bb      	ldr	r3, [r7, #8]
 8009540:	785b      	ldrb	r3, [r3, #1]
 8009542:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8009544:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009548:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800954e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009552:	2b00      	cmp	r3, #0
 8009554:	d02d      	beq.n	80095b2 <USB_HC_StartXfer+0x86>
 8009556:	68bb      	ldr	r3, [r7, #8]
 8009558:	791b      	ldrb	r3, [r3, #4]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d129      	bne.n	80095b2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800955e:	79fb      	ldrb	r3, [r7, #7]
 8009560:	2b01      	cmp	r3, #1
 8009562:	d117      	bne.n	8009594 <USB_HC_StartXfer+0x68>
 8009564:	68bb      	ldr	r3, [r7, #8]
 8009566:	79db      	ldrb	r3, [r3, #7]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d003      	beq.n	8009574 <USB_HC_StartXfer+0x48>
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	79db      	ldrb	r3, [r3, #7]
 8009570:	2b02      	cmp	r3, #2
 8009572:	d10f      	bne.n	8009594 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8009574:	69fb      	ldr	r3, [r7, #28]
 8009576:	015a      	lsls	r2, r3, #5
 8009578:	6a3b      	ldr	r3, [r7, #32]
 800957a:	4413      	add	r3, r2
 800957c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009580:	68db      	ldr	r3, [r3, #12]
 8009582:	69fa      	ldr	r2, [r7, #28]
 8009584:	0151      	lsls	r1, r2, #5
 8009586:	6a3a      	ldr	r2, [r7, #32]
 8009588:	440a      	add	r2, r1
 800958a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800958e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009592:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8009594:	79fb      	ldrb	r3, [r7, #7]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d10b      	bne.n	80095b2 <USB_HC_StartXfer+0x86>
 800959a:	68bb      	ldr	r3, [r7, #8]
 800959c:	795b      	ldrb	r3, [r3, #5]
 800959e:	2b01      	cmp	r3, #1
 80095a0:	d107      	bne.n	80095b2 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	785b      	ldrb	r3, [r3, #1]
 80095a6:	4619      	mov	r1, r3
 80095a8:	68f8      	ldr	r0, [r7, #12]
 80095aa:	f000 fa0f 	bl	80099cc <USB_DoPing>
      return HAL_OK;
 80095ae:	2300      	movs	r3, #0
 80095b0:	e0f8      	b.n	80097a4 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80095b2:	68bb      	ldr	r3, [r7, #8]
 80095b4:	695b      	ldr	r3, [r3, #20]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d018      	beq.n	80095ec <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80095ba:	68bb      	ldr	r3, [r7, #8]
 80095bc:	695b      	ldr	r3, [r3, #20]
 80095be:	68ba      	ldr	r2, [r7, #8]
 80095c0:	8912      	ldrh	r2, [r2, #8]
 80095c2:	4413      	add	r3, r2
 80095c4:	3b01      	subs	r3, #1
 80095c6:	68ba      	ldr	r2, [r7, #8]
 80095c8:	8912      	ldrh	r2, [r2, #8]
 80095ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80095ce:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80095d0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80095d2:	8b7b      	ldrh	r3, [r7, #26]
 80095d4:	429a      	cmp	r2, r3
 80095d6:	d90b      	bls.n	80095f0 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80095d8:	8b7b      	ldrh	r3, [r7, #26]
 80095da:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80095dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80095de:	68ba      	ldr	r2, [r7, #8]
 80095e0:	8912      	ldrh	r2, [r2, #8]
 80095e2:	fb03 f202 	mul.w	r2, r3, r2
 80095e6:	68bb      	ldr	r3, [r7, #8]
 80095e8:	611a      	str	r2, [r3, #16]
 80095ea:	e001      	b.n	80095f0 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80095ec:	2301      	movs	r3, #1
 80095ee:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80095f0:	68bb      	ldr	r3, [r7, #8]
 80095f2:	78db      	ldrb	r3, [r3, #3]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d007      	beq.n	8009608 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80095f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80095fa:	68ba      	ldr	r2, [r7, #8]
 80095fc:	8912      	ldrh	r2, [r2, #8]
 80095fe:	fb03 f202 	mul.w	r2, r3, r2
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	611a      	str	r2, [r3, #16]
 8009606:	e003      	b.n	8009610 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	695a      	ldr	r2, [r3, #20]
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	691b      	ldr	r3, [r3, #16]
 8009614:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009618:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800961a:	04d9      	lsls	r1, r3, #19
 800961c:	4b63      	ldr	r3, [pc, #396]	; (80097ac <USB_HC_StartXfer+0x280>)
 800961e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009620:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	7a9b      	ldrb	r3, [r3, #10]
 8009626:	075b      	lsls	r3, r3, #29
 8009628:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800962c:	69f9      	ldr	r1, [r7, #28]
 800962e:	0148      	lsls	r0, r1, #5
 8009630:	6a39      	ldr	r1, [r7, #32]
 8009632:	4401      	add	r1, r0
 8009634:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009638:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800963a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800963c:	79fb      	ldrb	r3, [r7, #7]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d009      	beq.n	8009656 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8009642:	68bb      	ldr	r3, [r7, #8]
 8009644:	68d9      	ldr	r1, [r3, #12]
 8009646:	69fb      	ldr	r3, [r7, #28]
 8009648:	015a      	lsls	r2, r3, #5
 800964a:	6a3b      	ldr	r3, [r7, #32]
 800964c:	4413      	add	r3, r2
 800964e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009652:	460a      	mov	r2, r1
 8009654:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8009656:	6a3b      	ldr	r3, [r7, #32]
 8009658:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800965c:	689b      	ldr	r3, [r3, #8]
 800965e:	f003 0301 	and.w	r3, r3, #1
 8009662:	2b00      	cmp	r3, #0
 8009664:	bf0c      	ite	eq
 8009666:	2301      	moveq	r3, #1
 8009668:	2300      	movne	r3, #0
 800966a:	b2db      	uxtb	r3, r3
 800966c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800966e:	69fb      	ldr	r3, [r7, #28]
 8009670:	015a      	lsls	r2, r3, #5
 8009672:	6a3b      	ldr	r3, [r7, #32]
 8009674:	4413      	add	r3, r2
 8009676:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	69fa      	ldr	r2, [r7, #28]
 800967e:	0151      	lsls	r1, r2, #5
 8009680:	6a3a      	ldr	r2, [r7, #32]
 8009682:	440a      	add	r2, r1
 8009684:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009688:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800968c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800968e:	69fb      	ldr	r3, [r7, #28]
 8009690:	015a      	lsls	r2, r3, #5
 8009692:	6a3b      	ldr	r3, [r7, #32]
 8009694:	4413      	add	r3, r2
 8009696:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800969a:	681a      	ldr	r2, [r3, #0]
 800969c:	7e7b      	ldrb	r3, [r7, #25]
 800969e:	075b      	lsls	r3, r3, #29
 80096a0:	69f9      	ldr	r1, [r7, #28]
 80096a2:	0148      	lsls	r0, r1, #5
 80096a4:	6a39      	ldr	r1, [r7, #32]
 80096a6:	4401      	add	r1, r0
 80096a8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80096ac:	4313      	orrs	r3, r2
 80096ae:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80096b0:	69fb      	ldr	r3, [r7, #28]
 80096b2:	015a      	lsls	r2, r3, #5
 80096b4:	6a3b      	ldr	r3, [r7, #32]
 80096b6:	4413      	add	r3, r2
 80096b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80096c0:	693b      	ldr	r3, [r7, #16]
 80096c2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80096c6:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	78db      	ldrb	r3, [r3, #3]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d004      	beq.n	80096da <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80096d0:	693b      	ldr	r3, [r7, #16]
 80096d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80096d6:	613b      	str	r3, [r7, #16]
 80096d8:	e003      	b.n	80096e2 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80096da:	693b      	ldr	r3, [r7, #16]
 80096dc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80096e0:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80096e2:	693b      	ldr	r3, [r7, #16]
 80096e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80096e8:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80096ea:	69fb      	ldr	r3, [r7, #28]
 80096ec:	015a      	lsls	r2, r3, #5
 80096ee:	6a3b      	ldr	r3, [r7, #32]
 80096f0:	4413      	add	r3, r2
 80096f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096f6:	461a      	mov	r2, r3
 80096f8:	693b      	ldr	r3, [r7, #16]
 80096fa:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80096fc:	79fb      	ldrb	r3, [r7, #7]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d001      	beq.n	8009706 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8009702:	2300      	movs	r3, #0
 8009704:	e04e      	b.n	80097a4 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8009706:	68bb      	ldr	r3, [r7, #8]
 8009708:	78db      	ldrb	r3, [r3, #3]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d149      	bne.n	80097a2 <USB_HC_StartXfer+0x276>
 800970e:	68bb      	ldr	r3, [r7, #8]
 8009710:	695b      	ldr	r3, [r3, #20]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d045      	beq.n	80097a2 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8009716:	68bb      	ldr	r3, [r7, #8]
 8009718:	79db      	ldrb	r3, [r3, #7]
 800971a:	2b03      	cmp	r3, #3
 800971c:	d830      	bhi.n	8009780 <USB_HC_StartXfer+0x254>
 800971e:	a201      	add	r2, pc, #4	; (adr r2, 8009724 <USB_HC_StartXfer+0x1f8>)
 8009720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009724:	08009735 	.word	0x08009735
 8009728:	08009759 	.word	0x08009759
 800972c:	08009735 	.word	0x08009735
 8009730:	08009759 	.word	0x08009759
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009734:	68bb      	ldr	r3, [r7, #8]
 8009736:	695b      	ldr	r3, [r3, #20]
 8009738:	3303      	adds	r3, #3
 800973a:	089b      	lsrs	r3, r3, #2
 800973c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800973e:	8afa      	ldrh	r2, [r7, #22]
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009744:	b29b      	uxth	r3, r3
 8009746:	429a      	cmp	r2, r3
 8009748:	d91c      	bls.n	8009784 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	699b      	ldr	r3, [r3, #24]
 800974e:	f043 0220 	orr.w	r2, r3, #32
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	619a      	str	r2, [r3, #24]
        }
        break;
 8009756:	e015      	b.n	8009784 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009758:	68bb      	ldr	r3, [r7, #8]
 800975a:	695b      	ldr	r3, [r3, #20]
 800975c:	3303      	adds	r3, #3
 800975e:	089b      	lsrs	r3, r3, #2
 8009760:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8009762:	8afa      	ldrh	r2, [r7, #22]
 8009764:	6a3b      	ldr	r3, [r7, #32]
 8009766:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800976a:	691b      	ldr	r3, [r3, #16]
 800976c:	b29b      	uxth	r3, r3
 800976e:	429a      	cmp	r2, r3
 8009770:	d90a      	bls.n	8009788 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	699b      	ldr	r3, [r3, #24]
 8009776:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	619a      	str	r2, [r3, #24]
        }
        break;
 800977e:	e003      	b.n	8009788 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8009780:	bf00      	nop
 8009782:	e002      	b.n	800978a <USB_HC_StartXfer+0x25e>
        break;
 8009784:	bf00      	nop
 8009786:	e000      	b.n	800978a <USB_HC_StartXfer+0x25e>
        break;
 8009788:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800978a:	68bb      	ldr	r3, [r7, #8]
 800978c:	68d9      	ldr	r1, [r3, #12]
 800978e:	68bb      	ldr	r3, [r7, #8]
 8009790:	785a      	ldrb	r2, [r3, #1]
 8009792:	68bb      	ldr	r3, [r7, #8]
 8009794:	695b      	ldr	r3, [r3, #20]
 8009796:	b29b      	uxth	r3, r3
 8009798:	2000      	movs	r0, #0
 800979a:	9000      	str	r0, [sp, #0]
 800979c:	68f8      	ldr	r0, [r7, #12]
 800979e:	f7ff fb31 	bl	8008e04 <USB_WritePacket>
  }

  return HAL_OK;
 80097a2:	2300      	movs	r3, #0
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	3728      	adds	r7, #40	; 0x28
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}
 80097ac:	1ff80000 	.word	0x1ff80000

080097b0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80097b0:	b480      	push	{r7}
 80097b2:	b085      	sub	sp, #20
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80097c2:	695b      	ldr	r3, [r3, #20]
 80097c4:	b29b      	uxth	r3, r3
}
 80097c6:	4618      	mov	r0, r3
 80097c8:	3714      	adds	r7, #20
 80097ca:	46bd      	mov	sp, r7
 80097cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d0:	4770      	bx	lr

080097d2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80097d2:	b480      	push	{r7}
 80097d4:	b089      	sub	sp, #36	; 0x24
 80097d6:	af00      	add	r7, sp, #0
 80097d8:	6078      	str	r0, [r7, #4]
 80097da:	460b      	mov	r3, r1
 80097dc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80097e2:	78fb      	ldrb	r3, [r7, #3]
 80097e4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80097e6:	2300      	movs	r3, #0
 80097e8:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80097ea:	69bb      	ldr	r3, [r7, #24]
 80097ec:	015a      	lsls	r2, r3, #5
 80097ee:	69fb      	ldr	r3, [r7, #28]
 80097f0:	4413      	add	r3, r2
 80097f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	0c9b      	lsrs	r3, r3, #18
 80097fa:	f003 0303 	and.w	r3, r3, #3
 80097fe:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8009800:	69bb      	ldr	r3, [r7, #24]
 8009802:	015a      	lsls	r2, r3, #5
 8009804:	69fb      	ldr	r3, [r7, #28]
 8009806:	4413      	add	r3, r2
 8009808:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	0fdb      	lsrs	r3, r3, #31
 8009810:	f003 0301 	and.w	r3, r3, #1
 8009814:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	689b      	ldr	r3, [r3, #8]
 800981a:	f003 0320 	and.w	r3, r3, #32
 800981e:	2b20      	cmp	r3, #32
 8009820:	d104      	bne.n	800982c <USB_HC_Halt+0x5a>
 8009822:	693b      	ldr	r3, [r7, #16]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d101      	bne.n	800982c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8009828:	2300      	movs	r3, #0
 800982a:	e0c8      	b.n	80099be <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800982c:	697b      	ldr	r3, [r7, #20]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d002      	beq.n	8009838 <USB_HC_Halt+0x66>
 8009832:	697b      	ldr	r3, [r7, #20]
 8009834:	2b02      	cmp	r3, #2
 8009836:	d163      	bne.n	8009900 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009838:	69bb      	ldr	r3, [r7, #24]
 800983a:	015a      	lsls	r2, r3, #5
 800983c:	69fb      	ldr	r3, [r7, #28]
 800983e:	4413      	add	r3, r2
 8009840:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	69ba      	ldr	r2, [r7, #24]
 8009848:	0151      	lsls	r1, r2, #5
 800984a:	69fa      	ldr	r2, [r7, #28]
 800984c:	440a      	add	r2, r1
 800984e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009852:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009856:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	689b      	ldr	r3, [r3, #8]
 800985c:	f003 0320 	and.w	r3, r3, #32
 8009860:	2b00      	cmp	r3, #0
 8009862:	f040 80ab 	bne.w	80099bc <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800986a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800986e:	2b00      	cmp	r3, #0
 8009870:	d133      	bne.n	80098da <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009872:	69bb      	ldr	r3, [r7, #24]
 8009874:	015a      	lsls	r2, r3, #5
 8009876:	69fb      	ldr	r3, [r7, #28]
 8009878:	4413      	add	r3, r2
 800987a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	69ba      	ldr	r2, [r7, #24]
 8009882:	0151      	lsls	r1, r2, #5
 8009884:	69fa      	ldr	r2, [r7, #28]
 8009886:	440a      	add	r2, r1
 8009888:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800988c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009890:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009892:	69bb      	ldr	r3, [r7, #24]
 8009894:	015a      	lsls	r2, r3, #5
 8009896:	69fb      	ldr	r3, [r7, #28]
 8009898:	4413      	add	r3, r2
 800989a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	69ba      	ldr	r2, [r7, #24]
 80098a2:	0151      	lsls	r1, r2, #5
 80098a4:	69fa      	ldr	r2, [r7, #28]
 80098a6:	440a      	add	r2, r1
 80098a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80098ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80098b0:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	3301      	adds	r3, #1
 80098b6:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80098be:	d81d      	bhi.n	80098fc <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80098c0:	69bb      	ldr	r3, [r7, #24]
 80098c2:	015a      	lsls	r2, r3, #5
 80098c4:	69fb      	ldr	r3, [r7, #28]
 80098c6:	4413      	add	r3, r2
 80098c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80098d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80098d6:	d0ec      	beq.n	80098b2 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80098d8:	e070      	b.n	80099bc <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80098da:	69bb      	ldr	r3, [r7, #24]
 80098dc:	015a      	lsls	r2, r3, #5
 80098de:	69fb      	ldr	r3, [r7, #28]
 80098e0:	4413      	add	r3, r2
 80098e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	69ba      	ldr	r2, [r7, #24]
 80098ea:	0151      	lsls	r1, r2, #5
 80098ec:	69fa      	ldr	r2, [r7, #28]
 80098ee:	440a      	add	r2, r1
 80098f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80098f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80098f8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80098fa:	e05f      	b.n	80099bc <USB_HC_Halt+0x1ea>
            break;
 80098fc:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80098fe:	e05d      	b.n	80099bc <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009900:	69bb      	ldr	r3, [r7, #24]
 8009902:	015a      	lsls	r2, r3, #5
 8009904:	69fb      	ldr	r3, [r7, #28]
 8009906:	4413      	add	r3, r2
 8009908:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	69ba      	ldr	r2, [r7, #24]
 8009910:	0151      	lsls	r1, r2, #5
 8009912:	69fa      	ldr	r2, [r7, #28]
 8009914:	440a      	add	r2, r1
 8009916:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800991a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800991e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8009920:	69fb      	ldr	r3, [r7, #28]
 8009922:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009926:	691b      	ldr	r3, [r3, #16]
 8009928:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800992c:	2b00      	cmp	r3, #0
 800992e:	d133      	bne.n	8009998 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009930:	69bb      	ldr	r3, [r7, #24]
 8009932:	015a      	lsls	r2, r3, #5
 8009934:	69fb      	ldr	r3, [r7, #28]
 8009936:	4413      	add	r3, r2
 8009938:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	69ba      	ldr	r2, [r7, #24]
 8009940:	0151      	lsls	r1, r2, #5
 8009942:	69fa      	ldr	r2, [r7, #28]
 8009944:	440a      	add	r2, r1
 8009946:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800994a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800994e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009950:	69bb      	ldr	r3, [r7, #24]
 8009952:	015a      	lsls	r2, r3, #5
 8009954:	69fb      	ldr	r3, [r7, #28]
 8009956:	4413      	add	r3, r2
 8009958:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	69ba      	ldr	r2, [r7, #24]
 8009960:	0151      	lsls	r1, r2, #5
 8009962:	69fa      	ldr	r2, [r7, #28]
 8009964:	440a      	add	r2, r1
 8009966:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800996a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800996e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	3301      	adds	r3, #1
 8009974:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800997c:	d81d      	bhi.n	80099ba <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800997e:	69bb      	ldr	r3, [r7, #24]
 8009980:	015a      	lsls	r2, r3, #5
 8009982:	69fb      	ldr	r3, [r7, #28]
 8009984:	4413      	add	r3, r2
 8009986:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009990:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009994:	d0ec      	beq.n	8009970 <USB_HC_Halt+0x19e>
 8009996:	e011      	b.n	80099bc <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009998:	69bb      	ldr	r3, [r7, #24]
 800999a:	015a      	lsls	r2, r3, #5
 800999c:	69fb      	ldr	r3, [r7, #28]
 800999e:	4413      	add	r3, r2
 80099a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	69ba      	ldr	r2, [r7, #24]
 80099a8:	0151      	lsls	r1, r2, #5
 80099aa:	69fa      	ldr	r2, [r7, #28]
 80099ac:	440a      	add	r2, r1
 80099ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80099b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80099b6:	6013      	str	r3, [r2, #0]
 80099b8:	e000      	b.n	80099bc <USB_HC_Halt+0x1ea>
          break;
 80099ba:	bf00      	nop
    }
  }

  return HAL_OK;
 80099bc:	2300      	movs	r3, #0
}
 80099be:	4618      	mov	r0, r3
 80099c0:	3724      	adds	r7, #36	; 0x24
 80099c2:	46bd      	mov	sp, r7
 80099c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c8:	4770      	bx	lr
	...

080099cc <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80099cc:	b480      	push	{r7}
 80099ce:	b087      	sub	sp, #28
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
 80099d4:	460b      	mov	r3, r1
 80099d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80099dc:	78fb      	ldrb	r3, [r7, #3]
 80099de:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80099e0:	2301      	movs	r3, #1
 80099e2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	04da      	lsls	r2, r3, #19
 80099e8:	4b15      	ldr	r3, [pc, #84]	; (8009a40 <USB_DoPing+0x74>)
 80099ea:	4013      	ands	r3, r2
 80099ec:	693a      	ldr	r2, [r7, #16]
 80099ee:	0151      	lsls	r1, r2, #5
 80099f0:	697a      	ldr	r2, [r7, #20]
 80099f2:	440a      	add	r2, r1
 80099f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80099f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80099fc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80099fe:	693b      	ldr	r3, [r7, #16]
 8009a00:	015a      	lsls	r2, r3, #5
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	4413      	add	r3, r2
 8009a06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009a0e:	68bb      	ldr	r3, [r7, #8]
 8009a10:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009a14:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009a16:	68bb      	ldr	r3, [r7, #8]
 8009a18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009a1c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8009a1e:	693b      	ldr	r3, [r7, #16]
 8009a20:	015a      	lsls	r2, r3, #5
 8009a22:	697b      	ldr	r3, [r7, #20]
 8009a24:	4413      	add	r3, r2
 8009a26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a2a:	461a      	mov	r2, r3
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8009a30:	2300      	movs	r3, #0
}
 8009a32:	4618      	mov	r0, r3
 8009a34:	371c      	adds	r7, #28
 8009a36:	46bd      	mov	sp, r7
 8009a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3c:	4770      	bx	lr
 8009a3e:	bf00      	nop
 8009a40:	1ff80000 	.word	0x1ff80000

08009a44 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b088      	sub	sp, #32
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8009a54:	2300      	movs	r3, #0
 8009a56:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	f7ff f911 	bl	8008c80 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009a5e:	2110      	movs	r1, #16
 8009a60:	6878      	ldr	r0, [r7, #4]
 8009a62:	f7ff f96b 	bl	8008d3c <USB_FlushTxFifo>
 8009a66:	4603      	mov	r3, r0
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d001      	beq.n	8009a70 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8009a6c:	2301      	movs	r3, #1
 8009a6e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f7ff f997 	bl	8008da4 <USB_FlushRxFifo>
 8009a76:	4603      	mov	r3, r0
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d001      	beq.n	8009a80 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8009a7c:	2301      	movs	r3, #1
 8009a7e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8009a80:	2300      	movs	r3, #0
 8009a82:	61bb      	str	r3, [r7, #24]
 8009a84:	e01f      	b.n	8009ac6 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8009a86:	69bb      	ldr	r3, [r7, #24]
 8009a88:	015a      	lsls	r2, r3, #5
 8009a8a:	697b      	ldr	r3, [r7, #20]
 8009a8c:	4413      	add	r3, r2
 8009a8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8009a96:	693b      	ldr	r3, [r7, #16]
 8009a98:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009a9c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8009a9e:	693b      	ldr	r3, [r7, #16]
 8009aa0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009aa4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009aa6:	693b      	ldr	r3, [r7, #16]
 8009aa8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009aac:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009aae:	69bb      	ldr	r3, [r7, #24]
 8009ab0:	015a      	lsls	r2, r3, #5
 8009ab2:	697b      	ldr	r3, [r7, #20]
 8009ab4:	4413      	add	r3, r2
 8009ab6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009aba:	461a      	mov	r2, r3
 8009abc:	693b      	ldr	r3, [r7, #16]
 8009abe:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8009ac0:	69bb      	ldr	r3, [r7, #24]
 8009ac2:	3301      	adds	r3, #1
 8009ac4:	61bb      	str	r3, [r7, #24]
 8009ac6:	69bb      	ldr	r3, [r7, #24]
 8009ac8:	2b0f      	cmp	r3, #15
 8009aca:	d9dc      	bls.n	8009a86 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8009acc:	2300      	movs	r3, #0
 8009ace:	61bb      	str	r3, [r7, #24]
 8009ad0:	e034      	b.n	8009b3c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8009ad2:	69bb      	ldr	r3, [r7, #24]
 8009ad4:	015a      	lsls	r2, r3, #5
 8009ad6:	697b      	ldr	r3, [r7, #20]
 8009ad8:	4413      	add	r3, r2
 8009ada:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8009ae2:	693b      	ldr	r3, [r7, #16]
 8009ae4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009ae8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8009aea:	693b      	ldr	r3, [r7, #16]
 8009aec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009af0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009af2:	693b      	ldr	r3, [r7, #16]
 8009af4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009af8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009afa:	69bb      	ldr	r3, [r7, #24]
 8009afc:	015a      	lsls	r2, r3, #5
 8009afe:	697b      	ldr	r3, [r7, #20]
 8009b00:	4413      	add	r3, r2
 8009b02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b06:	461a      	mov	r2, r3
 8009b08:	693b      	ldr	r3, [r7, #16]
 8009b0a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	3301      	adds	r3, #1
 8009b10:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009b18:	d80c      	bhi.n	8009b34 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009b1a:	69bb      	ldr	r3, [r7, #24]
 8009b1c:	015a      	lsls	r2, r3, #5
 8009b1e:	697b      	ldr	r3, [r7, #20]
 8009b20:	4413      	add	r3, r2
 8009b22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009b2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009b30:	d0ec      	beq.n	8009b0c <USB_StopHost+0xc8>
 8009b32:	e000      	b.n	8009b36 <USB_StopHost+0xf2>
        break;
 8009b34:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8009b36:	69bb      	ldr	r3, [r7, #24]
 8009b38:	3301      	adds	r3, #1
 8009b3a:	61bb      	str	r3, [r7, #24]
 8009b3c:	69bb      	ldr	r3, [r7, #24]
 8009b3e:	2b0f      	cmp	r3, #15
 8009b40:	d9c7      	bls.n	8009ad2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8009b42:	697b      	ldr	r3, [r7, #20]
 8009b44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009b48:	461a      	mov	r2, r3
 8009b4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009b4e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009b56:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f7ff f880 	bl	8008c5e <USB_EnableGlobalInt>

  return ret;
 8009b5e:	7ffb      	ldrb	r3, [r7, #31]
}
 8009b60:	4618      	mov	r0, r3
 8009b62:	3720      	adds	r7, #32
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}

08009b68 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8009b6c:	4904      	ldr	r1, [pc, #16]	; (8009b80 <MX_FATFS_Init+0x18>)
 8009b6e:	4805      	ldr	r0, [pc, #20]	; (8009b84 <MX_FATFS_Init+0x1c>)
 8009b70:	f003 f95e 	bl	800ce30 <FATFS_LinkDriver>
 8009b74:	4603      	mov	r3, r0
 8009b76:	461a      	mov	r2, r3
 8009b78:	4b03      	ldr	r3, [pc, #12]	; (8009b88 <MX_FATFS_Init+0x20>)
 8009b7a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009b7c:	bf00      	nop
 8009b7e:	bd80      	pop	{r7, pc}
 8009b80:	200005bc 	.word	0x200005bc
 8009b84:	0800e77c 	.word	0x0800e77c
 8009b88:	200005b8 	.word	0x200005b8

08009b8c <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8009b8c:	b480      	push	{r7}
 8009b8e:	b083      	sub	sp, #12
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	4603      	mov	r3, r0
 8009b94:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8009b96:	2300      	movs	r3, #0
}
 8009b98:	4618      	mov	r0, r3
 8009b9a:	370c      	adds	r7, #12
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba2:	4770      	bx	lr

08009ba4 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b084      	sub	sp, #16
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	4603      	mov	r3, r0
 8009bac:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8009bae:	2301      	movs	r3, #1
 8009bb0:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8009bb2:	79fb      	ldrb	r3, [r7, #7]
 8009bb4:	4619      	mov	r1, r3
 8009bb6:	4808      	ldr	r0, [pc, #32]	; (8009bd8 <USBH_status+0x34>)
 8009bb8:	f000 fe32 	bl	800a820 <USBH_MSC_UnitIsReady>
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d002      	beq.n	8009bc8 <USBH_status+0x24>
  {
    res = RES_OK;
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	73fb      	strb	r3, [r7, #15]
 8009bc6:	e001      	b.n	8009bcc <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8009bc8:	2301      	movs	r3, #1
 8009bca:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8009bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	3710      	adds	r7, #16
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}
 8009bd6:	bf00      	nop
 8009bd8:	200005cc 	.word	0x200005cc

08009bdc <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b094      	sub	sp, #80	; 0x50
 8009be0:	af02      	add	r7, sp, #8
 8009be2:	60b9      	str	r1, [r7, #8]
 8009be4:	607a      	str	r2, [r7, #4]
 8009be6:	603b      	str	r3, [r7, #0]
 8009be8:	4603      	mov	r3, r0
 8009bea:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009bec:	2301      	movs	r3, #1
 8009bee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 8009bf2:	7bf9      	ldrb	r1, [r7, #15]
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	9300      	str	r3, [sp, #0]
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	687a      	ldr	r2, [r7, #4]
 8009bfc:	4813      	ldr	r0, [pc, #76]	; (8009c4c <USBH_read+0x70>)
 8009bfe:	f000 fe59 	bl	800a8b4 <USBH_MSC_Read>
 8009c02:	4603      	mov	r3, r0
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d103      	bne.n	8009c10 <USBH_read+0x34>
  {
    res = RES_OK;
 8009c08:	2300      	movs	r3, #0
 8009c0a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009c0e:	e017      	b.n	8009c40 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8009c10:	f107 0210 	add.w	r2, r7, #16
 8009c14:	7bfb      	ldrb	r3, [r7, #15]
 8009c16:	4619      	mov	r1, r3
 8009c18:	480c      	ldr	r0, [pc, #48]	; (8009c4c <USBH_read+0x70>)
 8009c1a:	f000 fe27 	bl	800a86c <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8009c1e:	7f7b      	ldrb	r3, [r7, #29]
 8009c20:	2b3a      	cmp	r3, #58	; 0x3a
 8009c22:	d005      	beq.n	8009c30 <USBH_read+0x54>
 8009c24:	2b3a      	cmp	r3, #58	; 0x3a
 8009c26:	dc07      	bgt.n	8009c38 <USBH_read+0x5c>
 8009c28:	2b04      	cmp	r3, #4
 8009c2a:	d001      	beq.n	8009c30 <USBH_read+0x54>
 8009c2c:	2b28      	cmp	r3, #40	; 0x28
 8009c2e:	d103      	bne.n	8009c38 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8009c30:	2303      	movs	r3, #3
 8009c32:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009c36:	e003      	b.n	8009c40 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 8009c38:	2301      	movs	r3, #1
 8009c3a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009c3e:	bf00      	nop
    }
  }

  return res;
 8009c40:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8009c44:	4618      	mov	r0, r3
 8009c46:	3748      	adds	r7, #72	; 0x48
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	bd80      	pop	{r7, pc}
 8009c4c:	200005cc 	.word	0x200005cc

08009c50 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b094      	sub	sp, #80	; 0x50
 8009c54:	af02      	add	r7, sp, #8
 8009c56:	60b9      	str	r1, [r7, #8]
 8009c58:	607a      	str	r2, [r7, #4]
 8009c5a:	603b      	str	r3, [r7, #0]
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009c60:	2301      	movs	r3, #1
 8009c62:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8009c66:	7bf9      	ldrb	r1, [r7, #15]
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	9300      	str	r3, [sp, #0]
 8009c6c:	68bb      	ldr	r3, [r7, #8]
 8009c6e:	687a      	ldr	r2, [r7, #4]
 8009c70:	4817      	ldr	r0, [pc, #92]	; (8009cd0 <USBH_write+0x80>)
 8009c72:	f000 fe88 	bl	800a986 <USBH_MSC_Write>
 8009c76:	4603      	mov	r3, r0
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d103      	bne.n	8009c84 <USBH_write+0x34>
  {
    res = RES_OK;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009c82:	e01f      	b.n	8009cc4 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8009c84:	f107 0210 	add.w	r2, r7, #16
 8009c88:	7bfb      	ldrb	r3, [r7, #15]
 8009c8a:	4619      	mov	r1, r3
 8009c8c:	4810      	ldr	r0, [pc, #64]	; (8009cd0 <USBH_write+0x80>)
 8009c8e:	f000 fded 	bl	800a86c <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8009c92:	7f7b      	ldrb	r3, [r7, #29]
 8009c94:	2b3a      	cmp	r3, #58	; 0x3a
 8009c96:	d00d      	beq.n	8009cb4 <USBH_write+0x64>
 8009c98:	2b3a      	cmp	r3, #58	; 0x3a
 8009c9a:	dc0f      	bgt.n	8009cbc <USBH_write+0x6c>
 8009c9c:	2b28      	cmp	r3, #40	; 0x28
 8009c9e:	d009      	beq.n	8009cb4 <USBH_write+0x64>
 8009ca0:	2b28      	cmp	r3, #40	; 0x28
 8009ca2:	dc0b      	bgt.n	8009cbc <USBH_write+0x6c>
 8009ca4:	2b04      	cmp	r3, #4
 8009ca6:	d005      	beq.n	8009cb4 <USBH_write+0x64>
 8009ca8:	2b27      	cmp	r3, #39	; 0x27
 8009caa:	d107      	bne.n	8009cbc <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8009cac:	2302      	movs	r3, #2
 8009cae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009cb2:	e007      	b.n	8009cc4 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8009cb4:	2303      	movs	r3, #3
 8009cb6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009cba:	e003      	b.n	8009cc4 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009cc2:	bf00      	nop
    }
  }

  return res;
 8009cc4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8009cc8:	4618      	mov	r0, r3
 8009cca:	3748      	adds	r7, #72	; 0x48
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	bd80      	pop	{r7, pc}
 8009cd0:	200005cc 	.word	0x200005cc

08009cd4 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b090      	sub	sp, #64	; 0x40
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	4603      	mov	r3, r0
 8009cdc:	603a      	str	r2, [r7, #0]
 8009cde:	71fb      	strb	r3, [r7, #7]
 8009ce0:	460b      	mov	r3, r1
 8009ce2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8009cea:	79bb      	ldrb	r3, [r7, #6]
 8009cec:	2b03      	cmp	r3, #3
 8009cee:	d852      	bhi.n	8009d96 <USBH_ioctl+0xc2>
 8009cf0:	a201      	add	r2, pc, #4	; (adr r2, 8009cf8 <USBH_ioctl+0x24>)
 8009cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cf6:	bf00      	nop
 8009cf8:	08009d09 	.word	0x08009d09
 8009cfc:	08009d11 	.word	0x08009d11
 8009d00:	08009d3b 	.word	0x08009d3b
 8009d04:	08009d67 	.word	0x08009d67
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8009d08:	2300      	movs	r3, #0
 8009d0a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8009d0e:	e045      	b.n	8009d9c <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8009d10:	f107 0208 	add.w	r2, r7, #8
 8009d14:	79fb      	ldrb	r3, [r7, #7]
 8009d16:	4619      	mov	r1, r3
 8009d18:	4823      	ldr	r0, [pc, #140]	; (8009da8 <USBH_ioctl+0xd4>)
 8009d1a:	f000 fda7 	bl	800a86c <USBH_MSC_GetLUNInfo>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d106      	bne.n	8009d32 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8009d24:	68fa      	ldr	r2, [r7, #12]
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8009d30:	e034      	b.n	8009d9c <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8009d32:	2301      	movs	r3, #1
 8009d34:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8009d38:	e030      	b.n	8009d9c <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8009d3a:	f107 0208 	add.w	r2, r7, #8
 8009d3e:	79fb      	ldrb	r3, [r7, #7]
 8009d40:	4619      	mov	r1, r3
 8009d42:	4819      	ldr	r0, [pc, #100]	; (8009da8 <USBH_ioctl+0xd4>)
 8009d44:	f000 fd92 	bl	800a86c <USBH_MSC_GetLUNInfo>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d107      	bne.n	8009d5e <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8009d4e:	8a3b      	ldrh	r3, [r7, #16]
 8009d50:	461a      	mov	r2, r3
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8009d56:	2300      	movs	r3, #0
 8009d58:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8009d5c:	e01e      	b.n	8009d9c <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8009d5e:	2301      	movs	r3, #1
 8009d60:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8009d64:	e01a      	b.n	8009d9c <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8009d66:	f107 0208 	add.w	r2, r7, #8
 8009d6a:	79fb      	ldrb	r3, [r7, #7]
 8009d6c:	4619      	mov	r1, r3
 8009d6e:	480e      	ldr	r0, [pc, #56]	; (8009da8 <USBH_ioctl+0xd4>)
 8009d70:	f000 fd7c 	bl	800a86c <USBH_MSC_GetLUNInfo>
 8009d74:	4603      	mov	r3, r0
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d109      	bne.n	8009d8e <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8009d7a:	8a3b      	ldrh	r3, [r7, #16]
 8009d7c:	0a5b      	lsrs	r3, r3, #9
 8009d7e:	b29b      	uxth	r3, r3
 8009d80:	461a      	mov	r2, r3
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8009d86:	2300      	movs	r3, #0
 8009d88:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8009d8c:	e006      	b.n	8009d9c <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8009d8e:	2301      	movs	r3, #1
 8009d90:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8009d94:	e002      	b.n	8009d9c <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8009d96:	2304      	movs	r3, #4
 8009d98:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8009d9c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8009da0:	4618      	mov	r0, r3
 8009da2:	3740      	adds	r7, #64	; 0x40
 8009da4:	46bd      	mov	sp, r7
 8009da6:	bd80      	pop	{r7, pc}
 8009da8:	200005cc 	.word	0x200005cc

08009dac <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8009dac:	b590      	push	{r4, r7, lr}
 8009dae:	b089      	sub	sp, #36	; 0x24
 8009db0:	af04      	add	r7, sp, #16
 8009db2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009dba:	7919      	ldrb	r1, [r3, #4]
 8009dbc:	2350      	movs	r3, #80	; 0x50
 8009dbe:	2206      	movs	r2, #6
 8009dc0:	6878      	ldr	r0, [r7, #4]
 8009dc2:	f001 fc6b 	bl	800b69c <USBH_FindInterface>
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8009dca:	7bfb      	ldrb	r3, [r7, #15]
 8009dcc:	2bff      	cmp	r3, #255	; 0xff
 8009dce:	d002      	beq.n	8009dd6 <USBH_MSC_InterfaceInit+0x2a>
 8009dd0:	7bfb      	ldrb	r3, [r7, #15]
 8009dd2:	2b01      	cmp	r3, #1
 8009dd4:	d901      	bls.n	8009dda <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009dd6:	2302      	movs	r3, #2
 8009dd8:	e106      	b.n	8009fe8 <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 8009dda:	7bfb      	ldrb	r3, [r7, #15]
 8009ddc:	4619      	mov	r1, r3
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	f001 fc40 	bl	800b664 <USBH_SelectInterface>
 8009de4:	4603      	mov	r3, r0
 8009de6:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8009de8:	7bbb      	ldrb	r3, [r7, #14]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d001      	beq.n	8009df2 <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8009dee:	2302      	movs	r3, #2
 8009df0:	e0fa      	b.n	8009fe8 <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8009df8:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009dfc:	f003 fb90 	bl	800d520 <malloc>
 8009e00:	4603      	mov	r3, r0
 8009e02:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e0a:	69db      	ldr	r3, [r3, #28]
 8009e0c:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8009e0e:	68bb      	ldr	r3, [r7, #8]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d101      	bne.n	8009e18 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8009e14:	2302      	movs	r3, #2
 8009e16:	e0e7      	b.n	8009fe8 <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8009e18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009e1c:	2100      	movs	r1, #0
 8009e1e:	68b8      	ldr	r0, [r7, #8]
 8009e20:	f003 fb9c 	bl	800d55c <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8009e24:	7bfb      	ldrb	r3, [r7, #15]
 8009e26:	687a      	ldr	r2, [r7, #4]
 8009e28:	211a      	movs	r1, #26
 8009e2a:	fb01 f303 	mul.w	r3, r1, r3
 8009e2e:	4413      	add	r3, r2
 8009e30:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009e34:	781b      	ldrb	r3, [r3, #0]
 8009e36:	b25b      	sxtb	r3, r3
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	da16      	bge.n	8009e6a <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8009e3c:	7bfb      	ldrb	r3, [r7, #15]
 8009e3e:	687a      	ldr	r2, [r7, #4]
 8009e40:	211a      	movs	r1, #26
 8009e42:	fb01 f303 	mul.w	r3, r1, r3
 8009e46:	4413      	add	r3, r2
 8009e48:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009e4c:	781a      	ldrb	r2, [r3, #0]
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009e52:	7bfb      	ldrb	r3, [r7, #15]
 8009e54:	687a      	ldr	r2, [r7, #4]
 8009e56:	211a      	movs	r1, #26
 8009e58:	fb01 f303 	mul.w	r3, r1, r3
 8009e5c:	4413      	add	r3, r2
 8009e5e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009e62:	881a      	ldrh	r2, [r3, #0]
 8009e64:	68bb      	ldr	r3, [r7, #8]
 8009e66:	815a      	strh	r2, [r3, #10]
 8009e68:	e015      	b.n	8009e96 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8009e6a:	7bfb      	ldrb	r3, [r7, #15]
 8009e6c:	687a      	ldr	r2, [r7, #4]
 8009e6e:	211a      	movs	r1, #26
 8009e70:	fb01 f303 	mul.w	r3, r1, r3
 8009e74:	4413      	add	r3, r2
 8009e76:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009e7a:	781a      	ldrb	r2, [r3, #0]
 8009e7c:	68bb      	ldr	r3, [r7, #8]
 8009e7e:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009e80:	7bfb      	ldrb	r3, [r7, #15]
 8009e82:	687a      	ldr	r2, [r7, #4]
 8009e84:	211a      	movs	r1, #26
 8009e86:	fb01 f303 	mul.w	r3, r1, r3
 8009e8a:	4413      	add	r3, r2
 8009e8c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009e90:	881a      	ldrh	r2, [r3, #0]
 8009e92:	68bb      	ldr	r3, [r7, #8]
 8009e94:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8009e96:	7bfb      	ldrb	r3, [r7, #15]
 8009e98:	687a      	ldr	r2, [r7, #4]
 8009e9a:	211a      	movs	r1, #26
 8009e9c:	fb01 f303 	mul.w	r3, r1, r3
 8009ea0:	4413      	add	r3, r2
 8009ea2:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009ea6:	781b      	ldrb	r3, [r3, #0]
 8009ea8:	b25b      	sxtb	r3, r3
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	da16      	bge.n	8009edc <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8009eae:	7bfb      	ldrb	r3, [r7, #15]
 8009eb0:	687a      	ldr	r2, [r7, #4]
 8009eb2:	211a      	movs	r1, #26
 8009eb4:	fb01 f303 	mul.w	r3, r1, r3
 8009eb8:	4413      	add	r3, r2
 8009eba:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009ebe:	781a      	ldrb	r2, [r3, #0]
 8009ec0:	68bb      	ldr	r3, [r7, #8]
 8009ec2:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009ec4:	7bfb      	ldrb	r3, [r7, #15]
 8009ec6:	687a      	ldr	r2, [r7, #4]
 8009ec8:	211a      	movs	r1, #26
 8009eca:	fb01 f303 	mul.w	r3, r1, r3
 8009ece:	4413      	add	r3, r2
 8009ed0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009ed4:	881a      	ldrh	r2, [r3, #0]
 8009ed6:	68bb      	ldr	r3, [r7, #8]
 8009ed8:	815a      	strh	r2, [r3, #10]
 8009eda:	e015      	b.n	8009f08 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8009edc:	7bfb      	ldrb	r3, [r7, #15]
 8009ede:	687a      	ldr	r2, [r7, #4]
 8009ee0:	211a      	movs	r1, #26
 8009ee2:	fb01 f303 	mul.w	r3, r1, r3
 8009ee6:	4413      	add	r3, r2
 8009ee8:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009eec:	781a      	ldrb	r2, [r3, #0]
 8009eee:	68bb      	ldr	r3, [r7, #8]
 8009ef0:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009ef2:	7bfb      	ldrb	r3, [r7, #15]
 8009ef4:	687a      	ldr	r2, [r7, #4]
 8009ef6:	211a      	movs	r1, #26
 8009ef8:	fb01 f303 	mul.w	r3, r1, r3
 8009efc:	4413      	add	r3, r2
 8009efe:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009f02:	881a      	ldrh	r2, [r3, #0]
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8009f08:	68bb      	ldr	r3, [r7, #8]
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8009f0e:	68bb      	ldr	r3, [r7, #8]
 8009f10:	2200      	movs	r2, #0
 8009f12:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	2200      	movs	r2, #0
 8009f18:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8009f1a:	68bb      	ldr	r3, [r7, #8]
 8009f1c:	799b      	ldrb	r3, [r3, #6]
 8009f1e:	4619      	mov	r1, r3
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	f002 fed6 	bl	800ccd2 <USBH_AllocPipe>
 8009f26:	4603      	mov	r3, r0
 8009f28:	461a      	mov	r2, r3
 8009f2a:	68bb      	ldr	r3, [r7, #8]
 8009f2c:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8009f2e:	68bb      	ldr	r3, [r7, #8]
 8009f30:	79db      	ldrb	r3, [r3, #7]
 8009f32:	4619      	mov	r1, r3
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	f002 fecc 	bl	800ccd2 <USBH_AllocPipe>
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	461a      	mov	r2, r3
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f000 fdc4 	bl	800aad0 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 8009f48:	68bb      	ldr	r3, [r7, #8]
 8009f4a:	799b      	ldrb	r3, [r3, #6]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d01e      	beq.n	8009f8e <USBH_MSC_InterfaceInit+0x1e2>
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	891b      	ldrh	r3, [r3, #8]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d01a      	beq.n	8009f8e <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	7959      	ldrb	r1, [r3, #5]
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	7998      	ldrb	r0, [r3, #6]
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009f6c:	68ba      	ldr	r2, [r7, #8]
 8009f6e:	8912      	ldrh	r2, [r2, #8]
 8009f70:	9202      	str	r2, [sp, #8]
 8009f72:	2202      	movs	r2, #2
 8009f74:	9201      	str	r2, [sp, #4]
 8009f76:	9300      	str	r3, [sp, #0]
 8009f78:	4623      	mov	r3, r4
 8009f7a:	4602      	mov	r2, r0
 8009f7c:	6878      	ldr	r0, [r7, #4]
 8009f7e:	f002 fe79 	bl	800cc74 <USBH_OpenPipe>
 8009f82:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	79db      	ldrb	r3, [r3, #7]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d02c      	beq.n	8009fe6 <USBH_MSC_InterfaceInit+0x23a>
 8009f8c:	e001      	b.n	8009f92 <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
 8009f8e:	2303      	movs	r3, #3
 8009f90:	e02a      	b.n	8009fe8 <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 8009f92:	68bb      	ldr	r3, [r7, #8]
 8009f94:	895b      	ldrh	r3, [r3, #10]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d025      	beq.n	8009fe6 <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8009f9a:	68bb      	ldr	r3, [r7, #8]
 8009f9c:	7919      	ldrb	r1, [r3, #4]
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	79d8      	ldrb	r0, [r3, #7]
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009fae:	68ba      	ldr	r2, [r7, #8]
 8009fb0:	8952      	ldrh	r2, [r2, #10]
 8009fb2:	9202      	str	r2, [sp, #8]
 8009fb4:	2202      	movs	r2, #2
 8009fb6:	9201      	str	r2, [sp, #4]
 8009fb8:	9300      	str	r3, [sp, #0]
 8009fba:	4623      	mov	r3, r4
 8009fbc:	4602      	mov	r2, r0
 8009fbe:	6878      	ldr	r0, [r7, #4]
 8009fc0:	f002 fe58 	bl	800cc74 <USBH_OpenPipe>
 8009fc4:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	791b      	ldrb	r3, [r3, #4]
 8009fca:	2200      	movs	r2, #0
 8009fcc:	4619      	mov	r1, r3
 8009fce:	6878      	ldr	r0, [r7, #4]
 8009fd0:	f003 f9c8 	bl	800d364 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8009fd4:	68bb      	ldr	r3, [r7, #8]
 8009fd6:	795b      	ldrb	r3, [r3, #5]
 8009fd8:	2200      	movs	r2, #0
 8009fda:	4619      	mov	r1, r3
 8009fdc:	6878      	ldr	r0, [r7, #4]
 8009fde:	f003 f9c1 	bl	800d364 <USBH_LL_SetToggle>

  return USBH_OK;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	e000      	b.n	8009fe8 <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
 8009fe6:	2303      	movs	r3, #3
}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	3714      	adds	r7, #20
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bd90      	pop	{r4, r7, pc}

08009ff0 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b084      	sub	sp, #16
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009ffe:	69db      	ldr	r3, [r3, #28]
 800a000:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	795b      	ldrb	r3, [r3, #5]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d00e      	beq.n	800a028 <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	795b      	ldrb	r3, [r3, #5]
 800a00e:	4619      	mov	r1, r3
 800a010:	6878      	ldr	r0, [r7, #4]
 800a012:	f002 fe4e 	bl	800ccb2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	795b      	ldrb	r3, [r3, #5]
 800a01a:	4619      	mov	r1, r3
 800a01c:	6878      	ldr	r0, [r7, #4]
 800a01e:	f002 fe79 	bl	800cd14 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	2200      	movs	r2, #0
 800a026:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	791b      	ldrb	r3, [r3, #4]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d00e      	beq.n	800a04e <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	791b      	ldrb	r3, [r3, #4]
 800a034:	4619      	mov	r1, r3
 800a036:	6878      	ldr	r0, [r7, #4]
 800a038:	f002 fe3b 	bl	800ccb2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	791b      	ldrb	r3, [r3, #4]
 800a040:	4619      	mov	r1, r3
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	f002 fe66 	bl	800cd14 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	2200      	movs	r2, #0
 800a04c:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a054:	69db      	ldr	r3, [r3, #28]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d00b      	beq.n	800a072 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a060:	69db      	ldr	r3, [r3, #28]
 800a062:	4618      	mov	r0, r3
 800a064:	f003 fa64 	bl	800d530 <free>
    phost->pActiveClass->pData = 0U;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a06e:	2200      	movs	r2, #0
 800a070:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800a072:	2300      	movs	r3, #0
}
 800a074:	4618      	mov	r0, r3
 800a076:	3710      	adds	r7, #16
 800a078:	46bd      	mov	sp, r7
 800a07a:	bd80      	pop	{r7, pc}

0800a07c <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b084      	sub	sp, #16
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a08a:	69db      	ldr	r3, [r3, #28]
 800a08c:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 800a08e:	2301      	movs	r3, #1
 800a090:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 800a092:	68bb      	ldr	r3, [r7, #8]
 800a094:	7b9b      	ldrb	r3, [r3, #14]
 800a096:	2b03      	cmp	r3, #3
 800a098:	d041      	beq.n	800a11e <USBH_MSC_ClassRequest+0xa2>
 800a09a:	2b03      	cmp	r3, #3
 800a09c:	dc4b      	bgt.n	800a136 <USBH_MSC_ClassRequest+0xba>
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d001      	beq.n	800a0a6 <USBH_MSC_ClassRequest+0x2a>
 800a0a2:	2b02      	cmp	r3, #2
 800a0a4:	d147      	bne.n	800a136 <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	4619      	mov	r1, r3
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	f000 fcf1 	bl	800aa92 <USBH_MSC_BOT_REQ_GetMaxLUN>
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 800a0b4:	7bfb      	ldrb	r3, [r7, #15]
 800a0b6:	2b03      	cmp	r3, #3
 800a0b8:	d104      	bne.n	800a0c4 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 800a0ba:	68bb      	ldr	r3, [r7, #8]
 800a0bc:	2200      	movs	r2, #0
 800a0be:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 800a0c4:	7bfb      	ldrb	r3, [r7, #15]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d137      	bne.n	800a13a <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 800a0ca:	68bb      	ldr	r3, [r7, #8]
 800a0cc:	781b      	ldrb	r3, [r3, #0]
 800a0ce:	2b02      	cmp	r3, #2
 800a0d0:	d804      	bhi.n	800a0dc <USBH_MSC_ClassRequest+0x60>
 800a0d2:	68bb      	ldr	r3, [r7, #8]
 800a0d4:	781b      	ldrb	r3, [r3, #0]
 800a0d6:	3301      	adds	r3, #1
 800a0d8:	b2da      	uxtb	r2, r3
 800a0da:	e000      	b.n	800a0de <USBH_MSC_ClassRequest+0x62>
 800a0dc:	2202      	movs	r2, #2
 800a0de:	68bb      	ldr	r3, [r7, #8]
 800a0e0:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	73bb      	strb	r3, [r7, #14]
 800a0e6:	e014      	b.n	800a112 <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800a0e8:	7bbb      	ldrb	r3, [r7, #14]
 800a0ea:	68ba      	ldr	r2, [r7, #8]
 800a0ec:	2134      	movs	r1, #52	; 0x34
 800a0ee:	fb01 f303 	mul.w	r3, r1, r3
 800a0f2:	4413      	add	r3, r2
 800a0f4:	3392      	adds	r3, #146	; 0x92
 800a0f6:	2202      	movs	r2, #2
 800a0f8:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 800a0fa:	7bbb      	ldrb	r3, [r7, #14]
 800a0fc:	68ba      	ldr	r2, [r7, #8]
 800a0fe:	2134      	movs	r1, #52	; 0x34
 800a100:	fb01 f303 	mul.w	r3, r1, r3
 800a104:	4413      	add	r3, r2
 800a106:	33c1      	adds	r3, #193	; 0xc1
 800a108:	2200      	movs	r2, #0
 800a10a:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800a10c:	7bbb      	ldrb	r3, [r7, #14]
 800a10e:	3301      	adds	r3, #1
 800a110:	73bb      	strb	r3, [r7, #14]
 800a112:	68bb      	ldr	r3, [r7, #8]
 800a114:	781b      	ldrb	r3, [r3, #0]
 800a116:	7bba      	ldrb	r2, [r7, #14]
 800a118:	429a      	cmp	r2, r3
 800a11a:	d3e5      	bcc.n	800a0e8 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 800a11c:	e00d      	b.n	800a13a <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 800a11e:	2100      	movs	r1, #0
 800a120:	6878      	ldr	r0, [r7, #4]
 800a122:	f002 f888 	bl	800c236 <USBH_ClrFeature>
 800a126:	4603      	mov	r3, r0
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d108      	bne.n	800a13e <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 800a12c:	68bb      	ldr	r3, [r7, #8]
 800a12e:	7bda      	ldrb	r2, [r3, #15]
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	739a      	strb	r2, [r3, #14]
      }
      break;
 800a134:	e003      	b.n	800a13e <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 800a136:	bf00      	nop
 800a138:	e002      	b.n	800a140 <USBH_MSC_ClassRequest+0xc4>
      break;
 800a13a:	bf00      	nop
 800a13c:	e000      	b.n	800a140 <USBH_MSC_ClassRequest+0xc4>
      break;
 800a13e:	bf00      	nop
  }

  return status;
 800a140:	7bfb      	ldrb	r3, [r7, #15]
}
 800a142:	4618      	mov	r0, r3
 800a144:	3710      	adds	r7, #16
 800a146:	46bd      	mov	sp, r7
 800a148:	bd80      	pop	{r7, pc}
	...

0800a14c <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b086      	sub	sp, #24
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a15a:	69db      	ldr	r3, [r3, #28]
 800a15c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800a15e:	2301      	movs	r3, #1
 800a160:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800a162:	2301      	movs	r3, #1
 800a164:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 800a166:	2301      	movs	r3, #1
 800a168:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 800a16a:	693b      	ldr	r3, [r7, #16]
 800a16c:	7b1b      	ldrb	r3, [r3, #12]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d003      	beq.n	800a17a <USBH_MSC_Process+0x2e>
 800a172:	2b01      	cmp	r3, #1
 800a174:	f000 8271 	beq.w	800a65a <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 800a178:	e272      	b.n	800a660 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 800a17a:	693b      	ldr	r3, [r7, #16]
 800a17c:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 800a180:	693b      	ldr	r3, [r7, #16]
 800a182:	781b      	ldrb	r3, [r3, #0]
 800a184:	b29b      	uxth	r3, r3
 800a186:	429a      	cmp	r2, r3
 800a188:	f080 824f 	bcs.w	800a62a <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800a18c:	693b      	ldr	r3, [r7, #16]
 800a18e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a192:	4619      	mov	r1, r3
 800a194:	693a      	ldr	r2, [r7, #16]
 800a196:	2334      	movs	r3, #52	; 0x34
 800a198:	fb01 f303 	mul.w	r3, r1, r3
 800a19c:	4413      	add	r3, r2
 800a19e:	3391      	adds	r3, #145	; 0x91
 800a1a0:	2201      	movs	r2, #1
 800a1a2:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 800a1a4:	693b      	ldr	r3, [r7, #16]
 800a1a6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a1aa:	4619      	mov	r1, r3
 800a1ac:	693a      	ldr	r2, [r7, #16]
 800a1ae:	2334      	movs	r3, #52	; 0x34
 800a1b0:	fb01 f303 	mul.w	r3, r1, r3
 800a1b4:	4413      	add	r3, r2
 800a1b6:	3390      	adds	r3, #144	; 0x90
 800a1b8:	781b      	ldrb	r3, [r3, #0]
 800a1ba:	2b08      	cmp	r3, #8
 800a1bc:	f200 8243 	bhi.w	800a646 <USBH_MSC_Process+0x4fa>
 800a1c0:	a201      	add	r2, pc, #4	; (adr r2, 800a1c8 <USBH_MSC_Process+0x7c>)
 800a1c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1c6:	bf00      	nop
 800a1c8:	0800a1ed 	.word	0x0800a1ed
 800a1cc:	0800a647 	.word	0x0800a647
 800a1d0:	0800a2b5 	.word	0x0800a2b5
 800a1d4:	0800a439 	.word	0x0800a439
 800a1d8:	0800a213 	.word	0x0800a213
 800a1dc:	0800a505 	.word	0x0800a505
 800a1e0:	0800a647 	.word	0x0800a647
 800a1e4:	0800a647 	.word	0x0800a647
 800a1e8:	0800a619 	.word	0x0800a619
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 800a1ec:	693b      	ldr	r3, [r7, #16]
 800a1ee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a1f2:	4619      	mov	r1, r3
 800a1f4:	693a      	ldr	r2, [r7, #16]
 800a1f6:	2334      	movs	r3, #52	; 0x34
 800a1f8:	fb01 f303 	mul.w	r3, r1, r3
 800a1fc:	4413      	add	r3, r2
 800a1fe:	3390      	adds	r3, #144	; 0x90
 800a200:	2204      	movs	r2, #4
 800a202:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800a20a:	693b      	ldr	r3, [r7, #16]
 800a20c:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 800a210:	e222      	b.n	800a658 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800a212:	693b      	ldr	r3, [r7, #16]
 800a214:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a218:	b2d9      	uxtb	r1, r3
 800a21a:	693b      	ldr	r3, [r7, #16]
 800a21c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a220:	461a      	mov	r2, r3
 800a222:	2334      	movs	r3, #52	; 0x34
 800a224:	fb02 f303 	mul.w	r3, r2, r3
 800a228:	3398      	adds	r3, #152	; 0x98
 800a22a:	693a      	ldr	r2, [r7, #16]
 800a22c:	4413      	add	r3, r2
 800a22e:	3307      	adds	r3, #7
 800a230:	461a      	mov	r2, r3
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	f000 ff6a 	bl	800b10c <USBH_MSC_SCSI_Inquiry>
 800a238:	4603      	mov	r3, r0
 800a23a:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800a23c:	7bfb      	ldrb	r3, [r7, #15]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d10b      	bne.n	800a25a <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800a242:	693b      	ldr	r3, [r7, #16]
 800a244:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a248:	4619      	mov	r1, r3
 800a24a:	693a      	ldr	r2, [r7, #16]
 800a24c:	2334      	movs	r3, #52	; 0x34
 800a24e:	fb01 f303 	mul.w	r3, r1, r3
 800a252:	4413      	add	r3, r2
 800a254:	3390      	adds	r3, #144	; 0x90
 800a256:	2202      	movs	r2, #2
 800a258:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 800a25a:	7bfb      	ldrb	r3, [r7, #15]
 800a25c:	2b02      	cmp	r3, #2
 800a25e:	d10c      	bne.n	800a27a <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800a260:	693b      	ldr	r3, [r7, #16]
 800a262:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a266:	4619      	mov	r1, r3
 800a268:	693a      	ldr	r2, [r7, #16]
 800a26a:	2334      	movs	r3, #52	; 0x34
 800a26c:	fb01 f303 	mul.w	r3, r1, r3
 800a270:	4413      	add	r3, r2
 800a272:	3390      	adds	r3, #144	; 0x90
 800a274:	2205      	movs	r2, #5
 800a276:	701a      	strb	r2, [r3, #0]
            break;
 800a278:	e1e7      	b.n	800a64a <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a27a:	7bfb      	ldrb	r3, [r7, #15]
 800a27c:	2b04      	cmp	r3, #4
 800a27e:	f040 81e4 	bne.w	800a64a <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a282:	693b      	ldr	r3, [r7, #16]
 800a284:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a288:	4619      	mov	r1, r3
 800a28a:	693a      	ldr	r2, [r7, #16]
 800a28c:	2334      	movs	r3, #52	; 0x34
 800a28e:	fb01 f303 	mul.w	r3, r1, r3
 800a292:	4413      	add	r3, r2
 800a294:	3390      	adds	r3, #144	; 0x90
 800a296:	2201      	movs	r2, #1
 800a298:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800a29a:	693b      	ldr	r3, [r7, #16]
 800a29c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a2a0:	4619      	mov	r1, r3
 800a2a2:	693a      	ldr	r2, [r7, #16]
 800a2a4:	2334      	movs	r3, #52	; 0x34
 800a2a6:	fb01 f303 	mul.w	r3, r1, r3
 800a2aa:	4413      	add	r3, r2
 800a2ac:	3391      	adds	r3, #145	; 0x91
 800a2ae:	2202      	movs	r2, #2
 800a2b0:	701a      	strb	r2, [r3, #0]
            break;
 800a2b2:	e1ca      	b.n	800a64a <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 800a2b4:	693b      	ldr	r3, [r7, #16]
 800a2b6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a2ba:	b2db      	uxtb	r3, r3
 800a2bc:	4619      	mov	r1, r3
 800a2be:	6878      	ldr	r0, [r7, #4]
 800a2c0:	f000 fe66 	bl	800af90 <USBH_MSC_SCSI_TestUnitReady>
 800a2c4:	4603      	mov	r3, r0
 800a2c6:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 800a2c8:	7bbb      	ldrb	r3, [r7, #14]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d149      	bne.n	800a362 <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800a2ce:	693b      	ldr	r3, [r7, #16]
 800a2d0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a2d4:	4619      	mov	r1, r3
 800a2d6:	693a      	ldr	r2, [r7, #16]
 800a2d8:	2334      	movs	r3, #52	; 0x34
 800a2da:	fb01 f303 	mul.w	r3, r1, r3
 800a2de:	4413      	add	r3, r2
 800a2e0:	3392      	adds	r3, #146	; 0x92
 800a2e2:	781b      	ldrb	r3, [r3, #0]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d00c      	beq.n	800a302 <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800a2e8:	693b      	ldr	r3, [r7, #16]
 800a2ea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a2ee:	4619      	mov	r1, r3
 800a2f0:	693a      	ldr	r2, [r7, #16]
 800a2f2:	2334      	movs	r3, #52	; 0x34
 800a2f4:	fb01 f303 	mul.w	r3, r1, r3
 800a2f8:	4413      	add	r3, r2
 800a2fa:	33c1      	adds	r3, #193	; 0xc1
 800a2fc:	2201      	movs	r2, #1
 800a2fe:	701a      	strb	r2, [r3, #0]
 800a300:	e00b      	b.n	800a31a <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800a302:	693b      	ldr	r3, [r7, #16]
 800a304:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a308:	4619      	mov	r1, r3
 800a30a:	693a      	ldr	r2, [r7, #16]
 800a30c:	2334      	movs	r3, #52	; 0x34
 800a30e:	fb01 f303 	mul.w	r3, r1, r3
 800a312:	4413      	add	r3, r2
 800a314:	33c1      	adds	r3, #193	; 0xc1
 800a316:	2200      	movs	r2, #0
 800a318:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800a31a:	693b      	ldr	r3, [r7, #16]
 800a31c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a320:	4619      	mov	r1, r3
 800a322:	693a      	ldr	r2, [r7, #16]
 800a324:	2334      	movs	r3, #52	; 0x34
 800a326:	fb01 f303 	mul.w	r3, r1, r3
 800a32a:	4413      	add	r3, r2
 800a32c:	3390      	adds	r3, #144	; 0x90
 800a32e:	2203      	movs	r2, #3
 800a330:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800a332:	693b      	ldr	r3, [r7, #16]
 800a334:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a338:	4619      	mov	r1, r3
 800a33a:	693a      	ldr	r2, [r7, #16]
 800a33c:	2334      	movs	r3, #52	; 0x34
 800a33e:	fb01 f303 	mul.w	r3, r1, r3
 800a342:	4413      	add	r3, r2
 800a344:	3391      	adds	r3, #145	; 0x91
 800a346:	2200      	movs	r2, #0
 800a348:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800a34a:	693b      	ldr	r3, [r7, #16]
 800a34c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a350:	4619      	mov	r1, r3
 800a352:	693a      	ldr	r2, [r7, #16]
 800a354:	2334      	movs	r3, #52	; 0x34
 800a356:	fb01 f303 	mul.w	r3, r1, r3
 800a35a:	4413      	add	r3, r2
 800a35c:	3392      	adds	r3, #146	; 0x92
 800a35e:	2200      	movs	r2, #0
 800a360:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 800a362:	7bbb      	ldrb	r3, [r7, #14]
 800a364:	2b02      	cmp	r3, #2
 800a366:	d14a      	bne.n	800a3fe <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 800a368:	693b      	ldr	r3, [r7, #16]
 800a36a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a36e:	4619      	mov	r1, r3
 800a370:	693a      	ldr	r2, [r7, #16]
 800a372:	2334      	movs	r3, #52	; 0x34
 800a374:	fb01 f303 	mul.w	r3, r1, r3
 800a378:	4413      	add	r3, r2
 800a37a:	3392      	adds	r3, #146	; 0x92
 800a37c:	781b      	ldrb	r3, [r3, #0]
 800a37e:	2b02      	cmp	r3, #2
 800a380:	d00c      	beq.n	800a39c <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800a382:	693b      	ldr	r3, [r7, #16]
 800a384:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a388:	4619      	mov	r1, r3
 800a38a:	693a      	ldr	r2, [r7, #16]
 800a38c:	2334      	movs	r3, #52	; 0x34
 800a38e:	fb01 f303 	mul.w	r3, r1, r3
 800a392:	4413      	add	r3, r2
 800a394:	33c1      	adds	r3, #193	; 0xc1
 800a396:	2201      	movs	r2, #1
 800a398:	701a      	strb	r2, [r3, #0]
 800a39a:	e00b      	b.n	800a3b4 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800a39c:	693b      	ldr	r3, [r7, #16]
 800a39e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a3a2:	4619      	mov	r1, r3
 800a3a4:	693a      	ldr	r2, [r7, #16]
 800a3a6:	2334      	movs	r3, #52	; 0x34
 800a3a8:	fb01 f303 	mul.w	r3, r1, r3
 800a3ac:	4413      	add	r3, r2
 800a3ae:	33c1      	adds	r3, #193	; 0xc1
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800a3b4:	693b      	ldr	r3, [r7, #16]
 800a3b6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a3ba:	4619      	mov	r1, r3
 800a3bc:	693a      	ldr	r2, [r7, #16]
 800a3be:	2334      	movs	r3, #52	; 0x34
 800a3c0:	fb01 f303 	mul.w	r3, r1, r3
 800a3c4:	4413      	add	r3, r2
 800a3c6:	3390      	adds	r3, #144	; 0x90
 800a3c8:	2205      	movs	r2, #5
 800a3ca:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800a3cc:	693b      	ldr	r3, [r7, #16]
 800a3ce:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a3d2:	4619      	mov	r1, r3
 800a3d4:	693a      	ldr	r2, [r7, #16]
 800a3d6:	2334      	movs	r3, #52	; 0x34
 800a3d8:	fb01 f303 	mul.w	r3, r1, r3
 800a3dc:	4413      	add	r3, r2
 800a3de:	3391      	adds	r3, #145	; 0x91
 800a3e0:	2201      	movs	r2, #1
 800a3e2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 800a3e4:	693b      	ldr	r3, [r7, #16]
 800a3e6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a3ea:	4619      	mov	r1, r3
 800a3ec:	693a      	ldr	r2, [r7, #16]
 800a3ee:	2334      	movs	r3, #52	; 0x34
 800a3f0:	fb01 f303 	mul.w	r3, r1, r3
 800a3f4:	4413      	add	r3, r2
 800a3f6:	3392      	adds	r3, #146	; 0x92
 800a3f8:	2202      	movs	r2, #2
 800a3fa:	701a      	strb	r2, [r3, #0]
            break;
 800a3fc:	e127      	b.n	800a64e <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800a3fe:	7bbb      	ldrb	r3, [r7, #14]
 800a400:	2b04      	cmp	r3, #4
 800a402:	f040 8124 	bne.w	800a64e <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a406:	693b      	ldr	r3, [r7, #16]
 800a408:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a40c:	4619      	mov	r1, r3
 800a40e:	693a      	ldr	r2, [r7, #16]
 800a410:	2334      	movs	r3, #52	; 0x34
 800a412:	fb01 f303 	mul.w	r3, r1, r3
 800a416:	4413      	add	r3, r2
 800a418:	3390      	adds	r3, #144	; 0x90
 800a41a:	2201      	movs	r2, #1
 800a41c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800a41e:	693b      	ldr	r3, [r7, #16]
 800a420:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a424:	4619      	mov	r1, r3
 800a426:	693a      	ldr	r2, [r7, #16]
 800a428:	2334      	movs	r3, #52	; 0x34
 800a42a:	fb01 f303 	mul.w	r3, r1, r3
 800a42e:	4413      	add	r3, r2
 800a430:	3391      	adds	r3, #145	; 0x91
 800a432:	2202      	movs	r2, #2
 800a434:	701a      	strb	r2, [r3, #0]
            break;
 800a436:	e10a      	b.n	800a64e <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 800a438:	693b      	ldr	r3, [r7, #16]
 800a43a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a43e:	b2d9      	uxtb	r1, r3
 800a440:	693b      	ldr	r3, [r7, #16]
 800a442:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a446:	461a      	mov	r2, r3
 800a448:	2334      	movs	r3, #52	; 0x34
 800a44a:	fb02 f303 	mul.w	r3, r2, r3
 800a44e:	3390      	adds	r3, #144	; 0x90
 800a450:	693a      	ldr	r2, [r7, #16]
 800a452:	4413      	add	r3, r2
 800a454:	3304      	adds	r3, #4
 800a456:	461a      	mov	r2, r3
 800a458:	6878      	ldr	r0, [r7, #4]
 800a45a:	f000 fddc 	bl	800b016 <USBH_MSC_SCSI_ReadCapacity>
 800a45e:	4603      	mov	r3, r0
 800a460:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800a462:	7bfb      	ldrb	r3, [r7, #15]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d120      	bne.n	800a4aa <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a468:	693b      	ldr	r3, [r7, #16]
 800a46a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a46e:	4619      	mov	r1, r3
 800a470:	693a      	ldr	r2, [r7, #16]
 800a472:	2334      	movs	r3, #52	; 0x34
 800a474:	fb01 f303 	mul.w	r3, r1, r3
 800a478:	4413      	add	r3, r2
 800a47a:	3390      	adds	r3, #144	; 0x90
 800a47c:	2201      	movs	r2, #1
 800a47e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800a480:	693b      	ldr	r3, [r7, #16]
 800a482:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a486:	4619      	mov	r1, r3
 800a488:	693a      	ldr	r2, [r7, #16]
 800a48a:	2334      	movs	r3, #52	; 0x34
 800a48c:	fb01 f303 	mul.w	r3, r1, r3
 800a490:	4413      	add	r3, r2
 800a492:	3391      	adds	r3, #145	; 0x91
 800a494:	2200      	movs	r2, #0
 800a496:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800a498:	693b      	ldr	r3, [r7, #16]
 800a49a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a49e:	3301      	adds	r3, #1
 800a4a0:	b29a      	uxth	r2, r3
 800a4a2:	693b      	ldr	r3, [r7, #16]
 800a4a4:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800a4a8:	e0d3      	b.n	800a652 <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 800a4aa:	7bfb      	ldrb	r3, [r7, #15]
 800a4ac:	2b02      	cmp	r3, #2
 800a4ae:	d10c      	bne.n	800a4ca <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800a4b0:	693b      	ldr	r3, [r7, #16]
 800a4b2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a4b6:	4619      	mov	r1, r3
 800a4b8:	693a      	ldr	r2, [r7, #16]
 800a4ba:	2334      	movs	r3, #52	; 0x34
 800a4bc:	fb01 f303 	mul.w	r3, r1, r3
 800a4c0:	4413      	add	r3, r2
 800a4c2:	3390      	adds	r3, #144	; 0x90
 800a4c4:	2205      	movs	r2, #5
 800a4c6:	701a      	strb	r2, [r3, #0]
            break;
 800a4c8:	e0c3      	b.n	800a652 <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a4ca:	7bfb      	ldrb	r3, [r7, #15]
 800a4cc:	2b04      	cmp	r3, #4
 800a4ce:	f040 80c0 	bne.w	800a652 <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a4d2:	693b      	ldr	r3, [r7, #16]
 800a4d4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a4d8:	4619      	mov	r1, r3
 800a4da:	693a      	ldr	r2, [r7, #16]
 800a4dc:	2334      	movs	r3, #52	; 0x34
 800a4de:	fb01 f303 	mul.w	r3, r1, r3
 800a4e2:	4413      	add	r3, r2
 800a4e4:	3390      	adds	r3, #144	; 0x90
 800a4e6:	2201      	movs	r2, #1
 800a4e8:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800a4ea:	693b      	ldr	r3, [r7, #16]
 800a4ec:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a4f0:	4619      	mov	r1, r3
 800a4f2:	693a      	ldr	r2, [r7, #16]
 800a4f4:	2334      	movs	r3, #52	; 0x34
 800a4f6:	fb01 f303 	mul.w	r3, r1, r3
 800a4fa:	4413      	add	r3, r2
 800a4fc:	3391      	adds	r3, #145	; 0x91
 800a4fe:	2202      	movs	r2, #2
 800a500:	701a      	strb	r2, [r3, #0]
            break;
 800a502:	e0a6      	b.n	800a652 <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800a504:	693b      	ldr	r3, [r7, #16]
 800a506:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a50a:	b2d9      	uxtb	r1, r3
 800a50c:	693b      	ldr	r3, [r7, #16]
 800a50e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a512:	461a      	mov	r2, r3
 800a514:	2334      	movs	r3, #52	; 0x34
 800a516:	fb02 f303 	mul.w	r3, r2, r3
 800a51a:	3398      	adds	r3, #152	; 0x98
 800a51c:	693a      	ldr	r2, [r7, #16]
 800a51e:	4413      	add	r3, r2
 800a520:	3304      	adds	r3, #4
 800a522:	461a      	mov	r2, r3
 800a524:	6878      	ldr	r0, [r7, #4]
 800a526:	f000 fe96 	bl	800b256 <USBH_MSC_SCSI_RequestSense>
 800a52a:	4603      	mov	r3, r0
 800a52c:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800a52e:	7bfb      	ldrb	r3, [r7, #15]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d145      	bne.n	800a5c0 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800a534:	693b      	ldr	r3, [r7, #16]
 800a536:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a53a:	4619      	mov	r1, r3
 800a53c:	693a      	ldr	r2, [r7, #16]
 800a53e:	2334      	movs	r3, #52	; 0x34
 800a540:	fb01 f303 	mul.w	r3, r1, r3
 800a544:	4413      	add	r3, r2
 800a546:	339c      	adds	r3, #156	; 0x9c
 800a548:	781b      	ldrb	r3, [r3, #0]
 800a54a:	2b06      	cmp	r3, #6
 800a54c:	d00c      	beq.n	800a568 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 800a54e:	693b      	ldr	r3, [r7, #16]
 800a550:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a554:	4619      	mov	r1, r3
 800a556:	693a      	ldr	r2, [r7, #16]
 800a558:	2334      	movs	r3, #52	; 0x34
 800a55a:	fb01 f303 	mul.w	r3, r1, r3
 800a55e:	4413      	add	r3, r2
 800a560:	339c      	adds	r3, #156	; 0x9c
 800a562:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800a564:	2b02      	cmp	r3, #2
 800a566:	d117      	bne.n	800a598 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800a56e:	693b      	ldr	r3, [r7, #16]
 800a570:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800a574:	1ad3      	subs	r3, r2, r3
 800a576:	f242 720f 	movw	r2, #9999	; 0x270f
 800a57a:	4293      	cmp	r3, r2
 800a57c:	d80c      	bhi.n	800a598 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800a57e:	693b      	ldr	r3, [r7, #16]
 800a580:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a584:	4619      	mov	r1, r3
 800a586:	693a      	ldr	r2, [r7, #16]
 800a588:	2334      	movs	r3, #52	; 0x34
 800a58a:	fb01 f303 	mul.w	r3, r1, r3
 800a58e:	4413      	add	r3, r2
 800a590:	3390      	adds	r3, #144	; 0x90
 800a592:	2202      	movs	r2, #2
 800a594:	701a      	strb	r2, [r3, #0]
                  break;
 800a596:	e05f      	b.n	800a658 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a598:	693b      	ldr	r3, [r7, #16]
 800a59a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a59e:	4619      	mov	r1, r3
 800a5a0:	693a      	ldr	r2, [r7, #16]
 800a5a2:	2334      	movs	r3, #52	; 0x34
 800a5a4:	fb01 f303 	mul.w	r3, r1, r3
 800a5a8:	4413      	add	r3, r2
 800a5aa:	3390      	adds	r3, #144	; 0x90
 800a5ac:	2201      	movs	r2, #1
 800a5ae:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800a5b0:	693b      	ldr	r3, [r7, #16]
 800a5b2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a5b6:	3301      	adds	r3, #1
 800a5b8:	b29a      	uxth	r2, r3
 800a5ba:	693b      	ldr	r3, [r7, #16]
 800a5bc:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 800a5c0:	7bfb      	ldrb	r3, [r7, #15]
 800a5c2:	2b02      	cmp	r3, #2
 800a5c4:	d10c      	bne.n	800a5e0 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800a5c6:	693b      	ldr	r3, [r7, #16]
 800a5c8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a5cc:	4619      	mov	r1, r3
 800a5ce:	693a      	ldr	r2, [r7, #16]
 800a5d0:	2334      	movs	r3, #52	; 0x34
 800a5d2:	fb01 f303 	mul.w	r3, r1, r3
 800a5d6:	4413      	add	r3, r2
 800a5d8:	3390      	adds	r3, #144	; 0x90
 800a5da:	2208      	movs	r2, #8
 800a5dc:	701a      	strb	r2, [r3, #0]
            break;
 800a5de:	e03a      	b.n	800a656 <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a5e0:	7bfb      	ldrb	r3, [r7, #15]
 800a5e2:	2b04      	cmp	r3, #4
 800a5e4:	d137      	bne.n	800a656 <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a5e6:	693b      	ldr	r3, [r7, #16]
 800a5e8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a5ec:	4619      	mov	r1, r3
 800a5ee:	693a      	ldr	r2, [r7, #16]
 800a5f0:	2334      	movs	r3, #52	; 0x34
 800a5f2:	fb01 f303 	mul.w	r3, r1, r3
 800a5f6:	4413      	add	r3, r2
 800a5f8:	3390      	adds	r3, #144	; 0x90
 800a5fa:	2201      	movs	r2, #1
 800a5fc:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800a5fe:	693b      	ldr	r3, [r7, #16]
 800a600:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a604:	4619      	mov	r1, r3
 800a606:	693a      	ldr	r2, [r7, #16]
 800a608:	2334      	movs	r3, #52	; 0x34
 800a60a:	fb01 f303 	mul.w	r3, r1, r3
 800a60e:	4413      	add	r3, r2
 800a610:	3391      	adds	r3, #145	; 0x91
 800a612:	2202      	movs	r2, #2
 800a614:	701a      	strb	r2, [r3, #0]
            break;
 800a616:	e01e      	b.n	800a656 <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 800a618:	693b      	ldr	r3, [r7, #16]
 800a61a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a61e:	3301      	adds	r3, #1
 800a620:	b29a      	uxth	r2, r3
 800a622:	693b      	ldr	r3, [r7, #16]
 800a624:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800a628:	e016      	b.n	800a658 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 800a62a:	693b      	ldr	r3, [r7, #16]
 800a62c:	2200      	movs	r2, #0
 800a62e:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 800a632:	693b      	ldr	r3, [r7, #16]
 800a634:	2201      	movs	r2, #1
 800a636:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a63e:	2102      	movs	r1, #2
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	4798      	blx	r3
      break;
 800a644:	e00c      	b.n	800a660 <USBH_MSC_Process+0x514>
            break;
 800a646:	bf00      	nop
 800a648:	e00a      	b.n	800a660 <USBH_MSC_Process+0x514>
            break;
 800a64a:	bf00      	nop
 800a64c:	e008      	b.n	800a660 <USBH_MSC_Process+0x514>
            break;
 800a64e:	bf00      	nop
 800a650:	e006      	b.n	800a660 <USBH_MSC_Process+0x514>
            break;
 800a652:	bf00      	nop
 800a654:	e004      	b.n	800a660 <USBH_MSC_Process+0x514>
            break;
 800a656:	bf00      	nop
      break;
 800a658:	e002      	b.n	800a660 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 800a65a:	2300      	movs	r3, #0
 800a65c:	75fb      	strb	r3, [r7, #23]
      break;
 800a65e:	bf00      	nop
  }
  return error;
 800a660:	7dfb      	ldrb	r3, [r7, #23]
}
 800a662:	4618      	mov	r0, r3
 800a664:	3718      	adds	r7, #24
 800a666:	46bd      	mov	sp, r7
 800a668:	bd80      	pop	{r7, pc}
 800a66a:	bf00      	nop

0800a66c <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800a66c:	b480      	push	{r7}
 800a66e:	b083      	sub	sp, #12
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800a674:	2300      	movs	r3, #0
}
 800a676:	4618      	mov	r0, r3
 800a678:	370c      	adds	r7, #12
 800a67a:	46bd      	mov	sp, r7
 800a67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a680:	4770      	bx	lr

0800a682 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800a682:	b580      	push	{r7, lr}
 800a684:	b088      	sub	sp, #32
 800a686:	af02      	add	r7, sp, #8
 800a688:	6078      	str	r0, [r7, #4]
 800a68a:	460b      	mov	r3, r1
 800a68c:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a694:	69db      	ldr	r3, [r3, #28]
 800a696:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 800a698:	2301      	movs	r3, #1
 800a69a:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 800a69c:	2301      	movs	r3, #1
 800a69e:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 800a6a0:	78fb      	ldrb	r3, [r7, #3]
 800a6a2:	693a      	ldr	r2, [r7, #16]
 800a6a4:	2134      	movs	r1, #52	; 0x34
 800a6a6:	fb01 f303 	mul.w	r3, r1, r3
 800a6aa:	4413      	add	r3, r2
 800a6ac:	3390      	adds	r3, #144	; 0x90
 800a6ae:	781b      	ldrb	r3, [r3, #0]
 800a6b0:	2b07      	cmp	r3, #7
 800a6b2:	d03c      	beq.n	800a72e <USBH_MSC_RdWrProcess+0xac>
 800a6b4:	2b07      	cmp	r3, #7
 800a6b6:	f300 80a7 	bgt.w	800a808 <USBH_MSC_RdWrProcess+0x186>
 800a6ba:	2b05      	cmp	r3, #5
 800a6bc:	d06c      	beq.n	800a798 <USBH_MSC_RdWrProcess+0x116>
 800a6be:	2b06      	cmp	r3, #6
 800a6c0:	f040 80a2 	bne.w	800a808 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800a6c4:	78f9      	ldrb	r1, [r7, #3]
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	9300      	str	r3, [sp, #0]
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	6878      	ldr	r0, [r7, #4]
 800a6d0:	f000 fea5 	bl	800b41e <USBH_MSC_SCSI_Read>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800a6d8:	7bfb      	ldrb	r3, [r7, #15]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d10b      	bne.n	800a6f6 <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800a6de:	78fb      	ldrb	r3, [r7, #3]
 800a6e0:	693a      	ldr	r2, [r7, #16]
 800a6e2:	2134      	movs	r1, #52	; 0x34
 800a6e4:	fb01 f303 	mul.w	r3, r1, r3
 800a6e8:	4413      	add	r3, r2
 800a6ea:	3390      	adds	r3, #144	; 0x90
 800a6ec:	2201      	movs	r2, #1
 800a6ee:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a6f4:	e08a      	b.n	800a80c <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 800a6f6:	7bfb      	ldrb	r3, [r7, #15]
 800a6f8:	2b02      	cmp	r3, #2
 800a6fa:	d109      	bne.n	800a710 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800a6fc:	78fb      	ldrb	r3, [r7, #3]
 800a6fe:	693a      	ldr	r2, [r7, #16]
 800a700:	2134      	movs	r1, #52	; 0x34
 800a702:	fb01 f303 	mul.w	r3, r1, r3
 800a706:	4413      	add	r3, r2
 800a708:	3390      	adds	r3, #144	; 0x90
 800a70a:	2205      	movs	r2, #5
 800a70c:	701a      	strb	r2, [r3, #0]
      break;
 800a70e:	e07d      	b.n	800a80c <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a710:	7bfb      	ldrb	r3, [r7, #15]
 800a712:	2b04      	cmp	r3, #4
 800a714:	d17a      	bne.n	800a80c <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800a716:	78fb      	ldrb	r3, [r7, #3]
 800a718:	693a      	ldr	r2, [r7, #16]
 800a71a:	2134      	movs	r1, #52	; 0x34
 800a71c:	fb01 f303 	mul.w	r3, r1, r3
 800a720:	4413      	add	r3, r2
 800a722:	3390      	adds	r3, #144	; 0x90
 800a724:	2208      	movs	r2, #8
 800a726:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800a728:	2302      	movs	r3, #2
 800a72a:	75fb      	strb	r3, [r7, #23]
      break;
 800a72c:	e06e      	b.n	800a80c <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800a72e:	78f9      	ldrb	r1, [r7, #3]
 800a730:	2300      	movs	r3, #0
 800a732:	9300      	str	r3, [sp, #0]
 800a734:	2300      	movs	r3, #0
 800a736:	2200      	movs	r2, #0
 800a738:	6878      	ldr	r0, [r7, #4]
 800a73a:	f000 fe05 	bl	800b348 <USBH_MSC_SCSI_Write>
 800a73e:	4603      	mov	r3, r0
 800a740:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800a742:	7bfb      	ldrb	r3, [r7, #15]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d10b      	bne.n	800a760 <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800a748:	78fb      	ldrb	r3, [r7, #3]
 800a74a:	693a      	ldr	r2, [r7, #16]
 800a74c:	2134      	movs	r1, #52	; 0x34
 800a74e:	fb01 f303 	mul.w	r3, r1, r3
 800a752:	4413      	add	r3, r2
 800a754:	3390      	adds	r3, #144	; 0x90
 800a756:	2201      	movs	r2, #1
 800a758:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800a75a:	2300      	movs	r3, #0
 800a75c:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a75e:	e057      	b.n	800a810 <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 800a760:	7bfb      	ldrb	r3, [r7, #15]
 800a762:	2b02      	cmp	r3, #2
 800a764:	d109      	bne.n	800a77a <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800a766:	78fb      	ldrb	r3, [r7, #3]
 800a768:	693a      	ldr	r2, [r7, #16]
 800a76a:	2134      	movs	r1, #52	; 0x34
 800a76c:	fb01 f303 	mul.w	r3, r1, r3
 800a770:	4413      	add	r3, r2
 800a772:	3390      	adds	r3, #144	; 0x90
 800a774:	2205      	movs	r2, #5
 800a776:	701a      	strb	r2, [r3, #0]
      break;
 800a778:	e04a      	b.n	800a810 <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a77a:	7bfb      	ldrb	r3, [r7, #15]
 800a77c:	2b04      	cmp	r3, #4
 800a77e:	d147      	bne.n	800a810 <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800a780:	78fb      	ldrb	r3, [r7, #3]
 800a782:	693a      	ldr	r2, [r7, #16]
 800a784:	2134      	movs	r1, #52	; 0x34
 800a786:	fb01 f303 	mul.w	r3, r1, r3
 800a78a:	4413      	add	r3, r2
 800a78c:	3390      	adds	r3, #144	; 0x90
 800a78e:	2208      	movs	r2, #8
 800a790:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800a792:	2302      	movs	r3, #2
 800a794:	75fb      	strb	r3, [r7, #23]
      break;
 800a796:	e03b      	b.n	800a810 <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800a798:	78fb      	ldrb	r3, [r7, #3]
 800a79a:	2234      	movs	r2, #52	; 0x34
 800a79c:	fb02 f303 	mul.w	r3, r2, r3
 800a7a0:	3398      	adds	r3, #152	; 0x98
 800a7a2:	693a      	ldr	r2, [r7, #16]
 800a7a4:	4413      	add	r3, r2
 800a7a6:	1d1a      	adds	r2, r3, #4
 800a7a8:	78fb      	ldrb	r3, [r7, #3]
 800a7aa:	4619      	mov	r1, r3
 800a7ac:	6878      	ldr	r0, [r7, #4]
 800a7ae:	f000 fd52 	bl	800b256 <USBH_MSC_SCSI_RequestSense>
 800a7b2:	4603      	mov	r3, r0
 800a7b4:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800a7b6:	7bfb      	ldrb	r3, [r7, #15]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d113      	bne.n	800a7e4 <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800a7bc:	78fb      	ldrb	r3, [r7, #3]
 800a7be:	693a      	ldr	r2, [r7, #16]
 800a7c0:	2134      	movs	r1, #52	; 0x34
 800a7c2:	fb01 f303 	mul.w	r3, r1, r3
 800a7c6:	4413      	add	r3, r2
 800a7c8:	3390      	adds	r3, #144	; 0x90
 800a7ca:	2201      	movs	r2, #1
 800a7cc:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 800a7ce:	78fb      	ldrb	r3, [r7, #3]
 800a7d0:	693a      	ldr	r2, [r7, #16]
 800a7d2:	2134      	movs	r1, #52	; 0x34
 800a7d4:	fb01 f303 	mul.w	r3, r1, r3
 800a7d8:	4413      	add	r3, r2
 800a7da:	3391      	adds	r3, #145	; 0x91
 800a7dc:	2202      	movs	r2, #2
 800a7de:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 800a7e0:	2302      	movs	r3, #2
 800a7e2:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 800a7e4:	7bfb      	ldrb	r3, [r7, #15]
 800a7e6:	2b02      	cmp	r3, #2
 800a7e8:	d014      	beq.n	800a814 <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a7ea:	7bfb      	ldrb	r3, [r7, #15]
 800a7ec:	2b04      	cmp	r3, #4
 800a7ee:	d111      	bne.n	800a814 <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800a7f0:	78fb      	ldrb	r3, [r7, #3]
 800a7f2:	693a      	ldr	r2, [r7, #16]
 800a7f4:	2134      	movs	r1, #52	; 0x34
 800a7f6:	fb01 f303 	mul.w	r3, r1, r3
 800a7fa:	4413      	add	r3, r2
 800a7fc:	3390      	adds	r3, #144	; 0x90
 800a7fe:	2208      	movs	r2, #8
 800a800:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800a802:	2302      	movs	r3, #2
 800a804:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a806:	e005      	b.n	800a814 <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 800a808:	bf00      	nop
 800a80a:	e004      	b.n	800a816 <USBH_MSC_RdWrProcess+0x194>
      break;
 800a80c:	bf00      	nop
 800a80e:	e002      	b.n	800a816 <USBH_MSC_RdWrProcess+0x194>
      break;
 800a810:	bf00      	nop
 800a812:	e000      	b.n	800a816 <USBH_MSC_RdWrProcess+0x194>
      break;
 800a814:	bf00      	nop

  }
  return error;
 800a816:	7dfb      	ldrb	r3, [r7, #23]
}
 800a818:	4618      	mov	r0, r3
 800a81a:	3718      	adds	r7, #24
 800a81c:	46bd      	mov	sp, r7
 800a81e:	bd80      	pop	{r7, pc}

0800a820 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800a820:	b480      	push	{r7}
 800a822:	b085      	sub	sp, #20
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
 800a828:	460b      	mov	r3, r1
 800a82a:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a832:	69db      	ldr	r3, [r3, #28]
 800a834:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	781b      	ldrb	r3, [r3, #0]
 800a83a:	b2db      	uxtb	r3, r3
 800a83c:	2b0b      	cmp	r3, #11
 800a83e:	d10c      	bne.n	800a85a <USBH_MSC_UnitIsReady+0x3a>
 800a840:	78fb      	ldrb	r3, [r7, #3]
 800a842:	68ba      	ldr	r2, [r7, #8]
 800a844:	2134      	movs	r1, #52	; 0x34
 800a846:	fb01 f303 	mul.w	r3, r1, r3
 800a84a:	4413      	add	r3, r2
 800a84c:	3391      	adds	r3, #145	; 0x91
 800a84e:	781b      	ldrb	r3, [r3, #0]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d102      	bne.n	800a85a <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 800a854:	2301      	movs	r3, #1
 800a856:	73fb      	strb	r3, [r7, #15]
 800a858:	e001      	b.n	800a85e <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 800a85a:	2300      	movs	r3, #0
 800a85c:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800a85e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a860:	4618      	mov	r0, r3
 800a862:	3714      	adds	r7, #20
 800a864:	46bd      	mov	sp, r7
 800a866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86a:	4770      	bx	lr

0800a86c <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b086      	sub	sp, #24
 800a870:	af00      	add	r7, sp, #0
 800a872:	60f8      	str	r0, [r7, #12]
 800a874:	460b      	mov	r3, r1
 800a876:	607a      	str	r2, [r7, #4]
 800a878:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a880:	69db      	ldr	r3, [r3, #28]
 800a882:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	781b      	ldrb	r3, [r3, #0]
 800a888:	b2db      	uxtb	r3, r3
 800a88a:	2b0b      	cmp	r3, #11
 800a88c:	d10d      	bne.n	800a8aa <USBH_MSC_GetLUNInfo+0x3e>
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800a88e:	7afb      	ldrb	r3, [r7, #11]
 800a890:	2234      	movs	r2, #52	; 0x34
 800a892:	fb02 f303 	mul.w	r3, r2, r3
 800a896:	3390      	adds	r3, #144	; 0x90
 800a898:	697a      	ldr	r2, [r7, #20]
 800a89a:	4413      	add	r3, r2
 800a89c:	2234      	movs	r2, #52	; 0x34
 800a89e:	4619      	mov	r1, r3
 800a8a0:	6878      	ldr	r0, [r7, #4]
 800a8a2:	f002 fe4d 	bl	800d540 <memcpy>
    return USBH_OK;
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	e000      	b.n	800a8ac <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 800a8aa:	2302      	movs	r3, #2
  }
}
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	3718      	adds	r7, #24
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	bd80      	pop	{r7, pc}

0800a8b4 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b088      	sub	sp, #32
 800a8b8:	af02      	add	r7, sp, #8
 800a8ba:	60f8      	str	r0, [r7, #12]
 800a8bc:	607a      	str	r2, [r7, #4]
 800a8be:	603b      	str	r3, [r7, #0]
 800a8c0:	460b      	mov	r3, r1
 800a8c2:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a8ca:	69db      	ldr	r3, [r3, #28]
 800a8cc:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a8d4:	b2db      	uxtb	r3, r3
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d00e      	beq.n	800a8f8 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	781b      	ldrb	r3, [r3, #0]
 800a8de:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800a8e0:	2b0b      	cmp	r3, #11
 800a8e2:	d109      	bne.n	800a8f8 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800a8e4:	7afb      	ldrb	r3, [r7, #11]
 800a8e6:	697a      	ldr	r2, [r7, #20]
 800a8e8:	2134      	movs	r1, #52	; 0x34
 800a8ea:	fb01 f303 	mul.w	r3, r1, r3
 800a8ee:	4413      	add	r3, r2
 800a8f0:	3390      	adds	r3, #144	; 0x90
 800a8f2:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800a8f4:	2b01      	cmp	r3, #1
 800a8f6:	d001      	beq.n	800a8fc <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 800a8f8:	2302      	movs	r3, #2
 800a8fa:	e040      	b.n	800a97e <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 800a8fc:	697b      	ldr	r3, [r7, #20]
 800a8fe:	2206      	movs	r2, #6
 800a900:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800a902:	7afb      	ldrb	r3, [r7, #11]
 800a904:	697a      	ldr	r2, [r7, #20]
 800a906:	2134      	movs	r1, #52	; 0x34
 800a908:	fb01 f303 	mul.w	r3, r1, r3
 800a90c:	4413      	add	r3, r2
 800a90e:	3390      	adds	r3, #144	; 0x90
 800a910:	2206      	movs	r2, #6
 800a912:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800a914:	7afb      	ldrb	r3, [r7, #11]
 800a916:	b29a      	uxth	r2, r3
 800a918:	697b      	ldr	r3, [r7, #20]
 800a91a:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800a91e:	7af9      	ldrb	r1, [r7, #11]
 800a920:	6a3b      	ldr	r3, [r7, #32]
 800a922:	9300      	str	r3, [sp, #0]
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	687a      	ldr	r2, [r7, #4]
 800a928:	68f8      	ldr	r0, [r7, #12]
 800a92a:	f000 fd78 	bl	800b41e <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a934:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800a936:	e016      	b.n	800a966 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800a93e:	693b      	ldr	r3, [r7, #16]
 800a940:	1ad2      	subs	r2, r2, r3
 800a942:	6a3b      	ldr	r3, [r7, #32]
 800a944:	f242 7110 	movw	r1, #10000	; 0x2710
 800a948:	fb01 f303 	mul.w	r3, r1, r3
 800a94c:	429a      	cmp	r2, r3
 800a94e:	d805      	bhi.n	800a95c <USBH_MSC_Read+0xa8>
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a956:	b2db      	uxtb	r3, r3
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d104      	bne.n	800a966 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800a95c:	697b      	ldr	r3, [r7, #20]
 800a95e:	2201      	movs	r2, #1
 800a960:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800a962:	2302      	movs	r3, #2
 800a964:	e00b      	b.n	800a97e <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800a966:	7afb      	ldrb	r3, [r7, #11]
 800a968:	4619      	mov	r1, r3
 800a96a:	68f8      	ldr	r0, [r7, #12]
 800a96c:	f7ff fe89 	bl	800a682 <USBH_MSC_RdWrProcess>
 800a970:	4603      	mov	r3, r0
 800a972:	2b01      	cmp	r3, #1
 800a974:	d0e0      	beq.n	800a938 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800a976:	697b      	ldr	r3, [r7, #20]
 800a978:	2201      	movs	r2, #1
 800a97a:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 800a97c:	2300      	movs	r3, #0
}
 800a97e:	4618      	mov	r0, r3
 800a980:	3718      	adds	r7, #24
 800a982:	46bd      	mov	sp, r7
 800a984:	bd80      	pop	{r7, pc}

0800a986 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800a986:	b580      	push	{r7, lr}
 800a988:	b088      	sub	sp, #32
 800a98a:	af02      	add	r7, sp, #8
 800a98c:	60f8      	str	r0, [r7, #12]
 800a98e:	607a      	str	r2, [r7, #4]
 800a990:	603b      	str	r3, [r7, #0]
 800a992:	460b      	mov	r3, r1
 800a994:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a99c:	69db      	ldr	r3, [r3, #28]
 800a99e:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a9a6:	b2db      	uxtb	r3, r3
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d00e      	beq.n	800a9ca <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	781b      	ldrb	r3, [r3, #0]
 800a9b0:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800a9b2:	2b0b      	cmp	r3, #11
 800a9b4:	d109      	bne.n	800a9ca <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800a9b6:	7afb      	ldrb	r3, [r7, #11]
 800a9b8:	697a      	ldr	r2, [r7, #20]
 800a9ba:	2134      	movs	r1, #52	; 0x34
 800a9bc:	fb01 f303 	mul.w	r3, r1, r3
 800a9c0:	4413      	add	r3, r2
 800a9c2:	3390      	adds	r3, #144	; 0x90
 800a9c4:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800a9c6:	2b01      	cmp	r3, #1
 800a9c8:	d001      	beq.n	800a9ce <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 800a9ca:	2302      	movs	r3, #2
 800a9cc:	e040      	b.n	800aa50 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 800a9ce:	697b      	ldr	r3, [r7, #20]
 800a9d0:	2207      	movs	r2, #7
 800a9d2:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800a9d4:	7afb      	ldrb	r3, [r7, #11]
 800a9d6:	697a      	ldr	r2, [r7, #20]
 800a9d8:	2134      	movs	r1, #52	; 0x34
 800a9da:	fb01 f303 	mul.w	r3, r1, r3
 800a9de:	4413      	add	r3, r2
 800a9e0:	3390      	adds	r3, #144	; 0x90
 800a9e2:	2207      	movs	r2, #7
 800a9e4:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800a9e6:	7afb      	ldrb	r3, [r7, #11]
 800a9e8:	b29a      	uxth	r2, r3
 800a9ea:	697b      	ldr	r3, [r7, #20]
 800a9ec:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800a9f0:	7af9      	ldrb	r1, [r7, #11]
 800a9f2:	6a3b      	ldr	r3, [r7, #32]
 800a9f4:	9300      	str	r3, [sp, #0]
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	687a      	ldr	r2, [r7, #4]
 800a9fa:	68f8      	ldr	r0, [r7, #12]
 800a9fc:	f000 fca4 	bl	800b348 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800aa06:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800aa08:	e016      	b.n	800aa38 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800aa10:	693b      	ldr	r3, [r7, #16]
 800aa12:	1ad2      	subs	r2, r2, r3
 800aa14:	6a3b      	ldr	r3, [r7, #32]
 800aa16:	f242 7110 	movw	r1, #10000	; 0x2710
 800aa1a:	fb01 f303 	mul.w	r3, r1, r3
 800aa1e:	429a      	cmp	r2, r3
 800aa20:	d805      	bhi.n	800aa2e <USBH_MSC_Write+0xa8>
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800aa28:	b2db      	uxtb	r3, r3
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d104      	bne.n	800aa38 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800aa2e:	697b      	ldr	r3, [r7, #20]
 800aa30:	2201      	movs	r2, #1
 800aa32:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800aa34:	2302      	movs	r3, #2
 800aa36:	e00b      	b.n	800aa50 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800aa38:	7afb      	ldrb	r3, [r7, #11]
 800aa3a:	4619      	mov	r1, r3
 800aa3c:	68f8      	ldr	r0, [r7, #12]
 800aa3e:	f7ff fe20 	bl	800a682 <USBH_MSC_RdWrProcess>
 800aa42:	4603      	mov	r3, r0
 800aa44:	2b01      	cmp	r3, #1
 800aa46:	d0e0      	beq.n	800aa0a <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800aa48:	697b      	ldr	r3, [r7, #20]
 800aa4a:	2201      	movs	r2, #1
 800aa4c:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 800aa4e:	2300      	movs	r3, #0
}
 800aa50:	4618      	mov	r0, r3
 800aa52:	3718      	adds	r7, #24
 800aa54:	46bd      	mov	sp, r7
 800aa56:	bd80      	pop	{r7, pc}

0800aa58 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b082      	sub	sp, #8
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2221      	movs	r2, #33	; 0x21
 800aa64:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	22ff      	movs	r2, #255	; 0xff
 800aa6a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2200      	movs	r2, #0
 800aa70:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	2200      	movs	r2, #0
 800aa76:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 800aa7e:	2200      	movs	r2, #0
 800aa80:	2100      	movs	r1, #0
 800aa82:	6878      	ldr	r0, [r7, #4]
 800aa84:	f001 fea4 	bl	800c7d0 <USBH_CtlReq>
 800aa88:	4603      	mov	r3, r0
}
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	3708      	adds	r7, #8
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	bd80      	pop	{r7, pc}

0800aa92 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800aa92:	b580      	push	{r7, lr}
 800aa94:	b082      	sub	sp, #8
 800aa96:	af00      	add	r7, sp, #0
 800aa98:	6078      	str	r0, [r7, #4]
 800aa9a:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	22a1      	movs	r2, #161	; 0xa1
 800aaa0:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	22fe      	movs	r2, #254	; 0xfe
 800aaa6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	2200      	movs	r2, #0
 800aaac:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	2200      	movs	r2, #0
 800aab2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	2201      	movs	r2, #1
 800aab8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800aaba:	2201      	movs	r2, #1
 800aabc:	6839      	ldr	r1, [r7, #0]
 800aabe:	6878      	ldr	r0, [r7, #4]
 800aac0:	f001 fe86 	bl	800c7d0 <USBH_CtlReq>
 800aac4:	4603      	mov	r3, r0
}
 800aac6:	4618      	mov	r0, r3
 800aac8:	3708      	adds	r7, #8
 800aaca:	46bd      	mov	sp, r7
 800aacc:	bd80      	pop	{r7, pc}
	...

0800aad0 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 800aad0:	b480      	push	{r7}
 800aad2:	b085      	sub	sp, #20
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aade:	69db      	ldr	r3, [r3, #28]
 800aae0:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	4a09      	ldr	r2, [pc, #36]	; (800ab0c <USBH_MSC_BOT_Init+0x3c>)
 800aae6:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	4a09      	ldr	r2, [pc, #36]	; (800ab10 <USBH_MSC_BOT_Init+0x40>)
 800aaec:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	2201      	movs	r2, #1
 800aaf2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	2201      	movs	r2, #1
 800aafa:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 800aafe:	2300      	movs	r3, #0
}
 800ab00:	4618      	mov	r0, r3
 800ab02:	3714      	adds	r7, #20
 800ab04:	46bd      	mov	sp, r7
 800ab06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0a:	4770      	bx	lr
 800ab0c:	43425355 	.word	0x43425355
 800ab10:	20304050 	.word	0x20304050

0800ab14 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b088      	sub	sp, #32
 800ab18:	af02      	add	r7, sp, #8
 800ab1a:	6078      	str	r0, [r7, #4]
 800ab1c:	460b      	mov	r3, r1
 800ab1e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800ab20:	2301      	movs	r3, #1
 800ab22:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800ab24:	2301      	movs	r3, #1
 800ab26:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800ab28:	2301      	movs	r3, #1
 800ab2a:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ab36:	69db      	ldr	r3, [r3, #28]
 800ab38:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800ab3e:	693b      	ldr	r3, [r7, #16]
 800ab40:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ab44:	3b01      	subs	r3, #1
 800ab46:	2b0a      	cmp	r3, #10
 800ab48:	f200 819e 	bhi.w	800ae88 <USBH_MSC_BOT_Process+0x374>
 800ab4c:	a201      	add	r2, pc, #4	; (adr r2, 800ab54 <USBH_MSC_BOT_Process+0x40>)
 800ab4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab52:	bf00      	nop
 800ab54:	0800ab81 	.word	0x0800ab81
 800ab58:	0800aba9 	.word	0x0800aba9
 800ab5c:	0800ac13 	.word	0x0800ac13
 800ab60:	0800ac31 	.word	0x0800ac31
 800ab64:	0800acb5 	.word	0x0800acb5
 800ab68:	0800acd7 	.word	0x0800acd7
 800ab6c:	0800ad6f 	.word	0x0800ad6f
 800ab70:	0800ad8b 	.word	0x0800ad8b
 800ab74:	0800addd 	.word	0x0800addd
 800ab78:	0800ae0d 	.word	0x0800ae0d
 800ab7c:	0800ae6f 	.word	0x0800ae6f
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800ab80:	693b      	ldr	r3, [r7, #16]
 800ab82:	78fa      	ldrb	r2, [r7, #3]
 800ab84:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800ab88:	693b      	ldr	r3, [r7, #16]
 800ab8a:	2202      	movs	r2, #2
 800ab8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800ab90:	693b      	ldr	r3, [r7, #16]
 800ab92:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800ab96:	693b      	ldr	r3, [r7, #16]
 800ab98:	795b      	ldrb	r3, [r3, #5]
 800ab9a:	2201      	movs	r2, #1
 800ab9c:	9200      	str	r2, [sp, #0]
 800ab9e:	221f      	movs	r2, #31
 800aba0:	6878      	ldr	r0, [r7, #4]
 800aba2:	f002 f824 	bl	800cbee <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800aba6:	e17e      	b.n	800aea6 <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800aba8:	693b      	ldr	r3, [r7, #16]
 800abaa:	795b      	ldrb	r3, [r3, #5]
 800abac:	4619      	mov	r1, r3
 800abae:	6878      	ldr	r0, [r7, #4]
 800abb0:	f002 fbae 	bl	800d310 <USBH_LL_GetURBState>
 800abb4:	4603      	mov	r3, r0
 800abb6:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800abb8:	7d3b      	ldrb	r3, [r7, #20]
 800abba:	2b01      	cmp	r3, #1
 800abbc:	d118      	bne.n	800abf0 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800abbe:	693b      	ldr	r3, [r7, #16]
 800abc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d00f      	beq.n	800abe6 <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800abc6:	693b      	ldr	r3, [r7, #16]
 800abc8:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800abcc:	b25b      	sxtb	r3, r3
 800abce:	2b00      	cmp	r3, #0
 800abd0:	da04      	bge.n	800abdc <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800abd2:	693b      	ldr	r3, [r7, #16]
 800abd4:	2203      	movs	r2, #3
 800abd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800abda:	e157      	b.n	800ae8c <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800abdc:	693b      	ldr	r3, [r7, #16]
 800abde:	2205      	movs	r2, #5
 800abe0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800abe4:	e152      	b.n	800ae8c <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800abe6:	693b      	ldr	r3, [r7, #16]
 800abe8:	2207      	movs	r2, #7
 800abea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800abee:	e14d      	b.n	800ae8c <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 800abf0:	7d3b      	ldrb	r3, [r7, #20]
 800abf2:	2b02      	cmp	r3, #2
 800abf4:	d104      	bne.n	800ac00 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800abf6:	693b      	ldr	r3, [r7, #16]
 800abf8:	2201      	movs	r2, #1
 800abfa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800abfe:	e145      	b.n	800ae8c <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 800ac00:	7d3b      	ldrb	r3, [r7, #20]
 800ac02:	2b05      	cmp	r3, #5
 800ac04:	f040 8142 	bne.w	800ae8c <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800ac08:	693b      	ldr	r3, [r7, #16]
 800ac0a:	220a      	movs	r2, #10
 800ac0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800ac10:	e13c      	b.n	800ae8c <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800ac12:	693b      	ldr	r3, [r7, #16]
 800ac14:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800ac18:	693b      	ldr	r3, [r7, #16]
 800ac1a:	895a      	ldrh	r2, [r3, #10]
 800ac1c:	693b      	ldr	r3, [r7, #16]
 800ac1e:	791b      	ldrb	r3, [r3, #4]
 800ac20:	6878      	ldr	r0, [r7, #4]
 800ac22:	f002 f809 	bl	800cc38 <USBH_BulkReceiveData>
                                 MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800ac26:	693b      	ldr	r3, [r7, #16]
 800ac28:	2204      	movs	r2, #4
 800ac2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 800ac2e:	e13a      	b.n	800aea6 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800ac30:	693b      	ldr	r3, [r7, #16]
 800ac32:	791b      	ldrb	r3, [r3, #4]
 800ac34:	4619      	mov	r1, r3
 800ac36:	6878      	ldr	r0, [r7, #4]
 800ac38:	f002 fb6a 	bl	800d310 <USBH_LL_GetURBState>
 800ac3c:	4603      	mov	r3, r0
 800ac3e:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800ac40:	7d3b      	ldrb	r3, [r7, #20]
 800ac42:	2b01      	cmp	r3, #1
 800ac44:	d12d      	bne.n	800aca2 <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800ac46:	693b      	ldr	r3, [r7, #16]
 800ac48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac4a:	693a      	ldr	r2, [r7, #16]
 800ac4c:	8952      	ldrh	r2, [r2, #10]
 800ac4e:	4293      	cmp	r3, r2
 800ac50:	d910      	bls.n	800ac74 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800ac52:	693b      	ldr	r3, [r7, #16]
 800ac54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ac58:	693a      	ldr	r2, [r7, #16]
 800ac5a:	8952      	ldrh	r2, [r2, #10]
 800ac5c:	441a      	add	r2, r3
 800ac5e:	693b      	ldr	r3, [r7, #16]
 800ac60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800ac64:	693b      	ldr	r3, [r7, #16]
 800ac66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac68:	693a      	ldr	r2, [r7, #16]
 800ac6a:	8952      	ldrh	r2, [r2, #10]
 800ac6c:	1a9a      	subs	r2, r3, r2
 800ac6e:	693b      	ldr	r3, [r7, #16]
 800ac70:	65da      	str	r2, [r3, #92]	; 0x5c
 800ac72:	e002      	b.n	800ac7a <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800ac74:	693b      	ldr	r3, [r7, #16]
 800ac76:	2200      	movs	r2, #0
 800ac78:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800ac7a:	693b      	ldr	r3, [r7, #16]
 800ac7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d00a      	beq.n	800ac98 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800ac82:	693b      	ldr	r3, [r7, #16]
 800ac84:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800ac88:	693b      	ldr	r3, [r7, #16]
 800ac8a:	895a      	ldrh	r2, [r3, #10]
 800ac8c:	693b      	ldr	r3, [r7, #16]
 800ac8e:	791b      	ldrb	r3, [r3, #4]
 800ac90:	6878      	ldr	r0, [r7, #4]
 800ac92:	f001 ffd1 	bl	800cc38 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800ac96:	e0fb      	b.n	800ae90 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800ac98:	693b      	ldr	r3, [r7, #16]
 800ac9a:	2207      	movs	r2, #7
 800ac9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800aca0:	e0f6      	b.n	800ae90 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 800aca2:	7d3b      	ldrb	r3, [r7, #20]
 800aca4:	2b05      	cmp	r3, #5
 800aca6:	f040 80f3 	bne.w	800ae90 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800acaa:	693b      	ldr	r3, [r7, #16]
 800acac:	2209      	movs	r2, #9
 800acae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800acb2:	e0ed      	b.n	800ae90 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800acb4:	693b      	ldr	r3, [r7, #16]
 800acb6:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800acba:	693b      	ldr	r3, [r7, #16]
 800acbc:	891a      	ldrh	r2, [r3, #8]
 800acbe:	693b      	ldr	r3, [r7, #16]
 800acc0:	795b      	ldrb	r3, [r3, #5]
 800acc2:	2001      	movs	r0, #1
 800acc4:	9000      	str	r0, [sp, #0]
 800acc6:	6878      	ldr	r0, [r7, #4]
 800acc8:	f001 ff91 	bl	800cbee <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800accc:	693b      	ldr	r3, [r7, #16]
 800acce:	2206      	movs	r2, #6
 800acd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800acd4:	e0e7      	b.n	800aea6 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800acd6:	693b      	ldr	r3, [r7, #16]
 800acd8:	795b      	ldrb	r3, [r3, #5]
 800acda:	4619      	mov	r1, r3
 800acdc:	6878      	ldr	r0, [r7, #4]
 800acde:	f002 fb17 	bl	800d310 <USBH_LL_GetURBState>
 800ace2:	4603      	mov	r3, r0
 800ace4:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800ace6:	7d3b      	ldrb	r3, [r7, #20]
 800ace8:	2b01      	cmp	r3, #1
 800acea:	d12f      	bne.n	800ad4c <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800acec:	693b      	ldr	r3, [r7, #16]
 800acee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800acf0:	693a      	ldr	r2, [r7, #16]
 800acf2:	8912      	ldrh	r2, [r2, #8]
 800acf4:	4293      	cmp	r3, r2
 800acf6:	d910      	bls.n	800ad1a <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800acf8:	693b      	ldr	r3, [r7, #16]
 800acfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800acfe:	693a      	ldr	r2, [r7, #16]
 800ad00:	8912      	ldrh	r2, [r2, #8]
 800ad02:	441a      	add	r2, r3
 800ad04:	693b      	ldr	r3, [r7, #16]
 800ad06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800ad0a:	693b      	ldr	r3, [r7, #16]
 800ad0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad0e:	693a      	ldr	r2, [r7, #16]
 800ad10:	8912      	ldrh	r2, [r2, #8]
 800ad12:	1a9a      	subs	r2, r3, r2
 800ad14:	693b      	ldr	r3, [r7, #16]
 800ad16:	65da      	str	r2, [r3, #92]	; 0x5c
 800ad18:	e002      	b.n	800ad20 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800ad1a:	693b      	ldr	r3, [r7, #16]
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800ad20:	693b      	ldr	r3, [r7, #16]
 800ad22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d00c      	beq.n	800ad42 <USBH_MSC_BOT_Process+0x22e>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800ad28:	693b      	ldr	r3, [r7, #16]
 800ad2a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800ad2e:	693b      	ldr	r3, [r7, #16]
 800ad30:	891a      	ldrh	r2, [r3, #8]
 800ad32:	693b      	ldr	r3, [r7, #16]
 800ad34:	795b      	ldrb	r3, [r3, #5]
 800ad36:	2001      	movs	r0, #1
 800ad38:	9000      	str	r0, [sp, #0]
 800ad3a:	6878      	ldr	r0, [r7, #4]
 800ad3c:	f001 ff57 	bl	800cbee <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 800ad40:	e0a8      	b.n	800ae94 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800ad42:	693b      	ldr	r3, [r7, #16]
 800ad44:	2207      	movs	r2, #7
 800ad46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800ad4a:	e0a3      	b.n	800ae94 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ad4c:	7d3b      	ldrb	r3, [r7, #20]
 800ad4e:	2b02      	cmp	r3, #2
 800ad50:	d104      	bne.n	800ad5c <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800ad52:	693b      	ldr	r3, [r7, #16]
 800ad54:	2205      	movs	r2, #5
 800ad56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800ad5a:	e09b      	b.n	800ae94 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 800ad5c:	7d3b      	ldrb	r3, [r7, #20]
 800ad5e:	2b05      	cmp	r3, #5
 800ad60:	f040 8098 	bne.w	800ae94 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800ad64:	693b      	ldr	r3, [r7, #16]
 800ad66:	220a      	movs	r2, #10
 800ad68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800ad6c:	e092      	b.n	800ae94 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800ad6e:	693b      	ldr	r3, [r7, #16]
 800ad70:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800ad74:	693b      	ldr	r3, [r7, #16]
 800ad76:	791b      	ldrb	r3, [r3, #4]
 800ad78:	220d      	movs	r2, #13
 800ad7a:	6878      	ldr	r0, [r7, #4]
 800ad7c:	f001 ff5c 	bl	800cc38 <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800ad80:	693b      	ldr	r3, [r7, #16]
 800ad82:	2208      	movs	r2, #8
 800ad84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800ad88:	e08d      	b.n	800aea6 <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800ad8a:	693b      	ldr	r3, [r7, #16]
 800ad8c:	791b      	ldrb	r3, [r3, #4]
 800ad8e:	4619      	mov	r1, r3
 800ad90:	6878      	ldr	r0, [r7, #4]
 800ad92:	f002 fabd 	bl	800d310 <USBH_LL_GetURBState>
 800ad96:	4603      	mov	r3, r0
 800ad98:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800ad9a:	7d3b      	ldrb	r3, [r7, #20]
 800ad9c:	2b01      	cmp	r3, #1
 800ad9e:	d115      	bne.n	800adcc <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800ada0:	693b      	ldr	r3, [r7, #16]
 800ada2:	2201      	movs	r2, #1
 800ada4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800ada8:	693b      	ldr	r3, [r7, #16]
 800adaa:	2201      	movs	r2, #1
 800adac:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 800adb0:	6878      	ldr	r0, [r7, #4]
 800adb2:	f000 f8a9 	bl	800af08 <USBH_MSC_DecodeCSW>
 800adb6:	4603      	mov	r3, r0
 800adb8:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800adba:	7d7b      	ldrb	r3, [r7, #21]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d102      	bne.n	800adc6 <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 800adc0:	2300      	movs	r3, #0
 800adc2:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 800adc4:	e068      	b.n	800ae98 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 800adc6:	2302      	movs	r3, #2
 800adc8:	75fb      	strb	r3, [r7, #23]
      break;
 800adca:	e065      	b.n	800ae98 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 800adcc:	7d3b      	ldrb	r3, [r7, #20]
 800adce:	2b05      	cmp	r3, #5
 800add0:	d162      	bne.n	800ae98 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800add2:	693b      	ldr	r3, [r7, #16]
 800add4:	2209      	movs	r2, #9
 800add6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800adda:	e05d      	b.n	800ae98 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800addc:	78fb      	ldrb	r3, [r7, #3]
 800adde:	2200      	movs	r2, #0
 800ade0:	4619      	mov	r1, r3
 800ade2:	6878      	ldr	r0, [r7, #4]
 800ade4:	f000 f864 	bl	800aeb0 <USBH_MSC_BOT_Abort>
 800ade8:	4603      	mov	r3, r0
 800adea:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800adec:	7dbb      	ldrb	r3, [r7, #22]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d104      	bne.n	800adfc <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800adf2:	693b      	ldr	r3, [r7, #16]
 800adf4:	2207      	movs	r2, #7
 800adf6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800adfa:	e04f      	b.n	800ae9c <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 800adfc:	7dbb      	ldrb	r3, [r7, #22]
 800adfe:	2b04      	cmp	r3, #4
 800ae00:	d14c      	bne.n	800ae9c <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800ae02:	693b      	ldr	r3, [r7, #16]
 800ae04:	220b      	movs	r2, #11
 800ae06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800ae0a:	e047      	b.n	800ae9c <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800ae0c:	78fb      	ldrb	r3, [r7, #3]
 800ae0e:	2201      	movs	r2, #1
 800ae10:	4619      	mov	r1, r3
 800ae12:	6878      	ldr	r0, [r7, #4]
 800ae14:	f000 f84c 	bl	800aeb0 <USBH_MSC_BOT_Abort>
 800ae18:	4603      	mov	r3, r0
 800ae1a:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800ae1c:	7dbb      	ldrb	r3, [r7, #22]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d11d      	bne.n	800ae5e <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800ae22:	693b      	ldr	r3, [r7, #16]
 800ae24:	795b      	ldrb	r3, [r3, #5]
 800ae26:	4619      	mov	r1, r3
 800ae28:	6878      	ldr	r0, [r7, #4]
 800ae2a:	f002 facb 	bl	800d3c4 <USBH_LL_GetToggle>
 800ae2e:	4603      	mov	r3, r0
 800ae30:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800ae32:	693b      	ldr	r3, [r7, #16]
 800ae34:	7959      	ldrb	r1, [r3, #5]
 800ae36:	7bfb      	ldrb	r3, [r7, #15]
 800ae38:	f1c3 0301 	rsb	r3, r3, #1
 800ae3c:	b2db      	uxtb	r3, r3
 800ae3e:	461a      	mov	r2, r3
 800ae40:	6878      	ldr	r0, [r7, #4]
 800ae42:	f002 fa8f 	bl	800d364 <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800ae46:	693b      	ldr	r3, [r7, #16]
 800ae48:	791b      	ldrb	r3, [r3, #4]
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	4619      	mov	r1, r3
 800ae4e:	6878      	ldr	r0, [r7, #4]
 800ae50:	f002 fa88 	bl	800d364 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800ae54:	693b      	ldr	r3, [r7, #16]
 800ae56:	2209      	movs	r2, #9
 800ae58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800ae5c:	e020      	b.n	800aea0 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 800ae5e:	7dbb      	ldrb	r3, [r7, #22]
 800ae60:	2b04      	cmp	r3, #4
 800ae62:	d11d      	bne.n	800aea0 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800ae64:	693b      	ldr	r3, [r7, #16]
 800ae66:	220b      	movs	r2, #11
 800ae68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800ae6c:	e018      	b.n	800aea0 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800ae6e:	6878      	ldr	r0, [r7, #4]
 800ae70:	f7ff fdf2 	bl	800aa58 <USBH_MSC_BOT_REQ_Reset>
 800ae74:	4603      	mov	r3, r0
 800ae76:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800ae78:	7dfb      	ldrb	r3, [r7, #23]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d112      	bne.n	800aea4 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800ae7e:	693b      	ldr	r3, [r7, #16]
 800ae80:	2201      	movs	r2, #1
 800ae82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 800ae86:	e00d      	b.n	800aea4 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 800ae88:	bf00      	nop
 800ae8a:	e00c      	b.n	800aea6 <USBH_MSC_BOT_Process+0x392>
      break;
 800ae8c:	bf00      	nop
 800ae8e:	e00a      	b.n	800aea6 <USBH_MSC_BOT_Process+0x392>
      break;
 800ae90:	bf00      	nop
 800ae92:	e008      	b.n	800aea6 <USBH_MSC_BOT_Process+0x392>
      break;
 800ae94:	bf00      	nop
 800ae96:	e006      	b.n	800aea6 <USBH_MSC_BOT_Process+0x392>
      break;
 800ae98:	bf00      	nop
 800ae9a:	e004      	b.n	800aea6 <USBH_MSC_BOT_Process+0x392>
      break;
 800ae9c:	bf00      	nop
 800ae9e:	e002      	b.n	800aea6 <USBH_MSC_BOT_Process+0x392>
      break;
 800aea0:	bf00      	nop
 800aea2:	e000      	b.n	800aea6 <USBH_MSC_BOT_Process+0x392>
      break;
 800aea4:	bf00      	nop
  }
  return status;
 800aea6:	7dfb      	ldrb	r3, [r7, #23]
}
 800aea8:	4618      	mov	r0, r3
 800aeaa:	3718      	adds	r7, #24
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bd80      	pop	{r7, pc}

0800aeb0 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b084      	sub	sp, #16
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
 800aeb8:	460b      	mov	r3, r1
 800aeba:	70fb      	strb	r3, [r7, #3]
 800aebc:	4613      	mov	r3, r2
 800aebe:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800aec0:	2302      	movs	r3, #2
 800aec2:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aeca:	69db      	ldr	r3, [r3, #28]
 800aecc:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800aece:	78bb      	ldrb	r3, [r7, #2]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d002      	beq.n	800aeda <USBH_MSC_BOT_Abort+0x2a>
 800aed4:	2b01      	cmp	r3, #1
 800aed6:	d009      	beq.n	800aeec <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800aed8:	e011      	b.n	800aefe <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800aeda:	68bb      	ldr	r3, [r7, #8]
 800aedc:	79db      	ldrb	r3, [r3, #7]
 800aede:	4619      	mov	r1, r3
 800aee0:	6878      	ldr	r0, [r7, #4]
 800aee2:	f001 f9a8 	bl	800c236 <USBH_ClrFeature>
 800aee6:	4603      	mov	r3, r0
 800aee8:	73fb      	strb	r3, [r7, #15]
      break;
 800aeea:	e008      	b.n	800aefe <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800aeec:	68bb      	ldr	r3, [r7, #8]
 800aeee:	799b      	ldrb	r3, [r3, #6]
 800aef0:	4619      	mov	r1, r3
 800aef2:	6878      	ldr	r0, [r7, #4]
 800aef4:	f001 f99f 	bl	800c236 <USBH_ClrFeature>
 800aef8:	4603      	mov	r3, r0
 800aefa:	73fb      	strb	r3, [r7, #15]
      break;
 800aefc:	bf00      	nop
  }
  return status;
 800aefe:	7bfb      	ldrb	r3, [r7, #15]
}
 800af00:	4618      	mov	r0, r3
 800af02:	3710      	adds	r7, #16
 800af04:	46bd      	mov	sp, r7
 800af06:	bd80      	pop	{r7, pc}

0800af08 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b084      	sub	sp, #16
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800af16:	69db      	ldr	r3, [r3, #28]
 800af18:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800af1a:	2301      	movs	r3, #1
 800af1c:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800af1e:	68bb      	ldr	r3, [r7, #8]
 800af20:	791b      	ldrb	r3, [r3, #4]
 800af22:	4619      	mov	r1, r3
 800af24:	6878      	ldr	r0, [r7, #4]
 800af26:	f002 f961 	bl	800d1ec <USBH_LL_GetLastXferSize>
 800af2a:	4603      	mov	r3, r0
 800af2c:	2b0d      	cmp	r3, #13
 800af2e:	d002      	beq.n	800af36 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800af30:	2302      	movs	r3, #2
 800af32:	73fb      	strb	r3, [r7, #15]
 800af34:	e024      	b.n	800af80 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800af36:	68bb      	ldr	r3, [r7, #8]
 800af38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800af3a:	4a14      	ldr	r2, [pc, #80]	; (800af8c <USBH_MSC_DecodeCSW+0x84>)
 800af3c:	4293      	cmp	r3, r2
 800af3e:	d11d      	bne.n	800af7c <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800af40:	68bb      	ldr	r3, [r7, #8]
 800af42:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800af44:	68bb      	ldr	r3, [r7, #8]
 800af46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af48:	429a      	cmp	r2, r3
 800af4a:	d119      	bne.n	800af80 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800af4c:	68bb      	ldr	r3, [r7, #8]
 800af4e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800af52:	2b00      	cmp	r3, #0
 800af54:	d102      	bne.n	800af5c <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800af56:	2300      	movs	r3, #0
 800af58:	73fb      	strb	r3, [r7, #15]
 800af5a:	e011      	b.n	800af80 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800af5c:	68bb      	ldr	r3, [r7, #8]
 800af5e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800af62:	2b01      	cmp	r3, #1
 800af64:	d102      	bne.n	800af6c <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800af66:	2301      	movs	r3, #1
 800af68:	73fb      	strb	r3, [r7, #15]
 800af6a:	e009      	b.n	800af80 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800af6c:	68bb      	ldr	r3, [r7, #8]
 800af6e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800af72:	2b02      	cmp	r3, #2
 800af74:	d104      	bne.n	800af80 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800af76:	2302      	movs	r3, #2
 800af78:	73fb      	strb	r3, [r7, #15]
 800af7a:	e001      	b.n	800af80 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800af7c:	2302      	movs	r3, #2
 800af7e:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800af80:	7bfb      	ldrb	r3, [r7, #15]
}
 800af82:	4618      	mov	r0, r3
 800af84:	3710      	adds	r7, #16
 800af86:	46bd      	mov	sp, r7
 800af88:	bd80      	pop	{r7, pc}
 800af8a:	bf00      	nop
 800af8c:	53425355 	.word	0x53425355

0800af90 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b084      	sub	sp, #16
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
 800af98:	460b      	mov	r3, r1
 800af9a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800af9c:	2302      	movs	r3, #2
 800af9e:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800afa6:	69db      	ldr	r3, [r3, #28]
 800afa8:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800afaa:	68bb      	ldr	r3, [r7, #8]
 800afac:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800afb0:	2b01      	cmp	r3, #1
 800afb2:	d002      	beq.n	800afba <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800afb4:	2b02      	cmp	r3, #2
 800afb6:	d021      	beq.n	800affc <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800afb8:	e028      	b.n	800b00c <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800afba:	68bb      	ldr	r3, [r7, #8]
 800afbc:	2200      	movs	r2, #0
 800afbe:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800afc0:	68bb      	ldr	r3, [r7, #8]
 800afc2:	2200      	movs	r2, #0
 800afc4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800afc8:	68bb      	ldr	r3, [r7, #8]
 800afca:	220a      	movs	r2, #10
 800afcc:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800afd0:	68bb      	ldr	r3, [r7, #8]
 800afd2:	3363      	adds	r3, #99	; 0x63
 800afd4:	2210      	movs	r2, #16
 800afd6:	2100      	movs	r1, #0
 800afd8:	4618      	mov	r0, r3
 800afda:	f002 fabf 	bl	800d55c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800afde:	68bb      	ldr	r3, [r7, #8]
 800afe0:	2200      	movs	r2, #0
 800afe2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800afe6:	68bb      	ldr	r3, [r7, #8]
 800afe8:	2201      	movs	r2, #1
 800afea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800afee:	68bb      	ldr	r3, [r7, #8]
 800aff0:	2202      	movs	r2, #2
 800aff2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800aff6:	2301      	movs	r3, #1
 800aff8:	73fb      	strb	r3, [r7, #15]
      break;
 800affa:	e007      	b.n	800b00c <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800affc:	78fb      	ldrb	r3, [r7, #3]
 800affe:	4619      	mov	r1, r3
 800b000:	6878      	ldr	r0, [r7, #4]
 800b002:	f7ff fd87 	bl	800ab14 <USBH_MSC_BOT_Process>
 800b006:	4603      	mov	r3, r0
 800b008:	73fb      	strb	r3, [r7, #15]
      break;
 800b00a:	bf00      	nop
  }

  return error;
 800b00c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b00e:	4618      	mov	r0, r3
 800b010:	3710      	adds	r7, #16
 800b012:	46bd      	mov	sp, r7
 800b014:	bd80      	pop	{r7, pc}

0800b016 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800b016:	b580      	push	{r7, lr}
 800b018:	b086      	sub	sp, #24
 800b01a:	af00      	add	r7, sp, #0
 800b01c:	60f8      	str	r0, [r7, #12]
 800b01e:	460b      	mov	r3, r1
 800b020:	607a      	str	r2, [r7, #4]
 800b022:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 800b024:	2301      	movs	r3, #1
 800b026:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b02e:	69db      	ldr	r3, [r3, #28]
 800b030:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800b032:	693b      	ldr	r3, [r7, #16]
 800b034:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800b038:	2b01      	cmp	r3, #1
 800b03a:	d002      	beq.n	800b042 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800b03c:	2b02      	cmp	r3, #2
 800b03e:	d027      	beq.n	800b090 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800b040:	e05f      	b.n	800b102 <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800b042:	693b      	ldr	r3, [r7, #16]
 800b044:	2208      	movs	r2, #8
 800b046:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800b048:	693b      	ldr	r3, [r7, #16]
 800b04a:	2280      	movs	r2, #128	; 0x80
 800b04c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800b050:	693b      	ldr	r3, [r7, #16]
 800b052:	220a      	movs	r2, #10
 800b054:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800b058:	693b      	ldr	r3, [r7, #16]
 800b05a:	3363      	adds	r3, #99	; 0x63
 800b05c:	2210      	movs	r2, #16
 800b05e:	2100      	movs	r1, #0
 800b060:	4618      	mov	r0, r3
 800b062:	f002 fa7b 	bl	800d55c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800b066:	693b      	ldr	r3, [r7, #16]
 800b068:	2225      	movs	r2, #37	; 0x25
 800b06a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b06e:	693b      	ldr	r3, [r7, #16]
 800b070:	2201      	movs	r2, #1
 800b072:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b076:	693b      	ldr	r3, [r7, #16]
 800b078:	2202      	movs	r2, #2
 800b07a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800b07e:	693b      	ldr	r3, [r7, #16]
 800b080:	f103 0210 	add.w	r2, r3, #16
 800b084:	693b      	ldr	r3, [r7, #16]
 800b086:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800b08a:	2301      	movs	r3, #1
 800b08c:	75fb      	strb	r3, [r7, #23]
      break;
 800b08e:	e038      	b.n	800b102 <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b090:	7afb      	ldrb	r3, [r7, #11]
 800b092:	4619      	mov	r1, r3
 800b094:	68f8      	ldr	r0, [r7, #12]
 800b096:	f7ff fd3d 	bl	800ab14 <USBH_MSC_BOT_Process>
 800b09a:	4603      	mov	r3, r0
 800b09c:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800b09e:	7dfb      	ldrb	r3, [r7, #23]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d12d      	bne.n	800b100 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800b0a4:	693b      	ldr	r3, [r7, #16]
 800b0a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b0aa:	3303      	adds	r3, #3
 800b0ac:	781b      	ldrb	r3, [r3, #0]
 800b0ae:	461a      	mov	r2, r3
 800b0b0:	693b      	ldr	r3, [r7, #16]
 800b0b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b0b6:	3302      	adds	r3, #2
 800b0b8:	781b      	ldrb	r3, [r3, #0]
 800b0ba:	021b      	lsls	r3, r3, #8
 800b0bc:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800b0be:	693b      	ldr	r3, [r7, #16]
 800b0c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b0c4:	3301      	adds	r3, #1
 800b0c6:	781b      	ldrb	r3, [r3, #0]
 800b0c8:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800b0ca:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800b0cc:	693b      	ldr	r3, [r7, #16]
 800b0ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b0d2:	781b      	ldrb	r3, [r3, #0]
 800b0d4:	061b      	lsls	r3, r3, #24
 800b0d6:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800b0dc:	693b      	ldr	r3, [r7, #16]
 800b0de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b0e2:	3307      	adds	r3, #7
 800b0e4:	781b      	ldrb	r3, [r3, #0]
 800b0e6:	b29a      	uxth	r2, r3
 800b0e8:	693b      	ldr	r3, [r7, #16]
 800b0ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b0ee:	3306      	adds	r3, #6
 800b0f0:	781b      	ldrb	r3, [r3, #0]
 800b0f2:	b29b      	uxth	r3, r3
 800b0f4:	021b      	lsls	r3, r3, #8
 800b0f6:	b29b      	uxth	r3, r3
 800b0f8:	4313      	orrs	r3, r2
 800b0fa:	b29a      	uxth	r2, r3
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	809a      	strh	r2, [r3, #4]
      break;
 800b100:	bf00      	nop
  }

  return error;
 800b102:	7dfb      	ldrb	r3, [r7, #23]
}
 800b104:	4618      	mov	r0, r3
 800b106:	3718      	adds	r7, #24
 800b108:	46bd      	mov	sp, r7
 800b10a:	bd80      	pop	{r7, pc}

0800b10c <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b086      	sub	sp, #24
 800b110:	af00      	add	r7, sp, #0
 800b112:	60f8      	str	r0, [r7, #12]
 800b114:	460b      	mov	r3, r1
 800b116:	607a      	str	r2, [r7, #4]
 800b118:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800b11a:	2302      	movs	r3, #2
 800b11c:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b124:	69db      	ldr	r3, [r3, #28]
 800b126:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800b128:	693b      	ldr	r3, [r7, #16]
 800b12a:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800b12e:	2b01      	cmp	r3, #1
 800b130:	d002      	beq.n	800b138 <USBH_MSC_SCSI_Inquiry+0x2c>
 800b132:	2b02      	cmp	r3, #2
 800b134:	d03d      	beq.n	800b1b2 <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800b136:	e089      	b.n	800b24c <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800b138:	693b      	ldr	r3, [r7, #16]
 800b13a:	2224      	movs	r2, #36	; 0x24
 800b13c:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800b13e:	693b      	ldr	r3, [r7, #16]
 800b140:	2280      	movs	r2, #128	; 0x80
 800b142:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800b146:	693b      	ldr	r3, [r7, #16]
 800b148:	220a      	movs	r2, #10
 800b14a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800b14e:	693b      	ldr	r3, [r7, #16]
 800b150:	3363      	adds	r3, #99	; 0x63
 800b152:	220a      	movs	r2, #10
 800b154:	2100      	movs	r1, #0
 800b156:	4618      	mov	r0, r3
 800b158:	f002 fa00 	bl	800d55c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800b15c:	693b      	ldr	r3, [r7, #16]
 800b15e:	2212      	movs	r2, #18
 800b160:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800b164:	7afb      	ldrb	r3, [r7, #11]
 800b166:	015b      	lsls	r3, r3, #5
 800b168:	b2da      	uxtb	r2, r3
 800b16a:	693b      	ldr	r3, [r7, #16]
 800b16c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800b170:	693b      	ldr	r3, [r7, #16]
 800b172:	2200      	movs	r2, #0
 800b174:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800b178:	693b      	ldr	r3, [r7, #16]
 800b17a:	2200      	movs	r2, #0
 800b17c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800b180:	693b      	ldr	r3, [r7, #16]
 800b182:	2224      	movs	r2, #36	; 0x24
 800b184:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800b188:	693b      	ldr	r3, [r7, #16]
 800b18a:	2200      	movs	r2, #0
 800b18c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b190:	693b      	ldr	r3, [r7, #16]
 800b192:	2201      	movs	r2, #1
 800b194:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b198:	693b      	ldr	r3, [r7, #16]
 800b19a:	2202      	movs	r2, #2
 800b19c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800b1a0:	693b      	ldr	r3, [r7, #16]
 800b1a2:	f103 0210 	add.w	r2, r3, #16
 800b1a6:	693b      	ldr	r3, [r7, #16]
 800b1a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800b1ac:	2301      	movs	r3, #1
 800b1ae:	75fb      	strb	r3, [r7, #23]
      break;
 800b1b0:	e04c      	b.n	800b24c <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b1b2:	7afb      	ldrb	r3, [r7, #11]
 800b1b4:	4619      	mov	r1, r3
 800b1b6:	68f8      	ldr	r0, [r7, #12]
 800b1b8:	f7ff fcac 	bl	800ab14 <USBH_MSC_BOT_Process>
 800b1bc:	4603      	mov	r3, r0
 800b1be:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800b1c0:	7dfb      	ldrb	r3, [r7, #23]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d141      	bne.n	800b24a <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800b1c6:	2222      	movs	r2, #34	; 0x22
 800b1c8:	2100      	movs	r1, #0
 800b1ca:	6878      	ldr	r0, [r7, #4]
 800b1cc:	f002 f9c6 	bl	800d55c <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800b1d0:	693b      	ldr	r3, [r7, #16]
 800b1d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b1d6:	781b      	ldrb	r3, [r3, #0]
 800b1d8:	f003 031f 	and.w	r3, r3, #31
 800b1dc:	b2da      	uxtb	r2, r3
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800b1e2:	693b      	ldr	r3, [r7, #16]
 800b1e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b1e8:	781b      	ldrb	r3, [r3, #0]
 800b1ea:	095b      	lsrs	r3, r3, #5
 800b1ec:	b2da      	uxtb	r2, r3
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800b1f2:	693b      	ldr	r3, [r7, #16]
 800b1f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b1f8:	3301      	adds	r3, #1
 800b1fa:	781b      	ldrb	r3, [r3, #0]
 800b1fc:	b25b      	sxtb	r3, r3
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	da03      	bge.n	800b20a <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	2201      	movs	r2, #1
 800b206:	709a      	strb	r2, [r3, #2]
 800b208:	e002      	b.n	800b210 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	2200      	movs	r2, #0
 800b20e:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	1cd8      	adds	r0, r3, #3
 800b214:	693b      	ldr	r3, [r7, #16]
 800b216:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b21a:	3308      	adds	r3, #8
 800b21c:	2208      	movs	r2, #8
 800b21e:	4619      	mov	r1, r3
 800b220:	f002 f98e 	bl	800d540 <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	f103 000c 	add.w	r0, r3, #12
 800b22a:	693b      	ldr	r3, [r7, #16]
 800b22c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b230:	3310      	adds	r3, #16
 800b232:	2210      	movs	r2, #16
 800b234:	4619      	mov	r1, r3
 800b236:	f002 f983 	bl	800d540 <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	331d      	adds	r3, #29
 800b23e:	693a      	ldr	r2, [r7, #16]
 800b240:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800b244:	3220      	adds	r2, #32
 800b246:	6812      	ldr	r2, [r2, #0]
 800b248:	601a      	str	r2, [r3, #0]
      break;
 800b24a:	bf00      	nop
  }

  return error;
 800b24c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b24e:	4618      	mov	r0, r3
 800b250:	3718      	adds	r7, #24
 800b252:	46bd      	mov	sp, r7
 800b254:	bd80      	pop	{r7, pc}

0800b256 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800b256:	b580      	push	{r7, lr}
 800b258:	b086      	sub	sp, #24
 800b25a:	af00      	add	r7, sp, #0
 800b25c:	60f8      	str	r0, [r7, #12]
 800b25e:	460b      	mov	r3, r1
 800b260:	607a      	str	r2, [r7, #4]
 800b262:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800b264:	2302      	movs	r3, #2
 800b266:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b26e:	69db      	ldr	r3, [r3, #28]
 800b270:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800b272:	693b      	ldr	r3, [r7, #16]
 800b274:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800b278:	2b01      	cmp	r3, #1
 800b27a:	d002      	beq.n	800b282 <USBH_MSC_SCSI_RequestSense+0x2c>
 800b27c:	2b02      	cmp	r3, #2
 800b27e:	d03d      	beq.n	800b2fc <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800b280:	e05d      	b.n	800b33e <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800b282:	693b      	ldr	r3, [r7, #16]
 800b284:	220e      	movs	r2, #14
 800b286:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800b288:	693b      	ldr	r3, [r7, #16]
 800b28a:	2280      	movs	r2, #128	; 0x80
 800b28c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800b290:	693b      	ldr	r3, [r7, #16]
 800b292:	220a      	movs	r2, #10
 800b294:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800b298:	693b      	ldr	r3, [r7, #16]
 800b29a:	3363      	adds	r3, #99	; 0x63
 800b29c:	2210      	movs	r2, #16
 800b29e:	2100      	movs	r1, #0
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	f002 f95b 	bl	800d55c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800b2a6:	693b      	ldr	r3, [r7, #16]
 800b2a8:	2203      	movs	r2, #3
 800b2aa:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800b2ae:	7afb      	ldrb	r3, [r7, #11]
 800b2b0:	015b      	lsls	r3, r3, #5
 800b2b2:	b2da      	uxtb	r2, r3
 800b2b4:	693b      	ldr	r3, [r7, #16]
 800b2b6:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800b2ba:	693b      	ldr	r3, [r7, #16]
 800b2bc:	2200      	movs	r2, #0
 800b2be:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800b2c2:	693b      	ldr	r3, [r7, #16]
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800b2ca:	693b      	ldr	r3, [r7, #16]
 800b2cc:	220e      	movs	r2, #14
 800b2ce:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800b2d2:	693b      	ldr	r3, [r7, #16]
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b2da:	693b      	ldr	r3, [r7, #16]
 800b2dc:	2201      	movs	r2, #1
 800b2de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b2e2:	693b      	ldr	r3, [r7, #16]
 800b2e4:	2202      	movs	r2, #2
 800b2e6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800b2ea:	693b      	ldr	r3, [r7, #16]
 800b2ec:	f103 0210 	add.w	r2, r3, #16
 800b2f0:	693b      	ldr	r3, [r7, #16]
 800b2f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800b2f6:	2301      	movs	r3, #1
 800b2f8:	75fb      	strb	r3, [r7, #23]
      break;
 800b2fa:	e020      	b.n	800b33e <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b2fc:	7afb      	ldrb	r3, [r7, #11]
 800b2fe:	4619      	mov	r1, r3
 800b300:	68f8      	ldr	r0, [r7, #12]
 800b302:	f7ff fc07 	bl	800ab14 <USBH_MSC_BOT_Process>
 800b306:	4603      	mov	r3, r0
 800b308:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800b30a:	7dfb      	ldrb	r3, [r7, #23]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d115      	bne.n	800b33c <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800b310:	693b      	ldr	r3, [r7, #16]
 800b312:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b316:	3302      	adds	r3, #2
 800b318:	781b      	ldrb	r3, [r3, #0]
 800b31a:	f003 030f 	and.w	r3, r3, #15
 800b31e:	b2da      	uxtb	r2, r3
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800b324:	693b      	ldr	r3, [r7, #16]
 800b326:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b32a:	7b1a      	ldrb	r2, [r3, #12]
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800b330:	693b      	ldr	r3, [r7, #16]
 800b332:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b336:	7b5a      	ldrb	r2, [r3, #13]
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	709a      	strb	r2, [r3, #2]
      break;
 800b33c:	bf00      	nop
  }

  return error;
 800b33e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b340:	4618      	mov	r0, r3
 800b342:	3718      	adds	r7, #24
 800b344:	46bd      	mov	sp, r7
 800b346:	bd80      	pop	{r7, pc}

0800b348 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b086      	sub	sp, #24
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	60f8      	str	r0, [r7, #12]
 800b350:	607a      	str	r2, [r7, #4]
 800b352:	603b      	str	r3, [r7, #0]
 800b354:	460b      	mov	r3, r1
 800b356:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800b358:	2302      	movs	r3, #2
 800b35a:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b362:	69db      	ldr	r3, [r3, #28]
 800b364:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800b366:	693b      	ldr	r3, [r7, #16]
 800b368:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800b36c:	2b01      	cmp	r3, #1
 800b36e:	d002      	beq.n	800b376 <USBH_MSC_SCSI_Write+0x2e>
 800b370:	2b02      	cmp	r3, #2
 800b372:	d047      	beq.n	800b404 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800b374:	e04e      	b.n	800b414 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800b376:	693b      	ldr	r3, [r7, #16]
 800b378:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800b37c:	461a      	mov	r2, r3
 800b37e:	6a3b      	ldr	r3, [r7, #32]
 800b380:	fb03 f202 	mul.w	r2, r3, r2
 800b384:	693b      	ldr	r3, [r7, #16]
 800b386:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800b388:	693b      	ldr	r3, [r7, #16]
 800b38a:	2200      	movs	r2, #0
 800b38c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800b390:	693b      	ldr	r3, [r7, #16]
 800b392:	220a      	movs	r2, #10
 800b394:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800b398:	693b      	ldr	r3, [r7, #16]
 800b39a:	3363      	adds	r3, #99	; 0x63
 800b39c:	2210      	movs	r2, #16
 800b39e:	2100      	movs	r1, #0
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	f002 f8db 	bl	800d55c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800b3a6:	693b      	ldr	r3, [r7, #16]
 800b3a8:	222a      	movs	r2, #42	; 0x2a
 800b3aa:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800b3ae:	79fa      	ldrb	r2, [r7, #7]
 800b3b0:	693b      	ldr	r3, [r7, #16]
 800b3b2:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800b3b6:	79ba      	ldrb	r2, [r7, #6]
 800b3b8:	693b      	ldr	r3, [r7, #16]
 800b3ba:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800b3be:	797a      	ldrb	r2, [r7, #5]
 800b3c0:	693b      	ldr	r3, [r7, #16]
 800b3c2:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800b3c6:	1d3b      	adds	r3, r7, #4
 800b3c8:	781a      	ldrb	r2, [r3, #0]
 800b3ca:	693b      	ldr	r3, [r7, #16]
 800b3cc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800b3d0:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800b3d4:	693b      	ldr	r3, [r7, #16]
 800b3d6:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800b3da:	f107 0320 	add.w	r3, r7, #32
 800b3de:	781a      	ldrb	r2, [r3, #0]
 800b3e0:	693b      	ldr	r3, [r7, #16]
 800b3e2:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b3e6:	693b      	ldr	r3, [r7, #16]
 800b3e8:	2201      	movs	r2, #1
 800b3ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b3ee:	693b      	ldr	r3, [r7, #16]
 800b3f0:	2202      	movs	r2, #2
 800b3f2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800b3f6:	693b      	ldr	r3, [r7, #16]
 800b3f8:	683a      	ldr	r2, [r7, #0]
 800b3fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800b3fe:	2301      	movs	r3, #1
 800b400:	75fb      	strb	r3, [r7, #23]
      break;
 800b402:	e007      	b.n	800b414 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b404:	7afb      	ldrb	r3, [r7, #11]
 800b406:	4619      	mov	r1, r3
 800b408:	68f8      	ldr	r0, [r7, #12]
 800b40a:	f7ff fb83 	bl	800ab14 <USBH_MSC_BOT_Process>
 800b40e:	4603      	mov	r3, r0
 800b410:	75fb      	strb	r3, [r7, #23]
      break;
 800b412:	bf00      	nop
  }

  return error;
 800b414:	7dfb      	ldrb	r3, [r7, #23]
}
 800b416:	4618      	mov	r0, r3
 800b418:	3718      	adds	r7, #24
 800b41a:	46bd      	mov	sp, r7
 800b41c:	bd80      	pop	{r7, pc}

0800b41e <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800b41e:	b580      	push	{r7, lr}
 800b420:	b086      	sub	sp, #24
 800b422:	af00      	add	r7, sp, #0
 800b424:	60f8      	str	r0, [r7, #12]
 800b426:	607a      	str	r2, [r7, #4]
 800b428:	603b      	str	r3, [r7, #0]
 800b42a:	460b      	mov	r3, r1
 800b42c:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800b42e:	2302      	movs	r3, #2
 800b430:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b438:	69db      	ldr	r3, [r3, #28]
 800b43a:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800b43c:	693b      	ldr	r3, [r7, #16]
 800b43e:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800b442:	2b01      	cmp	r3, #1
 800b444:	d002      	beq.n	800b44c <USBH_MSC_SCSI_Read+0x2e>
 800b446:	2b02      	cmp	r3, #2
 800b448:	d047      	beq.n	800b4da <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800b44a:	e04e      	b.n	800b4ea <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800b44c:	693b      	ldr	r3, [r7, #16]
 800b44e:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800b452:	461a      	mov	r2, r3
 800b454:	6a3b      	ldr	r3, [r7, #32]
 800b456:	fb03 f202 	mul.w	r2, r3, r2
 800b45a:	693b      	ldr	r3, [r7, #16]
 800b45c:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800b45e:	693b      	ldr	r3, [r7, #16]
 800b460:	2280      	movs	r2, #128	; 0x80
 800b462:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800b466:	693b      	ldr	r3, [r7, #16]
 800b468:	220a      	movs	r2, #10
 800b46a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800b46e:	693b      	ldr	r3, [r7, #16]
 800b470:	3363      	adds	r3, #99	; 0x63
 800b472:	2210      	movs	r2, #16
 800b474:	2100      	movs	r1, #0
 800b476:	4618      	mov	r0, r3
 800b478:	f002 f870 	bl	800d55c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800b47c:	693b      	ldr	r3, [r7, #16]
 800b47e:	2228      	movs	r2, #40	; 0x28
 800b480:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800b484:	79fa      	ldrb	r2, [r7, #7]
 800b486:	693b      	ldr	r3, [r7, #16]
 800b488:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800b48c:	79ba      	ldrb	r2, [r7, #6]
 800b48e:	693b      	ldr	r3, [r7, #16]
 800b490:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800b494:	797a      	ldrb	r2, [r7, #5]
 800b496:	693b      	ldr	r3, [r7, #16]
 800b498:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800b49c:	1d3b      	adds	r3, r7, #4
 800b49e:	781a      	ldrb	r2, [r3, #0]
 800b4a0:	693b      	ldr	r3, [r7, #16]
 800b4a2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800b4a6:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800b4aa:	693b      	ldr	r3, [r7, #16]
 800b4ac:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800b4b0:	f107 0320 	add.w	r3, r7, #32
 800b4b4:	781a      	ldrb	r2, [r3, #0]
 800b4b6:	693b      	ldr	r3, [r7, #16]
 800b4b8:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b4bc:	693b      	ldr	r3, [r7, #16]
 800b4be:	2201      	movs	r2, #1
 800b4c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b4c4:	693b      	ldr	r3, [r7, #16]
 800b4c6:	2202      	movs	r2, #2
 800b4c8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800b4cc:	693b      	ldr	r3, [r7, #16]
 800b4ce:	683a      	ldr	r2, [r7, #0]
 800b4d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800b4d4:	2301      	movs	r3, #1
 800b4d6:	75fb      	strb	r3, [r7, #23]
      break;
 800b4d8:	e007      	b.n	800b4ea <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b4da:	7afb      	ldrb	r3, [r7, #11]
 800b4dc:	4619      	mov	r1, r3
 800b4de:	68f8      	ldr	r0, [r7, #12]
 800b4e0:	f7ff fb18 	bl	800ab14 <USBH_MSC_BOT_Process>
 800b4e4:	4603      	mov	r3, r0
 800b4e6:	75fb      	strb	r3, [r7, #23]
      break;
 800b4e8:	bf00      	nop
  }

  return error;
 800b4ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	3718      	adds	r7, #24
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	bd80      	pop	{r7, pc}

0800b4f4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b084      	sub	sp, #16
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	60f8      	str	r0, [r7, #12]
 800b4fc:	60b9      	str	r1, [r7, #8]
 800b4fe:	4613      	mov	r3, r2
 800b500:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d101      	bne.n	800b50c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800b508:	2302      	movs	r3, #2
 800b50a:	e029      	b.n	800b560 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	79fa      	ldrb	r2, [r7, #7]
 800b510:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	2200      	movs	r2, #0
 800b518:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	2200      	movs	r2, #0
 800b520:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800b524:	68f8      	ldr	r0, [r7, #12]
 800b526:	f000 f81f 	bl	800b568 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	2200      	movs	r2, #0
 800b52e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	2200      	movs	r2, #0
 800b536:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	2200      	movs	r2, #0
 800b53e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	2200      	movs	r2, #0
 800b546:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800b54a:	68bb      	ldr	r3, [r7, #8]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d003      	beq.n	800b558 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	68ba      	ldr	r2, [r7, #8]
 800b554:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800b558:	68f8      	ldr	r0, [r7, #12]
 800b55a:	f001 fd89 	bl	800d070 <USBH_LL_Init>

  return USBH_OK;
 800b55e:	2300      	movs	r3, #0
}
 800b560:	4618      	mov	r0, r3
 800b562:	3710      	adds	r7, #16
 800b564:	46bd      	mov	sp, r7
 800b566:	bd80      	pop	{r7, pc}

0800b568 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800b568:	b480      	push	{r7}
 800b56a:	b085      	sub	sp, #20
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800b570:	2300      	movs	r3, #0
 800b572:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b574:	2300      	movs	r3, #0
 800b576:	60fb      	str	r3, [r7, #12]
 800b578:	e009      	b.n	800b58e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800b57a:	687a      	ldr	r2, [r7, #4]
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	33e0      	adds	r3, #224	; 0xe0
 800b580:	009b      	lsls	r3, r3, #2
 800b582:	4413      	add	r3, r2
 800b584:	2200      	movs	r2, #0
 800b586:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	3301      	adds	r3, #1
 800b58c:	60fb      	str	r3, [r7, #12]
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	2b0f      	cmp	r3, #15
 800b592:	d9f2      	bls.n	800b57a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b594:	2300      	movs	r3, #0
 800b596:	60fb      	str	r3, [r7, #12]
 800b598:	e009      	b.n	800b5ae <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800b59a:	687a      	ldr	r2, [r7, #4]
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	4413      	add	r3, r2
 800b5a0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	3301      	adds	r3, #1
 800b5ac:	60fb      	str	r3, [r7, #12]
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b5b4:	d3f1      	bcc.n	800b59a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	2200      	movs	r2, #0
 800b5c0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	2201      	movs	r2, #1
 800b5c6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2201      	movs	r2, #1
 800b5d4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	2240      	movs	r2, #64	; 0x40
 800b5da:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	2200      	movs	r2, #0
 800b5e0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	2200      	movs	r2, #0
 800b5e6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	2201      	movs	r2, #1
 800b5ee:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800b602:	2300      	movs	r3, #0
}
 800b604:	4618      	mov	r0, r3
 800b606:	3714      	adds	r7, #20
 800b608:	46bd      	mov	sp, r7
 800b60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60e:	4770      	bx	lr

0800b610 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800b610:	b480      	push	{r7}
 800b612:	b085      	sub	sp, #20
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
 800b618:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800b61a:	2300      	movs	r3, #0
 800b61c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800b61e:	683b      	ldr	r3, [r7, #0]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d016      	beq.n	800b652 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d10e      	bne.n	800b64c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b634:	1c59      	adds	r1, r3, #1
 800b636:	687a      	ldr	r2, [r7, #4]
 800b638:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800b63c:	687a      	ldr	r2, [r7, #4]
 800b63e:	33de      	adds	r3, #222	; 0xde
 800b640:	6839      	ldr	r1, [r7, #0]
 800b642:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800b646:	2300      	movs	r3, #0
 800b648:	73fb      	strb	r3, [r7, #15]
 800b64a:	e004      	b.n	800b656 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800b64c:	2302      	movs	r3, #2
 800b64e:	73fb      	strb	r3, [r7, #15]
 800b650:	e001      	b.n	800b656 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800b652:	2302      	movs	r3, #2
 800b654:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b656:	7bfb      	ldrb	r3, [r7, #15]
}
 800b658:	4618      	mov	r0, r3
 800b65a:	3714      	adds	r7, #20
 800b65c:	46bd      	mov	sp, r7
 800b65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b662:	4770      	bx	lr

0800b664 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800b664:	b480      	push	{r7}
 800b666:	b085      	sub	sp, #20
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
 800b66c:	460b      	mov	r3, r1
 800b66e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800b670:	2300      	movs	r3, #0
 800b672:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800b67a:	78fa      	ldrb	r2, [r7, #3]
 800b67c:	429a      	cmp	r2, r3
 800b67e:	d204      	bcs.n	800b68a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	78fa      	ldrb	r2, [r7, #3]
 800b684:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800b688:	e001      	b.n	800b68e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800b68a:	2302      	movs	r3, #2
 800b68c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b68e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b690:	4618      	mov	r0, r3
 800b692:	3714      	adds	r7, #20
 800b694:	46bd      	mov	sp, r7
 800b696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69a:	4770      	bx	lr

0800b69c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800b69c:	b480      	push	{r7}
 800b69e:	b087      	sub	sp, #28
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
 800b6a4:	4608      	mov	r0, r1
 800b6a6:	4611      	mov	r1, r2
 800b6a8:	461a      	mov	r2, r3
 800b6aa:	4603      	mov	r3, r0
 800b6ac:	70fb      	strb	r3, [r7, #3]
 800b6ae:	460b      	mov	r3, r1
 800b6b0:	70bb      	strb	r3, [r7, #2]
 800b6b2:	4613      	mov	r3, r2
 800b6b4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b6c4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b6c6:	e025      	b.n	800b714 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800b6c8:	7dfb      	ldrb	r3, [r7, #23]
 800b6ca:	221a      	movs	r2, #26
 800b6cc:	fb02 f303 	mul.w	r3, r2, r3
 800b6d0:	3308      	adds	r3, #8
 800b6d2:	68fa      	ldr	r2, [r7, #12]
 800b6d4:	4413      	add	r3, r2
 800b6d6:	3302      	adds	r3, #2
 800b6d8:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b6da:	693b      	ldr	r3, [r7, #16]
 800b6dc:	795b      	ldrb	r3, [r3, #5]
 800b6de:	78fa      	ldrb	r2, [r7, #3]
 800b6e0:	429a      	cmp	r2, r3
 800b6e2:	d002      	beq.n	800b6ea <USBH_FindInterface+0x4e>
 800b6e4:	78fb      	ldrb	r3, [r7, #3]
 800b6e6:	2bff      	cmp	r3, #255	; 0xff
 800b6e8:	d111      	bne.n	800b70e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b6ea:	693b      	ldr	r3, [r7, #16]
 800b6ec:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b6ee:	78ba      	ldrb	r2, [r7, #2]
 800b6f0:	429a      	cmp	r2, r3
 800b6f2:	d002      	beq.n	800b6fa <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b6f4:	78bb      	ldrb	r3, [r7, #2]
 800b6f6:	2bff      	cmp	r3, #255	; 0xff
 800b6f8:	d109      	bne.n	800b70e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b6fa:	693b      	ldr	r3, [r7, #16]
 800b6fc:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b6fe:	787a      	ldrb	r2, [r7, #1]
 800b700:	429a      	cmp	r2, r3
 800b702:	d002      	beq.n	800b70a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b704:	787b      	ldrb	r3, [r7, #1]
 800b706:	2bff      	cmp	r3, #255	; 0xff
 800b708:	d101      	bne.n	800b70e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800b70a:	7dfb      	ldrb	r3, [r7, #23]
 800b70c:	e006      	b.n	800b71c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800b70e:	7dfb      	ldrb	r3, [r7, #23]
 800b710:	3301      	adds	r3, #1
 800b712:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b714:	7dfb      	ldrb	r3, [r7, #23]
 800b716:	2b01      	cmp	r3, #1
 800b718:	d9d6      	bls.n	800b6c8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800b71a:	23ff      	movs	r3, #255	; 0xff
}
 800b71c:	4618      	mov	r0, r3
 800b71e:	371c      	adds	r7, #28
 800b720:	46bd      	mov	sp, r7
 800b722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b726:	4770      	bx	lr

0800b728 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	b082      	sub	sp, #8
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800b730:	6878      	ldr	r0, [r7, #4]
 800b732:	f001 fce3 	bl	800d0fc <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800b736:	2101      	movs	r1, #1
 800b738:	6878      	ldr	r0, [r7, #4]
 800b73a:	f001 fdfc 	bl	800d336 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800b73e:	2300      	movs	r3, #0
}
 800b740:	4618      	mov	r0, r3
 800b742:	3708      	adds	r7, #8
 800b744:	46bd      	mov	sp, r7
 800b746:	bd80      	pop	{r7, pc}

0800b748 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b088      	sub	sp, #32
 800b74c:	af04      	add	r7, sp, #16
 800b74e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800b750:	2302      	movs	r3, #2
 800b752:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800b754:	2300      	movs	r3, #0
 800b756:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800b75e:	b2db      	uxtb	r3, r3
 800b760:	2b01      	cmp	r3, #1
 800b762:	d102      	bne.n	800b76a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2203      	movs	r2, #3
 800b768:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	781b      	ldrb	r3, [r3, #0]
 800b76e:	b2db      	uxtb	r3, r3
 800b770:	2b0b      	cmp	r3, #11
 800b772:	f200 81be 	bhi.w	800baf2 <USBH_Process+0x3aa>
 800b776:	a201      	add	r2, pc, #4	; (adr r2, 800b77c <USBH_Process+0x34>)
 800b778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b77c:	0800b7ad 	.word	0x0800b7ad
 800b780:	0800b7df 	.word	0x0800b7df
 800b784:	0800b847 	.word	0x0800b847
 800b788:	0800ba8d 	.word	0x0800ba8d
 800b78c:	0800baf3 	.word	0x0800baf3
 800b790:	0800b8eb 	.word	0x0800b8eb
 800b794:	0800ba33 	.word	0x0800ba33
 800b798:	0800b921 	.word	0x0800b921
 800b79c:	0800b941 	.word	0x0800b941
 800b7a0:	0800b961 	.word	0x0800b961
 800b7a4:	0800b9a5 	.word	0x0800b9a5
 800b7a8:	0800ba75 	.word	0x0800ba75
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b7b2:	b2db      	uxtb	r3, r3
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	f000 819e 	beq.w	800baf6 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	2201      	movs	r2, #1
 800b7be:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800b7c0:	20c8      	movs	r0, #200	; 0xc8
 800b7c2:	f001 fe2f 	bl	800d424 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800b7c6:	6878      	ldr	r0, [r7, #4]
 800b7c8:	f001 fcf5 	bl	800d1b6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	2200      	movs	r2, #0
 800b7d0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b7dc:	e18b      	b.n	800baf6 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800b7e4:	2b01      	cmp	r3, #1
 800b7e6:	d107      	bne.n	800b7f8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2202      	movs	r2, #2
 800b7f4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b7f6:	e18d      	b.n	800bb14 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b7fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b802:	d914      	bls.n	800b82e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800b80a:	3301      	adds	r3, #1
 800b80c:	b2da      	uxtb	r2, r3
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800b81a:	2b03      	cmp	r3, #3
 800b81c:	d903      	bls.n	800b826 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	220d      	movs	r2, #13
 800b822:	701a      	strb	r2, [r3, #0]
      break;
 800b824:	e176      	b.n	800bb14 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	2200      	movs	r2, #0
 800b82a:	701a      	strb	r2, [r3, #0]
      break;
 800b82c:	e172      	b.n	800bb14 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b834:	f103 020a 	add.w	r2, r3, #10
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800b83e:	200a      	movs	r0, #10
 800b840:	f001 fdf0 	bl	800d424 <USBH_Delay>
      break;
 800b844:	e166      	b.n	800bb14 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d005      	beq.n	800b85c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b856:	2104      	movs	r1, #4
 800b858:	6878      	ldr	r0, [r7, #4]
 800b85a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800b85c:	2064      	movs	r0, #100	; 0x64
 800b85e:	f001 fde1 	bl	800d424 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800b862:	6878      	ldr	r0, [r7, #4]
 800b864:	f001 fc80 	bl	800d168 <USBH_LL_GetSpeed>
 800b868:	4603      	mov	r3, r0
 800b86a:	461a      	mov	r2, r3
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	2205      	movs	r2, #5
 800b876:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800b878:	2100      	movs	r1, #0
 800b87a:	6878      	ldr	r0, [r7, #4]
 800b87c:	f001 fa29 	bl	800ccd2 <USBH_AllocPipe>
 800b880:	4603      	mov	r3, r0
 800b882:	461a      	mov	r2, r3
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800b888:	2180      	movs	r1, #128	; 0x80
 800b88a:	6878      	ldr	r0, [r7, #4]
 800b88c:	f001 fa21 	bl	800ccd2 <USBH_AllocPipe>
 800b890:	4603      	mov	r3, r0
 800b892:	461a      	mov	r2, r3
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	7919      	ldrb	r1, [r3, #4]
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b8a8:	687a      	ldr	r2, [r7, #4]
 800b8aa:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b8ac:	b292      	uxth	r2, r2
 800b8ae:	9202      	str	r2, [sp, #8]
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	9201      	str	r2, [sp, #4]
 800b8b4:	9300      	str	r3, [sp, #0]
 800b8b6:	4603      	mov	r3, r0
 800b8b8:	2280      	movs	r2, #128	; 0x80
 800b8ba:	6878      	ldr	r0, [r7, #4]
 800b8bc:	f001 f9da 	bl	800cc74 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	7959      	ldrb	r1, [r3, #5]
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b8d0:	687a      	ldr	r2, [r7, #4]
 800b8d2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b8d4:	b292      	uxth	r2, r2
 800b8d6:	9202      	str	r2, [sp, #8]
 800b8d8:	2200      	movs	r2, #0
 800b8da:	9201      	str	r2, [sp, #4]
 800b8dc:	9300      	str	r3, [sp, #0]
 800b8de:	4603      	mov	r3, r0
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	6878      	ldr	r0, [r7, #4]
 800b8e4:	f001 f9c6 	bl	800cc74 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b8e8:	e114      	b.n	800bb14 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800b8ea:	6878      	ldr	r0, [r7, #4]
 800b8ec:	f000 f918 	bl	800bb20 <USBH_HandleEnum>
 800b8f0:	4603      	mov	r3, r0
 800b8f2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800b8f4:	7bbb      	ldrb	r3, [r7, #14]
 800b8f6:	b2db      	uxtb	r3, r3
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	f040 80fe 	bne.w	800bafa <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	2200      	movs	r2, #0
 800b902:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800b90c:	2b01      	cmp	r3, #1
 800b90e:	d103      	bne.n	800b918 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	2208      	movs	r2, #8
 800b914:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b916:	e0f0      	b.n	800bafa <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	2207      	movs	r2, #7
 800b91c:	701a      	strb	r2, [r3, #0]
      break;
 800b91e:	e0ec      	b.n	800bafa <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b926:	2b00      	cmp	r3, #0
 800b928:	f000 80e9 	beq.w	800bafe <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b932:	2101      	movs	r1, #1
 800b934:	6878      	ldr	r0, [r7, #4]
 800b936:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	2208      	movs	r2, #8
 800b93c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800b93e:	e0de      	b.n	800bafe <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800b946:	b29b      	uxth	r3, r3
 800b948:	4619      	mov	r1, r3
 800b94a:	6878      	ldr	r0, [r7, #4]
 800b94c:	f000 fc2c 	bl	800c1a8 <USBH_SetCfg>
 800b950:	4603      	mov	r3, r0
 800b952:	2b00      	cmp	r3, #0
 800b954:	f040 80d5 	bne.w	800bb02 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	2209      	movs	r2, #9
 800b95c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b95e:	e0d0      	b.n	800bb02 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800b966:	f003 0320 	and.w	r3, r3, #32
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d016      	beq.n	800b99c <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800b96e:	2101      	movs	r1, #1
 800b970:	6878      	ldr	r0, [r7, #4]
 800b972:	f000 fc3c 	bl	800c1ee <USBH_SetFeature>
 800b976:	4603      	mov	r3, r0
 800b978:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800b97a:	7bbb      	ldrb	r3, [r7, #14]
 800b97c:	b2db      	uxtb	r3, r3
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d103      	bne.n	800b98a <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	220a      	movs	r2, #10
 800b986:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b988:	e0bd      	b.n	800bb06 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800b98a:	7bbb      	ldrb	r3, [r7, #14]
 800b98c:	b2db      	uxtb	r3, r3
 800b98e:	2b03      	cmp	r3, #3
 800b990:	f040 80b9 	bne.w	800bb06 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	220a      	movs	r2, #10
 800b998:	701a      	strb	r2, [r3, #0]
      break;
 800b99a:	e0b4      	b.n	800bb06 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	220a      	movs	r2, #10
 800b9a0:	701a      	strb	r2, [r3, #0]
      break;
 800b9a2:	e0b0      	b.n	800bb06 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	f000 80ad 	beq.w	800bb0a <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	73fb      	strb	r3, [r7, #15]
 800b9bc:	e016      	b.n	800b9ec <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800b9be:	7bfa      	ldrb	r2, [r7, #15]
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	32de      	adds	r2, #222	; 0xde
 800b9c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9c8:	791a      	ldrb	r2, [r3, #4]
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800b9d0:	429a      	cmp	r2, r3
 800b9d2:	d108      	bne.n	800b9e6 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800b9d4:	7bfa      	ldrb	r2, [r7, #15]
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	32de      	adds	r2, #222	; 0xde
 800b9da:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800b9e4:	e005      	b.n	800b9f2 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b9e6:	7bfb      	ldrb	r3, [r7, #15]
 800b9e8:	3301      	adds	r3, #1
 800b9ea:	73fb      	strb	r3, [r7, #15]
 800b9ec:	7bfb      	ldrb	r3, [r7, #15]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d0e5      	beq.n	800b9be <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d016      	beq.n	800ba2a <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ba02:	689b      	ldr	r3, [r3, #8]
 800ba04:	6878      	ldr	r0, [r7, #4]
 800ba06:	4798      	blx	r3
 800ba08:	4603      	mov	r3, r0
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d109      	bne.n	800ba22 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	2206      	movs	r2, #6
 800ba12:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ba1a:	2103      	movs	r1, #3
 800ba1c:	6878      	ldr	r0, [r7, #4]
 800ba1e:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ba20:	e073      	b.n	800bb0a <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	220d      	movs	r2, #13
 800ba26:	701a      	strb	r2, [r3, #0]
      break;
 800ba28:	e06f      	b.n	800bb0a <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	220d      	movs	r2, #13
 800ba2e:	701a      	strb	r2, [r3, #0]
      break;
 800ba30:	e06b      	b.n	800bb0a <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d017      	beq.n	800ba6c <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ba42:	691b      	ldr	r3, [r3, #16]
 800ba44:	6878      	ldr	r0, [r7, #4]
 800ba46:	4798      	blx	r3
 800ba48:	4603      	mov	r3, r0
 800ba4a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800ba4c:	7bbb      	ldrb	r3, [r7, #14]
 800ba4e:	b2db      	uxtb	r3, r3
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d103      	bne.n	800ba5c <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	220b      	movs	r2, #11
 800ba58:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ba5a:	e058      	b.n	800bb0e <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800ba5c:	7bbb      	ldrb	r3, [r7, #14]
 800ba5e:	b2db      	uxtb	r3, r3
 800ba60:	2b02      	cmp	r3, #2
 800ba62:	d154      	bne.n	800bb0e <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	220d      	movs	r2, #13
 800ba68:	701a      	strb	r2, [r3, #0]
      break;
 800ba6a:	e050      	b.n	800bb0e <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	220d      	movs	r2, #13
 800ba70:	701a      	strb	r2, [r3, #0]
      break;
 800ba72:	e04c      	b.n	800bb0e <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d049      	beq.n	800bb12 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ba84:	695b      	ldr	r3, [r3, #20]
 800ba86:	6878      	ldr	r0, [r7, #4]
 800ba88:	4798      	blx	r3
      }
      break;
 800ba8a:	e042      	b.n	800bb12 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	2200      	movs	r2, #0
 800ba90:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800ba94:	6878      	ldr	r0, [r7, #4]
 800ba96:	f7ff fd67 	bl	800b568 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d009      	beq.n	800bab8 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800baaa:	68db      	ldr	r3, [r3, #12]
 800baac:	6878      	ldr	r0, [r7, #4]
 800baae:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2200      	movs	r2, #0
 800bab4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d005      	beq.n	800bace <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bac8:	2105      	movs	r1, #5
 800baca:	6878      	ldr	r0, [r7, #4]
 800bacc:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800bad4:	b2db      	uxtb	r3, r3
 800bad6:	2b01      	cmp	r3, #1
 800bad8:	d107      	bne.n	800baea <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	2200      	movs	r2, #0
 800bade:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800bae2:	6878      	ldr	r0, [r7, #4]
 800bae4:	f7ff fe20 	bl	800b728 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800bae8:	e014      	b.n	800bb14 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800baea:	6878      	ldr	r0, [r7, #4]
 800baec:	f001 fb06 	bl	800d0fc <USBH_LL_Start>
      break;
 800baf0:	e010      	b.n	800bb14 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800baf2:	bf00      	nop
 800baf4:	e00e      	b.n	800bb14 <USBH_Process+0x3cc>
      break;
 800baf6:	bf00      	nop
 800baf8:	e00c      	b.n	800bb14 <USBH_Process+0x3cc>
      break;
 800bafa:	bf00      	nop
 800bafc:	e00a      	b.n	800bb14 <USBH_Process+0x3cc>
    break;
 800bafe:	bf00      	nop
 800bb00:	e008      	b.n	800bb14 <USBH_Process+0x3cc>
      break;
 800bb02:	bf00      	nop
 800bb04:	e006      	b.n	800bb14 <USBH_Process+0x3cc>
      break;
 800bb06:	bf00      	nop
 800bb08:	e004      	b.n	800bb14 <USBH_Process+0x3cc>
      break;
 800bb0a:	bf00      	nop
 800bb0c:	e002      	b.n	800bb14 <USBH_Process+0x3cc>
      break;
 800bb0e:	bf00      	nop
 800bb10:	e000      	b.n	800bb14 <USBH_Process+0x3cc>
      break;
 800bb12:	bf00      	nop
  }
  return USBH_OK;
 800bb14:	2300      	movs	r3, #0
}
 800bb16:	4618      	mov	r0, r3
 800bb18:	3710      	adds	r7, #16
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	bd80      	pop	{r7, pc}
 800bb1e:	bf00      	nop

0800bb20 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b088      	sub	sp, #32
 800bb24:	af04      	add	r7, sp, #16
 800bb26:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800bb28:	2301      	movs	r3, #1
 800bb2a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800bb2c:	2301      	movs	r3, #1
 800bb2e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	785b      	ldrb	r3, [r3, #1]
 800bb34:	2b07      	cmp	r3, #7
 800bb36:	f200 81c1 	bhi.w	800bebc <USBH_HandleEnum+0x39c>
 800bb3a:	a201      	add	r2, pc, #4	; (adr r2, 800bb40 <USBH_HandleEnum+0x20>)
 800bb3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb40:	0800bb61 	.word	0x0800bb61
 800bb44:	0800bc1f 	.word	0x0800bc1f
 800bb48:	0800bc89 	.word	0x0800bc89
 800bb4c:	0800bd17 	.word	0x0800bd17
 800bb50:	0800bd81 	.word	0x0800bd81
 800bb54:	0800bdf1 	.word	0x0800bdf1
 800bb58:	0800be37 	.word	0x0800be37
 800bb5c:	0800be7d 	.word	0x0800be7d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800bb60:	2108      	movs	r1, #8
 800bb62:	6878      	ldr	r0, [r7, #4]
 800bb64:	f000 fa50 	bl	800c008 <USBH_Get_DevDesc>
 800bb68:	4603      	mov	r3, r0
 800bb6a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bb6c:	7bbb      	ldrb	r3, [r7, #14]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d130      	bne.n	800bbd4 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	2201      	movs	r2, #1
 800bb80:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	7919      	ldrb	r1, [r3, #4]
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800bb92:	687a      	ldr	r2, [r7, #4]
 800bb94:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800bb96:	b292      	uxth	r2, r2
 800bb98:	9202      	str	r2, [sp, #8]
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	9201      	str	r2, [sp, #4]
 800bb9e:	9300      	str	r3, [sp, #0]
 800bba0:	4603      	mov	r3, r0
 800bba2:	2280      	movs	r2, #128	; 0x80
 800bba4:	6878      	ldr	r0, [r7, #4]
 800bba6:	f001 f865 	bl	800cc74 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	7959      	ldrb	r1, [r3, #5]
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800bbba:	687a      	ldr	r2, [r7, #4]
 800bbbc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800bbbe:	b292      	uxth	r2, r2
 800bbc0:	9202      	str	r2, [sp, #8]
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	9201      	str	r2, [sp, #4]
 800bbc6:	9300      	str	r3, [sp, #0]
 800bbc8:	4603      	mov	r3, r0
 800bbca:	2200      	movs	r2, #0
 800bbcc:	6878      	ldr	r0, [r7, #4]
 800bbce:	f001 f851 	bl	800cc74 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800bbd2:	e175      	b.n	800bec0 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bbd4:	7bbb      	ldrb	r3, [r7, #14]
 800bbd6:	2b03      	cmp	r3, #3
 800bbd8:	f040 8172 	bne.w	800bec0 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bbe2:	3301      	adds	r3, #1
 800bbe4:	b2da      	uxtb	r2, r3
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bbf2:	2b03      	cmp	r3, #3
 800bbf4:	d903      	bls.n	800bbfe <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	220d      	movs	r2, #13
 800bbfa:	701a      	strb	r2, [r3, #0]
      break;
 800bbfc:	e160      	b.n	800bec0 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	795b      	ldrb	r3, [r3, #5]
 800bc02:	4619      	mov	r1, r3
 800bc04:	6878      	ldr	r0, [r7, #4]
 800bc06:	f001 f885 	bl	800cd14 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	791b      	ldrb	r3, [r3, #4]
 800bc0e:	4619      	mov	r1, r3
 800bc10:	6878      	ldr	r0, [r7, #4]
 800bc12:	f001 f87f 	bl	800cd14 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	2200      	movs	r2, #0
 800bc1a:	701a      	strb	r2, [r3, #0]
      break;
 800bc1c:	e150      	b.n	800bec0 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800bc1e:	2112      	movs	r1, #18
 800bc20:	6878      	ldr	r0, [r7, #4]
 800bc22:	f000 f9f1 	bl	800c008 <USBH_Get_DevDesc>
 800bc26:	4603      	mov	r3, r0
 800bc28:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bc2a:	7bbb      	ldrb	r3, [r7, #14]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d103      	bne.n	800bc38 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	2202      	movs	r2, #2
 800bc34:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800bc36:	e145      	b.n	800bec4 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bc38:	7bbb      	ldrb	r3, [r7, #14]
 800bc3a:	2b03      	cmp	r3, #3
 800bc3c:	f040 8142 	bne.w	800bec4 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bc46:	3301      	adds	r3, #1
 800bc48:	b2da      	uxtb	r2, r3
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bc56:	2b03      	cmp	r3, #3
 800bc58:	d903      	bls.n	800bc62 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	220d      	movs	r2, #13
 800bc5e:	701a      	strb	r2, [r3, #0]
      break;
 800bc60:	e130      	b.n	800bec4 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	795b      	ldrb	r3, [r3, #5]
 800bc66:	4619      	mov	r1, r3
 800bc68:	6878      	ldr	r0, [r7, #4]
 800bc6a:	f001 f853 	bl	800cd14 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	791b      	ldrb	r3, [r3, #4]
 800bc72:	4619      	mov	r1, r3
 800bc74:	6878      	ldr	r0, [r7, #4]
 800bc76:	f001 f84d 	bl	800cd14 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	2200      	movs	r2, #0
 800bc84:	701a      	strb	r2, [r3, #0]
      break;
 800bc86:	e11d      	b.n	800bec4 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800bc88:	2101      	movs	r1, #1
 800bc8a:	6878      	ldr	r0, [r7, #4]
 800bc8c:	f000 fa68 	bl	800c160 <USBH_SetAddress>
 800bc90:	4603      	mov	r3, r0
 800bc92:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bc94:	7bbb      	ldrb	r3, [r7, #14]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d132      	bne.n	800bd00 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800bc9a:	2002      	movs	r0, #2
 800bc9c:	f001 fbc2 	bl	800d424 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	2201      	movs	r2, #1
 800bca4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	2203      	movs	r2, #3
 800bcac:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	7919      	ldrb	r1, [r3, #4]
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800bcbe:	687a      	ldr	r2, [r7, #4]
 800bcc0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800bcc2:	b292      	uxth	r2, r2
 800bcc4:	9202      	str	r2, [sp, #8]
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	9201      	str	r2, [sp, #4]
 800bcca:	9300      	str	r3, [sp, #0]
 800bccc:	4603      	mov	r3, r0
 800bcce:	2280      	movs	r2, #128	; 0x80
 800bcd0:	6878      	ldr	r0, [r7, #4]
 800bcd2:	f000 ffcf 	bl	800cc74 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	7959      	ldrb	r1, [r3, #5]
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800bce6:	687a      	ldr	r2, [r7, #4]
 800bce8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800bcea:	b292      	uxth	r2, r2
 800bcec:	9202      	str	r2, [sp, #8]
 800bcee:	2200      	movs	r2, #0
 800bcf0:	9201      	str	r2, [sp, #4]
 800bcf2:	9300      	str	r3, [sp, #0]
 800bcf4:	4603      	mov	r3, r0
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	6878      	ldr	r0, [r7, #4]
 800bcfa:	f000 ffbb 	bl	800cc74 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800bcfe:	e0e3      	b.n	800bec8 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bd00:	7bbb      	ldrb	r3, [r7, #14]
 800bd02:	2b03      	cmp	r3, #3
 800bd04:	f040 80e0 	bne.w	800bec8 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	220d      	movs	r2, #13
 800bd0c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	2200      	movs	r2, #0
 800bd12:	705a      	strb	r2, [r3, #1]
      break;
 800bd14:	e0d8      	b.n	800bec8 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800bd16:	2109      	movs	r1, #9
 800bd18:	6878      	ldr	r0, [r7, #4]
 800bd1a:	f000 f99d 	bl	800c058 <USBH_Get_CfgDesc>
 800bd1e:	4603      	mov	r3, r0
 800bd20:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bd22:	7bbb      	ldrb	r3, [r7, #14]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d103      	bne.n	800bd30 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	2204      	movs	r2, #4
 800bd2c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800bd2e:	e0cd      	b.n	800becc <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bd30:	7bbb      	ldrb	r3, [r7, #14]
 800bd32:	2b03      	cmp	r3, #3
 800bd34:	f040 80ca 	bne.w	800becc <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bd3e:	3301      	adds	r3, #1
 800bd40:	b2da      	uxtb	r2, r3
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bd4e:	2b03      	cmp	r3, #3
 800bd50:	d903      	bls.n	800bd5a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	220d      	movs	r2, #13
 800bd56:	701a      	strb	r2, [r3, #0]
      break;
 800bd58:	e0b8      	b.n	800becc <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	795b      	ldrb	r3, [r3, #5]
 800bd5e:	4619      	mov	r1, r3
 800bd60:	6878      	ldr	r0, [r7, #4]
 800bd62:	f000 ffd7 	bl	800cd14 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	791b      	ldrb	r3, [r3, #4]
 800bd6a:	4619      	mov	r1, r3
 800bd6c:	6878      	ldr	r0, [r7, #4]
 800bd6e:	f000 ffd1 	bl	800cd14 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	2200      	movs	r2, #0
 800bd76:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	701a      	strb	r2, [r3, #0]
      break;
 800bd7e:	e0a5      	b.n	800becc <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800bd86:	4619      	mov	r1, r3
 800bd88:	6878      	ldr	r0, [r7, #4]
 800bd8a:	f000 f965 	bl	800c058 <USBH_Get_CfgDesc>
 800bd8e:	4603      	mov	r3, r0
 800bd90:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bd92:	7bbb      	ldrb	r3, [r7, #14]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d103      	bne.n	800bda0 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	2205      	movs	r2, #5
 800bd9c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800bd9e:	e097      	b.n	800bed0 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bda0:	7bbb      	ldrb	r3, [r7, #14]
 800bda2:	2b03      	cmp	r3, #3
 800bda4:	f040 8094 	bne.w	800bed0 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bdae:	3301      	adds	r3, #1
 800bdb0:	b2da      	uxtb	r2, r3
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bdbe:	2b03      	cmp	r3, #3
 800bdc0:	d903      	bls.n	800bdca <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	220d      	movs	r2, #13
 800bdc6:	701a      	strb	r2, [r3, #0]
      break;
 800bdc8:	e082      	b.n	800bed0 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	795b      	ldrb	r3, [r3, #5]
 800bdce:	4619      	mov	r1, r3
 800bdd0:	6878      	ldr	r0, [r7, #4]
 800bdd2:	f000 ff9f 	bl	800cd14 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	791b      	ldrb	r3, [r3, #4]
 800bdda:	4619      	mov	r1, r3
 800bddc:	6878      	ldr	r0, [r7, #4]
 800bdde:	f000 ff99 	bl	800cd14 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	2200      	movs	r2, #0
 800bde6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	2200      	movs	r2, #0
 800bdec:	701a      	strb	r2, [r3, #0]
      break;
 800bdee:	e06f      	b.n	800bed0 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d019      	beq.n	800be2e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800be06:	23ff      	movs	r3, #255	; 0xff
 800be08:	6878      	ldr	r0, [r7, #4]
 800be0a:	f000 f949 	bl	800c0a0 <USBH_Get_StringDesc>
 800be0e:	4603      	mov	r3, r0
 800be10:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800be12:	7bbb      	ldrb	r3, [r7, #14]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d103      	bne.n	800be20 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	2206      	movs	r2, #6
 800be1c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800be1e:	e059      	b.n	800bed4 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800be20:	7bbb      	ldrb	r3, [r7, #14]
 800be22:	2b03      	cmp	r3, #3
 800be24:	d156      	bne.n	800bed4 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	2206      	movs	r2, #6
 800be2a:	705a      	strb	r2, [r3, #1]
      break;
 800be2c:	e052      	b.n	800bed4 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	2206      	movs	r2, #6
 800be32:	705a      	strb	r2, [r3, #1]
      break;
 800be34:	e04e      	b.n	800bed4 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d019      	beq.n	800be74 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800be4c:	23ff      	movs	r3, #255	; 0xff
 800be4e:	6878      	ldr	r0, [r7, #4]
 800be50:	f000 f926 	bl	800c0a0 <USBH_Get_StringDesc>
 800be54:	4603      	mov	r3, r0
 800be56:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800be58:	7bbb      	ldrb	r3, [r7, #14]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d103      	bne.n	800be66 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	2207      	movs	r2, #7
 800be62:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800be64:	e038      	b.n	800bed8 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800be66:	7bbb      	ldrb	r3, [r7, #14]
 800be68:	2b03      	cmp	r3, #3
 800be6a:	d135      	bne.n	800bed8 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	2207      	movs	r2, #7
 800be70:	705a      	strb	r2, [r3, #1]
      break;
 800be72:	e031      	b.n	800bed8 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	2207      	movs	r2, #7
 800be78:	705a      	strb	r2, [r3, #1]
      break;
 800be7a:	e02d      	b.n	800bed8 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800be82:	2b00      	cmp	r3, #0
 800be84:	d017      	beq.n	800beb6 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800be92:	23ff      	movs	r3, #255	; 0xff
 800be94:	6878      	ldr	r0, [r7, #4]
 800be96:	f000 f903 	bl	800c0a0 <USBH_Get_StringDesc>
 800be9a:	4603      	mov	r3, r0
 800be9c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800be9e:	7bbb      	ldrb	r3, [r7, #14]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d102      	bne.n	800beaa <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800bea4:	2300      	movs	r3, #0
 800bea6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800bea8:	e018      	b.n	800bedc <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800beaa:	7bbb      	ldrb	r3, [r7, #14]
 800beac:	2b03      	cmp	r3, #3
 800beae:	d115      	bne.n	800bedc <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800beb0:	2300      	movs	r3, #0
 800beb2:	73fb      	strb	r3, [r7, #15]
      break;
 800beb4:	e012      	b.n	800bedc <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800beb6:	2300      	movs	r3, #0
 800beb8:	73fb      	strb	r3, [r7, #15]
      break;
 800beba:	e00f      	b.n	800bedc <USBH_HandleEnum+0x3bc>

    default:
      break;
 800bebc:	bf00      	nop
 800bebe:	e00e      	b.n	800bede <USBH_HandleEnum+0x3be>
      break;
 800bec0:	bf00      	nop
 800bec2:	e00c      	b.n	800bede <USBH_HandleEnum+0x3be>
      break;
 800bec4:	bf00      	nop
 800bec6:	e00a      	b.n	800bede <USBH_HandleEnum+0x3be>
      break;
 800bec8:	bf00      	nop
 800beca:	e008      	b.n	800bede <USBH_HandleEnum+0x3be>
      break;
 800becc:	bf00      	nop
 800bece:	e006      	b.n	800bede <USBH_HandleEnum+0x3be>
      break;
 800bed0:	bf00      	nop
 800bed2:	e004      	b.n	800bede <USBH_HandleEnum+0x3be>
      break;
 800bed4:	bf00      	nop
 800bed6:	e002      	b.n	800bede <USBH_HandleEnum+0x3be>
      break;
 800bed8:	bf00      	nop
 800beda:	e000      	b.n	800bede <USBH_HandleEnum+0x3be>
      break;
 800bedc:	bf00      	nop
  }
  return Status;
 800bede:	7bfb      	ldrb	r3, [r7, #15]
}
 800bee0:	4618      	mov	r0, r3
 800bee2:	3710      	adds	r7, #16
 800bee4:	46bd      	mov	sp, r7
 800bee6:	bd80      	pop	{r7, pc}

0800bee8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800bee8:	b480      	push	{r7}
 800beea:	b083      	sub	sp, #12
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]
 800bef0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	683a      	ldr	r2, [r7, #0]
 800bef6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800befa:	bf00      	nop
 800befc:	370c      	adds	r7, #12
 800befe:	46bd      	mov	sp, r7
 800bf00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf04:	4770      	bx	lr

0800bf06 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800bf06:	b580      	push	{r7, lr}
 800bf08:	b082      	sub	sp, #8
 800bf0a:	af00      	add	r7, sp, #0
 800bf0c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bf14:	1c5a      	adds	r2, r3, #1
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800bf1c:	6878      	ldr	r0, [r7, #4]
 800bf1e:	f000 f804 	bl	800bf2a <USBH_HandleSof>
}
 800bf22:	bf00      	nop
 800bf24:	3708      	adds	r7, #8
 800bf26:	46bd      	mov	sp, r7
 800bf28:	bd80      	pop	{r7, pc}

0800bf2a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800bf2a:	b580      	push	{r7, lr}
 800bf2c:	b082      	sub	sp, #8
 800bf2e:	af00      	add	r7, sp, #0
 800bf30:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	781b      	ldrb	r3, [r3, #0]
 800bf36:	b2db      	uxtb	r3, r3
 800bf38:	2b0b      	cmp	r3, #11
 800bf3a:	d10a      	bne.n	800bf52 <USBH_HandleSof+0x28>
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d005      	beq.n	800bf52 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bf4c:	699b      	ldr	r3, [r3, #24]
 800bf4e:	6878      	ldr	r0, [r7, #4]
 800bf50:	4798      	blx	r3
  }
}
 800bf52:	bf00      	nop
 800bf54:	3708      	adds	r7, #8
 800bf56:	46bd      	mov	sp, r7
 800bf58:	bd80      	pop	{r7, pc}

0800bf5a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800bf5a:	b480      	push	{r7}
 800bf5c:	b083      	sub	sp, #12
 800bf5e:	af00      	add	r7, sp, #0
 800bf60:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	2201      	movs	r2, #1
 800bf66:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800bf6a:	bf00      	nop
}
 800bf6c:	370c      	adds	r7, #12
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf74:	4770      	bx	lr

0800bf76 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800bf76:	b480      	push	{r7}
 800bf78:	b083      	sub	sp, #12
 800bf7a:	af00      	add	r7, sp, #0
 800bf7c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	2200      	movs	r2, #0
 800bf82:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800bf86:	bf00      	nop
}
 800bf88:	370c      	adds	r7, #12
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf90:	4770      	bx	lr

0800bf92 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800bf92:	b480      	push	{r7}
 800bf94:	b083      	sub	sp, #12
 800bf96:	af00      	add	r7, sp, #0
 800bf98:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	2201      	movs	r2, #1
 800bf9e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	2200      	movs	r2, #0
 800bfa6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	2200      	movs	r2, #0
 800bfae:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800bfb2:	2300      	movs	r3, #0
}
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	370c      	adds	r7, #12
 800bfb8:	46bd      	mov	sp, r7
 800bfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfbe:	4770      	bx	lr

0800bfc0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b082      	sub	sp, #8
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	2201      	movs	r2, #1
 800bfcc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	2200      	movs	r2, #0
 800bfd4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	2200      	movs	r2, #0
 800bfdc:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800bfe0:	6878      	ldr	r0, [r7, #4]
 800bfe2:	f001 f8a6 	bl	800d132 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	791b      	ldrb	r3, [r3, #4]
 800bfea:	4619      	mov	r1, r3
 800bfec:	6878      	ldr	r0, [r7, #4]
 800bfee:	f000 fe91 	bl	800cd14 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	795b      	ldrb	r3, [r3, #5]
 800bff6:	4619      	mov	r1, r3
 800bff8:	6878      	ldr	r0, [r7, #4]
 800bffa:	f000 fe8b 	bl	800cd14 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800bffe:	2300      	movs	r3, #0
}
 800c000:	4618      	mov	r0, r3
 800c002:	3708      	adds	r7, #8
 800c004:	46bd      	mov	sp, r7
 800c006:	bd80      	pop	{r7, pc}

0800c008 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	b086      	sub	sp, #24
 800c00c:	af02      	add	r7, sp, #8
 800c00e:	6078      	str	r0, [r7, #4]
 800c010:	460b      	mov	r3, r1
 800c012:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800c01a:	78fb      	ldrb	r3, [r7, #3]
 800c01c:	b29b      	uxth	r3, r3
 800c01e:	9300      	str	r3, [sp, #0]
 800c020:	4613      	mov	r3, r2
 800c022:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c026:	2100      	movs	r1, #0
 800c028:	6878      	ldr	r0, [r7, #4]
 800c02a:	f000 f864 	bl	800c0f6 <USBH_GetDescriptor>
 800c02e:	4603      	mov	r3, r0
 800c030:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800c032:	7bfb      	ldrb	r3, [r7, #15]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d10a      	bne.n	800c04e <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	f203 3026 	addw	r0, r3, #806	; 0x326
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c044:	78fa      	ldrb	r2, [r7, #3]
 800c046:	b292      	uxth	r2, r2
 800c048:	4619      	mov	r1, r3
 800c04a:	f000 f918 	bl	800c27e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800c04e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c050:	4618      	mov	r0, r3
 800c052:	3710      	adds	r7, #16
 800c054:	46bd      	mov	sp, r7
 800c056:	bd80      	pop	{r7, pc}

0800c058 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800c058:	b580      	push	{r7, lr}
 800c05a:	b086      	sub	sp, #24
 800c05c:	af02      	add	r7, sp, #8
 800c05e:	6078      	str	r0, [r7, #4]
 800c060:	460b      	mov	r3, r1
 800c062:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	331c      	adds	r3, #28
 800c068:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800c06a:	887b      	ldrh	r3, [r7, #2]
 800c06c:	9300      	str	r3, [sp, #0]
 800c06e:	68bb      	ldr	r3, [r7, #8]
 800c070:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c074:	2100      	movs	r1, #0
 800c076:	6878      	ldr	r0, [r7, #4]
 800c078:	f000 f83d 	bl	800c0f6 <USBH_GetDescriptor>
 800c07c:	4603      	mov	r3, r0
 800c07e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800c080:	7bfb      	ldrb	r3, [r7, #15]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d107      	bne.n	800c096 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800c086:	887b      	ldrh	r3, [r7, #2]
 800c088:	461a      	mov	r2, r3
 800c08a:	68b9      	ldr	r1, [r7, #8]
 800c08c:	6878      	ldr	r0, [r7, #4]
 800c08e:	f000 f987 	bl	800c3a0 <USBH_ParseCfgDesc>
 800c092:	4603      	mov	r3, r0
 800c094:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c096:	7bfb      	ldrb	r3, [r7, #15]
}
 800c098:	4618      	mov	r0, r3
 800c09a:	3710      	adds	r7, #16
 800c09c:	46bd      	mov	sp, r7
 800c09e:	bd80      	pop	{r7, pc}

0800c0a0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b088      	sub	sp, #32
 800c0a4:	af02      	add	r7, sp, #8
 800c0a6:	60f8      	str	r0, [r7, #12]
 800c0a8:	607a      	str	r2, [r7, #4]
 800c0aa:	461a      	mov	r2, r3
 800c0ac:	460b      	mov	r3, r1
 800c0ae:	72fb      	strb	r3, [r7, #11]
 800c0b0:	4613      	mov	r3, r2
 800c0b2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800c0b4:	7afb      	ldrb	r3, [r7, #11]
 800c0b6:	b29b      	uxth	r3, r3
 800c0b8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800c0bc:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800c0c4:	893b      	ldrh	r3, [r7, #8]
 800c0c6:	9300      	str	r3, [sp, #0]
 800c0c8:	460b      	mov	r3, r1
 800c0ca:	2100      	movs	r1, #0
 800c0cc:	68f8      	ldr	r0, [r7, #12]
 800c0ce:	f000 f812 	bl	800c0f6 <USBH_GetDescriptor>
 800c0d2:	4603      	mov	r3, r0
 800c0d4:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800c0d6:	7dfb      	ldrb	r3, [r7, #23]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d107      	bne.n	800c0ec <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c0e2:	893a      	ldrh	r2, [r7, #8]
 800c0e4:	6879      	ldr	r1, [r7, #4]
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	f000 fb24 	bl	800c734 <USBH_ParseStringDesc>
  }

  return status;
 800c0ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	3718      	adds	r7, #24
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	bd80      	pop	{r7, pc}

0800c0f6 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800c0f6:	b580      	push	{r7, lr}
 800c0f8:	b084      	sub	sp, #16
 800c0fa:	af00      	add	r7, sp, #0
 800c0fc:	60f8      	str	r0, [r7, #12]
 800c0fe:	607b      	str	r3, [r7, #4]
 800c100:	460b      	mov	r3, r1
 800c102:	72fb      	strb	r3, [r7, #11]
 800c104:	4613      	mov	r3, r2
 800c106:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	789b      	ldrb	r3, [r3, #2]
 800c10c:	2b01      	cmp	r3, #1
 800c10e:	d11c      	bne.n	800c14a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800c110:	7afb      	ldrb	r3, [r7, #11]
 800c112:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c116:	b2da      	uxtb	r2, r3
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	2206      	movs	r2, #6
 800c120:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	893a      	ldrh	r2, [r7, #8]
 800c126:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800c128:	893b      	ldrh	r3, [r7, #8]
 800c12a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c12e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c132:	d104      	bne.n	800c13e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	f240 4209 	movw	r2, #1033	; 0x409
 800c13a:	829a      	strh	r2, [r3, #20]
 800c13c:	e002      	b.n	800c144 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	2200      	movs	r2, #0
 800c142:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	8b3a      	ldrh	r2, [r7, #24]
 800c148:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800c14a:	8b3b      	ldrh	r3, [r7, #24]
 800c14c:	461a      	mov	r2, r3
 800c14e:	6879      	ldr	r1, [r7, #4]
 800c150:	68f8      	ldr	r0, [r7, #12]
 800c152:	f000 fb3d 	bl	800c7d0 <USBH_CtlReq>
 800c156:	4603      	mov	r3, r0
}
 800c158:	4618      	mov	r0, r3
 800c15a:	3710      	adds	r7, #16
 800c15c:	46bd      	mov	sp, r7
 800c15e:	bd80      	pop	{r7, pc}

0800c160 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800c160:	b580      	push	{r7, lr}
 800c162:	b082      	sub	sp, #8
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
 800c168:	460b      	mov	r3, r1
 800c16a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	789b      	ldrb	r3, [r3, #2]
 800c170:	2b01      	cmp	r3, #1
 800c172:	d10f      	bne.n	800c194 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	2200      	movs	r2, #0
 800c178:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	2205      	movs	r2, #5
 800c17e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800c180:	78fb      	ldrb	r3, [r7, #3]
 800c182:	b29a      	uxth	r2, r3
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	2200      	movs	r2, #0
 800c18c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	2200      	movs	r2, #0
 800c192:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c194:	2200      	movs	r2, #0
 800c196:	2100      	movs	r1, #0
 800c198:	6878      	ldr	r0, [r7, #4]
 800c19a:	f000 fb19 	bl	800c7d0 <USBH_CtlReq>
 800c19e:	4603      	mov	r3, r0
}
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	3708      	adds	r7, #8
 800c1a4:	46bd      	mov	sp, r7
 800c1a6:	bd80      	pop	{r7, pc}

0800c1a8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800c1a8:	b580      	push	{r7, lr}
 800c1aa:	b082      	sub	sp, #8
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	6078      	str	r0, [r7, #4]
 800c1b0:	460b      	mov	r3, r1
 800c1b2:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	789b      	ldrb	r3, [r3, #2]
 800c1b8:	2b01      	cmp	r3, #1
 800c1ba:	d10e      	bne.n	800c1da <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	2200      	movs	r2, #0
 800c1c0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	2209      	movs	r2, #9
 800c1c6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	887a      	ldrh	r2, [r7, #2]
 800c1cc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c1da:	2200      	movs	r2, #0
 800c1dc:	2100      	movs	r1, #0
 800c1de:	6878      	ldr	r0, [r7, #4]
 800c1e0:	f000 faf6 	bl	800c7d0 <USBH_CtlReq>
 800c1e4:	4603      	mov	r3, r0
}
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	3708      	adds	r7, #8
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	bd80      	pop	{r7, pc}

0800c1ee <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800c1ee:	b580      	push	{r7, lr}
 800c1f0:	b082      	sub	sp, #8
 800c1f2:	af00      	add	r7, sp, #0
 800c1f4:	6078      	str	r0, [r7, #4]
 800c1f6:	460b      	mov	r3, r1
 800c1f8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	789b      	ldrb	r3, [r3, #2]
 800c1fe:	2b01      	cmp	r3, #1
 800c200:	d10f      	bne.n	800c222 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	2200      	movs	r2, #0
 800c206:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2203      	movs	r2, #3
 800c20c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800c20e:	78fb      	ldrb	r3, [r7, #3]
 800c210:	b29a      	uxth	r2, r3
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	2200      	movs	r2, #0
 800c21a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	2200      	movs	r2, #0
 800c220:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c222:	2200      	movs	r2, #0
 800c224:	2100      	movs	r1, #0
 800c226:	6878      	ldr	r0, [r7, #4]
 800c228:	f000 fad2 	bl	800c7d0 <USBH_CtlReq>
 800c22c:	4603      	mov	r3, r0
}
 800c22e:	4618      	mov	r0, r3
 800c230:	3708      	adds	r7, #8
 800c232:	46bd      	mov	sp, r7
 800c234:	bd80      	pop	{r7, pc}

0800c236 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800c236:	b580      	push	{r7, lr}
 800c238:	b082      	sub	sp, #8
 800c23a:	af00      	add	r7, sp, #0
 800c23c:	6078      	str	r0, [r7, #4]
 800c23e:	460b      	mov	r3, r1
 800c240:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	789b      	ldrb	r3, [r3, #2]
 800c246:	2b01      	cmp	r3, #1
 800c248:	d10f      	bne.n	800c26a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	2202      	movs	r2, #2
 800c24e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	2201      	movs	r2, #1
 800c254:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	2200      	movs	r2, #0
 800c25a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800c25c:	78fb      	ldrb	r3, [r7, #3]
 800c25e:	b29a      	uxth	r2, r3
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	2200      	movs	r2, #0
 800c268:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800c26a:	2200      	movs	r2, #0
 800c26c:	2100      	movs	r1, #0
 800c26e:	6878      	ldr	r0, [r7, #4]
 800c270:	f000 faae 	bl	800c7d0 <USBH_CtlReq>
 800c274:	4603      	mov	r3, r0
}
 800c276:	4618      	mov	r0, r3
 800c278:	3708      	adds	r7, #8
 800c27a:	46bd      	mov	sp, r7
 800c27c:	bd80      	pop	{r7, pc}

0800c27e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800c27e:	b480      	push	{r7}
 800c280:	b085      	sub	sp, #20
 800c282:	af00      	add	r7, sp, #0
 800c284:	60f8      	str	r0, [r7, #12]
 800c286:	60b9      	str	r1, [r7, #8]
 800c288:	4613      	mov	r3, r2
 800c28a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800c28c:	68bb      	ldr	r3, [r7, #8]
 800c28e:	781a      	ldrb	r2, [r3, #0]
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800c294:	68bb      	ldr	r3, [r7, #8]
 800c296:	785a      	ldrb	r2, [r3, #1]
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800c29c:	68bb      	ldr	r3, [r7, #8]
 800c29e:	3302      	adds	r3, #2
 800c2a0:	781b      	ldrb	r3, [r3, #0]
 800c2a2:	b29a      	uxth	r2, r3
 800c2a4:	68bb      	ldr	r3, [r7, #8]
 800c2a6:	3303      	adds	r3, #3
 800c2a8:	781b      	ldrb	r3, [r3, #0]
 800c2aa:	b29b      	uxth	r3, r3
 800c2ac:	021b      	lsls	r3, r3, #8
 800c2ae:	b29b      	uxth	r3, r3
 800c2b0:	4313      	orrs	r3, r2
 800c2b2:	b29a      	uxth	r2, r3
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800c2b8:	68bb      	ldr	r3, [r7, #8]
 800c2ba:	791a      	ldrb	r2, [r3, #4]
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800c2c0:	68bb      	ldr	r3, [r7, #8]
 800c2c2:	795a      	ldrb	r2, [r3, #5]
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800c2c8:	68bb      	ldr	r3, [r7, #8]
 800c2ca:	799a      	ldrb	r2, [r3, #6]
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800c2d0:	68bb      	ldr	r3, [r7, #8]
 800c2d2:	79da      	ldrb	r2, [r3, #7]
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	79db      	ldrb	r3, [r3, #7]
 800c2dc:	2b20      	cmp	r3, #32
 800c2de:	dc11      	bgt.n	800c304 <USBH_ParseDevDesc+0x86>
 800c2e0:	2b08      	cmp	r3, #8
 800c2e2:	db16      	blt.n	800c312 <USBH_ParseDevDesc+0x94>
 800c2e4:	3b08      	subs	r3, #8
 800c2e6:	2201      	movs	r2, #1
 800c2e8:	fa02 f303 	lsl.w	r3, r2, r3
 800c2ec:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800c2f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	bf14      	ite	ne
 800c2f8:	2301      	movne	r3, #1
 800c2fa:	2300      	moveq	r3, #0
 800c2fc:	b2db      	uxtb	r3, r3
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d102      	bne.n	800c308 <USBH_ParseDevDesc+0x8a>
 800c302:	e006      	b.n	800c312 <USBH_ParseDevDesc+0x94>
 800c304:	2b40      	cmp	r3, #64	; 0x40
 800c306:	d104      	bne.n	800c312 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	79da      	ldrb	r2, [r3, #7]
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	71da      	strb	r2, [r3, #7]
      break;
 800c310:	e003      	b.n	800c31a <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	2240      	movs	r2, #64	; 0x40
 800c316:	71da      	strb	r2, [r3, #7]
      break;
 800c318:	bf00      	nop
  }

  if (length > 8U)
 800c31a:	88fb      	ldrh	r3, [r7, #6]
 800c31c:	2b08      	cmp	r3, #8
 800c31e:	d939      	bls.n	800c394 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800c320:	68bb      	ldr	r3, [r7, #8]
 800c322:	3308      	adds	r3, #8
 800c324:	781b      	ldrb	r3, [r3, #0]
 800c326:	b29a      	uxth	r2, r3
 800c328:	68bb      	ldr	r3, [r7, #8]
 800c32a:	3309      	adds	r3, #9
 800c32c:	781b      	ldrb	r3, [r3, #0]
 800c32e:	b29b      	uxth	r3, r3
 800c330:	021b      	lsls	r3, r3, #8
 800c332:	b29b      	uxth	r3, r3
 800c334:	4313      	orrs	r3, r2
 800c336:	b29a      	uxth	r2, r3
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800c33c:	68bb      	ldr	r3, [r7, #8]
 800c33e:	330a      	adds	r3, #10
 800c340:	781b      	ldrb	r3, [r3, #0]
 800c342:	b29a      	uxth	r2, r3
 800c344:	68bb      	ldr	r3, [r7, #8]
 800c346:	330b      	adds	r3, #11
 800c348:	781b      	ldrb	r3, [r3, #0]
 800c34a:	b29b      	uxth	r3, r3
 800c34c:	021b      	lsls	r3, r3, #8
 800c34e:	b29b      	uxth	r3, r3
 800c350:	4313      	orrs	r3, r2
 800c352:	b29a      	uxth	r2, r3
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800c358:	68bb      	ldr	r3, [r7, #8]
 800c35a:	330c      	adds	r3, #12
 800c35c:	781b      	ldrb	r3, [r3, #0]
 800c35e:	b29a      	uxth	r2, r3
 800c360:	68bb      	ldr	r3, [r7, #8]
 800c362:	330d      	adds	r3, #13
 800c364:	781b      	ldrb	r3, [r3, #0]
 800c366:	b29b      	uxth	r3, r3
 800c368:	021b      	lsls	r3, r3, #8
 800c36a:	b29b      	uxth	r3, r3
 800c36c:	4313      	orrs	r3, r2
 800c36e:	b29a      	uxth	r2, r3
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800c374:	68bb      	ldr	r3, [r7, #8]
 800c376:	7b9a      	ldrb	r2, [r3, #14]
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800c37c:	68bb      	ldr	r3, [r7, #8]
 800c37e:	7bda      	ldrb	r2, [r3, #15]
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800c384:	68bb      	ldr	r3, [r7, #8]
 800c386:	7c1a      	ldrb	r2, [r3, #16]
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800c38c:	68bb      	ldr	r3, [r7, #8]
 800c38e:	7c5a      	ldrb	r2, [r3, #17]
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	745a      	strb	r2, [r3, #17]
  }
}
 800c394:	bf00      	nop
 800c396:	3714      	adds	r7, #20
 800c398:	46bd      	mov	sp, r7
 800c39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39e:	4770      	bx	lr

0800c3a0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	b08c      	sub	sp, #48	; 0x30
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	60f8      	str	r0, [r7, #12]
 800c3a8:	60b9      	str	r1, [r7, #8]
 800c3aa:	4613      	mov	r3, r2
 800c3ac:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800c3b4:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800c3bc:	68bb      	ldr	r3, [r7, #8]
 800c3be:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800c3c0:	2300      	movs	r3, #0
 800c3c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800c3cc:	68bb      	ldr	r3, [r7, #8]
 800c3ce:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800c3d0:	68bb      	ldr	r3, [r7, #8]
 800c3d2:	781a      	ldrb	r2, [r3, #0]
 800c3d4:	6a3b      	ldr	r3, [r7, #32]
 800c3d6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800c3d8:	68bb      	ldr	r3, [r7, #8]
 800c3da:	785a      	ldrb	r2, [r3, #1]
 800c3dc:	6a3b      	ldr	r3, [r7, #32]
 800c3de:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800c3e0:	68bb      	ldr	r3, [r7, #8]
 800c3e2:	3302      	adds	r3, #2
 800c3e4:	781b      	ldrb	r3, [r3, #0]
 800c3e6:	b29a      	uxth	r2, r3
 800c3e8:	68bb      	ldr	r3, [r7, #8]
 800c3ea:	3303      	adds	r3, #3
 800c3ec:	781b      	ldrb	r3, [r3, #0]
 800c3ee:	b29b      	uxth	r3, r3
 800c3f0:	021b      	lsls	r3, r3, #8
 800c3f2:	b29b      	uxth	r3, r3
 800c3f4:	4313      	orrs	r3, r2
 800c3f6:	b29b      	uxth	r3, r3
 800c3f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c3fc:	bf28      	it	cs
 800c3fe:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800c402:	b29a      	uxth	r2, r3
 800c404:	6a3b      	ldr	r3, [r7, #32]
 800c406:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800c408:	68bb      	ldr	r3, [r7, #8]
 800c40a:	791a      	ldrb	r2, [r3, #4]
 800c40c:	6a3b      	ldr	r3, [r7, #32]
 800c40e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800c410:	68bb      	ldr	r3, [r7, #8]
 800c412:	795a      	ldrb	r2, [r3, #5]
 800c414:	6a3b      	ldr	r3, [r7, #32]
 800c416:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800c418:	68bb      	ldr	r3, [r7, #8]
 800c41a:	799a      	ldrb	r2, [r3, #6]
 800c41c:	6a3b      	ldr	r3, [r7, #32]
 800c41e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800c420:	68bb      	ldr	r3, [r7, #8]
 800c422:	79da      	ldrb	r2, [r3, #7]
 800c424:	6a3b      	ldr	r3, [r7, #32]
 800c426:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800c428:	68bb      	ldr	r3, [r7, #8]
 800c42a:	7a1a      	ldrb	r2, [r3, #8]
 800c42c:	6a3b      	ldr	r3, [r7, #32]
 800c42e:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800c430:	6a3b      	ldr	r3, [r7, #32]
 800c432:	781b      	ldrb	r3, [r3, #0]
 800c434:	2b09      	cmp	r3, #9
 800c436:	d002      	beq.n	800c43e <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800c438:	6a3b      	ldr	r3, [r7, #32]
 800c43a:	2209      	movs	r2, #9
 800c43c:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800c43e:	88fb      	ldrh	r3, [r7, #6]
 800c440:	2b09      	cmp	r3, #9
 800c442:	f240 809d 	bls.w	800c580 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800c446:	2309      	movs	r3, #9
 800c448:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800c44a:	2300      	movs	r3, #0
 800c44c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800c44e:	e081      	b.n	800c554 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c450:	f107 0316 	add.w	r3, r7, #22
 800c454:	4619      	mov	r1, r3
 800c456:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c458:	f000 f99f 	bl	800c79a <USBH_GetNextDesc>
 800c45c:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800c45e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c460:	785b      	ldrb	r3, [r3, #1]
 800c462:	2b04      	cmp	r3, #4
 800c464:	d176      	bne.n	800c554 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800c466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c468:	781b      	ldrb	r3, [r3, #0]
 800c46a:	2b09      	cmp	r3, #9
 800c46c:	d002      	beq.n	800c474 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800c46e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c470:	2209      	movs	r2, #9
 800c472:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800c474:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c478:	221a      	movs	r2, #26
 800c47a:	fb02 f303 	mul.w	r3, r2, r3
 800c47e:	3308      	adds	r3, #8
 800c480:	6a3a      	ldr	r2, [r7, #32]
 800c482:	4413      	add	r3, r2
 800c484:	3302      	adds	r3, #2
 800c486:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800c488:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c48a:	69f8      	ldr	r0, [r7, #28]
 800c48c:	f000 f87e 	bl	800c58c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800c490:	2300      	movs	r3, #0
 800c492:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800c496:	2300      	movs	r3, #0
 800c498:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c49a:	e043      	b.n	800c524 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c49c:	f107 0316 	add.w	r3, r7, #22
 800c4a0:	4619      	mov	r1, r3
 800c4a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c4a4:	f000 f979 	bl	800c79a <USBH_GetNextDesc>
 800c4a8:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c4aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4ac:	785b      	ldrb	r3, [r3, #1]
 800c4ae:	2b05      	cmp	r3, #5
 800c4b0:	d138      	bne.n	800c524 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800c4b2:	69fb      	ldr	r3, [r7, #28]
 800c4b4:	795b      	ldrb	r3, [r3, #5]
 800c4b6:	2b01      	cmp	r3, #1
 800c4b8:	d10f      	bne.n	800c4da <USBH_ParseCfgDesc+0x13a>
 800c4ba:	69fb      	ldr	r3, [r7, #28]
 800c4bc:	799b      	ldrb	r3, [r3, #6]
 800c4be:	2b02      	cmp	r3, #2
 800c4c0:	d10b      	bne.n	800c4da <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c4c2:	69fb      	ldr	r3, [r7, #28]
 800c4c4:	79db      	ldrb	r3, [r3, #7]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d10f      	bne.n	800c4ea <USBH_ParseCfgDesc+0x14a>
 800c4ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4cc:	781b      	ldrb	r3, [r3, #0]
 800c4ce:	2b09      	cmp	r3, #9
 800c4d0:	d00b      	beq.n	800c4ea <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800c4d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4d4:	2209      	movs	r2, #9
 800c4d6:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c4d8:	e007      	b.n	800c4ea <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800c4da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4dc:	781b      	ldrb	r3, [r3, #0]
 800c4de:	2b07      	cmp	r3, #7
 800c4e0:	d004      	beq.n	800c4ec <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800c4e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4e4:	2207      	movs	r2, #7
 800c4e6:	701a      	strb	r2, [r3, #0]
 800c4e8:	e000      	b.n	800c4ec <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c4ea:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800c4ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c4f0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c4f4:	3201      	adds	r2, #1
 800c4f6:	00d2      	lsls	r2, r2, #3
 800c4f8:	211a      	movs	r1, #26
 800c4fa:	fb01 f303 	mul.w	r3, r1, r3
 800c4fe:	4413      	add	r3, r2
 800c500:	3308      	adds	r3, #8
 800c502:	6a3a      	ldr	r2, [r7, #32]
 800c504:	4413      	add	r3, r2
 800c506:	3304      	adds	r3, #4
 800c508:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800c50a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c50c:	69b9      	ldr	r1, [r7, #24]
 800c50e:	68f8      	ldr	r0, [r7, #12]
 800c510:	f000 f86b 	bl	800c5ea <USBH_ParseEPDesc>
 800c514:	4603      	mov	r3, r0
 800c516:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800c51a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c51e:	3301      	adds	r3, #1
 800c520:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c524:	69fb      	ldr	r3, [r7, #28]
 800c526:	791b      	ldrb	r3, [r3, #4]
 800c528:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c52c:	429a      	cmp	r2, r3
 800c52e:	d204      	bcs.n	800c53a <USBH_ParseCfgDesc+0x19a>
 800c530:	6a3b      	ldr	r3, [r7, #32]
 800c532:	885a      	ldrh	r2, [r3, #2]
 800c534:	8afb      	ldrh	r3, [r7, #22]
 800c536:	429a      	cmp	r2, r3
 800c538:	d8b0      	bhi.n	800c49c <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800c53a:	69fb      	ldr	r3, [r7, #28]
 800c53c:	791b      	ldrb	r3, [r3, #4]
 800c53e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c542:	429a      	cmp	r2, r3
 800c544:	d201      	bcs.n	800c54a <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800c546:	2303      	movs	r3, #3
 800c548:	e01c      	b.n	800c584 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800c54a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c54e:	3301      	adds	r3, #1
 800c550:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800c554:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c558:	2b01      	cmp	r3, #1
 800c55a:	d805      	bhi.n	800c568 <USBH_ParseCfgDesc+0x1c8>
 800c55c:	6a3b      	ldr	r3, [r7, #32]
 800c55e:	885a      	ldrh	r2, [r3, #2]
 800c560:	8afb      	ldrh	r3, [r7, #22]
 800c562:	429a      	cmp	r2, r3
 800c564:	f63f af74 	bhi.w	800c450 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800c568:	6a3b      	ldr	r3, [r7, #32]
 800c56a:	791b      	ldrb	r3, [r3, #4]
 800c56c:	2b02      	cmp	r3, #2
 800c56e:	bf28      	it	cs
 800c570:	2302      	movcs	r3, #2
 800c572:	b2db      	uxtb	r3, r3
 800c574:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c578:	429a      	cmp	r2, r3
 800c57a:	d201      	bcs.n	800c580 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800c57c:	2303      	movs	r3, #3
 800c57e:	e001      	b.n	800c584 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800c580:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c584:	4618      	mov	r0, r3
 800c586:	3730      	adds	r7, #48	; 0x30
 800c588:	46bd      	mov	sp, r7
 800c58a:	bd80      	pop	{r7, pc}

0800c58c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800c58c:	b480      	push	{r7}
 800c58e:	b083      	sub	sp, #12
 800c590:	af00      	add	r7, sp, #0
 800c592:	6078      	str	r0, [r7, #4]
 800c594:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800c596:	683b      	ldr	r3, [r7, #0]
 800c598:	781a      	ldrb	r2, [r3, #0]
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800c59e:	683b      	ldr	r3, [r7, #0]
 800c5a0:	785a      	ldrb	r2, [r3, #1]
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800c5a6:	683b      	ldr	r3, [r7, #0]
 800c5a8:	789a      	ldrb	r2, [r3, #2]
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800c5ae:	683b      	ldr	r3, [r7, #0]
 800c5b0:	78da      	ldrb	r2, [r3, #3]
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800c5b6:	683b      	ldr	r3, [r7, #0]
 800c5b8:	791a      	ldrb	r2, [r3, #4]
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800c5be:	683b      	ldr	r3, [r7, #0]
 800c5c0:	795a      	ldrb	r2, [r3, #5]
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800c5c6:	683b      	ldr	r3, [r7, #0]
 800c5c8:	799a      	ldrb	r2, [r3, #6]
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800c5ce:	683b      	ldr	r3, [r7, #0]
 800c5d0:	79da      	ldrb	r2, [r3, #7]
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800c5d6:	683b      	ldr	r3, [r7, #0]
 800c5d8:	7a1a      	ldrb	r2, [r3, #8]
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	721a      	strb	r2, [r3, #8]
}
 800c5de:	bf00      	nop
 800c5e0:	370c      	adds	r7, #12
 800c5e2:	46bd      	mov	sp, r7
 800c5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e8:	4770      	bx	lr

0800c5ea <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800c5ea:	b480      	push	{r7}
 800c5ec:	b087      	sub	sp, #28
 800c5ee:	af00      	add	r7, sp, #0
 800c5f0:	60f8      	str	r0, [r7, #12]
 800c5f2:	60b9      	str	r1, [r7, #8]
 800c5f4:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	781a      	ldrb	r2, [r3, #0]
 800c5fe:	68bb      	ldr	r3, [r7, #8]
 800c600:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	785a      	ldrb	r2, [r3, #1]
 800c606:	68bb      	ldr	r3, [r7, #8]
 800c608:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	789a      	ldrb	r2, [r3, #2]
 800c60e:	68bb      	ldr	r3, [r7, #8]
 800c610:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	78da      	ldrb	r2, [r3, #3]
 800c616:	68bb      	ldr	r3, [r7, #8]
 800c618:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	3304      	adds	r3, #4
 800c61e:	781b      	ldrb	r3, [r3, #0]
 800c620:	b29a      	uxth	r2, r3
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	3305      	adds	r3, #5
 800c626:	781b      	ldrb	r3, [r3, #0]
 800c628:	b29b      	uxth	r3, r3
 800c62a:	021b      	lsls	r3, r3, #8
 800c62c:	b29b      	uxth	r3, r3
 800c62e:	4313      	orrs	r3, r2
 800c630:	b29a      	uxth	r2, r3
 800c632:	68bb      	ldr	r3, [r7, #8]
 800c634:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	799a      	ldrb	r2, [r3, #6]
 800c63a:	68bb      	ldr	r3, [r7, #8]
 800c63c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800c63e:	68bb      	ldr	r3, [r7, #8]
 800c640:	889b      	ldrh	r3, [r3, #4]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d102      	bne.n	800c64c <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800c646:	2303      	movs	r3, #3
 800c648:	75fb      	strb	r3, [r7, #23]
 800c64a:	e033      	b.n	800c6b4 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800c64c:	68bb      	ldr	r3, [r7, #8]
 800c64e:	889b      	ldrh	r3, [r3, #4]
 800c650:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800c654:	f023 0307 	bic.w	r3, r3, #7
 800c658:	b29a      	uxth	r2, r3
 800c65a:	68bb      	ldr	r3, [r7, #8]
 800c65c:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800c65e:	68bb      	ldr	r3, [r7, #8]
 800c660:	889b      	ldrh	r3, [r3, #4]
 800c662:	b21a      	sxth	r2, r3
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	3304      	adds	r3, #4
 800c668:	781b      	ldrb	r3, [r3, #0]
 800c66a:	b299      	uxth	r1, r3
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	3305      	adds	r3, #5
 800c670:	781b      	ldrb	r3, [r3, #0]
 800c672:	b29b      	uxth	r3, r3
 800c674:	021b      	lsls	r3, r3, #8
 800c676:	b29b      	uxth	r3, r3
 800c678:	430b      	orrs	r3, r1
 800c67a:	b29b      	uxth	r3, r3
 800c67c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c680:	2b00      	cmp	r3, #0
 800c682:	d110      	bne.n	800c6a6 <USBH_ParseEPDesc+0xbc>
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	3304      	adds	r3, #4
 800c688:	781b      	ldrb	r3, [r3, #0]
 800c68a:	b299      	uxth	r1, r3
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	3305      	adds	r3, #5
 800c690:	781b      	ldrb	r3, [r3, #0]
 800c692:	b29b      	uxth	r3, r3
 800c694:	021b      	lsls	r3, r3, #8
 800c696:	b29b      	uxth	r3, r3
 800c698:	430b      	orrs	r3, r1
 800c69a:	b29b      	uxth	r3, r3
 800c69c:	b21b      	sxth	r3, r3
 800c69e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c6a2:	b21b      	sxth	r3, r3
 800c6a4:	e001      	b.n	800c6aa <USBH_ParseEPDesc+0xc0>
 800c6a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c6aa:	4313      	orrs	r3, r2
 800c6ac:	b21b      	sxth	r3, r3
 800c6ae:	b29a      	uxth	r2, r3
 800c6b0:	68bb      	ldr	r3, [r7, #8]
 800c6b2:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d116      	bne.n	800c6ec <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800c6be:	68bb      	ldr	r3, [r7, #8]
 800c6c0:	78db      	ldrb	r3, [r3, #3]
 800c6c2:	f003 0303 	and.w	r3, r3, #3
 800c6c6:	2b01      	cmp	r3, #1
 800c6c8:	d005      	beq.n	800c6d6 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800c6ca:	68bb      	ldr	r3, [r7, #8]
 800c6cc:	78db      	ldrb	r3, [r3, #3]
 800c6ce:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800c6d2:	2b03      	cmp	r3, #3
 800c6d4:	d127      	bne.n	800c726 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800c6d6:	68bb      	ldr	r3, [r7, #8]
 800c6d8:	799b      	ldrb	r3, [r3, #6]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d003      	beq.n	800c6e6 <USBH_ParseEPDesc+0xfc>
 800c6de:	68bb      	ldr	r3, [r7, #8]
 800c6e0:	799b      	ldrb	r3, [r3, #6]
 800c6e2:	2b10      	cmp	r3, #16
 800c6e4:	d91f      	bls.n	800c726 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800c6e6:	2303      	movs	r3, #3
 800c6e8:	75fb      	strb	r3, [r7, #23]
 800c6ea:	e01c      	b.n	800c726 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800c6ec:	68bb      	ldr	r3, [r7, #8]
 800c6ee:	78db      	ldrb	r3, [r3, #3]
 800c6f0:	f003 0303 	and.w	r3, r3, #3
 800c6f4:	2b01      	cmp	r3, #1
 800c6f6:	d10a      	bne.n	800c70e <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800c6f8:	68bb      	ldr	r3, [r7, #8]
 800c6fa:	799b      	ldrb	r3, [r3, #6]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d003      	beq.n	800c708 <USBH_ParseEPDesc+0x11e>
 800c700:	68bb      	ldr	r3, [r7, #8]
 800c702:	799b      	ldrb	r3, [r3, #6]
 800c704:	2b10      	cmp	r3, #16
 800c706:	d90e      	bls.n	800c726 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800c708:	2303      	movs	r3, #3
 800c70a:	75fb      	strb	r3, [r7, #23]
 800c70c:	e00b      	b.n	800c726 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800c70e:	68bb      	ldr	r3, [r7, #8]
 800c710:	78db      	ldrb	r3, [r3, #3]
 800c712:	f003 0303 	and.w	r3, r3, #3
 800c716:	2b03      	cmp	r3, #3
 800c718:	d105      	bne.n	800c726 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800c71a:	68bb      	ldr	r3, [r7, #8]
 800c71c:	799b      	ldrb	r3, [r3, #6]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d101      	bne.n	800c726 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800c722:	2303      	movs	r3, #3
 800c724:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800c726:	7dfb      	ldrb	r3, [r7, #23]
}
 800c728:	4618      	mov	r0, r3
 800c72a:	371c      	adds	r7, #28
 800c72c:	46bd      	mov	sp, r7
 800c72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c732:	4770      	bx	lr

0800c734 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800c734:	b480      	push	{r7}
 800c736:	b087      	sub	sp, #28
 800c738:	af00      	add	r7, sp, #0
 800c73a:	60f8      	str	r0, [r7, #12]
 800c73c:	60b9      	str	r1, [r7, #8]
 800c73e:	4613      	mov	r3, r2
 800c740:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	3301      	adds	r3, #1
 800c746:	781b      	ldrb	r3, [r3, #0]
 800c748:	2b03      	cmp	r3, #3
 800c74a:	d120      	bne.n	800c78e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	781b      	ldrb	r3, [r3, #0]
 800c750:	1e9a      	subs	r2, r3, #2
 800c752:	88fb      	ldrh	r3, [r7, #6]
 800c754:	4293      	cmp	r3, r2
 800c756:	bf28      	it	cs
 800c758:	4613      	movcs	r3, r2
 800c75a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	3302      	adds	r3, #2
 800c760:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800c762:	2300      	movs	r3, #0
 800c764:	82fb      	strh	r3, [r7, #22]
 800c766:	e00b      	b.n	800c780 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800c768:	8afb      	ldrh	r3, [r7, #22]
 800c76a:	68fa      	ldr	r2, [r7, #12]
 800c76c:	4413      	add	r3, r2
 800c76e:	781a      	ldrb	r2, [r3, #0]
 800c770:	68bb      	ldr	r3, [r7, #8]
 800c772:	701a      	strb	r2, [r3, #0]
      pdest++;
 800c774:	68bb      	ldr	r3, [r7, #8]
 800c776:	3301      	adds	r3, #1
 800c778:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800c77a:	8afb      	ldrh	r3, [r7, #22]
 800c77c:	3302      	adds	r3, #2
 800c77e:	82fb      	strh	r3, [r7, #22]
 800c780:	8afa      	ldrh	r2, [r7, #22]
 800c782:	8abb      	ldrh	r3, [r7, #20]
 800c784:	429a      	cmp	r2, r3
 800c786:	d3ef      	bcc.n	800c768 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800c788:	68bb      	ldr	r3, [r7, #8]
 800c78a:	2200      	movs	r2, #0
 800c78c:	701a      	strb	r2, [r3, #0]
  }
}
 800c78e:	bf00      	nop
 800c790:	371c      	adds	r7, #28
 800c792:	46bd      	mov	sp, r7
 800c794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c798:	4770      	bx	lr

0800c79a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800c79a:	b480      	push	{r7}
 800c79c:	b085      	sub	sp, #20
 800c79e:	af00      	add	r7, sp, #0
 800c7a0:	6078      	str	r0, [r7, #4]
 800c7a2:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800c7a4:	683b      	ldr	r3, [r7, #0]
 800c7a6:	881a      	ldrh	r2, [r3, #0]
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	781b      	ldrb	r3, [r3, #0]
 800c7ac:	b29b      	uxth	r3, r3
 800c7ae:	4413      	add	r3, r2
 800c7b0:	b29a      	uxth	r2, r3
 800c7b2:	683b      	ldr	r3, [r7, #0]
 800c7b4:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	781b      	ldrb	r3, [r3, #0]
 800c7ba:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	4413      	add	r3, r2
 800c7c0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c7c2:	68fb      	ldr	r3, [r7, #12]
}
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	3714      	adds	r7, #20
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ce:	4770      	bx	lr

0800c7d0 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800c7d0:	b580      	push	{r7, lr}
 800c7d2:	b086      	sub	sp, #24
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	60f8      	str	r0, [r7, #12]
 800c7d8:	60b9      	str	r1, [r7, #8]
 800c7da:	4613      	mov	r3, r2
 800c7dc:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800c7de:	2301      	movs	r3, #1
 800c7e0:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	789b      	ldrb	r3, [r3, #2]
 800c7e6:	2b01      	cmp	r3, #1
 800c7e8:	d002      	beq.n	800c7f0 <USBH_CtlReq+0x20>
 800c7ea:	2b02      	cmp	r3, #2
 800c7ec:	d00f      	beq.n	800c80e <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800c7ee:	e027      	b.n	800c840 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	68ba      	ldr	r2, [r7, #8]
 800c7f4:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	88fa      	ldrh	r2, [r7, #6]
 800c7fa:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	2201      	movs	r2, #1
 800c800:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	2202      	movs	r2, #2
 800c806:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800c808:	2301      	movs	r3, #1
 800c80a:	75fb      	strb	r3, [r7, #23]
      break;
 800c80c:	e018      	b.n	800c840 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800c80e:	68f8      	ldr	r0, [r7, #12]
 800c810:	f000 f81c 	bl	800c84c <USBH_HandleControl>
 800c814:	4603      	mov	r3, r0
 800c816:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800c818:	7dfb      	ldrb	r3, [r7, #23]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d002      	beq.n	800c824 <USBH_CtlReq+0x54>
 800c81e:	7dfb      	ldrb	r3, [r7, #23]
 800c820:	2b03      	cmp	r3, #3
 800c822:	d106      	bne.n	800c832 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	2201      	movs	r2, #1
 800c828:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	2200      	movs	r2, #0
 800c82e:	761a      	strb	r2, [r3, #24]
      break;
 800c830:	e005      	b.n	800c83e <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800c832:	7dfb      	ldrb	r3, [r7, #23]
 800c834:	2b02      	cmp	r3, #2
 800c836:	d102      	bne.n	800c83e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	2201      	movs	r2, #1
 800c83c:	709a      	strb	r2, [r3, #2]
      break;
 800c83e:	bf00      	nop
  }
  return status;
 800c840:	7dfb      	ldrb	r3, [r7, #23]
}
 800c842:	4618      	mov	r0, r3
 800c844:	3718      	adds	r7, #24
 800c846:	46bd      	mov	sp, r7
 800c848:	bd80      	pop	{r7, pc}
	...

0800c84c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800c84c:	b580      	push	{r7, lr}
 800c84e:	b086      	sub	sp, #24
 800c850:	af02      	add	r7, sp, #8
 800c852:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800c854:	2301      	movs	r3, #1
 800c856:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c858:	2300      	movs	r3, #0
 800c85a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	7e1b      	ldrb	r3, [r3, #24]
 800c860:	3b01      	subs	r3, #1
 800c862:	2b0a      	cmp	r3, #10
 800c864:	f200 8156 	bhi.w	800cb14 <USBH_HandleControl+0x2c8>
 800c868:	a201      	add	r2, pc, #4	; (adr r2, 800c870 <USBH_HandleControl+0x24>)
 800c86a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c86e:	bf00      	nop
 800c870:	0800c89d 	.word	0x0800c89d
 800c874:	0800c8b7 	.word	0x0800c8b7
 800c878:	0800c921 	.word	0x0800c921
 800c87c:	0800c947 	.word	0x0800c947
 800c880:	0800c97f 	.word	0x0800c97f
 800c884:	0800c9a9 	.word	0x0800c9a9
 800c888:	0800c9fb 	.word	0x0800c9fb
 800c88c:	0800ca1d 	.word	0x0800ca1d
 800c890:	0800ca59 	.word	0x0800ca59
 800c894:	0800ca7f 	.word	0x0800ca7f
 800c898:	0800cabd 	.word	0x0800cabd
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	f103 0110 	add.w	r1, r3, #16
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	795b      	ldrb	r3, [r3, #5]
 800c8a6:	461a      	mov	r2, r3
 800c8a8:	6878      	ldr	r0, [r7, #4]
 800c8aa:	f000 f943 	bl	800cb34 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	2202      	movs	r2, #2
 800c8b2:	761a      	strb	r2, [r3, #24]
      break;
 800c8b4:	e139      	b.n	800cb2a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	795b      	ldrb	r3, [r3, #5]
 800c8ba:	4619      	mov	r1, r3
 800c8bc:	6878      	ldr	r0, [r7, #4]
 800c8be:	f000 fd27 	bl	800d310 <USBH_LL_GetURBState>
 800c8c2:	4603      	mov	r3, r0
 800c8c4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800c8c6:	7bbb      	ldrb	r3, [r7, #14]
 800c8c8:	2b01      	cmp	r3, #1
 800c8ca:	d11e      	bne.n	800c90a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	7c1b      	ldrb	r3, [r3, #16]
 800c8d0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c8d4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	8adb      	ldrh	r3, [r3, #22]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d00a      	beq.n	800c8f4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800c8de:	7b7b      	ldrb	r3, [r7, #13]
 800c8e0:	2b80      	cmp	r3, #128	; 0x80
 800c8e2:	d103      	bne.n	800c8ec <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	2203      	movs	r2, #3
 800c8e8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c8ea:	e115      	b.n	800cb18 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	2205      	movs	r2, #5
 800c8f0:	761a      	strb	r2, [r3, #24]
      break;
 800c8f2:	e111      	b.n	800cb18 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800c8f4:	7b7b      	ldrb	r3, [r7, #13]
 800c8f6:	2b80      	cmp	r3, #128	; 0x80
 800c8f8:	d103      	bne.n	800c902 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	2209      	movs	r2, #9
 800c8fe:	761a      	strb	r2, [r3, #24]
      break;
 800c900:	e10a      	b.n	800cb18 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	2207      	movs	r2, #7
 800c906:	761a      	strb	r2, [r3, #24]
      break;
 800c908:	e106      	b.n	800cb18 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800c90a:	7bbb      	ldrb	r3, [r7, #14]
 800c90c:	2b04      	cmp	r3, #4
 800c90e:	d003      	beq.n	800c918 <USBH_HandleControl+0xcc>
 800c910:	7bbb      	ldrb	r3, [r7, #14]
 800c912:	2b02      	cmp	r3, #2
 800c914:	f040 8100 	bne.w	800cb18 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	220b      	movs	r2, #11
 800c91c:	761a      	strb	r2, [r3, #24]
      break;
 800c91e:	e0fb      	b.n	800cb18 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c926:	b29a      	uxth	r2, r3
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	6899      	ldr	r1, [r3, #8]
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	899a      	ldrh	r2, [r3, #12]
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	791b      	ldrb	r3, [r3, #4]
 800c938:	6878      	ldr	r0, [r7, #4]
 800c93a:	f000 f93a 	bl	800cbb2 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	2204      	movs	r2, #4
 800c942:	761a      	strb	r2, [r3, #24]
      break;
 800c944:	e0f1      	b.n	800cb2a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	791b      	ldrb	r3, [r3, #4]
 800c94a:	4619      	mov	r1, r3
 800c94c:	6878      	ldr	r0, [r7, #4]
 800c94e:	f000 fcdf 	bl	800d310 <USBH_LL_GetURBState>
 800c952:	4603      	mov	r3, r0
 800c954:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800c956:	7bbb      	ldrb	r3, [r7, #14]
 800c958:	2b01      	cmp	r3, #1
 800c95a:	d102      	bne.n	800c962 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	2209      	movs	r2, #9
 800c960:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800c962:	7bbb      	ldrb	r3, [r7, #14]
 800c964:	2b05      	cmp	r3, #5
 800c966:	d102      	bne.n	800c96e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800c968:	2303      	movs	r3, #3
 800c96a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c96c:	e0d6      	b.n	800cb1c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800c96e:	7bbb      	ldrb	r3, [r7, #14]
 800c970:	2b04      	cmp	r3, #4
 800c972:	f040 80d3 	bne.w	800cb1c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	220b      	movs	r2, #11
 800c97a:	761a      	strb	r2, [r3, #24]
      break;
 800c97c:	e0ce      	b.n	800cb1c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	6899      	ldr	r1, [r3, #8]
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	899a      	ldrh	r2, [r3, #12]
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	795b      	ldrb	r3, [r3, #5]
 800c98a:	2001      	movs	r0, #1
 800c98c:	9000      	str	r0, [sp, #0]
 800c98e:	6878      	ldr	r0, [r7, #4]
 800c990:	f000 f8ea 	bl	800cb68 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c99a:	b29a      	uxth	r2, r3
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	2206      	movs	r2, #6
 800c9a4:	761a      	strb	r2, [r3, #24]
      break;
 800c9a6:	e0c0      	b.n	800cb2a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	795b      	ldrb	r3, [r3, #5]
 800c9ac:	4619      	mov	r1, r3
 800c9ae:	6878      	ldr	r0, [r7, #4]
 800c9b0:	f000 fcae 	bl	800d310 <USBH_LL_GetURBState>
 800c9b4:	4603      	mov	r3, r0
 800c9b6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c9b8:	7bbb      	ldrb	r3, [r7, #14]
 800c9ba:	2b01      	cmp	r3, #1
 800c9bc:	d103      	bne.n	800c9c6 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	2207      	movs	r2, #7
 800c9c2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c9c4:	e0ac      	b.n	800cb20 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800c9c6:	7bbb      	ldrb	r3, [r7, #14]
 800c9c8:	2b05      	cmp	r3, #5
 800c9ca:	d105      	bne.n	800c9d8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	220c      	movs	r2, #12
 800c9d0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800c9d2:	2303      	movs	r3, #3
 800c9d4:	73fb      	strb	r3, [r7, #15]
      break;
 800c9d6:	e0a3      	b.n	800cb20 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c9d8:	7bbb      	ldrb	r3, [r7, #14]
 800c9da:	2b02      	cmp	r3, #2
 800c9dc:	d103      	bne.n	800c9e6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	2205      	movs	r2, #5
 800c9e2:	761a      	strb	r2, [r3, #24]
      break;
 800c9e4:	e09c      	b.n	800cb20 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800c9e6:	7bbb      	ldrb	r3, [r7, #14]
 800c9e8:	2b04      	cmp	r3, #4
 800c9ea:	f040 8099 	bne.w	800cb20 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	220b      	movs	r2, #11
 800c9f2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800c9f4:	2302      	movs	r3, #2
 800c9f6:	73fb      	strb	r3, [r7, #15]
      break;
 800c9f8:	e092      	b.n	800cb20 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	791b      	ldrb	r3, [r3, #4]
 800c9fe:	2200      	movs	r2, #0
 800ca00:	2100      	movs	r1, #0
 800ca02:	6878      	ldr	r0, [r7, #4]
 800ca04:	f000 f8d5 	bl	800cbb2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ca0e:	b29a      	uxth	r2, r3
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	2208      	movs	r2, #8
 800ca18:	761a      	strb	r2, [r3, #24]

      break;
 800ca1a:	e086      	b.n	800cb2a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	791b      	ldrb	r3, [r3, #4]
 800ca20:	4619      	mov	r1, r3
 800ca22:	6878      	ldr	r0, [r7, #4]
 800ca24:	f000 fc74 	bl	800d310 <USBH_LL_GetURBState>
 800ca28:	4603      	mov	r3, r0
 800ca2a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ca2c:	7bbb      	ldrb	r3, [r7, #14]
 800ca2e:	2b01      	cmp	r3, #1
 800ca30:	d105      	bne.n	800ca3e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	220d      	movs	r2, #13
 800ca36:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800ca38:	2300      	movs	r3, #0
 800ca3a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ca3c:	e072      	b.n	800cb24 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800ca3e:	7bbb      	ldrb	r3, [r7, #14]
 800ca40:	2b04      	cmp	r3, #4
 800ca42:	d103      	bne.n	800ca4c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	220b      	movs	r2, #11
 800ca48:	761a      	strb	r2, [r3, #24]
      break;
 800ca4a:	e06b      	b.n	800cb24 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800ca4c:	7bbb      	ldrb	r3, [r7, #14]
 800ca4e:	2b05      	cmp	r3, #5
 800ca50:	d168      	bne.n	800cb24 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800ca52:	2303      	movs	r3, #3
 800ca54:	73fb      	strb	r3, [r7, #15]
      break;
 800ca56:	e065      	b.n	800cb24 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	795b      	ldrb	r3, [r3, #5]
 800ca5c:	2201      	movs	r2, #1
 800ca5e:	9200      	str	r2, [sp, #0]
 800ca60:	2200      	movs	r2, #0
 800ca62:	2100      	movs	r1, #0
 800ca64:	6878      	ldr	r0, [r7, #4]
 800ca66:	f000 f87f 	bl	800cb68 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ca70:	b29a      	uxth	r2, r3
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	220a      	movs	r2, #10
 800ca7a:	761a      	strb	r2, [r3, #24]
      break;
 800ca7c:	e055      	b.n	800cb2a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	795b      	ldrb	r3, [r3, #5]
 800ca82:	4619      	mov	r1, r3
 800ca84:	6878      	ldr	r0, [r7, #4]
 800ca86:	f000 fc43 	bl	800d310 <USBH_LL_GetURBState>
 800ca8a:	4603      	mov	r3, r0
 800ca8c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800ca8e:	7bbb      	ldrb	r3, [r7, #14]
 800ca90:	2b01      	cmp	r3, #1
 800ca92:	d105      	bne.n	800caa0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800ca94:	2300      	movs	r3, #0
 800ca96:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	220d      	movs	r2, #13
 800ca9c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ca9e:	e043      	b.n	800cb28 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800caa0:	7bbb      	ldrb	r3, [r7, #14]
 800caa2:	2b02      	cmp	r3, #2
 800caa4:	d103      	bne.n	800caae <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	2209      	movs	r2, #9
 800caaa:	761a      	strb	r2, [r3, #24]
      break;
 800caac:	e03c      	b.n	800cb28 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800caae:	7bbb      	ldrb	r3, [r7, #14]
 800cab0:	2b04      	cmp	r3, #4
 800cab2:	d139      	bne.n	800cb28 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	220b      	movs	r2, #11
 800cab8:	761a      	strb	r2, [r3, #24]
      break;
 800caba:	e035      	b.n	800cb28 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	7e5b      	ldrb	r3, [r3, #25]
 800cac0:	3301      	adds	r3, #1
 800cac2:	b2da      	uxtb	r2, r3
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	765a      	strb	r2, [r3, #25]
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	7e5b      	ldrb	r3, [r3, #25]
 800cacc:	2b02      	cmp	r3, #2
 800cace:	d806      	bhi.n	800cade <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	2201      	movs	r2, #1
 800cad4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	2201      	movs	r2, #1
 800cada:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800cadc:	e025      	b.n	800cb2a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cae4:	2106      	movs	r1, #6
 800cae6:	6878      	ldr	r0, [r7, #4]
 800cae8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	2200      	movs	r2, #0
 800caee:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	795b      	ldrb	r3, [r3, #5]
 800caf4:	4619      	mov	r1, r3
 800caf6:	6878      	ldr	r0, [r7, #4]
 800caf8:	f000 f90c 	bl	800cd14 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	791b      	ldrb	r3, [r3, #4]
 800cb00:	4619      	mov	r1, r3
 800cb02:	6878      	ldr	r0, [r7, #4]
 800cb04:	f000 f906 	bl	800cd14 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	2200      	movs	r2, #0
 800cb0c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800cb0e:	2302      	movs	r3, #2
 800cb10:	73fb      	strb	r3, [r7, #15]
      break;
 800cb12:	e00a      	b.n	800cb2a <USBH_HandleControl+0x2de>

    default:
      break;
 800cb14:	bf00      	nop
 800cb16:	e008      	b.n	800cb2a <USBH_HandleControl+0x2de>
      break;
 800cb18:	bf00      	nop
 800cb1a:	e006      	b.n	800cb2a <USBH_HandleControl+0x2de>
      break;
 800cb1c:	bf00      	nop
 800cb1e:	e004      	b.n	800cb2a <USBH_HandleControl+0x2de>
      break;
 800cb20:	bf00      	nop
 800cb22:	e002      	b.n	800cb2a <USBH_HandleControl+0x2de>
      break;
 800cb24:	bf00      	nop
 800cb26:	e000      	b.n	800cb2a <USBH_HandleControl+0x2de>
      break;
 800cb28:	bf00      	nop
  }

  return status;
 800cb2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	3710      	adds	r7, #16
 800cb30:	46bd      	mov	sp, r7
 800cb32:	bd80      	pop	{r7, pc}

0800cb34 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800cb34:	b580      	push	{r7, lr}
 800cb36:	b088      	sub	sp, #32
 800cb38:	af04      	add	r7, sp, #16
 800cb3a:	60f8      	str	r0, [r7, #12]
 800cb3c:	60b9      	str	r1, [r7, #8]
 800cb3e:	4613      	mov	r3, r2
 800cb40:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800cb42:	79f9      	ldrb	r1, [r7, #7]
 800cb44:	2300      	movs	r3, #0
 800cb46:	9303      	str	r3, [sp, #12]
 800cb48:	2308      	movs	r3, #8
 800cb4a:	9302      	str	r3, [sp, #8]
 800cb4c:	68bb      	ldr	r3, [r7, #8]
 800cb4e:	9301      	str	r3, [sp, #4]
 800cb50:	2300      	movs	r3, #0
 800cb52:	9300      	str	r3, [sp, #0]
 800cb54:	2300      	movs	r3, #0
 800cb56:	2200      	movs	r2, #0
 800cb58:	68f8      	ldr	r0, [r7, #12]
 800cb5a:	f000 fba8 	bl	800d2ae <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800cb5e:	2300      	movs	r3, #0
}
 800cb60:	4618      	mov	r0, r3
 800cb62:	3710      	adds	r7, #16
 800cb64:	46bd      	mov	sp, r7
 800cb66:	bd80      	pop	{r7, pc}

0800cb68 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b088      	sub	sp, #32
 800cb6c:	af04      	add	r7, sp, #16
 800cb6e:	60f8      	str	r0, [r7, #12]
 800cb70:	60b9      	str	r1, [r7, #8]
 800cb72:	4611      	mov	r1, r2
 800cb74:	461a      	mov	r2, r3
 800cb76:	460b      	mov	r3, r1
 800cb78:	80fb      	strh	r3, [r7, #6]
 800cb7a:	4613      	mov	r3, r2
 800cb7c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d001      	beq.n	800cb8c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800cb88:	2300      	movs	r3, #0
 800cb8a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800cb8c:	7979      	ldrb	r1, [r7, #5]
 800cb8e:	7e3b      	ldrb	r3, [r7, #24]
 800cb90:	9303      	str	r3, [sp, #12]
 800cb92:	88fb      	ldrh	r3, [r7, #6]
 800cb94:	9302      	str	r3, [sp, #8]
 800cb96:	68bb      	ldr	r3, [r7, #8]
 800cb98:	9301      	str	r3, [sp, #4]
 800cb9a:	2301      	movs	r3, #1
 800cb9c:	9300      	str	r3, [sp, #0]
 800cb9e:	2300      	movs	r3, #0
 800cba0:	2200      	movs	r2, #0
 800cba2:	68f8      	ldr	r0, [r7, #12]
 800cba4:	f000 fb83 	bl	800d2ae <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800cba8:	2300      	movs	r3, #0
}
 800cbaa:	4618      	mov	r0, r3
 800cbac:	3710      	adds	r7, #16
 800cbae:	46bd      	mov	sp, r7
 800cbb0:	bd80      	pop	{r7, pc}

0800cbb2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800cbb2:	b580      	push	{r7, lr}
 800cbb4:	b088      	sub	sp, #32
 800cbb6:	af04      	add	r7, sp, #16
 800cbb8:	60f8      	str	r0, [r7, #12]
 800cbba:	60b9      	str	r1, [r7, #8]
 800cbbc:	4611      	mov	r1, r2
 800cbbe:	461a      	mov	r2, r3
 800cbc0:	460b      	mov	r3, r1
 800cbc2:	80fb      	strh	r3, [r7, #6]
 800cbc4:	4613      	mov	r3, r2
 800cbc6:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800cbc8:	7979      	ldrb	r1, [r7, #5]
 800cbca:	2300      	movs	r3, #0
 800cbcc:	9303      	str	r3, [sp, #12]
 800cbce:	88fb      	ldrh	r3, [r7, #6]
 800cbd0:	9302      	str	r3, [sp, #8]
 800cbd2:	68bb      	ldr	r3, [r7, #8]
 800cbd4:	9301      	str	r3, [sp, #4]
 800cbd6:	2301      	movs	r3, #1
 800cbd8:	9300      	str	r3, [sp, #0]
 800cbda:	2300      	movs	r3, #0
 800cbdc:	2201      	movs	r2, #1
 800cbde:	68f8      	ldr	r0, [r7, #12]
 800cbe0:	f000 fb65 	bl	800d2ae <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800cbe4:	2300      	movs	r3, #0

}
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	3710      	adds	r7, #16
 800cbea:	46bd      	mov	sp, r7
 800cbec:	bd80      	pop	{r7, pc}

0800cbee <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800cbee:	b580      	push	{r7, lr}
 800cbf0:	b088      	sub	sp, #32
 800cbf2:	af04      	add	r7, sp, #16
 800cbf4:	60f8      	str	r0, [r7, #12]
 800cbf6:	60b9      	str	r1, [r7, #8]
 800cbf8:	4611      	mov	r1, r2
 800cbfa:	461a      	mov	r2, r3
 800cbfc:	460b      	mov	r3, r1
 800cbfe:	80fb      	strh	r3, [r7, #6]
 800cc00:	4613      	mov	r3, r2
 800cc02:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d001      	beq.n	800cc12 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800cc0e:	2300      	movs	r3, #0
 800cc10:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800cc12:	7979      	ldrb	r1, [r7, #5]
 800cc14:	7e3b      	ldrb	r3, [r7, #24]
 800cc16:	9303      	str	r3, [sp, #12]
 800cc18:	88fb      	ldrh	r3, [r7, #6]
 800cc1a:	9302      	str	r3, [sp, #8]
 800cc1c:	68bb      	ldr	r3, [r7, #8]
 800cc1e:	9301      	str	r3, [sp, #4]
 800cc20:	2301      	movs	r3, #1
 800cc22:	9300      	str	r3, [sp, #0]
 800cc24:	2302      	movs	r3, #2
 800cc26:	2200      	movs	r2, #0
 800cc28:	68f8      	ldr	r0, [r7, #12]
 800cc2a:	f000 fb40 	bl	800d2ae <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800cc2e:	2300      	movs	r3, #0
}
 800cc30:	4618      	mov	r0, r3
 800cc32:	3710      	adds	r7, #16
 800cc34:	46bd      	mov	sp, r7
 800cc36:	bd80      	pop	{r7, pc}

0800cc38 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b088      	sub	sp, #32
 800cc3c:	af04      	add	r7, sp, #16
 800cc3e:	60f8      	str	r0, [r7, #12]
 800cc40:	60b9      	str	r1, [r7, #8]
 800cc42:	4611      	mov	r1, r2
 800cc44:	461a      	mov	r2, r3
 800cc46:	460b      	mov	r3, r1
 800cc48:	80fb      	strh	r3, [r7, #6]
 800cc4a:	4613      	mov	r3, r2
 800cc4c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800cc4e:	7979      	ldrb	r1, [r7, #5]
 800cc50:	2300      	movs	r3, #0
 800cc52:	9303      	str	r3, [sp, #12]
 800cc54:	88fb      	ldrh	r3, [r7, #6]
 800cc56:	9302      	str	r3, [sp, #8]
 800cc58:	68bb      	ldr	r3, [r7, #8]
 800cc5a:	9301      	str	r3, [sp, #4]
 800cc5c:	2301      	movs	r3, #1
 800cc5e:	9300      	str	r3, [sp, #0]
 800cc60:	2302      	movs	r3, #2
 800cc62:	2201      	movs	r2, #1
 800cc64:	68f8      	ldr	r0, [r7, #12]
 800cc66:	f000 fb22 	bl	800d2ae <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800cc6a:	2300      	movs	r3, #0
}
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	3710      	adds	r7, #16
 800cc70:	46bd      	mov	sp, r7
 800cc72:	bd80      	pop	{r7, pc}

0800cc74 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800cc74:	b580      	push	{r7, lr}
 800cc76:	b086      	sub	sp, #24
 800cc78:	af04      	add	r7, sp, #16
 800cc7a:	6078      	str	r0, [r7, #4]
 800cc7c:	4608      	mov	r0, r1
 800cc7e:	4611      	mov	r1, r2
 800cc80:	461a      	mov	r2, r3
 800cc82:	4603      	mov	r3, r0
 800cc84:	70fb      	strb	r3, [r7, #3]
 800cc86:	460b      	mov	r3, r1
 800cc88:	70bb      	strb	r3, [r7, #2]
 800cc8a:	4613      	mov	r3, r2
 800cc8c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800cc8e:	7878      	ldrb	r0, [r7, #1]
 800cc90:	78ba      	ldrb	r2, [r7, #2]
 800cc92:	78f9      	ldrb	r1, [r7, #3]
 800cc94:	8b3b      	ldrh	r3, [r7, #24]
 800cc96:	9302      	str	r3, [sp, #8]
 800cc98:	7d3b      	ldrb	r3, [r7, #20]
 800cc9a:	9301      	str	r3, [sp, #4]
 800cc9c:	7c3b      	ldrb	r3, [r7, #16]
 800cc9e:	9300      	str	r3, [sp, #0]
 800cca0:	4603      	mov	r3, r0
 800cca2:	6878      	ldr	r0, [r7, #4]
 800cca4:	f000 fab5 	bl	800d212 <USBH_LL_OpenPipe>

  return USBH_OK;
 800cca8:	2300      	movs	r3, #0
}
 800ccaa:	4618      	mov	r0, r3
 800ccac:	3708      	adds	r7, #8
 800ccae:	46bd      	mov	sp, r7
 800ccb0:	bd80      	pop	{r7, pc}

0800ccb2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800ccb2:	b580      	push	{r7, lr}
 800ccb4:	b082      	sub	sp, #8
 800ccb6:	af00      	add	r7, sp, #0
 800ccb8:	6078      	str	r0, [r7, #4]
 800ccba:	460b      	mov	r3, r1
 800ccbc:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800ccbe:	78fb      	ldrb	r3, [r7, #3]
 800ccc0:	4619      	mov	r1, r3
 800ccc2:	6878      	ldr	r0, [r7, #4]
 800ccc4:	f000 fad4 	bl	800d270 <USBH_LL_ClosePipe>

  return USBH_OK;
 800ccc8:	2300      	movs	r3, #0
}
 800ccca:	4618      	mov	r0, r3
 800cccc:	3708      	adds	r7, #8
 800ccce:	46bd      	mov	sp, r7
 800ccd0:	bd80      	pop	{r7, pc}

0800ccd2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800ccd2:	b580      	push	{r7, lr}
 800ccd4:	b084      	sub	sp, #16
 800ccd6:	af00      	add	r7, sp, #0
 800ccd8:	6078      	str	r0, [r7, #4]
 800ccda:	460b      	mov	r3, r1
 800ccdc:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800ccde:	6878      	ldr	r0, [r7, #4]
 800cce0:	f000 f836 	bl	800cd50 <USBH_GetFreePipe>
 800cce4:	4603      	mov	r3, r0
 800cce6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800cce8:	89fb      	ldrh	r3, [r7, #14]
 800ccea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ccee:	4293      	cmp	r3, r2
 800ccf0:	d00a      	beq.n	800cd08 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800ccf2:	78fa      	ldrb	r2, [r7, #3]
 800ccf4:	89fb      	ldrh	r3, [r7, #14]
 800ccf6:	f003 030f 	and.w	r3, r3, #15
 800ccfa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ccfe:	6879      	ldr	r1, [r7, #4]
 800cd00:	33e0      	adds	r3, #224	; 0xe0
 800cd02:	009b      	lsls	r3, r3, #2
 800cd04:	440b      	add	r3, r1
 800cd06:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800cd08:	89fb      	ldrh	r3, [r7, #14]
 800cd0a:	b2db      	uxtb	r3, r3
}
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	3710      	adds	r7, #16
 800cd10:	46bd      	mov	sp, r7
 800cd12:	bd80      	pop	{r7, pc}

0800cd14 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800cd14:	b480      	push	{r7}
 800cd16:	b083      	sub	sp, #12
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	6078      	str	r0, [r7, #4]
 800cd1c:	460b      	mov	r3, r1
 800cd1e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800cd20:	78fb      	ldrb	r3, [r7, #3]
 800cd22:	2b0f      	cmp	r3, #15
 800cd24:	d80d      	bhi.n	800cd42 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800cd26:	78fb      	ldrb	r3, [r7, #3]
 800cd28:	687a      	ldr	r2, [r7, #4]
 800cd2a:	33e0      	adds	r3, #224	; 0xe0
 800cd2c:	009b      	lsls	r3, r3, #2
 800cd2e:	4413      	add	r3, r2
 800cd30:	685a      	ldr	r2, [r3, #4]
 800cd32:	78fb      	ldrb	r3, [r7, #3]
 800cd34:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800cd38:	6879      	ldr	r1, [r7, #4]
 800cd3a:	33e0      	adds	r3, #224	; 0xe0
 800cd3c:	009b      	lsls	r3, r3, #2
 800cd3e:	440b      	add	r3, r1
 800cd40:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800cd42:	2300      	movs	r3, #0
}
 800cd44:	4618      	mov	r0, r3
 800cd46:	370c      	adds	r7, #12
 800cd48:	46bd      	mov	sp, r7
 800cd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd4e:	4770      	bx	lr

0800cd50 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800cd50:	b480      	push	{r7}
 800cd52:	b085      	sub	sp, #20
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800cd58:	2300      	movs	r3, #0
 800cd5a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	73fb      	strb	r3, [r7, #15]
 800cd60:	e00f      	b.n	800cd82 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800cd62:	7bfb      	ldrb	r3, [r7, #15]
 800cd64:	687a      	ldr	r2, [r7, #4]
 800cd66:	33e0      	adds	r3, #224	; 0xe0
 800cd68:	009b      	lsls	r3, r3, #2
 800cd6a:	4413      	add	r3, r2
 800cd6c:	685b      	ldr	r3, [r3, #4]
 800cd6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d102      	bne.n	800cd7c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800cd76:	7bfb      	ldrb	r3, [r7, #15]
 800cd78:	b29b      	uxth	r3, r3
 800cd7a:	e007      	b.n	800cd8c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800cd7c:	7bfb      	ldrb	r3, [r7, #15]
 800cd7e:	3301      	adds	r3, #1
 800cd80:	73fb      	strb	r3, [r7, #15]
 800cd82:	7bfb      	ldrb	r3, [r7, #15]
 800cd84:	2b0f      	cmp	r3, #15
 800cd86:	d9ec      	bls.n	800cd62 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800cd88:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	3714      	adds	r7, #20
 800cd90:	46bd      	mov	sp, r7
 800cd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd96:	4770      	bx	lr

0800cd98 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800cd98:	b480      	push	{r7}
 800cd9a:	b087      	sub	sp, #28
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	60f8      	str	r0, [r7, #12]
 800cda0:	60b9      	str	r1, [r7, #8]
 800cda2:	4613      	mov	r3, r2
 800cda4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800cda6:	2301      	movs	r3, #1
 800cda8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800cdaa:	2300      	movs	r3, #0
 800cdac:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800cdae:	4b1f      	ldr	r3, [pc, #124]	; (800ce2c <FATFS_LinkDriverEx+0x94>)
 800cdb0:	7a5b      	ldrb	r3, [r3, #9]
 800cdb2:	b2db      	uxtb	r3, r3
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d131      	bne.n	800ce1c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800cdb8:	4b1c      	ldr	r3, [pc, #112]	; (800ce2c <FATFS_LinkDriverEx+0x94>)
 800cdba:	7a5b      	ldrb	r3, [r3, #9]
 800cdbc:	b2db      	uxtb	r3, r3
 800cdbe:	461a      	mov	r2, r3
 800cdc0:	4b1a      	ldr	r3, [pc, #104]	; (800ce2c <FATFS_LinkDriverEx+0x94>)
 800cdc2:	2100      	movs	r1, #0
 800cdc4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800cdc6:	4b19      	ldr	r3, [pc, #100]	; (800ce2c <FATFS_LinkDriverEx+0x94>)
 800cdc8:	7a5b      	ldrb	r3, [r3, #9]
 800cdca:	b2db      	uxtb	r3, r3
 800cdcc:	4a17      	ldr	r2, [pc, #92]	; (800ce2c <FATFS_LinkDriverEx+0x94>)
 800cdce:	009b      	lsls	r3, r3, #2
 800cdd0:	4413      	add	r3, r2
 800cdd2:	68fa      	ldr	r2, [r7, #12]
 800cdd4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800cdd6:	4b15      	ldr	r3, [pc, #84]	; (800ce2c <FATFS_LinkDriverEx+0x94>)
 800cdd8:	7a5b      	ldrb	r3, [r3, #9]
 800cdda:	b2db      	uxtb	r3, r3
 800cddc:	461a      	mov	r2, r3
 800cdde:	4b13      	ldr	r3, [pc, #76]	; (800ce2c <FATFS_LinkDriverEx+0x94>)
 800cde0:	4413      	add	r3, r2
 800cde2:	79fa      	ldrb	r2, [r7, #7]
 800cde4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800cde6:	4b11      	ldr	r3, [pc, #68]	; (800ce2c <FATFS_LinkDriverEx+0x94>)
 800cde8:	7a5b      	ldrb	r3, [r3, #9]
 800cdea:	b2db      	uxtb	r3, r3
 800cdec:	1c5a      	adds	r2, r3, #1
 800cdee:	b2d1      	uxtb	r1, r2
 800cdf0:	4a0e      	ldr	r2, [pc, #56]	; (800ce2c <FATFS_LinkDriverEx+0x94>)
 800cdf2:	7251      	strb	r1, [r2, #9]
 800cdf4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800cdf6:	7dbb      	ldrb	r3, [r7, #22]
 800cdf8:	3330      	adds	r3, #48	; 0x30
 800cdfa:	b2da      	uxtb	r2, r3
 800cdfc:	68bb      	ldr	r3, [r7, #8]
 800cdfe:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ce00:	68bb      	ldr	r3, [r7, #8]
 800ce02:	3301      	adds	r3, #1
 800ce04:	223a      	movs	r2, #58	; 0x3a
 800ce06:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ce08:	68bb      	ldr	r3, [r7, #8]
 800ce0a:	3302      	adds	r3, #2
 800ce0c:	222f      	movs	r2, #47	; 0x2f
 800ce0e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ce10:	68bb      	ldr	r3, [r7, #8]
 800ce12:	3303      	adds	r3, #3
 800ce14:	2200      	movs	r2, #0
 800ce16:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ce18:	2300      	movs	r3, #0
 800ce1a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ce1c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce1e:	4618      	mov	r0, r3
 800ce20:	371c      	adds	r7, #28
 800ce22:	46bd      	mov	sp, r7
 800ce24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce28:	4770      	bx	lr
 800ce2a:	bf00      	nop
 800ce2c:	200005c0 	.word	0x200005c0

0800ce30 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b082      	sub	sp, #8
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	6078      	str	r0, [r7, #4]
 800ce38:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ce3a:	2200      	movs	r2, #0
 800ce3c:	6839      	ldr	r1, [r7, #0]
 800ce3e:	6878      	ldr	r0, [r7, #4]
 800ce40:	f7ff ffaa 	bl	800cd98 <FATFS_LinkDriverEx>
 800ce44:	4603      	mov	r3, r0
}
 800ce46:	4618      	mov	r0, r3
 800ce48:	3708      	adds	r7, #8
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	bd80      	pop	{r7, pc}
	...

0800ce50 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800ce50:	b580      	push	{r7, lr}
 800ce52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 800ce54:	2200      	movs	r2, #0
 800ce56:	490e      	ldr	r1, [pc, #56]	; (800ce90 <MX_USB_HOST_Init+0x40>)
 800ce58:	480e      	ldr	r0, [pc, #56]	; (800ce94 <MX_USB_HOST_Init+0x44>)
 800ce5a:	f7fe fb4b 	bl	800b4f4 <USBH_Init>
 800ce5e:	4603      	mov	r3, r0
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d001      	beq.n	800ce68 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800ce64:	f7f4 fb68 	bl	8001538 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_MSC_CLASS) != USBH_OK)
 800ce68:	490b      	ldr	r1, [pc, #44]	; (800ce98 <MX_USB_HOST_Init+0x48>)
 800ce6a:	480a      	ldr	r0, [pc, #40]	; (800ce94 <MX_USB_HOST_Init+0x44>)
 800ce6c:	f7fe fbd0 	bl	800b610 <USBH_RegisterClass>
 800ce70:	4603      	mov	r3, r0
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d001      	beq.n	800ce7a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800ce76:	f7f4 fb5f 	bl	8001538 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 800ce7a:	4806      	ldr	r0, [pc, #24]	; (800ce94 <MX_USB_HOST_Init+0x44>)
 800ce7c:	f7fe fc54 	bl	800b728 <USBH_Start>
 800ce80:	4603      	mov	r3, r0
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d001      	beq.n	800ce8a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800ce86:	f7f4 fb57 	bl	8001538 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800ce8a:	bf00      	nop
 800ce8c:	bd80      	pop	{r7, pc}
 800ce8e:	bf00      	nop
 800ce90:	0800ceb1 	.word	0x0800ceb1
 800ce94:	200005cc 	.word	0x200005cc
 800ce98:	200000b4 	.word	0x200000b4

0800ce9c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostHS);
 800cea0:	4802      	ldr	r0, [pc, #8]	; (800ceac <MX_USB_HOST_Process+0x10>)
 800cea2:	f7fe fc51 	bl	800b748 <USBH_Process>
}
 800cea6:	bf00      	nop
 800cea8:	bd80      	pop	{r7, pc}
 800ceaa:	bf00      	nop
 800ceac:	200005cc 	.word	0x200005cc

0800ceb0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800ceb0:	b480      	push	{r7}
 800ceb2:	b083      	sub	sp, #12
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	6078      	str	r0, [r7, #4]
 800ceb8:	460b      	mov	r3, r1
 800ceba:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800cebc:	78fb      	ldrb	r3, [r7, #3]
 800cebe:	3b01      	subs	r3, #1
 800cec0:	2b04      	cmp	r3, #4
 800cec2:	d819      	bhi.n	800cef8 <USBH_UserProcess+0x48>
 800cec4:	a201      	add	r2, pc, #4	; (adr r2, 800cecc <USBH_UserProcess+0x1c>)
 800cec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ceca:	bf00      	nop
 800cecc:	0800cef9 	.word	0x0800cef9
 800ced0:	0800cee9 	.word	0x0800cee9
 800ced4:	0800cef9 	.word	0x0800cef9
 800ced8:	0800cef1 	.word	0x0800cef1
 800cedc:	0800cee1 	.word	0x0800cee1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800cee0:	4b09      	ldr	r3, [pc, #36]	; (800cf08 <USBH_UserProcess+0x58>)
 800cee2:	2203      	movs	r2, #3
 800cee4:	701a      	strb	r2, [r3, #0]
  break;
 800cee6:	e008      	b.n	800cefa <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800cee8:	4b07      	ldr	r3, [pc, #28]	; (800cf08 <USBH_UserProcess+0x58>)
 800ceea:	2202      	movs	r2, #2
 800ceec:	701a      	strb	r2, [r3, #0]
  break;
 800ceee:	e004      	b.n	800cefa <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800cef0:	4b05      	ldr	r3, [pc, #20]	; (800cf08 <USBH_UserProcess+0x58>)
 800cef2:	2201      	movs	r2, #1
 800cef4:	701a      	strb	r2, [r3, #0]

  break;
 800cef6:	e000      	b.n	800cefa <USBH_UserProcess+0x4a>

  default:
  break;
 800cef8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800cefa:	bf00      	nop
 800cefc:	370c      	adds	r7, #12
 800cefe:	46bd      	mov	sp, r7
 800cf00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf04:	4770      	bx	lr
 800cf06:	bf00      	nop
 800cf08:	200009a4 	.word	0x200009a4

0800cf0c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	b08a      	sub	sp, #40	; 0x28
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cf14:	f107 0314 	add.w	r3, r7, #20
 800cf18:	2200      	movs	r2, #0
 800cf1a:	601a      	str	r2, [r3, #0]
 800cf1c:	605a      	str	r2, [r3, #4]
 800cf1e:	609a      	str	r2, [r3, #8]
 800cf20:	60da      	str	r2, [r3, #12]
 800cf22:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	4a24      	ldr	r2, [pc, #144]	; (800cfbc <HAL_HCD_MspInit+0xb0>)
 800cf2a:	4293      	cmp	r3, r2
 800cf2c:	d141      	bne.n	800cfb2 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800cf2e:	2300      	movs	r3, #0
 800cf30:	613b      	str	r3, [r7, #16]
 800cf32:	4b23      	ldr	r3, [pc, #140]	; (800cfc0 <HAL_HCD_MspInit+0xb4>)
 800cf34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf36:	4a22      	ldr	r2, [pc, #136]	; (800cfc0 <HAL_HCD_MspInit+0xb4>)
 800cf38:	f043 0302 	orr.w	r3, r3, #2
 800cf3c:	6313      	str	r3, [r2, #48]	; 0x30
 800cf3e:	4b20      	ldr	r3, [pc, #128]	; (800cfc0 <HAL_HCD_MspInit+0xb4>)
 800cf40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf42:	f003 0302 	and.w	r3, r3, #2
 800cf46:	613b      	str	r3, [r7, #16]
 800cf48:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800cf4a:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800cf4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cf50:	2302      	movs	r3, #2
 800cf52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cf54:	2300      	movs	r3, #0
 800cf56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cf58:	2300      	movs	r3, #0
 800cf5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800cf5c:	230c      	movs	r3, #12
 800cf5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cf60:	f107 0314 	add.w	r3, r7, #20
 800cf64:	4619      	mov	r1, r3
 800cf66:	4817      	ldr	r0, [pc, #92]	; (800cfc4 <HAL_HCD_MspInit+0xb8>)
 800cf68:	f7f5 fd0a 	bl	8002980 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800cf6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cf70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800cf72:	2300      	movs	r3, #0
 800cf74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cf76:	2300      	movs	r3, #0
 800cf78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800cf7a:	f107 0314 	add.w	r3, r7, #20
 800cf7e:	4619      	mov	r1, r3
 800cf80:	4810      	ldr	r0, [pc, #64]	; (800cfc4 <HAL_HCD_MspInit+0xb8>)
 800cf82:	f7f5 fcfd 	bl	8002980 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800cf86:	2300      	movs	r3, #0
 800cf88:	60fb      	str	r3, [r7, #12]
 800cf8a:	4b0d      	ldr	r3, [pc, #52]	; (800cfc0 <HAL_HCD_MspInit+0xb4>)
 800cf8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf8e:	4a0c      	ldr	r2, [pc, #48]	; (800cfc0 <HAL_HCD_MspInit+0xb4>)
 800cf90:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cf94:	6313      	str	r3, [r2, #48]	; 0x30
 800cf96:	4b0a      	ldr	r3, [pc, #40]	; (800cfc0 <HAL_HCD_MspInit+0xb4>)
 800cf98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cf9e:	60fb      	str	r3, [r7, #12]
 800cfa0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	2100      	movs	r1, #0
 800cfa6:	204d      	movs	r0, #77	; 0x4d
 800cfa8:	f7f5 f91b 	bl	80021e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800cfac:	204d      	movs	r0, #77	; 0x4d
 800cfae:	f7f5 f934 	bl	800221a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800cfb2:	bf00      	nop
 800cfb4:	3728      	adds	r7, #40	; 0x28
 800cfb6:	46bd      	mov	sp, r7
 800cfb8:	bd80      	pop	{r7, pc}
 800cfba:	bf00      	nop
 800cfbc:	40040000 	.word	0x40040000
 800cfc0:	40023800 	.word	0x40023800
 800cfc4:	40020400 	.word	0x40020400

0800cfc8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800cfc8:	b580      	push	{r7, lr}
 800cfca:	b082      	sub	sp, #8
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	f7fe ff95 	bl	800bf06 <USBH_LL_IncTimer>
}
 800cfdc:	bf00      	nop
 800cfde:	3708      	adds	r7, #8
 800cfe0:	46bd      	mov	sp, r7
 800cfe2:	bd80      	pop	{r7, pc}

0800cfe4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800cfe4:	b580      	push	{r7, lr}
 800cfe6:	b082      	sub	sp, #8
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800cff2:	4618      	mov	r0, r3
 800cff4:	f7fe ffcd 	bl	800bf92 <USBH_LL_Connect>
}
 800cff8:	bf00      	nop
 800cffa:	3708      	adds	r7, #8
 800cffc:	46bd      	mov	sp, r7
 800cffe:	bd80      	pop	{r7, pc}

0800d000 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d000:	b580      	push	{r7, lr}
 800d002:	b082      	sub	sp, #8
 800d004:	af00      	add	r7, sp, #0
 800d006:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d00e:	4618      	mov	r0, r3
 800d010:	f7fe ffd6 	bl	800bfc0 <USBH_LL_Disconnect>
}
 800d014:	bf00      	nop
 800d016:	3708      	adds	r7, #8
 800d018:	46bd      	mov	sp, r7
 800d01a:	bd80      	pop	{r7, pc}

0800d01c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800d01c:	b480      	push	{r7}
 800d01e:	b083      	sub	sp, #12
 800d020:	af00      	add	r7, sp, #0
 800d022:	6078      	str	r0, [r7, #4]
 800d024:	460b      	mov	r3, r1
 800d026:	70fb      	strb	r3, [r7, #3]
 800d028:	4613      	mov	r3, r2
 800d02a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800d02c:	bf00      	nop
 800d02e:	370c      	adds	r7, #12
 800d030:	46bd      	mov	sp, r7
 800d032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d036:	4770      	bx	lr

0800d038 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d038:	b580      	push	{r7, lr}
 800d03a:	b082      	sub	sp, #8
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d046:	4618      	mov	r0, r3
 800d048:	f7fe ff87 	bl	800bf5a <USBH_LL_PortEnabled>
}
 800d04c:	bf00      	nop
 800d04e:	3708      	adds	r7, #8
 800d050:	46bd      	mov	sp, r7
 800d052:	bd80      	pop	{r7, pc}

0800d054 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d054:	b580      	push	{r7, lr}
 800d056:	b082      	sub	sp, #8
 800d058:	af00      	add	r7, sp, #0
 800d05a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d062:	4618      	mov	r0, r3
 800d064:	f7fe ff87 	bl	800bf76 <USBH_LL_PortDisabled>
}
 800d068:	bf00      	nop
 800d06a:	3708      	adds	r7, #8
 800d06c:	46bd      	mov	sp, r7
 800d06e:	bd80      	pop	{r7, pc}

0800d070 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800d070:	b580      	push	{r7, lr}
 800d072:	b082      	sub	sp, #8
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d132      	bne.n	800d0e8 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 800d082:	4a1c      	ldr	r2, [pc, #112]	; (800d0f4 <USBH_LL_Init+0x84>)
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	4a19      	ldr	r2, [pc, #100]	; (800d0f4 <USBH_LL_Init+0x84>)
 800d08e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800d092:	4b18      	ldr	r3, [pc, #96]	; (800d0f4 <USBH_LL_Init+0x84>)
 800d094:	4a18      	ldr	r2, [pc, #96]	; (800d0f8 <USBH_LL_Init+0x88>)
 800d096:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 800d098:	4b16      	ldr	r3, [pc, #88]	; (800d0f4 <USBH_LL_Init+0x84>)
 800d09a:	220c      	movs	r2, #12
 800d09c:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 800d09e:	4b15      	ldr	r3, [pc, #84]	; (800d0f4 <USBH_LL_Init+0x84>)
 800d0a0:	2201      	movs	r2, #1
 800d0a2:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800d0a4:	4b13      	ldr	r3, [pc, #76]	; (800d0f4 <USBH_LL_Init+0x84>)
 800d0a6:	2200      	movs	r2, #0
 800d0a8:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800d0aa:	4b12      	ldr	r3, [pc, #72]	; (800d0f4 <USBH_LL_Init+0x84>)
 800d0ac:	2202      	movs	r2, #2
 800d0ae:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800d0b0:	4b10      	ldr	r3, [pc, #64]	; (800d0f4 <USBH_LL_Init+0x84>)
 800d0b2:	2200      	movs	r2, #0
 800d0b4:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800d0b6:	4b0f      	ldr	r3, [pc, #60]	; (800d0f4 <USBH_LL_Init+0x84>)
 800d0b8:	2200      	movs	r2, #0
 800d0ba:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800d0bc:	4b0d      	ldr	r3, [pc, #52]	; (800d0f4 <USBH_LL_Init+0x84>)
 800d0be:	2200      	movs	r2, #0
 800d0c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800d0c2:	4b0c      	ldr	r3, [pc, #48]	; (800d0f4 <USBH_LL_Init+0x84>)
 800d0c4:	2200      	movs	r2, #0
 800d0c6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800d0c8:	480a      	ldr	r0, [pc, #40]	; (800d0f4 <USBH_LL_Init+0x84>)
 800d0ca:	f7f5 fe1e 	bl	8002d0a <HAL_HCD_Init>
 800d0ce:	4603      	mov	r3, r0
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d001      	beq.n	800d0d8 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 800d0d4:	f7f4 fa30 	bl	8001538 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800d0d8:	4806      	ldr	r0, [pc, #24]	; (800d0f4 <USBH_LL_Init+0x84>)
 800d0da:	f7f6 fa02 	bl	80034e2 <HAL_HCD_GetCurrentFrame>
 800d0de:	4603      	mov	r3, r0
 800d0e0:	4619      	mov	r1, r3
 800d0e2:	6878      	ldr	r0, [r7, #4]
 800d0e4:	f7fe ff00 	bl	800bee8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800d0e8:	2300      	movs	r3, #0
}
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	3708      	adds	r7, #8
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	bd80      	pop	{r7, pc}
 800d0f2:	bf00      	nop
 800d0f4:	200009a8 	.word	0x200009a8
 800d0f8:	40040000 	.word	0x40040000

0800d0fc <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800d0fc:	b580      	push	{r7, lr}
 800d0fe:	b084      	sub	sp, #16
 800d100:	af00      	add	r7, sp, #0
 800d102:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d104:	2300      	movs	r3, #0
 800d106:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d108:	2300      	movs	r3, #0
 800d10a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d112:	4618      	mov	r0, r3
 800d114:	f7f6 f96f 	bl	80033f6 <HAL_HCD_Start>
 800d118:	4603      	mov	r3, r0
 800d11a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d11c:	7bfb      	ldrb	r3, [r7, #15]
 800d11e:	4618      	mov	r0, r3
 800d120:	f000 f98c 	bl	800d43c <USBH_Get_USB_Status>
 800d124:	4603      	mov	r3, r0
 800d126:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d128:	7bbb      	ldrb	r3, [r7, #14]
}
 800d12a:	4618      	mov	r0, r3
 800d12c:	3710      	adds	r7, #16
 800d12e:	46bd      	mov	sp, r7
 800d130:	bd80      	pop	{r7, pc}

0800d132 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800d132:	b580      	push	{r7, lr}
 800d134:	b084      	sub	sp, #16
 800d136:	af00      	add	r7, sp, #0
 800d138:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d13a:	2300      	movs	r3, #0
 800d13c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d13e:	2300      	movs	r3, #0
 800d140:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d148:	4618      	mov	r0, r3
 800d14a:	f7f6 f977 	bl	800343c <HAL_HCD_Stop>
 800d14e:	4603      	mov	r3, r0
 800d150:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d152:	7bfb      	ldrb	r3, [r7, #15]
 800d154:	4618      	mov	r0, r3
 800d156:	f000 f971 	bl	800d43c <USBH_Get_USB_Status>
 800d15a:	4603      	mov	r3, r0
 800d15c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d15e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d160:	4618      	mov	r0, r3
 800d162:	3710      	adds	r7, #16
 800d164:	46bd      	mov	sp, r7
 800d166:	bd80      	pop	{r7, pc}

0800d168 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800d168:	b580      	push	{r7, lr}
 800d16a:	b084      	sub	sp, #16
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800d170:	2301      	movs	r3, #1
 800d172:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d17a:	4618      	mov	r0, r3
 800d17c:	f7f6 f9bf 	bl	80034fe <HAL_HCD_GetCurrentSpeed>
 800d180:	4603      	mov	r3, r0
 800d182:	2b02      	cmp	r3, #2
 800d184:	d00c      	beq.n	800d1a0 <USBH_LL_GetSpeed+0x38>
 800d186:	2b02      	cmp	r3, #2
 800d188:	d80d      	bhi.n	800d1a6 <USBH_LL_GetSpeed+0x3e>
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d002      	beq.n	800d194 <USBH_LL_GetSpeed+0x2c>
 800d18e:	2b01      	cmp	r3, #1
 800d190:	d003      	beq.n	800d19a <USBH_LL_GetSpeed+0x32>
 800d192:	e008      	b.n	800d1a6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800d194:	2300      	movs	r3, #0
 800d196:	73fb      	strb	r3, [r7, #15]
    break;
 800d198:	e008      	b.n	800d1ac <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800d19a:	2301      	movs	r3, #1
 800d19c:	73fb      	strb	r3, [r7, #15]
    break;
 800d19e:	e005      	b.n	800d1ac <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800d1a0:	2302      	movs	r3, #2
 800d1a2:	73fb      	strb	r3, [r7, #15]
    break;
 800d1a4:	e002      	b.n	800d1ac <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800d1a6:	2301      	movs	r3, #1
 800d1a8:	73fb      	strb	r3, [r7, #15]
    break;
 800d1aa:	bf00      	nop
  }
  return  speed;
 800d1ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	3710      	adds	r7, #16
 800d1b2:	46bd      	mov	sp, r7
 800d1b4:	bd80      	pop	{r7, pc}

0800d1b6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800d1b6:	b580      	push	{r7, lr}
 800d1b8:	b084      	sub	sp, #16
 800d1ba:	af00      	add	r7, sp, #0
 800d1bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1be:	2300      	movs	r3, #0
 800d1c0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d1cc:	4618      	mov	r0, r3
 800d1ce:	f7f6 f952 	bl	8003476 <HAL_HCD_ResetPort>
 800d1d2:	4603      	mov	r3, r0
 800d1d4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d1d6:	7bfb      	ldrb	r3, [r7, #15]
 800d1d8:	4618      	mov	r0, r3
 800d1da:	f000 f92f 	bl	800d43c <USBH_Get_USB_Status>
 800d1de:	4603      	mov	r3, r0
 800d1e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d1e2:	7bbb      	ldrb	r3, [r7, #14]
}
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	3710      	adds	r7, #16
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	bd80      	pop	{r7, pc}

0800d1ec <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d1ec:	b580      	push	{r7, lr}
 800d1ee:	b082      	sub	sp, #8
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	6078      	str	r0, [r7, #4]
 800d1f4:	460b      	mov	r3, r1
 800d1f6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d1fe:	78fa      	ldrb	r2, [r7, #3]
 800d200:	4611      	mov	r1, r2
 800d202:	4618      	mov	r0, r3
 800d204:	f7f6 f959 	bl	80034ba <HAL_HCD_HC_GetXferCount>
 800d208:	4603      	mov	r3, r0
}
 800d20a:	4618      	mov	r0, r3
 800d20c:	3708      	adds	r7, #8
 800d20e:	46bd      	mov	sp, r7
 800d210:	bd80      	pop	{r7, pc}

0800d212 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d212:	b590      	push	{r4, r7, lr}
 800d214:	b089      	sub	sp, #36	; 0x24
 800d216:	af04      	add	r7, sp, #16
 800d218:	6078      	str	r0, [r7, #4]
 800d21a:	4608      	mov	r0, r1
 800d21c:	4611      	mov	r1, r2
 800d21e:	461a      	mov	r2, r3
 800d220:	4603      	mov	r3, r0
 800d222:	70fb      	strb	r3, [r7, #3]
 800d224:	460b      	mov	r3, r1
 800d226:	70bb      	strb	r3, [r7, #2]
 800d228:	4613      	mov	r3, r2
 800d22a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d22c:	2300      	movs	r3, #0
 800d22e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d230:	2300      	movs	r3, #0
 800d232:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800d23a:	787c      	ldrb	r4, [r7, #1]
 800d23c:	78ba      	ldrb	r2, [r7, #2]
 800d23e:	78f9      	ldrb	r1, [r7, #3]
 800d240:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d242:	9302      	str	r3, [sp, #8]
 800d244:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d248:	9301      	str	r3, [sp, #4]
 800d24a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d24e:	9300      	str	r3, [sp, #0]
 800d250:	4623      	mov	r3, r4
 800d252:	f7f5 fdbc 	bl	8002dce <HAL_HCD_HC_Init>
 800d256:	4603      	mov	r3, r0
 800d258:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800d25a:	7bfb      	ldrb	r3, [r7, #15]
 800d25c:	4618      	mov	r0, r3
 800d25e:	f000 f8ed 	bl	800d43c <USBH_Get_USB_Status>
 800d262:	4603      	mov	r3, r0
 800d264:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d266:	7bbb      	ldrb	r3, [r7, #14]
}
 800d268:	4618      	mov	r0, r3
 800d26a:	3714      	adds	r7, #20
 800d26c:	46bd      	mov	sp, r7
 800d26e:	bd90      	pop	{r4, r7, pc}

0800d270 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d270:	b580      	push	{r7, lr}
 800d272:	b084      	sub	sp, #16
 800d274:	af00      	add	r7, sp, #0
 800d276:	6078      	str	r0, [r7, #4]
 800d278:	460b      	mov	r3, r1
 800d27a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d27c:	2300      	movs	r3, #0
 800d27e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d280:	2300      	movs	r3, #0
 800d282:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d28a:	78fa      	ldrb	r2, [r7, #3]
 800d28c:	4611      	mov	r1, r2
 800d28e:	4618      	mov	r0, r3
 800d290:	f7f5 fe2c 	bl	8002eec <HAL_HCD_HC_Halt>
 800d294:	4603      	mov	r3, r0
 800d296:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d298:	7bfb      	ldrb	r3, [r7, #15]
 800d29a:	4618      	mov	r0, r3
 800d29c:	f000 f8ce 	bl	800d43c <USBH_Get_USB_Status>
 800d2a0:	4603      	mov	r3, r0
 800d2a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d2a4:	7bbb      	ldrb	r3, [r7, #14]
}
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	3710      	adds	r7, #16
 800d2aa:	46bd      	mov	sp, r7
 800d2ac:	bd80      	pop	{r7, pc}

0800d2ae <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800d2ae:	b590      	push	{r4, r7, lr}
 800d2b0:	b089      	sub	sp, #36	; 0x24
 800d2b2:	af04      	add	r7, sp, #16
 800d2b4:	6078      	str	r0, [r7, #4]
 800d2b6:	4608      	mov	r0, r1
 800d2b8:	4611      	mov	r1, r2
 800d2ba:	461a      	mov	r2, r3
 800d2bc:	4603      	mov	r3, r0
 800d2be:	70fb      	strb	r3, [r7, #3]
 800d2c0:	460b      	mov	r3, r1
 800d2c2:	70bb      	strb	r3, [r7, #2]
 800d2c4:	4613      	mov	r3, r2
 800d2c6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2c8:	2300      	movs	r3, #0
 800d2ca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800d2d6:	787c      	ldrb	r4, [r7, #1]
 800d2d8:	78ba      	ldrb	r2, [r7, #2]
 800d2da:	78f9      	ldrb	r1, [r7, #3]
 800d2dc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d2e0:	9303      	str	r3, [sp, #12]
 800d2e2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d2e4:	9302      	str	r3, [sp, #8]
 800d2e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2e8:	9301      	str	r3, [sp, #4]
 800d2ea:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d2ee:	9300      	str	r3, [sp, #0]
 800d2f0:	4623      	mov	r3, r4
 800d2f2:	f7f5 fe1f 	bl	8002f34 <HAL_HCD_HC_SubmitRequest>
 800d2f6:	4603      	mov	r3, r0
 800d2f8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800d2fa:	7bfb      	ldrb	r3, [r7, #15]
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	f000 f89d 	bl	800d43c <USBH_Get_USB_Status>
 800d302:	4603      	mov	r3, r0
 800d304:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d306:	7bbb      	ldrb	r3, [r7, #14]
}
 800d308:	4618      	mov	r0, r3
 800d30a:	3714      	adds	r7, #20
 800d30c:	46bd      	mov	sp, r7
 800d30e:	bd90      	pop	{r4, r7, pc}

0800d310 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d310:	b580      	push	{r7, lr}
 800d312:	b082      	sub	sp, #8
 800d314:	af00      	add	r7, sp, #0
 800d316:	6078      	str	r0, [r7, #4]
 800d318:	460b      	mov	r3, r1
 800d31a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d322:	78fa      	ldrb	r2, [r7, #3]
 800d324:	4611      	mov	r1, r2
 800d326:	4618      	mov	r0, r3
 800d328:	f7f6 f8b3 	bl	8003492 <HAL_HCD_HC_GetURBState>
 800d32c:	4603      	mov	r3, r0
}
 800d32e:	4618      	mov	r0, r3
 800d330:	3708      	adds	r7, #8
 800d332:	46bd      	mov	sp, r7
 800d334:	bd80      	pop	{r7, pc}

0800d336 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800d336:	b580      	push	{r7, lr}
 800d338:	b082      	sub	sp, #8
 800d33a:	af00      	add	r7, sp, #0
 800d33c:	6078      	str	r0, [r7, #4]
 800d33e:	460b      	mov	r3, r1
 800d340:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d103      	bne.n	800d354 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 800d34c:	78fb      	ldrb	r3, [r7, #3]
 800d34e:	4618      	mov	r0, r3
 800d350:	f000 f8a0 	bl	800d494 <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800d354:	20c8      	movs	r0, #200	; 0xc8
 800d356:	f7f4 fe45 	bl	8001fe4 <HAL_Delay>
  return USBH_OK;
 800d35a:	2300      	movs	r3, #0
}
 800d35c:	4618      	mov	r0, r3
 800d35e:	3708      	adds	r7, #8
 800d360:	46bd      	mov	sp, r7
 800d362:	bd80      	pop	{r7, pc}

0800d364 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800d364:	b480      	push	{r7}
 800d366:	b085      	sub	sp, #20
 800d368:	af00      	add	r7, sp, #0
 800d36a:	6078      	str	r0, [r7, #4]
 800d36c:	460b      	mov	r3, r1
 800d36e:	70fb      	strb	r3, [r7, #3]
 800d370:	4613      	mov	r3, r2
 800d372:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d37a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800d37c:	78fb      	ldrb	r3, [r7, #3]
 800d37e:	68fa      	ldr	r2, [r7, #12]
 800d380:	212c      	movs	r1, #44	; 0x2c
 800d382:	fb01 f303 	mul.w	r3, r1, r3
 800d386:	4413      	add	r3, r2
 800d388:	333b      	adds	r3, #59	; 0x3b
 800d38a:	781b      	ldrb	r3, [r3, #0]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d009      	beq.n	800d3a4 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800d390:	78fb      	ldrb	r3, [r7, #3]
 800d392:	68fa      	ldr	r2, [r7, #12]
 800d394:	212c      	movs	r1, #44	; 0x2c
 800d396:	fb01 f303 	mul.w	r3, r1, r3
 800d39a:	4413      	add	r3, r2
 800d39c:	3354      	adds	r3, #84	; 0x54
 800d39e:	78ba      	ldrb	r2, [r7, #2]
 800d3a0:	701a      	strb	r2, [r3, #0]
 800d3a2:	e008      	b.n	800d3b6 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800d3a4:	78fb      	ldrb	r3, [r7, #3]
 800d3a6:	68fa      	ldr	r2, [r7, #12]
 800d3a8:	212c      	movs	r1, #44	; 0x2c
 800d3aa:	fb01 f303 	mul.w	r3, r1, r3
 800d3ae:	4413      	add	r3, r2
 800d3b0:	3355      	adds	r3, #85	; 0x55
 800d3b2:	78ba      	ldrb	r2, [r7, #2]
 800d3b4:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800d3b6:	2300      	movs	r3, #0
}
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	3714      	adds	r7, #20
 800d3bc:	46bd      	mov	sp, r7
 800d3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c2:	4770      	bx	lr

0800d3c4 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d3c4:	b480      	push	{r7}
 800d3c6:	b085      	sub	sp, #20
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	6078      	str	r0, [r7, #4]
 800d3cc:	460b      	mov	r3, r1
 800d3ce:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d3da:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800d3dc:	78fb      	ldrb	r3, [r7, #3]
 800d3de:	68ba      	ldr	r2, [r7, #8]
 800d3e0:	212c      	movs	r1, #44	; 0x2c
 800d3e2:	fb01 f303 	mul.w	r3, r1, r3
 800d3e6:	4413      	add	r3, r2
 800d3e8:	333b      	adds	r3, #59	; 0x3b
 800d3ea:	781b      	ldrb	r3, [r3, #0]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d009      	beq.n	800d404 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800d3f0:	78fb      	ldrb	r3, [r7, #3]
 800d3f2:	68ba      	ldr	r2, [r7, #8]
 800d3f4:	212c      	movs	r1, #44	; 0x2c
 800d3f6:	fb01 f303 	mul.w	r3, r1, r3
 800d3fa:	4413      	add	r3, r2
 800d3fc:	3354      	adds	r3, #84	; 0x54
 800d3fe:	781b      	ldrb	r3, [r3, #0]
 800d400:	73fb      	strb	r3, [r7, #15]
 800d402:	e008      	b.n	800d416 <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800d404:	78fb      	ldrb	r3, [r7, #3]
 800d406:	68ba      	ldr	r2, [r7, #8]
 800d408:	212c      	movs	r1, #44	; 0x2c
 800d40a:	fb01 f303 	mul.w	r3, r1, r3
 800d40e:	4413      	add	r3, r2
 800d410:	3355      	adds	r3, #85	; 0x55
 800d412:	781b      	ldrb	r3, [r3, #0]
 800d414:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800d416:	7bfb      	ldrb	r3, [r7, #15]
}
 800d418:	4618      	mov	r0, r3
 800d41a:	3714      	adds	r7, #20
 800d41c:	46bd      	mov	sp, r7
 800d41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d422:	4770      	bx	lr

0800d424 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800d424:	b580      	push	{r7, lr}
 800d426:	b082      	sub	sp, #8
 800d428:	af00      	add	r7, sp, #0
 800d42a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800d42c:	6878      	ldr	r0, [r7, #4]
 800d42e:	f7f4 fdd9 	bl	8001fe4 <HAL_Delay>
}
 800d432:	bf00      	nop
 800d434:	3708      	adds	r7, #8
 800d436:	46bd      	mov	sp, r7
 800d438:	bd80      	pop	{r7, pc}
	...

0800d43c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d43c:	b480      	push	{r7}
 800d43e:	b085      	sub	sp, #20
 800d440:	af00      	add	r7, sp, #0
 800d442:	4603      	mov	r3, r0
 800d444:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d446:	2300      	movs	r3, #0
 800d448:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d44a:	79fb      	ldrb	r3, [r7, #7]
 800d44c:	2b03      	cmp	r3, #3
 800d44e:	d817      	bhi.n	800d480 <USBH_Get_USB_Status+0x44>
 800d450:	a201      	add	r2, pc, #4	; (adr r2, 800d458 <USBH_Get_USB_Status+0x1c>)
 800d452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d456:	bf00      	nop
 800d458:	0800d469 	.word	0x0800d469
 800d45c:	0800d46f 	.word	0x0800d46f
 800d460:	0800d475 	.word	0x0800d475
 800d464:	0800d47b 	.word	0x0800d47b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800d468:	2300      	movs	r3, #0
 800d46a:	73fb      	strb	r3, [r7, #15]
    break;
 800d46c:	e00b      	b.n	800d486 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800d46e:	2302      	movs	r3, #2
 800d470:	73fb      	strb	r3, [r7, #15]
    break;
 800d472:	e008      	b.n	800d486 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800d474:	2301      	movs	r3, #1
 800d476:	73fb      	strb	r3, [r7, #15]
    break;
 800d478:	e005      	b.n	800d486 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800d47a:	2302      	movs	r3, #2
 800d47c:	73fb      	strb	r3, [r7, #15]
    break;
 800d47e:	e002      	b.n	800d486 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800d480:	2302      	movs	r3, #2
 800d482:	73fb      	strb	r3, [r7, #15]
    break;
 800d484:	bf00      	nop
  }
  return usb_status;
 800d486:	7bfb      	ldrb	r3, [r7, #15]
}
 800d488:	4618      	mov	r0, r3
 800d48a:	3714      	adds	r7, #20
 800d48c:	46bd      	mov	sp, r7
 800d48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d492:	4770      	bx	lr

0800d494 <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 800d494:	b580      	push	{r7, lr}
 800d496:	b084      	sub	sp, #16
 800d498:	af00      	add	r7, sp, #0
 800d49a:	4603      	mov	r3, r0
 800d49c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800d49e:	79fb      	ldrb	r3, [r7, #7]
 800d4a0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 800d4a2:	79fb      	ldrb	r3, [r7, #7]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d102      	bne.n	800d4ae <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800d4a8:	2301      	movs	r3, #1
 800d4aa:	73fb      	strb	r3, [r7, #15]
 800d4ac:	e001      	b.n	800d4b2 <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 800d4b2:	7bfb      	ldrb	r3, [r7, #15]
 800d4b4:	461a      	mov	r2, r3
 800d4b6:	2110      	movs	r1, #16
 800d4b8:	4803      	ldr	r0, [pc, #12]	; (800d4c8 <MX_DriverVbusHS+0x34>)
 800d4ba:	f7f5 fc0d 	bl	8002cd8 <HAL_GPIO_WritePin>
}
 800d4be:	bf00      	nop
 800d4c0:	3710      	adds	r7, #16
 800d4c2:	46bd      	mov	sp, r7
 800d4c4:	bd80      	pop	{r7, pc}
 800d4c6:	bf00      	nop
 800d4c8:	40020800 	.word	0x40020800

0800d4cc <__errno>:
 800d4cc:	4b01      	ldr	r3, [pc, #4]	; (800d4d4 <__errno+0x8>)
 800d4ce:	6818      	ldr	r0, [r3, #0]
 800d4d0:	4770      	bx	lr
 800d4d2:	bf00      	nop
 800d4d4:	200000d4 	.word	0x200000d4

0800d4d8 <__libc_init_array>:
 800d4d8:	b570      	push	{r4, r5, r6, lr}
 800d4da:	4d0d      	ldr	r5, [pc, #52]	; (800d510 <__libc_init_array+0x38>)
 800d4dc:	4c0d      	ldr	r4, [pc, #52]	; (800d514 <__libc_init_array+0x3c>)
 800d4de:	1b64      	subs	r4, r4, r5
 800d4e0:	10a4      	asrs	r4, r4, #2
 800d4e2:	2600      	movs	r6, #0
 800d4e4:	42a6      	cmp	r6, r4
 800d4e6:	d109      	bne.n	800d4fc <__libc_init_array+0x24>
 800d4e8:	4d0b      	ldr	r5, [pc, #44]	; (800d518 <__libc_init_array+0x40>)
 800d4ea:	4c0c      	ldr	r4, [pc, #48]	; (800d51c <__libc_init_array+0x44>)
 800d4ec:	f001 f892 	bl	800e614 <_init>
 800d4f0:	1b64      	subs	r4, r4, r5
 800d4f2:	10a4      	asrs	r4, r4, #2
 800d4f4:	2600      	movs	r6, #0
 800d4f6:	42a6      	cmp	r6, r4
 800d4f8:	d105      	bne.n	800d506 <__libc_init_array+0x2e>
 800d4fa:	bd70      	pop	{r4, r5, r6, pc}
 800d4fc:	f855 3b04 	ldr.w	r3, [r5], #4
 800d500:	4798      	blx	r3
 800d502:	3601      	adds	r6, #1
 800d504:	e7ee      	b.n	800d4e4 <__libc_init_array+0xc>
 800d506:	f855 3b04 	ldr.w	r3, [r5], #4
 800d50a:	4798      	blx	r3
 800d50c:	3601      	adds	r6, #1
 800d50e:	e7f2      	b.n	800d4f6 <__libc_init_array+0x1e>
 800d510:	0800e830 	.word	0x0800e830
 800d514:	0800e830 	.word	0x0800e830
 800d518:	0800e830 	.word	0x0800e830
 800d51c:	0800e834 	.word	0x0800e834

0800d520 <malloc>:
 800d520:	4b02      	ldr	r3, [pc, #8]	; (800d52c <malloc+0xc>)
 800d522:	4601      	mov	r1, r0
 800d524:	6818      	ldr	r0, [r3, #0]
 800d526:	f000 b88d 	b.w	800d644 <_malloc_r>
 800d52a:	bf00      	nop
 800d52c:	200000d4 	.word	0x200000d4

0800d530 <free>:
 800d530:	4b02      	ldr	r3, [pc, #8]	; (800d53c <free+0xc>)
 800d532:	4601      	mov	r1, r0
 800d534:	6818      	ldr	r0, [r3, #0]
 800d536:	f000 b819 	b.w	800d56c <_free_r>
 800d53a:	bf00      	nop
 800d53c:	200000d4 	.word	0x200000d4

0800d540 <memcpy>:
 800d540:	440a      	add	r2, r1
 800d542:	4291      	cmp	r1, r2
 800d544:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d548:	d100      	bne.n	800d54c <memcpy+0xc>
 800d54a:	4770      	bx	lr
 800d54c:	b510      	push	{r4, lr}
 800d54e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d552:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d556:	4291      	cmp	r1, r2
 800d558:	d1f9      	bne.n	800d54e <memcpy+0xe>
 800d55a:	bd10      	pop	{r4, pc}

0800d55c <memset>:
 800d55c:	4402      	add	r2, r0
 800d55e:	4603      	mov	r3, r0
 800d560:	4293      	cmp	r3, r2
 800d562:	d100      	bne.n	800d566 <memset+0xa>
 800d564:	4770      	bx	lr
 800d566:	f803 1b01 	strb.w	r1, [r3], #1
 800d56a:	e7f9      	b.n	800d560 <memset+0x4>

0800d56c <_free_r>:
 800d56c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d56e:	2900      	cmp	r1, #0
 800d570:	d044      	beq.n	800d5fc <_free_r+0x90>
 800d572:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d576:	9001      	str	r0, [sp, #4]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	f1a1 0404 	sub.w	r4, r1, #4
 800d57e:	bfb8      	it	lt
 800d580:	18e4      	addlt	r4, r4, r3
 800d582:	f000 fbe1 	bl	800dd48 <__malloc_lock>
 800d586:	4a1e      	ldr	r2, [pc, #120]	; (800d600 <_free_r+0x94>)
 800d588:	9801      	ldr	r0, [sp, #4]
 800d58a:	6813      	ldr	r3, [r2, #0]
 800d58c:	b933      	cbnz	r3, 800d59c <_free_r+0x30>
 800d58e:	6063      	str	r3, [r4, #4]
 800d590:	6014      	str	r4, [r2, #0]
 800d592:	b003      	add	sp, #12
 800d594:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d598:	f000 bbdc 	b.w	800dd54 <__malloc_unlock>
 800d59c:	42a3      	cmp	r3, r4
 800d59e:	d908      	bls.n	800d5b2 <_free_r+0x46>
 800d5a0:	6825      	ldr	r5, [r4, #0]
 800d5a2:	1961      	adds	r1, r4, r5
 800d5a4:	428b      	cmp	r3, r1
 800d5a6:	bf01      	itttt	eq
 800d5a8:	6819      	ldreq	r1, [r3, #0]
 800d5aa:	685b      	ldreq	r3, [r3, #4]
 800d5ac:	1949      	addeq	r1, r1, r5
 800d5ae:	6021      	streq	r1, [r4, #0]
 800d5b0:	e7ed      	b.n	800d58e <_free_r+0x22>
 800d5b2:	461a      	mov	r2, r3
 800d5b4:	685b      	ldr	r3, [r3, #4]
 800d5b6:	b10b      	cbz	r3, 800d5bc <_free_r+0x50>
 800d5b8:	42a3      	cmp	r3, r4
 800d5ba:	d9fa      	bls.n	800d5b2 <_free_r+0x46>
 800d5bc:	6811      	ldr	r1, [r2, #0]
 800d5be:	1855      	adds	r5, r2, r1
 800d5c0:	42a5      	cmp	r5, r4
 800d5c2:	d10b      	bne.n	800d5dc <_free_r+0x70>
 800d5c4:	6824      	ldr	r4, [r4, #0]
 800d5c6:	4421      	add	r1, r4
 800d5c8:	1854      	adds	r4, r2, r1
 800d5ca:	42a3      	cmp	r3, r4
 800d5cc:	6011      	str	r1, [r2, #0]
 800d5ce:	d1e0      	bne.n	800d592 <_free_r+0x26>
 800d5d0:	681c      	ldr	r4, [r3, #0]
 800d5d2:	685b      	ldr	r3, [r3, #4]
 800d5d4:	6053      	str	r3, [r2, #4]
 800d5d6:	4421      	add	r1, r4
 800d5d8:	6011      	str	r1, [r2, #0]
 800d5da:	e7da      	b.n	800d592 <_free_r+0x26>
 800d5dc:	d902      	bls.n	800d5e4 <_free_r+0x78>
 800d5de:	230c      	movs	r3, #12
 800d5e0:	6003      	str	r3, [r0, #0]
 800d5e2:	e7d6      	b.n	800d592 <_free_r+0x26>
 800d5e4:	6825      	ldr	r5, [r4, #0]
 800d5e6:	1961      	adds	r1, r4, r5
 800d5e8:	428b      	cmp	r3, r1
 800d5ea:	bf04      	itt	eq
 800d5ec:	6819      	ldreq	r1, [r3, #0]
 800d5ee:	685b      	ldreq	r3, [r3, #4]
 800d5f0:	6063      	str	r3, [r4, #4]
 800d5f2:	bf04      	itt	eq
 800d5f4:	1949      	addeq	r1, r1, r5
 800d5f6:	6021      	streq	r1, [r4, #0]
 800d5f8:	6054      	str	r4, [r2, #4]
 800d5fa:	e7ca      	b.n	800d592 <_free_r+0x26>
 800d5fc:	b003      	add	sp, #12
 800d5fe:	bd30      	pop	{r4, r5, pc}
 800d600:	20000cac 	.word	0x20000cac

0800d604 <sbrk_aligned>:
 800d604:	b570      	push	{r4, r5, r6, lr}
 800d606:	4e0e      	ldr	r6, [pc, #56]	; (800d640 <sbrk_aligned+0x3c>)
 800d608:	460c      	mov	r4, r1
 800d60a:	6831      	ldr	r1, [r6, #0]
 800d60c:	4605      	mov	r5, r0
 800d60e:	b911      	cbnz	r1, 800d616 <sbrk_aligned+0x12>
 800d610:	f000 f8a4 	bl	800d75c <_sbrk_r>
 800d614:	6030      	str	r0, [r6, #0]
 800d616:	4621      	mov	r1, r4
 800d618:	4628      	mov	r0, r5
 800d61a:	f000 f89f 	bl	800d75c <_sbrk_r>
 800d61e:	1c43      	adds	r3, r0, #1
 800d620:	d00a      	beq.n	800d638 <sbrk_aligned+0x34>
 800d622:	1cc4      	adds	r4, r0, #3
 800d624:	f024 0403 	bic.w	r4, r4, #3
 800d628:	42a0      	cmp	r0, r4
 800d62a:	d007      	beq.n	800d63c <sbrk_aligned+0x38>
 800d62c:	1a21      	subs	r1, r4, r0
 800d62e:	4628      	mov	r0, r5
 800d630:	f000 f894 	bl	800d75c <_sbrk_r>
 800d634:	3001      	adds	r0, #1
 800d636:	d101      	bne.n	800d63c <sbrk_aligned+0x38>
 800d638:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800d63c:	4620      	mov	r0, r4
 800d63e:	bd70      	pop	{r4, r5, r6, pc}
 800d640:	20000cb0 	.word	0x20000cb0

0800d644 <_malloc_r>:
 800d644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d648:	1ccd      	adds	r5, r1, #3
 800d64a:	f025 0503 	bic.w	r5, r5, #3
 800d64e:	3508      	adds	r5, #8
 800d650:	2d0c      	cmp	r5, #12
 800d652:	bf38      	it	cc
 800d654:	250c      	movcc	r5, #12
 800d656:	2d00      	cmp	r5, #0
 800d658:	4607      	mov	r7, r0
 800d65a:	db01      	blt.n	800d660 <_malloc_r+0x1c>
 800d65c:	42a9      	cmp	r1, r5
 800d65e:	d905      	bls.n	800d66c <_malloc_r+0x28>
 800d660:	230c      	movs	r3, #12
 800d662:	603b      	str	r3, [r7, #0]
 800d664:	2600      	movs	r6, #0
 800d666:	4630      	mov	r0, r6
 800d668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d66c:	4e2e      	ldr	r6, [pc, #184]	; (800d728 <_malloc_r+0xe4>)
 800d66e:	f000 fb6b 	bl	800dd48 <__malloc_lock>
 800d672:	6833      	ldr	r3, [r6, #0]
 800d674:	461c      	mov	r4, r3
 800d676:	bb34      	cbnz	r4, 800d6c6 <_malloc_r+0x82>
 800d678:	4629      	mov	r1, r5
 800d67a:	4638      	mov	r0, r7
 800d67c:	f7ff ffc2 	bl	800d604 <sbrk_aligned>
 800d680:	1c43      	adds	r3, r0, #1
 800d682:	4604      	mov	r4, r0
 800d684:	d14d      	bne.n	800d722 <_malloc_r+0xde>
 800d686:	6834      	ldr	r4, [r6, #0]
 800d688:	4626      	mov	r6, r4
 800d68a:	2e00      	cmp	r6, #0
 800d68c:	d140      	bne.n	800d710 <_malloc_r+0xcc>
 800d68e:	6823      	ldr	r3, [r4, #0]
 800d690:	4631      	mov	r1, r6
 800d692:	4638      	mov	r0, r7
 800d694:	eb04 0803 	add.w	r8, r4, r3
 800d698:	f000 f860 	bl	800d75c <_sbrk_r>
 800d69c:	4580      	cmp	r8, r0
 800d69e:	d13a      	bne.n	800d716 <_malloc_r+0xd2>
 800d6a0:	6821      	ldr	r1, [r4, #0]
 800d6a2:	3503      	adds	r5, #3
 800d6a4:	1a6d      	subs	r5, r5, r1
 800d6a6:	f025 0503 	bic.w	r5, r5, #3
 800d6aa:	3508      	adds	r5, #8
 800d6ac:	2d0c      	cmp	r5, #12
 800d6ae:	bf38      	it	cc
 800d6b0:	250c      	movcc	r5, #12
 800d6b2:	4629      	mov	r1, r5
 800d6b4:	4638      	mov	r0, r7
 800d6b6:	f7ff ffa5 	bl	800d604 <sbrk_aligned>
 800d6ba:	3001      	adds	r0, #1
 800d6bc:	d02b      	beq.n	800d716 <_malloc_r+0xd2>
 800d6be:	6823      	ldr	r3, [r4, #0]
 800d6c0:	442b      	add	r3, r5
 800d6c2:	6023      	str	r3, [r4, #0]
 800d6c4:	e00e      	b.n	800d6e4 <_malloc_r+0xa0>
 800d6c6:	6822      	ldr	r2, [r4, #0]
 800d6c8:	1b52      	subs	r2, r2, r5
 800d6ca:	d41e      	bmi.n	800d70a <_malloc_r+0xc6>
 800d6cc:	2a0b      	cmp	r2, #11
 800d6ce:	d916      	bls.n	800d6fe <_malloc_r+0xba>
 800d6d0:	1961      	adds	r1, r4, r5
 800d6d2:	42a3      	cmp	r3, r4
 800d6d4:	6025      	str	r5, [r4, #0]
 800d6d6:	bf18      	it	ne
 800d6d8:	6059      	strne	r1, [r3, #4]
 800d6da:	6863      	ldr	r3, [r4, #4]
 800d6dc:	bf08      	it	eq
 800d6de:	6031      	streq	r1, [r6, #0]
 800d6e0:	5162      	str	r2, [r4, r5]
 800d6e2:	604b      	str	r3, [r1, #4]
 800d6e4:	4638      	mov	r0, r7
 800d6e6:	f104 060b 	add.w	r6, r4, #11
 800d6ea:	f000 fb33 	bl	800dd54 <__malloc_unlock>
 800d6ee:	f026 0607 	bic.w	r6, r6, #7
 800d6f2:	1d23      	adds	r3, r4, #4
 800d6f4:	1af2      	subs	r2, r6, r3
 800d6f6:	d0b6      	beq.n	800d666 <_malloc_r+0x22>
 800d6f8:	1b9b      	subs	r3, r3, r6
 800d6fa:	50a3      	str	r3, [r4, r2]
 800d6fc:	e7b3      	b.n	800d666 <_malloc_r+0x22>
 800d6fe:	6862      	ldr	r2, [r4, #4]
 800d700:	42a3      	cmp	r3, r4
 800d702:	bf0c      	ite	eq
 800d704:	6032      	streq	r2, [r6, #0]
 800d706:	605a      	strne	r2, [r3, #4]
 800d708:	e7ec      	b.n	800d6e4 <_malloc_r+0xa0>
 800d70a:	4623      	mov	r3, r4
 800d70c:	6864      	ldr	r4, [r4, #4]
 800d70e:	e7b2      	b.n	800d676 <_malloc_r+0x32>
 800d710:	4634      	mov	r4, r6
 800d712:	6876      	ldr	r6, [r6, #4]
 800d714:	e7b9      	b.n	800d68a <_malloc_r+0x46>
 800d716:	230c      	movs	r3, #12
 800d718:	603b      	str	r3, [r7, #0]
 800d71a:	4638      	mov	r0, r7
 800d71c:	f000 fb1a 	bl	800dd54 <__malloc_unlock>
 800d720:	e7a1      	b.n	800d666 <_malloc_r+0x22>
 800d722:	6025      	str	r5, [r4, #0]
 800d724:	e7de      	b.n	800d6e4 <_malloc_r+0xa0>
 800d726:	bf00      	nop
 800d728:	20000cac 	.word	0x20000cac

0800d72c <iprintf>:
 800d72c:	b40f      	push	{r0, r1, r2, r3}
 800d72e:	4b0a      	ldr	r3, [pc, #40]	; (800d758 <iprintf+0x2c>)
 800d730:	b513      	push	{r0, r1, r4, lr}
 800d732:	681c      	ldr	r4, [r3, #0]
 800d734:	b124      	cbz	r4, 800d740 <iprintf+0x14>
 800d736:	69a3      	ldr	r3, [r4, #24]
 800d738:	b913      	cbnz	r3, 800d740 <iprintf+0x14>
 800d73a:	4620      	mov	r0, r4
 800d73c:	f000 f9fe 	bl	800db3c <__sinit>
 800d740:	ab05      	add	r3, sp, #20
 800d742:	9a04      	ldr	r2, [sp, #16]
 800d744:	68a1      	ldr	r1, [r4, #8]
 800d746:	9301      	str	r3, [sp, #4]
 800d748:	4620      	mov	r0, r4
 800d74a:	f000 fb33 	bl	800ddb4 <_vfiprintf_r>
 800d74e:	b002      	add	sp, #8
 800d750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d754:	b004      	add	sp, #16
 800d756:	4770      	bx	lr
 800d758:	200000d4 	.word	0x200000d4

0800d75c <_sbrk_r>:
 800d75c:	b538      	push	{r3, r4, r5, lr}
 800d75e:	4d06      	ldr	r5, [pc, #24]	; (800d778 <_sbrk_r+0x1c>)
 800d760:	2300      	movs	r3, #0
 800d762:	4604      	mov	r4, r0
 800d764:	4608      	mov	r0, r1
 800d766:	602b      	str	r3, [r5, #0]
 800d768:	f7f4 fb58 	bl	8001e1c <_sbrk>
 800d76c:	1c43      	adds	r3, r0, #1
 800d76e:	d102      	bne.n	800d776 <_sbrk_r+0x1a>
 800d770:	682b      	ldr	r3, [r5, #0]
 800d772:	b103      	cbz	r3, 800d776 <_sbrk_r+0x1a>
 800d774:	6023      	str	r3, [r4, #0]
 800d776:	bd38      	pop	{r3, r4, r5, pc}
 800d778:	20000cb8 	.word	0x20000cb8

0800d77c <setvbuf>:
 800d77c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d780:	461d      	mov	r5, r3
 800d782:	4b5d      	ldr	r3, [pc, #372]	; (800d8f8 <setvbuf+0x17c>)
 800d784:	681f      	ldr	r7, [r3, #0]
 800d786:	4604      	mov	r4, r0
 800d788:	460e      	mov	r6, r1
 800d78a:	4690      	mov	r8, r2
 800d78c:	b127      	cbz	r7, 800d798 <setvbuf+0x1c>
 800d78e:	69bb      	ldr	r3, [r7, #24]
 800d790:	b913      	cbnz	r3, 800d798 <setvbuf+0x1c>
 800d792:	4638      	mov	r0, r7
 800d794:	f000 f9d2 	bl	800db3c <__sinit>
 800d798:	4b58      	ldr	r3, [pc, #352]	; (800d8fc <setvbuf+0x180>)
 800d79a:	429c      	cmp	r4, r3
 800d79c:	d167      	bne.n	800d86e <setvbuf+0xf2>
 800d79e:	687c      	ldr	r4, [r7, #4]
 800d7a0:	f1b8 0f02 	cmp.w	r8, #2
 800d7a4:	d006      	beq.n	800d7b4 <setvbuf+0x38>
 800d7a6:	f1b8 0f01 	cmp.w	r8, #1
 800d7aa:	f200 809f 	bhi.w	800d8ec <setvbuf+0x170>
 800d7ae:	2d00      	cmp	r5, #0
 800d7b0:	f2c0 809c 	blt.w	800d8ec <setvbuf+0x170>
 800d7b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d7b6:	07db      	lsls	r3, r3, #31
 800d7b8:	d405      	bmi.n	800d7c6 <setvbuf+0x4a>
 800d7ba:	89a3      	ldrh	r3, [r4, #12]
 800d7bc:	0598      	lsls	r0, r3, #22
 800d7be:	d402      	bmi.n	800d7c6 <setvbuf+0x4a>
 800d7c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d7c2:	f000 fa59 	bl	800dc78 <__retarget_lock_acquire_recursive>
 800d7c6:	4621      	mov	r1, r4
 800d7c8:	4638      	mov	r0, r7
 800d7ca:	f000 f923 	bl	800da14 <_fflush_r>
 800d7ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d7d0:	b141      	cbz	r1, 800d7e4 <setvbuf+0x68>
 800d7d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d7d6:	4299      	cmp	r1, r3
 800d7d8:	d002      	beq.n	800d7e0 <setvbuf+0x64>
 800d7da:	4638      	mov	r0, r7
 800d7dc:	f7ff fec6 	bl	800d56c <_free_r>
 800d7e0:	2300      	movs	r3, #0
 800d7e2:	6363      	str	r3, [r4, #52]	; 0x34
 800d7e4:	2300      	movs	r3, #0
 800d7e6:	61a3      	str	r3, [r4, #24]
 800d7e8:	6063      	str	r3, [r4, #4]
 800d7ea:	89a3      	ldrh	r3, [r4, #12]
 800d7ec:	0619      	lsls	r1, r3, #24
 800d7ee:	d503      	bpl.n	800d7f8 <setvbuf+0x7c>
 800d7f0:	6921      	ldr	r1, [r4, #16]
 800d7f2:	4638      	mov	r0, r7
 800d7f4:	f7ff feba 	bl	800d56c <_free_r>
 800d7f8:	89a3      	ldrh	r3, [r4, #12]
 800d7fa:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800d7fe:	f023 0303 	bic.w	r3, r3, #3
 800d802:	f1b8 0f02 	cmp.w	r8, #2
 800d806:	81a3      	strh	r3, [r4, #12]
 800d808:	d06c      	beq.n	800d8e4 <setvbuf+0x168>
 800d80a:	ab01      	add	r3, sp, #4
 800d80c:	466a      	mov	r2, sp
 800d80e:	4621      	mov	r1, r4
 800d810:	4638      	mov	r0, r7
 800d812:	f000 fa33 	bl	800dc7c <__swhatbuf_r>
 800d816:	89a3      	ldrh	r3, [r4, #12]
 800d818:	4318      	orrs	r0, r3
 800d81a:	81a0      	strh	r0, [r4, #12]
 800d81c:	2d00      	cmp	r5, #0
 800d81e:	d130      	bne.n	800d882 <setvbuf+0x106>
 800d820:	9d00      	ldr	r5, [sp, #0]
 800d822:	4628      	mov	r0, r5
 800d824:	f7ff fe7c 	bl	800d520 <malloc>
 800d828:	4606      	mov	r6, r0
 800d82a:	2800      	cmp	r0, #0
 800d82c:	d155      	bne.n	800d8da <setvbuf+0x15e>
 800d82e:	f8dd 9000 	ldr.w	r9, [sp]
 800d832:	45a9      	cmp	r9, r5
 800d834:	d14a      	bne.n	800d8cc <setvbuf+0x150>
 800d836:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800d83a:	2200      	movs	r2, #0
 800d83c:	60a2      	str	r2, [r4, #8]
 800d83e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800d842:	6022      	str	r2, [r4, #0]
 800d844:	6122      	str	r2, [r4, #16]
 800d846:	2201      	movs	r2, #1
 800d848:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d84c:	6162      	str	r2, [r4, #20]
 800d84e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d850:	f043 0302 	orr.w	r3, r3, #2
 800d854:	07d2      	lsls	r2, r2, #31
 800d856:	81a3      	strh	r3, [r4, #12]
 800d858:	d405      	bmi.n	800d866 <setvbuf+0xea>
 800d85a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800d85e:	d102      	bne.n	800d866 <setvbuf+0xea>
 800d860:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d862:	f000 fa0a 	bl	800dc7a <__retarget_lock_release_recursive>
 800d866:	4628      	mov	r0, r5
 800d868:	b003      	add	sp, #12
 800d86a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d86e:	4b24      	ldr	r3, [pc, #144]	; (800d900 <setvbuf+0x184>)
 800d870:	429c      	cmp	r4, r3
 800d872:	d101      	bne.n	800d878 <setvbuf+0xfc>
 800d874:	68bc      	ldr	r4, [r7, #8]
 800d876:	e793      	b.n	800d7a0 <setvbuf+0x24>
 800d878:	4b22      	ldr	r3, [pc, #136]	; (800d904 <setvbuf+0x188>)
 800d87a:	429c      	cmp	r4, r3
 800d87c:	bf08      	it	eq
 800d87e:	68fc      	ldreq	r4, [r7, #12]
 800d880:	e78e      	b.n	800d7a0 <setvbuf+0x24>
 800d882:	2e00      	cmp	r6, #0
 800d884:	d0cd      	beq.n	800d822 <setvbuf+0xa6>
 800d886:	69bb      	ldr	r3, [r7, #24]
 800d888:	b913      	cbnz	r3, 800d890 <setvbuf+0x114>
 800d88a:	4638      	mov	r0, r7
 800d88c:	f000 f956 	bl	800db3c <__sinit>
 800d890:	f1b8 0f01 	cmp.w	r8, #1
 800d894:	bf08      	it	eq
 800d896:	89a3      	ldrheq	r3, [r4, #12]
 800d898:	6026      	str	r6, [r4, #0]
 800d89a:	bf04      	itt	eq
 800d89c:	f043 0301 	orreq.w	r3, r3, #1
 800d8a0:	81a3      	strheq	r3, [r4, #12]
 800d8a2:	89a2      	ldrh	r2, [r4, #12]
 800d8a4:	f012 0308 	ands.w	r3, r2, #8
 800d8a8:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800d8ac:	d01c      	beq.n	800d8e8 <setvbuf+0x16c>
 800d8ae:	07d3      	lsls	r3, r2, #31
 800d8b0:	bf41      	itttt	mi
 800d8b2:	2300      	movmi	r3, #0
 800d8b4:	426d      	negmi	r5, r5
 800d8b6:	60a3      	strmi	r3, [r4, #8]
 800d8b8:	61a5      	strmi	r5, [r4, #24]
 800d8ba:	bf58      	it	pl
 800d8bc:	60a5      	strpl	r5, [r4, #8]
 800d8be:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800d8c0:	f015 0501 	ands.w	r5, r5, #1
 800d8c4:	d115      	bne.n	800d8f2 <setvbuf+0x176>
 800d8c6:	f412 7f00 	tst.w	r2, #512	; 0x200
 800d8ca:	e7c8      	b.n	800d85e <setvbuf+0xe2>
 800d8cc:	4648      	mov	r0, r9
 800d8ce:	f7ff fe27 	bl	800d520 <malloc>
 800d8d2:	4606      	mov	r6, r0
 800d8d4:	2800      	cmp	r0, #0
 800d8d6:	d0ae      	beq.n	800d836 <setvbuf+0xba>
 800d8d8:	464d      	mov	r5, r9
 800d8da:	89a3      	ldrh	r3, [r4, #12]
 800d8dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d8e0:	81a3      	strh	r3, [r4, #12]
 800d8e2:	e7d0      	b.n	800d886 <setvbuf+0x10a>
 800d8e4:	2500      	movs	r5, #0
 800d8e6:	e7a8      	b.n	800d83a <setvbuf+0xbe>
 800d8e8:	60a3      	str	r3, [r4, #8]
 800d8ea:	e7e8      	b.n	800d8be <setvbuf+0x142>
 800d8ec:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800d8f0:	e7b9      	b.n	800d866 <setvbuf+0xea>
 800d8f2:	2500      	movs	r5, #0
 800d8f4:	e7b7      	b.n	800d866 <setvbuf+0xea>
 800d8f6:	bf00      	nop
 800d8f8:	200000d4 	.word	0x200000d4
 800d8fc:	0800e7b4 	.word	0x0800e7b4
 800d900:	0800e7d4 	.word	0x0800e7d4
 800d904:	0800e794 	.word	0x0800e794

0800d908 <__sflush_r>:
 800d908:	898a      	ldrh	r2, [r1, #12]
 800d90a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d90e:	4605      	mov	r5, r0
 800d910:	0710      	lsls	r0, r2, #28
 800d912:	460c      	mov	r4, r1
 800d914:	d458      	bmi.n	800d9c8 <__sflush_r+0xc0>
 800d916:	684b      	ldr	r3, [r1, #4]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	dc05      	bgt.n	800d928 <__sflush_r+0x20>
 800d91c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d91e:	2b00      	cmp	r3, #0
 800d920:	dc02      	bgt.n	800d928 <__sflush_r+0x20>
 800d922:	2000      	movs	r0, #0
 800d924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d928:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d92a:	2e00      	cmp	r6, #0
 800d92c:	d0f9      	beq.n	800d922 <__sflush_r+0x1a>
 800d92e:	2300      	movs	r3, #0
 800d930:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d934:	682f      	ldr	r7, [r5, #0]
 800d936:	602b      	str	r3, [r5, #0]
 800d938:	d032      	beq.n	800d9a0 <__sflush_r+0x98>
 800d93a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d93c:	89a3      	ldrh	r3, [r4, #12]
 800d93e:	075a      	lsls	r2, r3, #29
 800d940:	d505      	bpl.n	800d94e <__sflush_r+0x46>
 800d942:	6863      	ldr	r3, [r4, #4]
 800d944:	1ac0      	subs	r0, r0, r3
 800d946:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d948:	b10b      	cbz	r3, 800d94e <__sflush_r+0x46>
 800d94a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d94c:	1ac0      	subs	r0, r0, r3
 800d94e:	2300      	movs	r3, #0
 800d950:	4602      	mov	r2, r0
 800d952:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d954:	6a21      	ldr	r1, [r4, #32]
 800d956:	4628      	mov	r0, r5
 800d958:	47b0      	blx	r6
 800d95a:	1c43      	adds	r3, r0, #1
 800d95c:	89a3      	ldrh	r3, [r4, #12]
 800d95e:	d106      	bne.n	800d96e <__sflush_r+0x66>
 800d960:	6829      	ldr	r1, [r5, #0]
 800d962:	291d      	cmp	r1, #29
 800d964:	d82c      	bhi.n	800d9c0 <__sflush_r+0xb8>
 800d966:	4a2a      	ldr	r2, [pc, #168]	; (800da10 <__sflush_r+0x108>)
 800d968:	40ca      	lsrs	r2, r1
 800d96a:	07d6      	lsls	r6, r2, #31
 800d96c:	d528      	bpl.n	800d9c0 <__sflush_r+0xb8>
 800d96e:	2200      	movs	r2, #0
 800d970:	6062      	str	r2, [r4, #4]
 800d972:	04d9      	lsls	r1, r3, #19
 800d974:	6922      	ldr	r2, [r4, #16]
 800d976:	6022      	str	r2, [r4, #0]
 800d978:	d504      	bpl.n	800d984 <__sflush_r+0x7c>
 800d97a:	1c42      	adds	r2, r0, #1
 800d97c:	d101      	bne.n	800d982 <__sflush_r+0x7a>
 800d97e:	682b      	ldr	r3, [r5, #0]
 800d980:	b903      	cbnz	r3, 800d984 <__sflush_r+0x7c>
 800d982:	6560      	str	r0, [r4, #84]	; 0x54
 800d984:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d986:	602f      	str	r7, [r5, #0]
 800d988:	2900      	cmp	r1, #0
 800d98a:	d0ca      	beq.n	800d922 <__sflush_r+0x1a>
 800d98c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d990:	4299      	cmp	r1, r3
 800d992:	d002      	beq.n	800d99a <__sflush_r+0x92>
 800d994:	4628      	mov	r0, r5
 800d996:	f7ff fde9 	bl	800d56c <_free_r>
 800d99a:	2000      	movs	r0, #0
 800d99c:	6360      	str	r0, [r4, #52]	; 0x34
 800d99e:	e7c1      	b.n	800d924 <__sflush_r+0x1c>
 800d9a0:	6a21      	ldr	r1, [r4, #32]
 800d9a2:	2301      	movs	r3, #1
 800d9a4:	4628      	mov	r0, r5
 800d9a6:	47b0      	blx	r6
 800d9a8:	1c41      	adds	r1, r0, #1
 800d9aa:	d1c7      	bne.n	800d93c <__sflush_r+0x34>
 800d9ac:	682b      	ldr	r3, [r5, #0]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d0c4      	beq.n	800d93c <__sflush_r+0x34>
 800d9b2:	2b1d      	cmp	r3, #29
 800d9b4:	d001      	beq.n	800d9ba <__sflush_r+0xb2>
 800d9b6:	2b16      	cmp	r3, #22
 800d9b8:	d101      	bne.n	800d9be <__sflush_r+0xb6>
 800d9ba:	602f      	str	r7, [r5, #0]
 800d9bc:	e7b1      	b.n	800d922 <__sflush_r+0x1a>
 800d9be:	89a3      	ldrh	r3, [r4, #12]
 800d9c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d9c4:	81a3      	strh	r3, [r4, #12]
 800d9c6:	e7ad      	b.n	800d924 <__sflush_r+0x1c>
 800d9c8:	690f      	ldr	r7, [r1, #16]
 800d9ca:	2f00      	cmp	r7, #0
 800d9cc:	d0a9      	beq.n	800d922 <__sflush_r+0x1a>
 800d9ce:	0793      	lsls	r3, r2, #30
 800d9d0:	680e      	ldr	r6, [r1, #0]
 800d9d2:	bf08      	it	eq
 800d9d4:	694b      	ldreq	r3, [r1, #20]
 800d9d6:	600f      	str	r7, [r1, #0]
 800d9d8:	bf18      	it	ne
 800d9da:	2300      	movne	r3, #0
 800d9dc:	eba6 0807 	sub.w	r8, r6, r7
 800d9e0:	608b      	str	r3, [r1, #8]
 800d9e2:	f1b8 0f00 	cmp.w	r8, #0
 800d9e6:	dd9c      	ble.n	800d922 <__sflush_r+0x1a>
 800d9e8:	6a21      	ldr	r1, [r4, #32]
 800d9ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d9ec:	4643      	mov	r3, r8
 800d9ee:	463a      	mov	r2, r7
 800d9f0:	4628      	mov	r0, r5
 800d9f2:	47b0      	blx	r6
 800d9f4:	2800      	cmp	r0, #0
 800d9f6:	dc06      	bgt.n	800da06 <__sflush_r+0xfe>
 800d9f8:	89a3      	ldrh	r3, [r4, #12]
 800d9fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d9fe:	81a3      	strh	r3, [r4, #12]
 800da00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800da04:	e78e      	b.n	800d924 <__sflush_r+0x1c>
 800da06:	4407      	add	r7, r0
 800da08:	eba8 0800 	sub.w	r8, r8, r0
 800da0c:	e7e9      	b.n	800d9e2 <__sflush_r+0xda>
 800da0e:	bf00      	nop
 800da10:	20400001 	.word	0x20400001

0800da14 <_fflush_r>:
 800da14:	b538      	push	{r3, r4, r5, lr}
 800da16:	690b      	ldr	r3, [r1, #16]
 800da18:	4605      	mov	r5, r0
 800da1a:	460c      	mov	r4, r1
 800da1c:	b913      	cbnz	r3, 800da24 <_fflush_r+0x10>
 800da1e:	2500      	movs	r5, #0
 800da20:	4628      	mov	r0, r5
 800da22:	bd38      	pop	{r3, r4, r5, pc}
 800da24:	b118      	cbz	r0, 800da2e <_fflush_r+0x1a>
 800da26:	6983      	ldr	r3, [r0, #24]
 800da28:	b90b      	cbnz	r3, 800da2e <_fflush_r+0x1a>
 800da2a:	f000 f887 	bl	800db3c <__sinit>
 800da2e:	4b14      	ldr	r3, [pc, #80]	; (800da80 <_fflush_r+0x6c>)
 800da30:	429c      	cmp	r4, r3
 800da32:	d11b      	bne.n	800da6c <_fflush_r+0x58>
 800da34:	686c      	ldr	r4, [r5, #4]
 800da36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d0ef      	beq.n	800da1e <_fflush_r+0xa>
 800da3e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800da40:	07d0      	lsls	r0, r2, #31
 800da42:	d404      	bmi.n	800da4e <_fflush_r+0x3a>
 800da44:	0599      	lsls	r1, r3, #22
 800da46:	d402      	bmi.n	800da4e <_fflush_r+0x3a>
 800da48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800da4a:	f000 f915 	bl	800dc78 <__retarget_lock_acquire_recursive>
 800da4e:	4628      	mov	r0, r5
 800da50:	4621      	mov	r1, r4
 800da52:	f7ff ff59 	bl	800d908 <__sflush_r>
 800da56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800da58:	07da      	lsls	r2, r3, #31
 800da5a:	4605      	mov	r5, r0
 800da5c:	d4e0      	bmi.n	800da20 <_fflush_r+0xc>
 800da5e:	89a3      	ldrh	r3, [r4, #12]
 800da60:	059b      	lsls	r3, r3, #22
 800da62:	d4dd      	bmi.n	800da20 <_fflush_r+0xc>
 800da64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800da66:	f000 f908 	bl	800dc7a <__retarget_lock_release_recursive>
 800da6a:	e7d9      	b.n	800da20 <_fflush_r+0xc>
 800da6c:	4b05      	ldr	r3, [pc, #20]	; (800da84 <_fflush_r+0x70>)
 800da6e:	429c      	cmp	r4, r3
 800da70:	d101      	bne.n	800da76 <_fflush_r+0x62>
 800da72:	68ac      	ldr	r4, [r5, #8]
 800da74:	e7df      	b.n	800da36 <_fflush_r+0x22>
 800da76:	4b04      	ldr	r3, [pc, #16]	; (800da88 <_fflush_r+0x74>)
 800da78:	429c      	cmp	r4, r3
 800da7a:	bf08      	it	eq
 800da7c:	68ec      	ldreq	r4, [r5, #12]
 800da7e:	e7da      	b.n	800da36 <_fflush_r+0x22>
 800da80:	0800e7b4 	.word	0x0800e7b4
 800da84:	0800e7d4 	.word	0x0800e7d4
 800da88:	0800e794 	.word	0x0800e794

0800da8c <std>:
 800da8c:	2300      	movs	r3, #0
 800da8e:	b510      	push	{r4, lr}
 800da90:	4604      	mov	r4, r0
 800da92:	e9c0 3300 	strd	r3, r3, [r0]
 800da96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800da9a:	6083      	str	r3, [r0, #8]
 800da9c:	8181      	strh	r1, [r0, #12]
 800da9e:	6643      	str	r3, [r0, #100]	; 0x64
 800daa0:	81c2      	strh	r2, [r0, #14]
 800daa2:	6183      	str	r3, [r0, #24]
 800daa4:	4619      	mov	r1, r3
 800daa6:	2208      	movs	r2, #8
 800daa8:	305c      	adds	r0, #92	; 0x5c
 800daaa:	f7ff fd57 	bl	800d55c <memset>
 800daae:	4b05      	ldr	r3, [pc, #20]	; (800dac4 <std+0x38>)
 800dab0:	6263      	str	r3, [r4, #36]	; 0x24
 800dab2:	4b05      	ldr	r3, [pc, #20]	; (800dac8 <std+0x3c>)
 800dab4:	62a3      	str	r3, [r4, #40]	; 0x28
 800dab6:	4b05      	ldr	r3, [pc, #20]	; (800dacc <std+0x40>)
 800dab8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800daba:	4b05      	ldr	r3, [pc, #20]	; (800dad0 <std+0x44>)
 800dabc:	6224      	str	r4, [r4, #32]
 800dabe:	6323      	str	r3, [r4, #48]	; 0x30
 800dac0:	bd10      	pop	{r4, pc}
 800dac2:	bf00      	nop
 800dac4:	0800e33d 	.word	0x0800e33d
 800dac8:	0800e35f 	.word	0x0800e35f
 800dacc:	0800e397 	.word	0x0800e397
 800dad0:	0800e3bb 	.word	0x0800e3bb

0800dad4 <_cleanup_r>:
 800dad4:	4901      	ldr	r1, [pc, #4]	; (800dadc <_cleanup_r+0x8>)
 800dad6:	f000 b8af 	b.w	800dc38 <_fwalk_reent>
 800dada:	bf00      	nop
 800dadc:	0800da15 	.word	0x0800da15

0800dae0 <__sfmoreglue>:
 800dae0:	b570      	push	{r4, r5, r6, lr}
 800dae2:	2268      	movs	r2, #104	; 0x68
 800dae4:	1e4d      	subs	r5, r1, #1
 800dae6:	4355      	muls	r5, r2
 800dae8:	460e      	mov	r6, r1
 800daea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800daee:	f7ff fda9 	bl	800d644 <_malloc_r>
 800daf2:	4604      	mov	r4, r0
 800daf4:	b140      	cbz	r0, 800db08 <__sfmoreglue+0x28>
 800daf6:	2100      	movs	r1, #0
 800daf8:	e9c0 1600 	strd	r1, r6, [r0]
 800dafc:	300c      	adds	r0, #12
 800dafe:	60a0      	str	r0, [r4, #8]
 800db00:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800db04:	f7ff fd2a 	bl	800d55c <memset>
 800db08:	4620      	mov	r0, r4
 800db0a:	bd70      	pop	{r4, r5, r6, pc}

0800db0c <__sfp_lock_acquire>:
 800db0c:	4801      	ldr	r0, [pc, #4]	; (800db14 <__sfp_lock_acquire+0x8>)
 800db0e:	f000 b8b3 	b.w	800dc78 <__retarget_lock_acquire_recursive>
 800db12:	bf00      	nop
 800db14:	20000cb5 	.word	0x20000cb5

0800db18 <__sfp_lock_release>:
 800db18:	4801      	ldr	r0, [pc, #4]	; (800db20 <__sfp_lock_release+0x8>)
 800db1a:	f000 b8ae 	b.w	800dc7a <__retarget_lock_release_recursive>
 800db1e:	bf00      	nop
 800db20:	20000cb5 	.word	0x20000cb5

0800db24 <__sinit_lock_acquire>:
 800db24:	4801      	ldr	r0, [pc, #4]	; (800db2c <__sinit_lock_acquire+0x8>)
 800db26:	f000 b8a7 	b.w	800dc78 <__retarget_lock_acquire_recursive>
 800db2a:	bf00      	nop
 800db2c:	20000cb6 	.word	0x20000cb6

0800db30 <__sinit_lock_release>:
 800db30:	4801      	ldr	r0, [pc, #4]	; (800db38 <__sinit_lock_release+0x8>)
 800db32:	f000 b8a2 	b.w	800dc7a <__retarget_lock_release_recursive>
 800db36:	bf00      	nop
 800db38:	20000cb6 	.word	0x20000cb6

0800db3c <__sinit>:
 800db3c:	b510      	push	{r4, lr}
 800db3e:	4604      	mov	r4, r0
 800db40:	f7ff fff0 	bl	800db24 <__sinit_lock_acquire>
 800db44:	69a3      	ldr	r3, [r4, #24]
 800db46:	b11b      	cbz	r3, 800db50 <__sinit+0x14>
 800db48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800db4c:	f7ff bff0 	b.w	800db30 <__sinit_lock_release>
 800db50:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800db54:	6523      	str	r3, [r4, #80]	; 0x50
 800db56:	4b13      	ldr	r3, [pc, #76]	; (800dba4 <__sinit+0x68>)
 800db58:	4a13      	ldr	r2, [pc, #76]	; (800dba8 <__sinit+0x6c>)
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	62a2      	str	r2, [r4, #40]	; 0x28
 800db5e:	42a3      	cmp	r3, r4
 800db60:	bf04      	itt	eq
 800db62:	2301      	moveq	r3, #1
 800db64:	61a3      	streq	r3, [r4, #24]
 800db66:	4620      	mov	r0, r4
 800db68:	f000 f820 	bl	800dbac <__sfp>
 800db6c:	6060      	str	r0, [r4, #4]
 800db6e:	4620      	mov	r0, r4
 800db70:	f000 f81c 	bl	800dbac <__sfp>
 800db74:	60a0      	str	r0, [r4, #8]
 800db76:	4620      	mov	r0, r4
 800db78:	f000 f818 	bl	800dbac <__sfp>
 800db7c:	2200      	movs	r2, #0
 800db7e:	60e0      	str	r0, [r4, #12]
 800db80:	2104      	movs	r1, #4
 800db82:	6860      	ldr	r0, [r4, #4]
 800db84:	f7ff ff82 	bl	800da8c <std>
 800db88:	68a0      	ldr	r0, [r4, #8]
 800db8a:	2201      	movs	r2, #1
 800db8c:	2109      	movs	r1, #9
 800db8e:	f7ff ff7d 	bl	800da8c <std>
 800db92:	68e0      	ldr	r0, [r4, #12]
 800db94:	2202      	movs	r2, #2
 800db96:	2112      	movs	r1, #18
 800db98:	f7ff ff78 	bl	800da8c <std>
 800db9c:	2301      	movs	r3, #1
 800db9e:	61a3      	str	r3, [r4, #24]
 800dba0:	e7d2      	b.n	800db48 <__sinit+0xc>
 800dba2:	bf00      	nop
 800dba4:	0800e790 	.word	0x0800e790
 800dba8:	0800dad5 	.word	0x0800dad5

0800dbac <__sfp>:
 800dbac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbae:	4607      	mov	r7, r0
 800dbb0:	f7ff ffac 	bl	800db0c <__sfp_lock_acquire>
 800dbb4:	4b1e      	ldr	r3, [pc, #120]	; (800dc30 <__sfp+0x84>)
 800dbb6:	681e      	ldr	r6, [r3, #0]
 800dbb8:	69b3      	ldr	r3, [r6, #24]
 800dbba:	b913      	cbnz	r3, 800dbc2 <__sfp+0x16>
 800dbbc:	4630      	mov	r0, r6
 800dbbe:	f7ff ffbd 	bl	800db3c <__sinit>
 800dbc2:	3648      	adds	r6, #72	; 0x48
 800dbc4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800dbc8:	3b01      	subs	r3, #1
 800dbca:	d503      	bpl.n	800dbd4 <__sfp+0x28>
 800dbcc:	6833      	ldr	r3, [r6, #0]
 800dbce:	b30b      	cbz	r3, 800dc14 <__sfp+0x68>
 800dbd0:	6836      	ldr	r6, [r6, #0]
 800dbd2:	e7f7      	b.n	800dbc4 <__sfp+0x18>
 800dbd4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800dbd8:	b9d5      	cbnz	r5, 800dc10 <__sfp+0x64>
 800dbda:	4b16      	ldr	r3, [pc, #88]	; (800dc34 <__sfp+0x88>)
 800dbdc:	60e3      	str	r3, [r4, #12]
 800dbde:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800dbe2:	6665      	str	r5, [r4, #100]	; 0x64
 800dbe4:	f000 f847 	bl	800dc76 <__retarget_lock_init_recursive>
 800dbe8:	f7ff ff96 	bl	800db18 <__sfp_lock_release>
 800dbec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800dbf0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800dbf4:	6025      	str	r5, [r4, #0]
 800dbf6:	61a5      	str	r5, [r4, #24]
 800dbf8:	2208      	movs	r2, #8
 800dbfa:	4629      	mov	r1, r5
 800dbfc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800dc00:	f7ff fcac 	bl	800d55c <memset>
 800dc04:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800dc08:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800dc0c:	4620      	mov	r0, r4
 800dc0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc10:	3468      	adds	r4, #104	; 0x68
 800dc12:	e7d9      	b.n	800dbc8 <__sfp+0x1c>
 800dc14:	2104      	movs	r1, #4
 800dc16:	4638      	mov	r0, r7
 800dc18:	f7ff ff62 	bl	800dae0 <__sfmoreglue>
 800dc1c:	4604      	mov	r4, r0
 800dc1e:	6030      	str	r0, [r6, #0]
 800dc20:	2800      	cmp	r0, #0
 800dc22:	d1d5      	bne.n	800dbd0 <__sfp+0x24>
 800dc24:	f7ff ff78 	bl	800db18 <__sfp_lock_release>
 800dc28:	230c      	movs	r3, #12
 800dc2a:	603b      	str	r3, [r7, #0]
 800dc2c:	e7ee      	b.n	800dc0c <__sfp+0x60>
 800dc2e:	bf00      	nop
 800dc30:	0800e790 	.word	0x0800e790
 800dc34:	ffff0001 	.word	0xffff0001

0800dc38 <_fwalk_reent>:
 800dc38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc3c:	4606      	mov	r6, r0
 800dc3e:	4688      	mov	r8, r1
 800dc40:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800dc44:	2700      	movs	r7, #0
 800dc46:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dc4a:	f1b9 0901 	subs.w	r9, r9, #1
 800dc4e:	d505      	bpl.n	800dc5c <_fwalk_reent+0x24>
 800dc50:	6824      	ldr	r4, [r4, #0]
 800dc52:	2c00      	cmp	r4, #0
 800dc54:	d1f7      	bne.n	800dc46 <_fwalk_reent+0xe>
 800dc56:	4638      	mov	r0, r7
 800dc58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc5c:	89ab      	ldrh	r3, [r5, #12]
 800dc5e:	2b01      	cmp	r3, #1
 800dc60:	d907      	bls.n	800dc72 <_fwalk_reent+0x3a>
 800dc62:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dc66:	3301      	adds	r3, #1
 800dc68:	d003      	beq.n	800dc72 <_fwalk_reent+0x3a>
 800dc6a:	4629      	mov	r1, r5
 800dc6c:	4630      	mov	r0, r6
 800dc6e:	47c0      	blx	r8
 800dc70:	4307      	orrs	r7, r0
 800dc72:	3568      	adds	r5, #104	; 0x68
 800dc74:	e7e9      	b.n	800dc4a <_fwalk_reent+0x12>

0800dc76 <__retarget_lock_init_recursive>:
 800dc76:	4770      	bx	lr

0800dc78 <__retarget_lock_acquire_recursive>:
 800dc78:	4770      	bx	lr

0800dc7a <__retarget_lock_release_recursive>:
 800dc7a:	4770      	bx	lr

0800dc7c <__swhatbuf_r>:
 800dc7c:	b570      	push	{r4, r5, r6, lr}
 800dc7e:	460e      	mov	r6, r1
 800dc80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc84:	2900      	cmp	r1, #0
 800dc86:	b096      	sub	sp, #88	; 0x58
 800dc88:	4614      	mov	r4, r2
 800dc8a:	461d      	mov	r5, r3
 800dc8c:	da08      	bge.n	800dca0 <__swhatbuf_r+0x24>
 800dc8e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800dc92:	2200      	movs	r2, #0
 800dc94:	602a      	str	r2, [r5, #0]
 800dc96:	061a      	lsls	r2, r3, #24
 800dc98:	d410      	bmi.n	800dcbc <__swhatbuf_r+0x40>
 800dc9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dc9e:	e00e      	b.n	800dcbe <__swhatbuf_r+0x42>
 800dca0:	466a      	mov	r2, sp
 800dca2:	f000 fc71 	bl	800e588 <_fstat_r>
 800dca6:	2800      	cmp	r0, #0
 800dca8:	dbf1      	blt.n	800dc8e <__swhatbuf_r+0x12>
 800dcaa:	9a01      	ldr	r2, [sp, #4]
 800dcac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800dcb0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800dcb4:	425a      	negs	r2, r3
 800dcb6:	415a      	adcs	r2, r3
 800dcb8:	602a      	str	r2, [r5, #0]
 800dcba:	e7ee      	b.n	800dc9a <__swhatbuf_r+0x1e>
 800dcbc:	2340      	movs	r3, #64	; 0x40
 800dcbe:	2000      	movs	r0, #0
 800dcc0:	6023      	str	r3, [r4, #0]
 800dcc2:	b016      	add	sp, #88	; 0x58
 800dcc4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800dcc8 <__smakebuf_r>:
 800dcc8:	898b      	ldrh	r3, [r1, #12]
 800dcca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dccc:	079d      	lsls	r5, r3, #30
 800dcce:	4606      	mov	r6, r0
 800dcd0:	460c      	mov	r4, r1
 800dcd2:	d507      	bpl.n	800dce4 <__smakebuf_r+0x1c>
 800dcd4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800dcd8:	6023      	str	r3, [r4, #0]
 800dcda:	6123      	str	r3, [r4, #16]
 800dcdc:	2301      	movs	r3, #1
 800dcde:	6163      	str	r3, [r4, #20]
 800dce0:	b002      	add	sp, #8
 800dce2:	bd70      	pop	{r4, r5, r6, pc}
 800dce4:	ab01      	add	r3, sp, #4
 800dce6:	466a      	mov	r2, sp
 800dce8:	f7ff ffc8 	bl	800dc7c <__swhatbuf_r>
 800dcec:	9900      	ldr	r1, [sp, #0]
 800dcee:	4605      	mov	r5, r0
 800dcf0:	4630      	mov	r0, r6
 800dcf2:	f7ff fca7 	bl	800d644 <_malloc_r>
 800dcf6:	b948      	cbnz	r0, 800dd0c <__smakebuf_r+0x44>
 800dcf8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dcfc:	059a      	lsls	r2, r3, #22
 800dcfe:	d4ef      	bmi.n	800dce0 <__smakebuf_r+0x18>
 800dd00:	f023 0303 	bic.w	r3, r3, #3
 800dd04:	f043 0302 	orr.w	r3, r3, #2
 800dd08:	81a3      	strh	r3, [r4, #12]
 800dd0a:	e7e3      	b.n	800dcd4 <__smakebuf_r+0xc>
 800dd0c:	4b0d      	ldr	r3, [pc, #52]	; (800dd44 <__smakebuf_r+0x7c>)
 800dd0e:	62b3      	str	r3, [r6, #40]	; 0x28
 800dd10:	89a3      	ldrh	r3, [r4, #12]
 800dd12:	6020      	str	r0, [r4, #0]
 800dd14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dd18:	81a3      	strh	r3, [r4, #12]
 800dd1a:	9b00      	ldr	r3, [sp, #0]
 800dd1c:	6163      	str	r3, [r4, #20]
 800dd1e:	9b01      	ldr	r3, [sp, #4]
 800dd20:	6120      	str	r0, [r4, #16]
 800dd22:	b15b      	cbz	r3, 800dd3c <__smakebuf_r+0x74>
 800dd24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dd28:	4630      	mov	r0, r6
 800dd2a:	f000 fc3f 	bl	800e5ac <_isatty_r>
 800dd2e:	b128      	cbz	r0, 800dd3c <__smakebuf_r+0x74>
 800dd30:	89a3      	ldrh	r3, [r4, #12]
 800dd32:	f023 0303 	bic.w	r3, r3, #3
 800dd36:	f043 0301 	orr.w	r3, r3, #1
 800dd3a:	81a3      	strh	r3, [r4, #12]
 800dd3c:	89a0      	ldrh	r0, [r4, #12]
 800dd3e:	4305      	orrs	r5, r0
 800dd40:	81a5      	strh	r5, [r4, #12]
 800dd42:	e7cd      	b.n	800dce0 <__smakebuf_r+0x18>
 800dd44:	0800dad5 	.word	0x0800dad5

0800dd48 <__malloc_lock>:
 800dd48:	4801      	ldr	r0, [pc, #4]	; (800dd50 <__malloc_lock+0x8>)
 800dd4a:	f7ff bf95 	b.w	800dc78 <__retarget_lock_acquire_recursive>
 800dd4e:	bf00      	nop
 800dd50:	20000cb4 	.word	0x20000cb4

0800dd54 <__malloc_unlock>:
 800dd54:	4801      	ldr	r0, [pc, #4]	; (800dd5c <__malloc_unlock+0x8>)
 800dd56:	f7ff bf90 	b.w	800dc7a <__retarget_lock_release_recursive>
 800dd5a:	bf00      	nop
 800dd5c:	20000cb4 	.word	0x20000cb4

0800dd60 <__sfputc_r>:
 800dd60:	6893      	ldr	r3, [r2, #8]
 800dd62:	3b01      	subs	r3, #1
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	b410      	push	{r4}
 800dd68:	6093      	str	r3, [r2, #8]
 800dd6a:	da08      	bge.n	800dd7e <__sfputc_r+0x1e>
 800dd6c:	6994      	ldr	r4, [r2, #24]
 800dd6e:	42a3      	cmp	r3, r4
 800dd70:	db01      	blt.n	800dd76 <__sfputc_r+0x16>
 800dd72:	290a      	cmp	r1, #10
 800dd74:	d103      	bne.n	800dd7e <__sfputc_r+0x1e>
 800dd76:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dd7a:	f000 bb23 	b.w	800e3c4 <__swbuf_r>
 800dd7e:	6813      	ldr	r3, [r2, #0]
 800dd80:	1c58      	adds	r0, r3, #1
 800dd82:	6010      	str	r0, [r2, #0]
 800dd84:	7019      	strb	r1, [r3, #0]
 800dd86:	4608      	mov	r0, r1
 800dd88:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dd8c:	4770      	bx	lr

0800dd8e <__sfputs_r>:
 800dd8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd90:	4606      	mov	r6, r0
 800dd92:	460f      	mov	r7, r1
 800dd94:	4614      	mov	r4, r2
 800dd96:	18d5      	adds	r5, r2, r3
 800dd98:	42ac      	cmp	r4, r5
 800dd9a:	d101      	bne.n	800dda0 <__sfputs_r+0x12>
 800dd9c:	2000      	movs	r0, #0
 800dd9e:	e007      	b.n	800ddb0 <__sfputs_r+0x22>
 800dda0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dda4:	463a      	mov	r2, r7
 800dda6:	4630      	mov	r0, r6
 800dda8:	f7ff ffda 	bl	800dd60 <__sfputc_r>
 800ddac:	1c43      	adds	r3, r0, #1
 800ddae:	d1f3      	bne.n	800dd98 <__sfputs_r+0xa>
 800ddb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ddb4 <_vfiprintf_r>:
 800ddb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddb8:	460d      	mov	r5, r1
 800ddba:	b09d      	sub	sp, #116	; 0x74
 800ddbc:	4614      	mov	r4, r2
 800ddbe:	4698      	mov	r8, r3
 800ddc0:	4606      	mov	r6, r0
 800ddc2:	b118      	cbz	r0, 800ddcc <_vfiprintf_r+0x18>
 800ddc4:	6983      	ldr	r3, [r0, #24]
 800ddc6:	b90b      	cbnz	r3, 800ddcc <_vfiprintf_r+0x18>
 800ddc8:	f7ff feb8 	bl	800db3c <__sinit>
 800ddcc:	4b89      	ldr	r3, [pc, #548]	; (800dff4 <_vfiprintf_r+0x240>)
 800ddce:	429d      	cmp	r5, r3
 800ddd0:	d11b      	bne.n	800de0a <_vfiprintf_r+0x56>
 800ddd2:	6875      	ldr	r5, [r6, #4]
 800ddd4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ddd6:	07d9      	lsls	r1, r3, #31
 800ddd8:	d405      	bmi.n	800dde6 <_vfiprintf_r+0x32>
 800ddda:	89ab      	ldrh	r3, [r5, #12]
 800dddc:	059a      	lsls	r2, r3, #22
 800ddde:	d402      	bmi.n	800dde6 <_vfiprintf_r+0x32>
 800dde0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dde2:	f7ff ff49 	bl	800dc78 <__retarget_lock_acquire_recursive>
 800dde6:	89ab      	ldrh	r3, [r5, #12]
 800dde8:	071b      	lsls	r3, r3, #28
 800ddea:	d501      	bpl.n	800ddf0 <_vfiprintf_r+0x3c>
 800ddec:	692b      	ldr	r3, [r5, #16]
 800ddee:	b9eb      	cbnz	r3, 800de2c <_vfiprintf_r+0x78>
 800ddf0:	4629      	mov	r1, r5
 800ddf2:	4630      	mov	r0, r6
 800ddf4:	f000 fb4a 	bl	800e48c <__swsetup_r>
 800ddf8:	b1c0      	cbz	r0, 800de2c <_vfiprintf_r+0x78>
 800ddfa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ddfc:	07dc      	lsls	r4, r3, #31
 800ddfe:	d50e      	bpl.n	800de1e <_vfiprintf_r+0x6a>
 800de00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800de04:	b01d      	add	sp, #116	; 0x74
 800de06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de0a:	4b7b      	ldr	r3, [pc, #492]	; (800dff8 <_vfiprintf_r+0x244>)
 800de0c:	429d      	cmp	r5, r3
 800de0e:	d101      	bne.n	800de14 <_vfiprintf_r+0x60>
 800de10:	68b5      	ldr	r5, [r6, #8]
 800de12:	e7df      	b.n	800ddd4 <_vfiprintf_r+0x20>
 800de14:	4b79      	ldr	r3, [pc, #484]	; (800dffc <_vfiprintf_r+0x248>)
 800de16:	429d      	cmp	r5, r3
 800de18:	bf08      	it	eq
 800de1a:	68f5      	ldreq	r5, [r6, #12]
 800de1c:	e7da      	b.n	800ddd4 <_vfiprintf_r+0x20>
 800de1e:	89ab      	ldrh	r3, [r5, #12]
 800de20:	0598      	lsls	r0, r3, #22
 800de22:	d4ed      	bmi.n	800de00 <_vfiprintf_r+0x4c>
 800de24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800de26:	f7ff ff28 	bl	800dc7a <__retarget_lock_release_recursive>
 800de2a:	e7e9      	b.n	800de00 <_vfiprintf_r+0x4c>
 800de2c:	2300      	movs	r3, #0
 800de2e:	9309      	str	r3, [sp, #36]	; 0x24
 800de30:	2320      	movs	r3, #32
 800de32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800de36:	f8cd 800c 	str.w	r8, [sp, #12]
 800de3a:	2330      	movs	r3, #48	; 0x30
 800de3c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e000 <_vfiprintf_r+0x24c>
 800de40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800de44:	f04f 0901 	mov.w	r9, #1
 800de48:	4623      	mov	r3, r4
 800de4a:	469a      	mov	sl, r3
 800de4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de50:	b10a      	cbz	r2, 800de56 <_vfiprintf_r+0xa2>
 800de52:	2a25      	cmp	r2, #37	; 0x25
 800de54:	d1f9      	bne.n	800de4a <_vfiprintf_r+0x96>
 800de56:	ebba 0b04 	subs.w	fp, sl, r4
 800de5a:	d00b      	beq.n	800de74 <_vfiprintf_r+0xc0>
 800de5c:	465b      	mov	r3, fp
 800de5e:	4622      	mov	r2, r4
 800de60:	4629      	mov	r1, r5
 800de62:	4630      	mov	r0, r6
 800de64:	f7ff ff93 	bl	800dd8e <__sfputs_r>
 800de68:	3001      	adds	r0, #1
 800de6a:	f000 80aa 	beq.w	800dfc2 <_vfiprintf_r+0x20e>
 800de6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800de70:	445a      	add	r2, fp
 800de72:	9209      	str	r2, [sp, #36]	; 0x24
 800de74:	f89a 3000 	ldrb.w	r3, [sl]
 800de78:	2b00      	cmp	r3, #0
 800de7a:	f000 80a2 	beq.w	800dfc2 <_vfiprintf_r+0x20e>
 800de7e:	2300      	movs	r3, #0
 800de80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800de84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800de88:	f10a 0a01 	add.w	sl, sl, #1
 800de8c:	9304      	str	r3, [sp, #16]
 800de8e:	9307      	str	r3, [sp, #28]
 800de90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800de94:	931a      	str	r3, [sp, #104]	; 0x68
 800de96:	4654      	mov	r4, sl
 800de98:	2205      	movs	r2, #5
 800de9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de9e:	4858      	ldr	r0, [pc, #352]	; (800e000 <_vfiprintf_r+0x24c>)
 800dea0:	f7f2 f9a6 	bl	80001f0 <memchr>
 800dea4:	9a04      	ldr	r2, [sp, #16]
 800dea6:	b9d8      	cbnz	r0, 800dee0 <_vfiprintf_r+0x12c>
 800dea8:	06d1      	lsls	r1, r2, #27
 800deaa:	bf44      	itt	mi
 800deac:	2320      	movmi	r3, #32
 800deae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800deb2:	0713      	lsls	r3, r2, #28
 800deb4:	bf44      	itt	mi
 800deb6:	232b      	movmi	r3, #43	; 0x2b
 800deb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800debc:	f89a 3000 	ldrb.w	r3, [sl]
 800dec0:	2b2a      	cmp	r3, #42	; 0x2a
 800dec2:	d015      	beq.n	800def0 <_vfiprintf_r+0x13c>
 800dec4:	9a07      	ldr	r2, [sp, #28]
 800dec6:	4654      	mov	r4, sl
 800dec8:	2000      	movs	r0, #0
 800deca:	f04f 0c0a 	mov.w	ip, #10
 800dece:	4621      	mov	r1, r4
 800ded0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ded4:	3b30      	subs	r3, #48	; 0x30
 800ded6:	2b09      	cmp	r3, #9
 800ded8:	d94e      	bls.n	800df78 <_vfiprintf_r+0x1c4>
 800deda:	b1b0      	cbz	r0, 800df0a <_vfiprintf_r+0x156>
 800dedc:	9207      	str	r2, [sp, #28]
 800dede:	e014      	b.n	800df0a <_vfiprintf_r+0x156>
 800dee0:	eba0 0308 	sub.w	r3, r0, r8
 800dee4:	fa09 f303 	lsl.w	r3, r9, r3
 800dee8:	4313      	orrs	r3, r2
 800deea:	9304      	str	r3, [sp, #16]
 800deec:	46a2      	mov	sl, r4
 800deee:	e7d2      	b.n	800de96 <_vfiprintf_r+0xe2>
 800def0:	9b03      	ldr	r3, [sp, #12]
 800def2:	1d19      	adds	r1, r3, #4
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	9103      	str	r1, [sp, #12]
 800def8:	2b00      	cmp	r3, #0
 800defa:	bfbb      	ittet	lt
 800defc:	425b      	neglt	r3, r3
 800defe:	f042 0202 	orrlt.w	r2, r2, #2
 800df02:	9307      	strge	r3, [sp, #28]
 800df04:	9307      	strlt	r3, [sp, #28]
 800df06:	bfb8      	it	lt
 800df08:	9204      	strlt	r2, [sp, #16]
 800df0a:	7823      	ldrb	r3, [r4, #0]
 800df0c:	2b2e      	cmp	r3, #46	; 0x2e
 800df0e:	d10c      	bne.n	800df2a <_vfiprintf_r+0x176>
 800df10:	7863      	ldrb	r3, [r4, #1]
 800df12:	2b2a      	cmp	r3, #42	; 0x2a
 800df14:	d135      	bne.n	800df82 <_vfiprintf_r+0x1ce>
 800df16:	9b03      	ldr	r3, [sp, #12]
 800df18:	1d1a      	adds	r2, r3, #4
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	9203      	str	r2, [sp, #12]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	bfb8      	it	lt
 800df22:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800df26:	3402      	adds	r4, #2
 800df28:	9305      	str	r3, [sp, #20]
 800df2a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e010 <_vfiprintf_r+0x25c>
 800df2e:	7821      	ldrb	r1, [r4, #0]
 800df30:	2203      	movs	r2, #3
 800df32:	4650      	mov	r0, sl
 800df34:	f7f2 f95c 	bl	80001f0 <memchr>
 800df38:	b140      	cbz	r0, 800df4c <_vfiprintf_r+0x198>
 800df3a:	2340      	movs	r3, #64	; 0x40
 800df3c:	eba0 000a 	sub.w	r0, r0, sl
 800df40:	fa03 f000 	lsl.w	r0, r3, r0
 800df44:	9b04      	ldr	r3, [sp, #16]
 800df46:	4303      	orrs	r3, r0
 800df48:	3401      	adds	r4, #1
 800df4a:	9304      	str	r3, [sp, #16]
 800df4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df50:	482c      	ldr	r0, [pc, #176]	; (800e004 <_vfiprintf_r+0x250>)
 800df52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800df56:	2206      	movs	r2, #6
 800df58:	f7f2 f94a 	bl	80001f0 <memchr>
 800df5c:	2800      	cmp	r0, #0
 800df5e:	d03f      	beq.n	800dfe0 <_vfiprintf_r+0x22c>
 800df60:	4b29      	ldr	r3, [pc, #164]	; (800e008 <_vfiprintf_r+0x254>)
 800df62:	bb1b      	cbnz	r3, 800dfac <_vfiprintf_r+0x1f8>
 800df64:	9b03      	ldr	r3, [sp, #12]
 800df66:	3307      	adds	r3, #7
 800df68:	f023 0307 	bic.w	r3, r3, #7
 800df6c:	3308      	adds	r3, #8
 800df6e:	9303      	str	r3, [sp, #12]
 800df70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df72:	443b      	add	r3, r7
 800df74:	9309      	str	r3, [sp, #36]	; 0x24
 800df76:	e767      	b.n	800de48 <_vfiprintf_r+0x94>
 800df78:	fb0c 3202 	mla	r2, ip, r2, r3
 800df7c:	460c      	mov	r4, r1
 800df7e:	2001      	movs	r0, #1
 800df80:	e7a5      	b.n	800dece <_vfiprintf_r+0x11a>
 800df82:	2300      	movs	r3, #0
 800df84:	3401      	adds	r4, #1
 800df86:	9305      	str	r3, [sp, #20]
 800df88:	4619      	mov	r1, r3
 800df8a:	f04f 0c0a 	mov.w	ip, #10
 800df8e:	4620      	mov	r0, r4
 800df90:	f810 2b01 	ldrb.w	r2, [r0], #1
 800df94:	3a30      	subs	r2, #48	; 0x30
 800df96:	2a09      	cmp	r2, #9
 800df98:	d903      	bls.n	800dfa2 <_vfiprintf_r+0x1ee>
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d0c5      	beq.n	800df2a <_vfiprintf_r+0x176>
 800df9e:	9105      	str	r1, [sp, #20]
 800dfa0:	e7c3      	b.n	800df2a <_vfiprintf_r+0x176>
 800dfa2:	fb0c 2101 	mla	r1, ip, r1, r2
 800dfa6:	4604      	mov	r4, r0
 800dfa8:	2301      	movs	r3, #1
 800dfaa:	e7f0      	b.n	800df8e <_vfiprintf_r+0x1da>
 800dfac:	ab03      	add	r3, sp, #12
 800dfae:	9300      	str	r3, [sp, #0]
 800dfb0:	462a      	mov	r2, r5
 800dfb2:	4b16      	ldr	r3, [pc, #88]	; (800e00c <_vfiprintf_r+0x258>)
 800dfb4:	a904      	add	r1, sp, #16
 800dfb6:	4630      	mov	r0, r6
 800dfb8:	f3af 8000 	nop.w
 800dfbc:	4607      	mov	r7, r0
 800dfbe:	1c78      	adds	r0, r7, #1
 800dfc0:	d1d6      	bne.n	800df70 <_vfiprintf_r+0x1bc>
 800dfc2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dfc4:	07d9      	lsls	r1, r3, #31
 800dfc6:	d405      	bmi.n	800dfd4 <_vfiprintf_r+0x220>
 800dfc8:	89ab      	ldrh	r3, [r5, #12]
 800dfca:	059a      	lsls	r2, r3, #22
 800dfcc:	d402      	bmi.n	800dfd4 <_vfiprintf_r+0x220>
 800dfce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dfd0:	f7ff fe53 	bl	800dc7a <__retarget_lock_release_recursive>
 800dfd4:	89ab      	ldrh	r3, [r5, #12]
 800dfd6:	065b      	lsls	r3, r3, #25
 800dfd8:	f53f af12 	bmi.w	800de00 <_vfiprintf_r+0x4c>
 800dfdc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dfde:	e711      	b.n	800de04 <_vfiprintf_r+0x50>
 800dfe0:	ab03      	add	r3, sp, #12
 800dfe2:	9300      	str	r3, [sp, #0]
 800dfe4:	462a      	mov	r2, r5
 800dfe6:	4b09      	ldr	r3, [pc, #36]	; (800e00c <_vfiprintf_r+0x258>)
 800dfe8:	a904      	add	r1, sp, #16
 800dfea:	4630      	mov	r0, r6
 800dfec:	f000 f880 	bl	800e0f0 <_printf_i>
 800dff0:	e7e4      	b.n	800dfbc <_vfiprintf_r+0x208>
 800dff2:	bf00      	nop
 800dff4:	0800e7b4 	.word	0x0800e7b4
 800dff8:	0800e7d4 	.word	0x0800e7d4
 800dffc:	0800e794 	.word	0x0800e794
 800e000:	0800e7f4 	.word	0x0800e7f4
 800e004:	0800e7fe 	.word	0x0800e7fe
 800e008:	00000000 	.word	0x00000000
 800e00c:	0800dd8f 	.word	0x0800dd8f
 800e010:	0800e7fa 	.word	0x0800e7fa

0800e014 <_printf_common>:
 800e014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e018:	4616      	mov	r6, r2
 800e01a:	4699      	mov	r9, r3
 800e01c:	688a      	ldr	r2, [r1, #8]
 800e01e:	690b      	ldr	r3, [r1, #16]
 800e020:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e024:	4293      	cmp	r3, r2
 800e026:	bfb8      	it	lt
 800e028:	4613      	movlt	r3, r2
 800e02a:	6033      	str	r3, [r6, #0]
 800e02c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e030:	4607      	mov	r7, r0
 800e032:	460c      	mov	r4, r1
 800e034:	b10a      	cbz	r2, 800e03a <_printf_common+0x26>
 800e036:	3301      	adds	r3, #1
 800e038:	6033      	str	r3, [r6, #0]
 800e03a:	6823      	ldr	r3, [r4, #0]
 800e03c:	0699      	lsls	r1, r3, #26
 800e03e:	bf42      	ittt	mi
 800e040:	6833      	ldrmi	r3, [r6, #0]
 800e042:	3302      	addmi	r3, #2
 800e044:	6033      	strmi	r3, [r6, #0]
 800e046:	6825      	ldr	r5, [r4, #0]
 800e048:	f015 0506 	ands.w	r5, r5, #6
 800e04c:	d106      	bne.n	800e05c <_printf_common+0x48>
 800e04e:	f104 0a19 	add.w	sl, r4, #25
 800e052:	68e3      	ldr	r3, [r4, #12]
 800e054:	6832      	ldr	r2, [r6, #0]
 800e056:	1a9b      	subs	r3, r3, r2
 800e058:	42ab      	cmp	r3, r5
 800e05a:	dc26      	bgt.n	800e0aa <_printf_common+0x96>
 800e05c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e060:	1e13      	subs	r3, r2, #0
 800e062:	6822      	ldr	r2, [r4, #0]
 800e064:	bf18      	it	ne
 800e066:	2301      	movne	r3, #1
 800e068:	0692      	lsls	r2, r2, #26
 800e06a:	d42b      	bmi.n	800e0c4 <_printf_common+0xb0>
 800e06c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e070:	4649      	mov	r1, r9
 800e072:	4638      	mov	r0, r7
 800e074:	47c0      	blx	r8
 800e076:	3001      	adds	r0, #1
 800e078:	d01e      	beq.n	800e0b8 <_printf_common+0xa4>
 800e07a:	6823      	ldr	r3, [r4, #0]
 800e07c:	68e5      	ldr	r5, [r4, #12]
 800e07e:	6832      	ldr	r2, [r6, #0]
 800e080:	f003 0306 	and.w	r3, r3, #6
 800e084:	2b04      	cmp	r3, #4
 800e086:	bf08      	it	eq
 800e088:	1aad      	subeq	r5, r5, r2
 800e08a:	68a3      	ldr	r3, [r4, #8]
 800e08c:	6922      	ldr	r2, [r4, #16]
 800e08e:	bf0c      	ite	eq
 800e090:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e094:	2500      	movne	r5, #0
 800e096:	4293      	cmp	r3, r2
 800e098:	bfc4      	itt	gt
 800e09a:	1a9b      	subgt	r3, r3, r2
 800e09c:	18ed      	addgt	r5, r5, r3
 800e09e:	2600      	movs	r6, #0
 800e0a0:	341a      	adds	r4, #26
 800e0a2:	42b5      	cmp	r5, r6
 800e0a4:	d11a      	bne.n	800e0dc <_printf_common+0xc8>
 800e0a6:	2000      	movs	r0, #0
 800e0a8:	e008      	b.n	800e0bc <_printf_common+0xa8>
 800e0aa:	2301      	movs	r3, #1
 800e0ac:	4652      	mov	r2, sl
 800e0ae:	4649      	mov	r1, r9
 800e0b0:	4638      	mov	r0, r7
 800e0b2:	47c0      	blx	r8
 800e0b4:	3001      	adds	r0, #1
 800e0b6:	d103      	bne.n	800e0c0 <_printf_common+0xac>
 800e0b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e0bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e0c0:	3501      	adds	r5, #1
 800e0c2:	e7c6      	b.n	800e052 <_printf_common+0x3e>
 800e0c4:	18e1      	adds	r1, r4, r3
 800e0c6:	1c5a      	adds	r2, r3, #1
 800e0c8:	2030      	movs	r0, #48	; 0x30
 800e0ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e0ce:	4422      	add	r2, r4
 800e0d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e0d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e0d8:	3302      	adds	r3, #2
 800e0da:	e7c7      	b.n	800e06c <_printf_common+0x58>
 800e0dc:	2301      	movs	r3, #1
 800e0de:	4622      	mov	r2, r4
 800e0e0:	4649      	mov	r1, r9
 800e0e2:	4638      	mov	r0, r7
 800e0e4:	47c0      	blx	r8
 800e0e6:	3001      	adds	r0, #1
 800e0e8:	d0e6      	beq.n	800e0b8 <_printf_common+0xa4>
 800e0ea:	3601      	adds	r6, #1
 800e0ec:	e7d9      	b.n	800e0a2 <_printf_common+0x8e>
	...

0800e0f0 <_printf_i>:
 800e0f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e0f4:	7e0f      	ldrb	r7, [r1, #24]
 800e0f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e0f8:	2f78      	cmp	r7, #120	; 0x78
 800e0fa:	4691      	mov	r9, r2
 800e0fc:	4680      	mov	r8, r0
 800e0fe:	460c      	mov	r4, r1
 800e100:	469a      	mov	sl, r3
 800e102:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e106:	d807      	bhi.n	800e118 <_printf_i+0x28>
 800e108:	2f62      	cmp	r7, #98	; 0x62
 800e10a:	d80a      	bhi.n	800e122 <_printf_i+0x32>
 800e10c:	2f00      	cmp	r7, #0
 800e10e:	f000 80d8 	beq.w	800e2c2 <_printf_i+0x1d2>
 800e112:	2f58      	cmp	r7, #88	; 0x58
 800e114:	f000 80a3 	beq.w	800e25e <_printf_i+0x16e>
 800e118:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e11c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e120:	e03a      	b.n	800e198 <_printf_i+0xa8>
 800e122:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e126:	2b15      	cmp	r3, #21
 800e128:	d8f6      	bhi.n	800e118 <_printf_i+0x28>
 800e12a:	a101      	add	r1, pc, #4	; (adr r1, 800e130 <_printf_i+0x40>)
 800e12c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e130:	0800e189 	.word	0x0800e189
 800e134:	0800e19d 	.word	0x0800e19d
 800e138:	0800e119 	.word	0x0800e119
 800e13c:	0800e119 	.word	0x0800e119
 800e140:	0800e119 	.word	0x0800e119
 800e144:	0800e119 	.word	0x0800e119
 800e148:	0800e19d 	.word	0x0800e19d
 800e14c:	0800e119 	.word	0x0800e119
 800e150:	0800e119 	.word	0x0800e119
 800e154:	0800e119 	.word	0x0800e119
 800e158:	0800e119 	.word	0x0800e119
 800e15c:	0800e2a9 	.word	0x0800e2a9
 800e160:	0800e1cd 	.word	0x0800e1cd
 800e164:	0800e28b 	.word	0x0800e28b
 800e168:	0800e119 	.word	0x0800e119
 800e16c:	0800e119 	.word	0x0800e119
 800e170:	0800e2cb 	.word	0x0800e2cb
 800e174:	0800e119 	.word	0x0800e119
 800e178:	0800e1cd 	.word	0x0800e1cd
 800e17c:	0800e119 	.word	0x0800e119
 800e180:	0800e119 	.word	0x0800e119
 800e184:	0800e293 	.word	0x0800e293
 800e188:	682b      	ldr	r3, [r5, #0]
 800e18a:	1d1a      	adds	r2, r3, #4
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	602a      	str	r2, [r5, #0]
 800e190:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e194:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e198:	2301      	movs	r3, #1
 800e19a:	e0a3      	b.n	800e2e4 <_printf_i+0x1f4>
 800e19c:	6820      	ldr	r0, [r4, #0]
 800e19e:	6829      	ldr	r1, [r5, #0]
 800e1a0:	0606      	lsls	r6, r0, #24
 800e1a2:	f101 0304 	add.w	r3, r1, #4
 800e1a6:	d50a      	bpl.n	800e1be <_printf_i+0xce>
 800e1a8:	680e      	ldr	r6, [r1, #0]
 800e1aa:	602b      	str	r3, [r5, #0]
 800e1ac:	2e00      	cmp	r6, #0
 800e1ae:	da03      	bge.n	800e1b8 <_printf_i+0xc8>
 800e1b0:	232d      	movs	r3, #45	; 0x2d
 800e1b2:	4276      	negs	r6, r6
 800e1b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e1b8:	485e      	ldr	r0, [pc, #376]	; (800e334 <_printf_i+0x244>)
 800e1ba:	230a      	movs	r3, #10
 800e1bc:	e019      	b.n	800e1f2 <_printf_i+0x102>
 800e1be:	680e      	ldr	r6, [r1, #0]
 800e1c0:	602b      	str	r3, [r5, #0]
 800e1c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e1c6:	bf18      	it	ne
 800e1c8:	b236      	sxthne	r6, r6
 800e1ca:	e7ef      	b.n	800e1ac <_printf_i+0xbc>
 800e1cc:	682b      	ldr	r3, [r5, #0]
 800e1ce:	6820      	ldr	r0, [r4, #0]
 800e1d0:	1d19      	adds	r1, r3, #4
 800e1d2:	6029      	str	r1, [r5, #0]
 800e1d4:	0601      	lsls	r1, r0, #24
 800e1d6:	d501      	bpl.n	800e1dc <_printf_i+0xec>
 800e1d8:	681e      	ldr	r6, [r3, #0]
 800e1da:	e002      	b.n	800e1e2 <_printf_i+0xf2>
 800e1dc:	0646      	lsls	r6, r0, #25
 800e1de:	d5fb      	bpl.n	800e1d8 <_printf_i+0xe8>
 800e1e0:	881e      	ldrh	r6, [r3, #0]
 800e1e2:	4854      	ldr	r0, [pc, #336]	; (800e334 <_printf_i+0x244>)
 800e1e4:	2f6f      	cmp	r7, #111	; 0x6f
 800e1e6:	bf0c      	ite	eq
 800e1e8:	2308      	moveq	r3, #8
 800e1ea:	230a      	movne	r3, #10
 800e1ec:	2100      	movs	r1, #0
 800e1ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e1f2:	6865      	ldr	r5, [r4, #4]
 800e1f4:	60a5      	str	r5, [r4, #8]
 800e1f6:	2d00      	cmp	r5, #0
 800e1f8:	bfa2      	ittt	ge
 800e1fa:	6821      	ldrge	r1, [r4, #0]
 800e1fc:	f021 0104 	bicge.w	r1, r1, #4
 800e200:	6021      	strge	r1, [r4, #0]
 800e202:	b90e      	cbnz	r6, 800e208 <_printf_i+0x118>
 800e204:	2d00      	cmp	r5, #0
 800e206:	d04d      	beq.n	800e2a4 <_printf_i+0x1b4>
 800e208:	4615      	mov	r5, r2
 800e20a:	fbb6 f1f3 	udiv	r1, r6, r3
 800e20e:	fb03 6711 	mls	r7, r3, r1, r6
 800e212:	5dc7      	ldrb	r7, [r0, r7]
 800e214:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e218:	4637      	mov	r7, r6
 800e21a:	42bb      	cmp	r3, r7
 800e21c:	460e      	mov	r6, r1
 800e21e:	d9f4      	bls.n	800e20a <_printf_i+0x11a>
 800e220:	2b08      	cmp	r3, #8
 800e222:	d10b      	bne.n	800e23c <_printf_i+0x14c>
 800e224:	6823      	ldr	r3, [r4, #0]
 800e226:	07de      	lsls	r6, r3, #31
 800e228:	d508      	bpl.n	800e23c <_printf_i+0x14c>
 800e22a:	6923      	ldr	r3, [r4, #16]
 800e22c:	6861      	ldr	r1, [r4, #4]
 800e22e:	4299      	cmp	r1, r3
 800e230:	bfde      	ittt	le
 800e232:	2330      	movle	r3, #48	; 0x30
 800e234:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e238:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800e23c:	1b52      	subs	r2, r2, r5
 800e23e:	6122      	str	r2, [r4, #16]
 800e240:	f8cd a000 	str.w	sl, [sp]
 800e244:	464b      	mov	r3, r9
 800e246:	aa03      	add	r2, sp, #12
 800e248:	4621      	mov	r1, r4
 800e24a:	4640      	mov	r0, r8
 800e24c:	f7ff fee2 	bl	800e014 <_printf_common>
 800e250:	3001      	adds	r0, #1
 800e252:	d14c      	bne.n	800e2ee <_printf_i+0x1fe>
 800e254:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e258:	b004      	add	sp, #16
 800e25a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e25e:	4835      	ldr	r0, [pc, #212]	; (800e334 <_printf_i+0x244>)
 800e260:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e264:	6829      	ldr	r1, [r5, #0]
 800e266:	6823      	ldr	r3, [r4, #0]
 800e268:	f851 6b04 	ldr.w	r6, [r1], #4
 800e26c:	6029      	str	r1, [r5, #0]
 800e26e:	061d      	lsls	r5, r3, #24
 800e270:	d514      	bpl.n	800e29c <_printf_i+0x1ac>
 800e272:	07df      	lsls	r7, r3, #31
 800e274:	bf44      	itt	mi
 800e276:	f043 0320 	orrmi.w	r3, r3, #32
 800e27a:	6023      	strmi	r3, [r4, #0]
 800e27c:	b91e      	cbnz	r6, 800e286 <_printf_i+0x196>
 800e27e:	6823      	ldr	r3, [r4, #0]
 800e280:	f023 0320 	bic.w	r3, r3, #32
 800e284:	6023      	str	r3, [r4, #0]
 800e286:	2310      	movs	r3, #16
 800e288:	e7b0      	b.n	800e1ec <_printf_i+0xfc>
 800e28a:	6823      	ldr	r3, [r4, #0]
 800e28c:	f043 0320 	orr.w	r3, r3, #32
 800e290:	6023      	str	r3, [r4, #0]
 800e292:	2378      	movs	r3, #120	; 0x78
 800e294:	4828      	ldr	r0, [pc, #160]	; (800e338 <_printf_i+0x248>)
 800e296:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e29a:	e7e3      	b.n	800e264 <_printf_i+0x174>
 800e29c:	0659      	lsls	r1, r3, #25
 800e29e:	bf48      	it	mi
 800e2a0:	b2b6      	uxthmi	r6, r6
 800e2a2:	e7e6      	b.n	800e272 <_printf_i+0x182>
 800e2a4:	4615      	mov	r5, r2
 800e2a6:	e7bb      	b.n	800e220 <_printf_i+0x130>
 800e2a8:	682b      	ldr	r3, [r5, #0]
 800e2aa:	6826      	ldr	r6, [r4, #0]
 800e2ac:	6961      	ldr	r1, [r4, #20]
 800e2ae:	1d18      	adds	r0, r3, #4
 800e2b0:	6028      	str	r0, [r5, #0]
 800e2b2:	0635      	lsls	r5, r6, #24
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	d501      	bpl.n	800e2bc <_printf_i+0x1cc>
 800e2b8:	6019      	str	r1, [r3, #0]
 800e2ba:	e002      	b.n	800e2c2 <_printf_i+0x1d2>
 800e2bc:	0670      	lsls	r0, r6, #25
 800e2be:	d5fb      	bpl.n	800e2b8 <_printf_i+0x1c8>
 800e2c0:	8019      	strh	r1, [r3, #0]
 800e2c2:	2300      	movs	r3, #0
 800e2c4:	6123      	str	r3, [r4, #16]
 800e2c6:	4615      	mov	r5, r2
 800e2c8:	e7ba      	b.n	800e240 <_printf_i+0x150>
 800e2ca:	682b      	ldr	r3, [r5, #0]
 800e2cc:	1d1a      	adds	r2, r3, #4
 800e2ce:	602a      	str	r2, [r5, #0]
 800e2d0:	681d      	ldr	r5, [r3, #0]
 800e2d2:	6862      	ldr	r2, [r4, #4]
 800e2d4:	2100      	movs	r1, #0
 800e2d6:	4628      	mov	r0, r5
 800e2d8:	f7f1 ff8a 	bl	80001f0 <memchr>
 800e2dc:	b108      	cbz	r0, 800e2e2 <_printf_i+0x1f2>
 800e2de:	1b40      	subs	r0, r0, r5
 800e2e0:	6060      	str	r0, [r4, #4]
 800e2e2:	6863      	ldr	r3, [r4, #4]
 800e2e4:	6123      	str	r3, [r4, #16]
 800e2e6:	2300      	movs	r3, #0
 800e2e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e2ec:	e7a8      	b.n	800e240 <_printf_i+0x150>
 800e2ee:	6923      	ldr	r3, [r4, #16]
 800e2f0:	462a      	mov	r2, r5
 800e2f2:	4649      	mov	r1, r9
 800e2f4:	4640      	mov	r0, r8
 800e2f6:	47d0      	blx	sl
 800e2f8:	3001      	adds	r0, #1
 800e2fa:	d0ab      	beq.n	800e254 <_printf_i+0x164>
 800e2fc:	6823      	ldr	r3, [r4, #0]
 800e2fe:	079b      	lsls	r3, r3, #30
 800e300:	d413      	bmi.n	800e32a <_printf_i+0x23a>
 800e302:	68e0      	ldr	r0, [r4, #12]
 800e304:	9b03      	ldr	r3, [sp, #12]
 800e306:	4298      	cmp	r0, r3
 800e308:	bfb8      	it	lt
 800e30a:	4618      	movlt	r0, r3
 800e30c:	e7a4      	b.n	800e258 <_printf_i+0x168>
 800e30e:	2301      	movs	r3, #1
 800e310:	4632      	mov	r2, r6
 800e312:	4649      	mov	r1, r9
 800e314:	4640      	mov	r0, r8
 800e316:	47d0      	blx	sl
 800e318:	3001      	adds	r0, #1
 800e31a:	d09b      	beq.n	800e254 <_printf_i+0x164>
 800e31c:	3501      	adds	r5, #1
 800e31e:	68e3      	ldr	r3, [r4, #12]
 800e320:	9903      	ldr	r1, [sp, #12]
 800e322:	1a5b      	subs	r3, r3, r1
 800e324:	42ab      	cmp	r3, r5
 800e326:	dcf2      	bgt.n	800e30e <_printf_i+0x21e>
 800e328:	e7eb      	b.n	800e302 <_printf_i+0x212>
 800e32a:	2500      	movs	r5, #0
 800e32c:	f104 0619 	add.w	r6, r4, #25
 800e330:	e7f5      	b.n	800e31e <_printf_i+0x22e>
 800e332:	bf00      	nop
 800e334:	0800e805 	.word	0x0800e805
 800e338:	0800e816 	.word	0x0800e816

0800e33c <__sread>:
 800e33c:	b510      	push	{r4, lr}
 800e33e:	460c      	mov	r4, r1
 800e340:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e344:	f000 f954 	bl	800e5f0 <_read_r>
 800e348:	2800      	cmp	r0, #0
 800e34a:	bfab      	itete	ge
 800e34c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e34e:	89a3      	ldrhlt	r3, [r4, #12]
 800e350:	181b      	addge	r3, r3, r0
 800e352:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e356:	bfac      	ite	ge
 800e358:	6563      	strge	r3, [r4, #84]	; 0x54
 800e35a:	81a3      	strhlt	r3, [r4, #12]
 800e35c:	bd10      	pop	{r4, pc}

0800e35e <__swrite>:
 800e35e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e362:	461f      	mov	r7, r3
 800e364:	898b      	ldrh	r3, [r1, #12]
 800e366:	05db      	lsls	r3, r3, #23
 800e368:	4605      	mov	r5, r0
 800e36a:	460c      	mov	r4, r1
 800e36c:	4616      	mov	r6, r2
 800e36e:	d505      	bpl.n	800e37c <__swrite+0x1e>
 800e370:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e374:	2302      	movs	r3, #2
 800e376:	2200      	movs	r2, #0
 800e378:	f000 f928 	bl	800e5cc <_lseek_r>
 800e37c:	89a3      	ldrh	r3, [r4, #12]
 800e37e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e382:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e386:	81a3      	strh	r3, [r4, #12]
 800e388:	4632      	mov	r2, r6
 800e38a:	463b      	mov	r3, r7
 800e38c:	4628      	mov	r0, r5
 800e38e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e392:	f000 b869 	b.w	800e468 <_write_r>

0800e396 <__sseek>:
 800e396:	b510      	push	{r4, lr}
 800e398:	460c      	mov	r4, r1
 800e39a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e39e:	f000 f915 	bl	800e5cc <_lseek_r>
 800e3a2:	1c43      	adds	r3, r0, #1
 800e3a4:	89a3      	ldrh	r3, [r4, #12]
 800e3a6:	bf15      	itete	ne
 800e3a8:	6560      	strne	r0, [r4, #84]	; 0x54
 800e3aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e3ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e3b2:	81a3      	strheq	r3, [r4, #12]
 800e3b4:	bf18      	it	ne
 800e3b6:	81a3      	strhne	r3, [r4, #12]
 800e3b8:	bd10      	pop	{r4, pc}

0800e3ba <__sclose>:
 800e3ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e3be:	f000 b8d3 	b.w	800e568 <_close_r>
	...

0800e3c4 <__swbuf_r>:
 800e3c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3c6:	460e      	mov	r6, r1
 800e3c8:	4614      	mov	r4, r2
 800e3ca:	4605      	mov	r5, r0
 800e3cc:	b118      	cbz	r0, 800e3d6 <__swbuf_r+0x12>
 800e3ce:	6983      	ldr	r3, [r0, #24]
 800e3d0:	b90b      	cbnz	r3, 800e3d6 <__swbuf_r+0x12>
 800e3d2:	f7ff fbb3 	bl	800db3c <__sinit>
 800e3d6:	4b21      	ldr	r3, [pc, #132]	; (800e45c <__swbuf_r+0x98>)
 800e3d8:	429c      	cmp	r4, r3
 800e3da:	d12b      	bne.n	800e434 <__swbuf_r+0x70>
 800e3dc:	686c      	ldr	r4, [r5, #4]
 800e3de:	69a3      	ldr	r3, [r4, #24]
 800e3e0:	60a3      	str	r3, [r4, #8]
 800e3e2:	89a3      	ldrh	r3, [r4, #12]
 800e3e4:	071a      	lsls	r2, r3, #28
 800e3e6:	d52f      	bpl.n	800e448 <__swbuf_r+0x84>
 800e3e8:	6923      	ldr	r3, [r4, #16]
 800e3ea:	b36b      	cbz	r3, 800e448 <__swbuf_r+0x84>
 800e3ec:	6923      	ldr	r3, [r4, #16]
 800e3ee:	6820      	ldr	r0, [r4, #0]
 800e3f0:	1ac0      	subs	r0, r0, r3
 800e3f2:	6963      	ldr	r3, [r4, #20]
 800e3f4:	b2f6      	uxtb	r6, r6
 800e3f6:	4283      	cmp	r3, r0
 800e3f8:	4637      	mov	r7, r6
 800e3fa:	dc04      	bgt.n	800e406 <__swbuf_r+0x42>
 800e3fc:	4621      	mov	r1, r4
 800e3fe:	4628      	mov	r0, r5
 800e400:	f7ff fb08 	bl	800da14 <_fflush_r>
 800e404:	bb30      	cbnz	r0, 800e454 <__swbuf_r+0x90>
 800e406:	68a3      	ldr	r3, [r4, #8]
 800e408:	3b01      	subs	r3, #1
 800e40a:	60a3      	str	r3, [r4, #8]
 800e40c:	6823      	ldr	r3, [r4, #0]
 800e40e:	1c5a      	adds	r2, r3, #1
 800e410:	6022      	str	r2, [r4, #0]
 800e412:	701e      	strb	r6, [r3, #0]
 800e414:	6963      	ldr	r3, [r4, #20]
 800e416:	3001      	adds	r0, #1
 800e418:	4283      	cmp	r3, r0
 800e41a:	d004      	beq.n	800e426 <__swbuf_r+0x62>
 800e41c:	89a3      	ldrh	r3, [r4, #12]
 800e41e:	07db      	lsls	r3, r3, #31
 800e420:	d506      	bpl.n	800e430 <__swbuf_r+0x6c>
 800e422:	2e0a      	cmp	r6, #10
 800e424:	d104      	bne.n	800e430 <__swbuf_r+0x6c>
 800e426:	4621      	mov	r1, r4
 800e428:	4628      	mov	r0, r5
 800e42a:	f7ff faf3 	bl	800da14 <_fflush_r>
 800e42e:	b988      	cbnz	r0, 800e454 <__swbuf_r+0x90>
 800e430:	4638      	mov	r0, r7
 800e432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e434:	4b0a      	ldr	r3, [pc, #40]	; (800e460 <__swbuf_r+0x9c>)
 800e436:	429c      	cmp	r4, r3
 800e438:	d101      	bne.n	800e43e <__swbuf_r+0x7a>
 800e43a:	68ac      	ldr	r4, [r5, #8]
 800e43c:	e7cf      	b.n	800e3de <__swbuf_r+0x1a>
 800e43e:	4b09      	ldr	r3, [pc, #36]	; (800e464 <__swbuf_r+0xa0>)
 800e440:	429c      	cmp	r4, r3
 800e442:	bf08      	it	eq
 800e444:	68ec      	ldreq	r4, [r5, #12]
 800e446:	e7ca      	b.n	800e3de <__swbuf_r+0x1a>
 800e448:	4621      	mov	r1, r4
 800e44a:	4628      	mov	r0, r5
 800e44c:	f000 f81e 	bl	800e48c <__swsetup_r>
 800e450:	2800      	cmp	r0, #0
 800e452:	d0cb      	beq.n	800e3ec <__swbuf_r+0x28>
 800e454:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800e458:	e7ea      	b.n	800e430 <__swbuf_r+0x6c>
 800e45a:	bf00      	nop
 800e45c:	0800e7b4 	.word	0x0800e7b4
 800e460:	0800e7d4 	.word	0x0800e7d4
 800e464:	0800e794 	.word	0x0800e794

0800e468 <_write_r>:
 800e468:	b538      	push	{r3, r4, r5, lr}
 800e46a:	4d07      	ldr	r5, [pc, #28]	; (800e488 <_write_r+0x20>)
 800e46c:	4604      	mov	r4, r0
 800e46e:	4608      	mov	r0, r1
 800e470:	4611      	mov	r1, r2
 800e472:	2200      	movs	r2, #0
 800e474:	602a      	str	r2, [r5, #0]
 800e476:	461a      	mov	r2, r3
 800e478:	f7f3 f892 	bl	80015a0 <_write>
 800e47c:	1c43      	adds	r3, r0, #1
 800e47e:	d102      	bne.n	800e486 <_write_r+0x1e>
 800e480:	682b      	ldr	r3, [r5, #0]
 800e482:	b103      	cbz	r3, 800e486 <_write_r+0x1e>
 800e484:	6023      	str	r3, [r4, #0]
 800e486:	bd38      	pop	{r3, r4, r5, pc}
 800e488:	20000cb8 	.word	0x20000cb8

0800e48c <__swsetup_r>:
 800e48c:	4b32      	ldr	r3, [pc, #200]	; (800e558 <__swsetup_r+0xcc>)
 800e48e:	b570      	push	{r4, r5, r6, lr}
 800e490:	681d      	ldr	r5, [r3, #0]
 800e492:	4606      	mov	r6, r0
 800e494:	460c      	mov	r4, r1
 800e496:	b125      	cbz	r5, 800e4a2 <__swsetup_r+0x16>
 800e498:	69ab      	ldr	r3, [r5, #24]
 800e49a:	b913      	cbnz	r3, 800e4a2 <__swsetup_r+0x16>
 800e49c:	4628      	mov	r0, r5
 800e49e:	f7ff fb4d 	bl	800db3c <__sinit>
 800e4a2:	4b2e      	ldr	r3, [pc, #184]	; (800e55c <__swsetup_r+0xd0>)
 800e4a4:	429c      	cmp	r4, r3
 800e4a6:	d10f      	bne.n	800e4c8 <__swsetup_r+0x3c>
 800e4a8:	686c      	ldr	r4, [r5, #4]
 800e4aa:	89a3      	ldrh	r3, [r4, #12]
 800e4ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e4b0:	0719      	lsls	r1, r3, #28
 800e4b2:	d42c      	bmi.n	800e50e <__swsetup_r+0x82>
 800e4b4:	06dd      	lsls	r5, r3, #27
 800e4b6:	d411      	bmi.n	800e4dc <__swsetup_r+0x50>
 800e4b8:	2309      	movs	r3, #9
 800e4ba:	6033      	str	r3, [r6, #0]
 800e4bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e4c0:	81a3      	strh	r3, [r4, #12]
 800e4c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e4c6:	e03e      	b.n	800e546 <__swsetup_r+0xba>
 800e4c8:	4b25      	ldr	r3, [pc, #148]	; (800e560 <__swsetup_r+0xd4>)
 800e4ca:	429c      	cmp	r4, r3
 800e4cc:	d101      	bne.n	800e4d2 <__swsetup_r+0x46>
 800e4ce:	68ac      	ldr	r4, [r5, #8]
 800e4d0:	e7eb      	b.n	800e4aa <__swsetup_r+0x1e>
 800e4d2:	4b24      	ldr	r3, [pc, #144]	; (800e564 <__swsetup_r+0xd8>)
 800e4d4:	429c      	cmp	r4, r3
 800e4d6:	bf08      	it	eq
 800e4d8:	68ec      	ldreq	r4, [r5, #12]
 800e4da:	e7e6      	b.n	800e4aa <__swsetup_r+0x1e>
 800e4dc:	0758      	lsls	r0, r3, #29
 800e4de:	d512      	bpl.n	800e506 <__swsetup_r+0x7a>
 800e4e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e4e2:	b141      	cbz	r1, 800e4f6 <__swsetup_r+0x6a>
 800e4e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e4e8:	4299      	cmp	r1, r3
 800e4ea:	d002      	beq.n	800e4f2 <__swsetup_r+0x66>
 800e4ec:	4630      	mov	r0, r6
 800e4ee:	f7ff f83d 	bl	800d56c <_free_r>
 800e4f2:	2300      	movs	r3, #0
 800e4f4:	6363      	str	r3, [r4, #52]	; 0x34
 800e4f6:	89a3      	ldrh	r3, [r4, #12]
 800e4f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e4fc:	81a3      	strh	r3, [r4, #12]
 800e4fe:	2300      	movs	r3, #0
 800e500:	6063      	str	r3, [r4, #4]
 800e502:	6923      	ldr	r3, [r4, #16]
 800e504:	6023      	str	r3, [r4, #0]
 800e506:	89a3      	ldrh	r3, [r4, #12]
 800e508:	f043 0308 	orr.w	r3, r3, #8
 800e50c:	81a3      	strh	r3, [r4, #12]
 800e50e:	6923      	ldr	r3, [r4, #16]
 800e510:	b94b      	cbnz	r3, 800e526 <__swsetup_r+0x9a>
 800e512:	89a3      	ldrh	r3, [r4, #12]
 800e514:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e518:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e51c:	d003      	beq.n	800e526 <__swsetup_r+0x9a>
 800e51e:	4621      	mov	r1, r4
 800e520:	4630      	mov	r0, r6
 800e522:	f7ff fbd1 	bl	800dcc8 <__smakebuf_r>
 800e526:	89a0      	ldrh	r0, [r4, #12]
 800e528:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e52c:	f010 0301 	ands.w	r3, r0, #1
 800e530:	d00a      	beq.n	800e548 <__swsetup_r+0xbc>
 800e532:	2300      	movs	r3, #0
 800e534:	60a3      	str	r3, [r4, #8]
 800e536:	6963      	ldr	r3, [r4, #20]
 800e538:	425b      	negs	r3, r3
 800e53a:	61a3      	str	r3, [r4, #24]
 800e53c:	6923      	ldr	r3, [r4, #16]
 800e53e:	b943      	cbnz	r3, 800e552 <__swsetup_r+0xc6>
 800e540:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e544:	d1ba      	bne.n	800e4bc <__swsetup_r+0x30>
 800e546:	bd70      	pop	{r4, r5, r6, pc}
 800e548:	0781      	lsls	r1, r0, #30
 800e54a:	bf58      	it	pl
 800e54c:	6963      	ldrpl	r3, [r4, #20]
 800e54e:	60a3      	str	r3, [r4, #8]
 800e550:	e7f4      	b.n	800e53c <__swsetup_r+0xb0>
 800e552:	2000      	movs	r0, #0
 800e554:	e7f7      	b.n	800e546 <__swsetup_r+0xba>
 800e556:	bf00      	nop
 800e558:	200000d4 	.word	0x200000d4
 800e55c:	0800e7b4 	.word	0x0800e7b4
 800e560:	0800e7d4 	.word	0x0800e7d4
 800e564:	0800e794 	.word	0x0800e794

0800e568 <_close_r>:
 800e568:	b538      	push	{r3, r4, r5, lr}
 800e56a:	4d06      	ldr	r5, [pc, #24]	; (800e584 <_close_r+0x1c>)
 800e56c:	2300      	movs	r3, #0
 800e56e:	4604      	mov	r4, r0
 800e570:	4608      	mov	r0, r1
 800e572:	602b      	str	r3, [r5, #0]
 800e574:	f7f3 f840 	bl	80015f8 <_close>
 800e578:	1c43      	adds	r3, r0, #1
 800e57a:	d102      	bne.n	800e582 <_close_r+0x1a>
 800e57c:	682b      	ldr	r3, [r5, #0]
 800e57e:	b103      	cbz	r3, 800e582 <_close_r+0x1a>
 800e580:	6023      	str	r3, [r4, #0]
 800e582:	bd38      	pop	{r3, r4, r5, pc}
 800e584:	20000cb8 	.word	0x20000cb8

0800e588 <_fstat_r>:
 800e588:	b538      	push	{r3, r4, r5, lr}
 800e58a:	4d07      	ldr	r5, [pc, #28]	; (800e5a8 <_fstat_r+0x20>)
 800e58c:	2300      	movs	r3, #0
 800e58e:	4604      	mov	r4, r0
 800e590:	4608      	mov	r0, r1
 800e592:	4611      	mov	r1, r2
 800e594:	602b      	str	r3, [r5, #0]
 800e596:	f7f3 f87f 	bl	8001698 <_fstat>
 800e59a:	1c43      	adds	r3, r0, #1
 800e59c:	d102      	bne.n	800e5a4 <_fstat_r+0x1c>
 800e59e:	682b      	ldr	r3, [r5, #0]
 800e5a0:	b103      	cbz	r3, 800e5a4 <_fstat_r+0x1c>
 800e5a2:	6023      	str	r3, [r4, #0]
 800e5a4:	bd38      	pop	{r3, r4, r5, pc}
 800e5a6:	bf00      	nop
 800e5a8:	20000cb8 	.word	0x20000cb8

0800e5ac <_isatty_r>:
 800e5ac:	b538      	push	{r3, r4, r5, lr}
 800e5ae:	4d06      	ldr	r5, [pc, #24]	; (800e5c8 <_isatty_r+0x1c>)
 800e5b0:	2300      	movs	r3, #0
 800e5b2:	4604      	mov	r4, r0
 800e5b4:	4608      	mov	r0, r1
 800e5b6:	602b      	str	r3, [r5, #0]
 800e5b8:	f7f2 ffdc 	bl	8001574 <_isatty>
 800e5bc:	1c43      	adds	r3, r0, #1
 800e5be:	d102      	bne.n	800e5c6 <_isatty_r+0x1a>
 800e5c0:	682b      	ldr	r3, [r5, #0]
 800e5c2:	b103      	cbz	r3, 800e5c6 <_isatty_r+0x1a>
 800e5c4:	6023      	str	r3, [r4, #0]
 800e5c6:	bd38      	pop	{r3, r4, r5, pc}
 800e5c8:	20000cb8 	.word	0x20000cb8

0800e5cc <_lseek_r>:
 800e5cc:	b538      	push	{r3, r4, r5, lr}
 800e5ce:	4d07      	ldr	r5, [pc, #28]	; (800e5ec <_lseek_r+0x20>)
 800e5d0:	4604      	mov	r4, r0
 800e5d2:	4608      	mov	r0, r1
 800e5d4:	4611      	mov	r1, r2
 800e5d6:	2200      	movs	r2, #0
 800e5d8:	602a      	str	r2, [r5, #0]
 800e5da:	461a      	mov	r2, r3
 800e5dc:	f7f3 f823 	bl	8001626 <_lseek>
 800e5e0:	1c43      	adds	r3, r0, #1
 800e5e2:	d102      	bne.n	800e5ea <_lseek_r+0x1e>
 800e5e4:	682b      	ldr	r3, [r5, #0]
 800e5e6:	b103      	cbz	r3, 800e5ea <_lseek_r+0x1e>
 800e5e8:	6023      	str	r3, [r4, #0]
 800e5ea:	bd38      	pop	{r3, r4, r5, pc}
 800e5ec:	20000cb8 	.word	0x20000cb8

0800e5f0 <_read_r>:
 800e5f0:	b538      	push	{r3, r4, r5, lr}
 800e5f2:	4d07      	ldr	r5, [pc, #28]	; (800e610 <_read_r+0x20>)
 800e5f4:	4604      	mov	r4, r0
 800e5f6:	4608      	mov	r0, r1
 800e5f8:	4611      	mov	r1, r2
 800e5fa:	2200      	movs	r2, #0
 800e5fc:	602a      	str	r2, [r5, #0]
 800e5fe:	461a      	mov	r2, r3
 800e600:	f7f3 f822 	bl	8001648 <_read>
 800e604:	1c43      	adds	r3, r0, #1
 800e606:	d102      	bne.n	800e60e <_read_r+0x1e>
 800e608:	682b      	ldr	r3, [r5, #0]
 800e60a:	b103      	cbz	r3, 800e60e <_read_r+0x1e>
 800e60c:	6023      	str	r3, [r4, #0]
 800e60e:	bd38      	pop	{r3, r4, r5, pc}
 800e610:	20000cb8 	.word	0x20000cb8

0800e614 <_init>:
 800e614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e616:	bf00      	nop
 800e618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e61a:	bc08      	pop	{r3}
 800e61c:	469e      	mov	lr, r3
 800e61e:	4770      	bx	lr

0800e620 <_fini>:
 800e620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e622:	bf00      	nop
 800e624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e626:	bc08      	pop	{r3}
 800e628:	469e      	mov	lr, r3
 800e62a:	4770      	bx	lr
