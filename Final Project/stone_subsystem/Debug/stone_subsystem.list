
stone_subsystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f1b8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001fc  0800f368  0800f368  0001f368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f564  0800f564  00020158  2**0
                  CONTENTS
  4 .ARM          00000008  0800f564  0800f564  0001f564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f56c  0800f56c  00020158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f56c  0800f56c  0001f56c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f570  0800f570  0001f570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000158  20000000  0800f574  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020158  2**0
                  CONTENTS
 10 .bss          00003ac0  20000158  20000158  00020158  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20003c18  20003c18  00020158  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020158  2**0
                  CONTENTS, READONLY
 13 .debug_info   00027d60  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005af5  00000000  00000000  00047ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c38  00000000  00000000  0004d9e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000019f8  00000000  00000000  0004f618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00009c5c  00000000  00000000  00051010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00028702  00000000  00000000  0005ac6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e7982  00000000  00000000  0008336e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0016acf0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007ca0  00000000  00000000  0016ad40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000158 	.word	0x20000158
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800f350 	.word	0x0800f350

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000015c 	.word	0x2000015c
 80001ec:	0800f350 	.word	0x0800f350

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <MovementControllerInit>:
extern movementData_t lastAccel;

// running average buffer
// thresholds for basic gestures.

void MovementControllerInit(I2C_HandleTypeDef *I2Cxhandle,SPI_HandleTypeDef *SPIxHandle) {
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	6039      	str	r1, [r7, #0]
	// Accelrometor Init
	Lis3dhInit(I2Cxhandle);
 800059e:	6878      	ldr	r0, [r7, #4]
 80005a0:	f000 fec8 	bl	8001334 <Lis3dhInit>
	I3G450D_Init(SPIxHandle);
 80005a4:	6838      	ldr	r0, [r7, #0]
 80005a6:	f000 fa11 	bl	80009cc <I3G450D_Init>


}
 80005aa:	bf00      	nop
 80005ac:	3708      	adds	r7, #8
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}

080005b2 <MovementControllerProcess>:
int MovementControllerProcess(){
 80005b2:	b580      	push	{r7, lr}
 80005b4:	b082      	sub	sp, #8
 80005b6:	af00      	add	r7, sp, #0
	// Gets for the gyroscope.
	int16_t x,y,z;

	I3G450D_loop();
 80005b8:	f000 fac2 	bl	8000b40 <I3G450D_loop>
	GyroGetData(&x,&y, &z );
 80005bc:	1cba      	adds	r2, r7, #2
 80005be:	1d39      	adds	r1, r7, #4
 80005c0:	1dbb      	adds	r3, r7, #6
 80005c2:	4618      	mov	r0, r3
 80005c4:	f000 fe86 	bl	80012d4 <GyroGetData>


	// Gets for the acceleromentor .
	Lis3dhGetAcc();
 80005c8:	f000 ff3c 	bl	8001444 <Lis3dhGetAcc>
	AccelGetData(&x,&y, &z );
 80005cc:	1cba      	adds	r2, r7, #2
 80005ce:	1d39      	adds	r1, r7, #4
 80005d0:	1dbb      	adds	r3, r7, #6
 80005d2:	4618      	mov	r0, r3
 80005d4:	f000 ffa6 	bl	8001524 <AccelGetData>
	return 0;
 80005d8:	2300      	movs	r3, #0
}
 80005da:	4618      	mov	r0, r3
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
	...

080005e4 <SessionControllerInit>:
void ChangeUser(uint8_t newUserID ){
	userID = newUserID;
}

void SessionControllerInit(I2C_HandleTypeDef *I2Cxhandle,TIM_HandleTypeDef *timer,SPI_HandleTypeDef *SPIxHandle)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	60f8      	str	r0, [r7, #12]
 80005ec:	60b9      	str	r1, [r7, #8]
 80005ee:	607a      	str	r2, [r7, #4]

	// Make sure that they return okay.
	// There are error enter error state
	// start general timer;

	currentState = START;
 80005f0:	4b07      	ldr	r3, [pc, #28]	; (8000610 <SessionControllerInit+0x2c>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	701a      	strb	r2, [r3, #0]
	timeStateStarted = HAL_GetTick();
 80005f6:	f002 fa29 	bl	8002a4c <HAL_GetTick>
 80005fa:	4603      	mov	r3, r0
 80005fc:	4a05      	ldr	r2, [pc, #20]	; (8000614 <SessionControllerInit+0x30>)
 80005fe:	6013      	str	r3, [r2, #0]
	MovementControllerInit(I2Cxhandle,SPIxHandle);
 8000600:	6879      	ldr	r1, [r7, #4]
 8000602:	68f8      	ldr	r0, [r7, #12]
 8000604:	f7ff ffc6 	bl	8000594 <MovementControllerInit>


}
 8000608:	bf00      	nop
 800060a:	3710      	adds	r7, #16
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	20000174 	.word	0x20000174
 8000614:	20000178 	.word	0x20000178

08000618 <SessionControllerProcess>:
void SessionControllerProcess()
{
 8000618:	b5b0      	push	{r4, r5, r7, lr}
 800061a:	b08a      	sub	sp, #40	; 0x28
 800061c:	af00      	add	r7, sp, #0


// check to see if current state has reached it time out.
	stateTableEntry_t current = stateTabel[currentState];
 800061e:	4b1e      	ldr	r3, [pc, #120]	; (8000698 <SessionControllerProcess+0x80>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	4619      	mov	r1, r3
 8000624:	4a1d      	ldr	r2, [pc, #116]	; (800069c <SessionControllerProcess+0x84>)
 8000626:	460b      	mov	r3, r1
 8000628:	00db      	lsls	r3, r3, #3
 800062a:	1a5b      	subs	r3, r3, r1
 800062c:	009b      	lsls	r3, r3, #2
 800062e:	4413      	add	r3, r2
 8000630:	463c      	mov	r4, r7
 8000632:	461d      	mov	r5, r3
 8000634:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000636:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000638:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800063c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	uint32_t timeout = current.timeout;
 8000640:	697b      	ldr	r3, [r7, #20]
 8000642:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t currentTime = HAL_GetTick();
 8000644:	f002 fa02 	bl	8002a4c <HAL_GetTick>
 8000648:	6238      	str	r0, [r7, #32]
	uint32_t timeSinceStarted = currentTime -timeStateStarted;
 800064a:	4b15      	ldr	r3, [pc, #84]	; (80006a0 <SessionControllerProcess+0x88>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	6a3a      	ldr	r2, [r7, #32]
 8000650:	1ad3      	subs	r3, r2, r3
 8000652:	61fb      	str	r3, [r7, #28]


	MovementControllerProcess();
 8000654:	f7ff ffad 	bl	80005b2 <MovementControllerProcess>

	if ( HAL_GetTick() - timeStateStarted > timeout )
 8000658:	f002 f9f8 	bl	8002a4c <HAL_GetTick>
 800065c:	4602      	mov	r2, r0
 800065e:	4b10      	ldr	r3, [pc, #64]	; (80006a0 <SessionControllerProcess+0x88>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	1ad3      	subs	r3, r2, r3
 8000664:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000666:	429a      	cmp	r2, r3
 8000668:	d205      	bcs.n	8000676 <SessionControllerProcess+0x5e>
	{
		previouseState = currentState;
 800066a:	4b0b      	ldr	r3, [pc, #44]	; (8000698 <SessionControllerProcess+0x80>)
 800066c:	781a      	ldrb	r2, [r3, #0]
 800066e:	4b0d      	ldr	r3, [pc, #52]	; (80006a4 <SessionControllerProcess+0x8c>)
 8000670:	701a      	strb	r2, [r3, #0]
		current.onEnd();
 8000672:	693b      	ldr	r3, [r7, #16]
 8000674:	4798      	blx	r3

	}
	if ( 1 == buttonPressed )
 8000676:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <SessionControllerProcess+0x90>)
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	2b01      	cmp	r3, #1
 800067c:	d101      	bne.n	8000682 <SessionControllerProcess+0x6a>
	{
		current.onButtonPress();
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	4798      	blx	r3
	if( 1 == shakeToWakeTriggered)
	{
		// shake to wake response.
	}
	// in mode
	if( 1 == inMode )
 8000682:	4b0a      	ldr	r3, [pc, #40]	; (80006ac <SessionControllerProcess+0x94>)
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	2b01      	cmp	r3, #1
 8000688:	d001      	beq.n	800068e <SessionControllerProcess+0x76>

	}
	else{
		// run out put for current state
		// run proccess for current state.
		current.stateProcess();
 800068a:	69bb      	ldr	r3, [r7, #24]
 800068c:	4798      	blx	r3
	}


}
 800068e:	bf00      	nop
 8000690:	3728      	adds	r7, #40	; 0x28
 8000692:	46bd      	mov	sp, r7
 8000694:	bdb0      	pop	{r4, r5, r7, pc}
 8000696:	bf00      	nop
 8000698:	20000174 	.word	0x20000174
 800069c:	20000000 	.word	0x20000000
 80006a0:	20000178 	.word	0x20000178
 80006a4:	20000175 	.word	0x20000175
 80006a8:	2000017c 	.word	0x2000017c
 80006ac:	2000017d 	.word	0x2000017d

080006b0 <IdleAwake>:
int Start(){
	timeStateStarted = HAL_GetTick();
	ConsoleSendLine(" State = starting");
	return 0;
}
int IdleAwake(){
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
	currentState = IDLE_AWAKE;
 80006b4:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <IdleAwake+0x20>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	701a      	strb	r2, [r3, #0]
	timeStateStarted = HAL_GetTick();
 80006ba:	f002 f9c7 	bl	8002a4c <HAL_GetTick>
 80006be:	4603      	mov	r3, r0
 80006c0:	4a04      	ldr	r2, [pc, #16]	; (80006d4 <IdleAwake+0x24>)
 80006c2:	6013      	str	r3, [r2, #0]
	ConsoleSendLine(" State = IdleAwake");
 80006c4:	4804      	ldr	r0, [pc, #16]	; (80006d8 <IdleAwake+0x28>)
 80006c6:	f000 f91b 	bl	8000900 <ConsoleSendLine>
	return 0;
 80006ca:	2300      	movs	r3, #0
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	20000174 	.word	0x20000174
 80006d4:	20000178 	.word	0x20000178
 80006d8:	0800f37c 	.word	0x0800f37c

080006dc <DeepSleep>:
int DeepSleep(){
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
	currentState = DEEP_SLEEP;
 80006e0:	4b06      	ldr	r3, [pc, #24]	; (80006fc <DeepSleep+0x20>)
 80006e2:	2202      	movs	r2, #2
 80006e4:	701a      	strb	r2, [r3, #0]
	timeStateStarted = HAL_GetTick();
 80006e6:	f002 f9b1 	bl	8002a4c <HAL_GetTick>
 80006ea:	4603      	mov	r3, r0
 80006ec:	4a04      	ldr	r2, [pc, #16]	; (8000700 <DeepSleep+0x24>)
 80006ee:	6013      	str	r3, [r2, #0]
	ConsoleSendLine(" State = DeepSleep");
 80006f0:	4804      	ldr	r0, [pc, #16]	; (8000704 <DeepSleep+0x28>)
 80006f2:	f000 f905 	bl	8000900 <ConsoleSendLine>
	return 0;
 80006f6:	2300      	movs	r3, #0
}
 80006f8:	4618      	mov	r0, r3
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	20000174 	.word	0x20000174
 8000700:	20000178 	.word	0x20000178
 8000704:	0800f390 	.word	0x0800f390

08000708 <WaitingForSelection>:
int WaitingForSelection(){
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
	currentState = WAITING_FOR_SELECTION;
 800070c:	4b06      	ldr	r3, [pc, #24]	; (8000728 <WaitingForSelection+0x20>)
 800070e:	2203      	movs	r2, #3
 8000710:	701a      	strb	r2, [r3, #0]
	timeStateStarted = HAL_GetTick();
 8000712:	f002 f99b 	bl	8002a4c <HAL_GetTick>
 8000716:	4603      	mov	r3, r0
 8000718:	4a04      	ldr	r2, [pc, #16]	; (800072c <WaitingForSelection+0x24>)
 800071a:	6013      	str	r3, [r2, #0]
	ConsoleSendLine(" State = WaitingForSelection");
 800071c:	4804      	ldr	r0, [pc, #16]	; (8000730 <WaitingForSelection+0x28>)
 800071e:	f000 f8ef 	bl	8000900 <ConsoleSendLine>
	return 0;
 8000722:	2300      	movs	r3, #0
}
 8000724:	4618      	mov	r0, r3
 8000726:	bd80      	pop	{r7, pc}
 8000728:	20000174 	.word	0x20000174
 800072c:	20000178 	.word	0x20000178
 8000730:	0800f3a4 	.word	0x0800f3a4

08000734 <LoadMode>:
int LoadMode(){
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
	currentState = WAITING_FOR_SELECTION;
 8000738:	4b06      	ldr	r3, [pc, #24]	; (8000754 <LoadMode+0x20>)
 800073a:	2203      	movs	r2, #3
 800073c:	701a      	strb	r2, [r3, #0]
	timeStateStarted = HAL_GetTick();
 800073e:	f002 f985 	bl	8002a4c <HAL_GetTick>
 8000742:	4603      	mov	r3, r0
 8000744:	4a04      	ldr	r2, [pc, #16]	; (8000758 <LoadMode+0x24>)
 8000746:	6013      	str	r3, [r2, #0]
	ConsoleSendLine(" State = LoadMode");
 8000748:	4804      	ldr	r0, [pc, #16]	; (800075c <LoadMode+0x28>)
 800074a:	f000 f8d9 	bl	8000900 <ConsoleSendLine>
	return 0;
 800074e:	2300      	movs	r3, #0
}
 8000750:	4618      	mov	r0, r3
 8000752:	bd80      	pop	{r7, pc}
 8000754:	20000174 	.word	0x20000174
 8000758:	20000178 	.word	0x20000178
 800075c:	0800f3c4 	.word	0x0800f3c4

08000760 <CliMode>:
int CliMode(){
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
	currentState = CLI_MODE;
 8000764:	4b08      	ldr	r3, [pc, #32]	; (8000788 <CliMode+0x28>)
 8000766:	2206      	movs	r2, #6
 8000768:	701a      	strb	r2, [r3, #0]
	// clear the button press
	buttonPressed = 0;
 800076a:	4b08      	ldr	r3, [pc, #32]	; (800078c <CliMode+0x2c>)
 800076c:	2200      	movs	r2, #0
 800076e:	701a      	strb	r2, [r3, #0]
	timeStateStarted = HAL_GetTick();
 8000770:	f002 f96c 	bl	8002a4c <HAL_GetTick>
 8000774:	4603      	mov	r3, r0
 8000776:	4a06      	ldr	r2, [pc, #24]	; (8000790 <CliMode+0x30>)
 8000778:	6013      	str	r3, [r2, #0]
	ConsoleSendLine(" State = CliMode");
 800077a:	4806      	ldr	r0, [pc, #24]	; (8000794 <CliMode+0x34>)
 800077c:	f000 f8c0 	bl	8000900 <ConsoleSendLine>

	return 0;
 8000780:	2300      	movs	r3, #0
}
 8000782:	4618      	mov	r0, r3
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	20000174 	.word	0x20000174
 800078c:	2000017c 	.word	0x2000017c
 8000790:	20000178 	.word	0x20000178
 8000794:	0800f3d8 	.word	0x0800f3d8

08000798 <StartPreviouseMode>:
int StartPreviouseMode(){
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
	currentState = previouseState;
 800079c:	4b07      	ldr	r3, [pc, #28]	; (80007bc <StartPreviouseMode+0x24>)
 800079e:	781a      	ldrb	r2, [r3, #0]
 80007a0:	4b07      	ldr	r3, [pc, #28]	; (80007c0 <StartPreviouseMode+0x28>)
 80007a2:	701a      	strb	r2, [r3, #0]

	timeStateStarted = HAL_GetTick();
 80007a4:	f002 f952 	bl	8002a4c <HAL_GetTick>
 80007a8:	4603      	mov	r3, r0
 80007aa:	4a06      	ldr	r2, [pc, #24]	; (80007c4 <StartPreviouseMode+0x2c>)
 80007ac:	6013      	str	r3, [r2, #0]
	ConsoleSendLine(" State = StartPreviouseMode");
 80007ae:	4806      	ldr	r0, [pc, #24]	; (80007c8 <StartPreviouseMode+0x30>)
 80007b0:	f000 f8a6 	bl	8000900 <ConsoleSendLine>
	return 0;
 80007b4:	2300      	movs	r3, #0
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	20000175 	.word	0x20000175
 80007c0:	20000174 	.word	0x20000174
 80007c4:	20000178 	.word	0x20000178
 80007c8:	0800f3ec 	.word	0x0800f3ec

080007cc <InMode>:
int InMode()
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
	currentState = IN_MODE;
 80007d0:	4b06      	ldr	r3, [pc, #24]	; (80007ec <InMode+0x20>)
 80007d2:	2205      	movs	r2, #5
 80007d4:	701a      	strb	r2, [r3, #0]
	timeStateStarted = HAL_GetTick();
 80007d6:	f002 f939 	bl	8002a4c <HAL_GetTick>
 80007da:	4603      	mov	r3, r0
 80007dc:	4a04      	ldr	r2, [pc, #16]	; (80007f0 <InMode+0x24>)
 80007de:	6013      	str	r3, [r2, #0]
	ConsoleSendLine(" State = InMode");
 80007e0:	4804      	ldr	r0, [pc, #16]	; (80007f4 <InMode+0x28>)
 80007e2:	f000 f88d 	bl	8000900 <ConsoleSendLine>
	return 0;
 80007e6:	2300      	movs	r3, #0

}
 80007e8:	4618      	mov	r0, r3
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	20000174 	.word	0x20000174
 80007f0:	20000178 	.word	0x20000178
 80007f4:	0800f408 	.word	0x0800f408

080007f8 <StartProcess>:
int SleepOutput(){}
int WaitingForInputOutput(){}
int CliModeOutput(){}
int ModeLoading(){}

int StartProcess(){return 0;}
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	2300      	movs	r3, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr

08000808 <IdleAwakeProcess>:
int IdleAwakeProcess(){return 0;}
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
 800080c:	2300      	movs	r3, #0
 800080e:	4618      	mov	r0, r3
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr

08000818 <DeepSleepProcess>:
int DeepSleepProcess(){return 0;}
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
 800081c:	2300      	movs	r3, #0
 800081e:	4618      	mov	r0, r3
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr

08000828 <WaitingForSelectionProcess>:
int WaitingForSelectionProcess(){return 0;}
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
 800082c:	2300      	movs	r3, #0
 800082e:	4618      	mov	r0, r3
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr

08000838 <LoadModeProcess>:
int LoadModeProcess(){return 0;}
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
 800083c:	2300      	movs	r3, #0
 800083e:	4618      	mov	r0, r3
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr

08000848 <CliModeProcess>:
int CliModeProcess(){return 0;}
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
 800084c:	2300      	movs	r3, #0
 800084e:	4618      	mov	r0, r3
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr

08000858 <InModeProcess>:
int StartPreviouseModeProcess(){return 0;}
int InModeProcess(){return 0;}
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
 800085c:	2300      	movs	r3, #0
 800085e:	4618      	mov	r0, r3
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr

08000868 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b084      	sub	sp, #16
 800086c:	af00      	add	r7, sp, #0
 800086e:	4603      	mov	r3, r0
 8000870:	80fb      	strh	r3, [r7, #6]
	uint16_t userButtonPin = GPIO_PIN_0;
 8000872:	2301      	movs	r3, #1
 8000874:	81fb      	strh	r3, [r7, #14]
	GPIO_TypeDef *userButtonPort = GPIOA;
 8000876:	4b08      	ldr	r3, [pc, #32]	; (8000898 <HAL_GPIO_EXTI_Callback+0x30>)
 8000878:	60bb      	str	r3, [r7, #8]

	// make sure we are  using the right pin for the user button.



	if(HAL_GPIO_ReadPin (userButtonPort, userButtonPin)==GPIO_PIN_SET){
 800087a:	89fb      	ldrh	r3, [r7, #14]
 800087c:	4619      	mov	r1, r3
 800087e:	68b8      	ldr	r0, [r7, #8]
 8000880:	f002 ff6a 	bl	8003758 <HAL_GPIO_ReadPin>
 8000884:	4603      	mov	r3, r0
 8000886:	2b01      	cmp	r3, #1
 8000888:	d102      	bne.n	8000890 <HAL_GPIO_EXTI_Callback+0x28>

		buttonPressed = 1;
 800088a:	4b04      	ldr	r3, [pc, #16]	; (800089c <HAL_GPIO_EXTI_Callback+0x34>)
 800088c:	2201      	movs	r2, #1
 800088e:	701a      	strb	r2, [r3, #0]
	}

}
 8000890:	bf00      	nop
 8000892:	3710      	adds	r7, #16
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	40020000 	.word	0x40020000
 800089c:	2000017c 	.word	0x2000017c

080008a0 <ConsoleInit>:
}

// ConsoleInit
// Initialize the console interface and all it depends on
void ConsoleInit(UART_HandleTypeDef *huart)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b084      	sub	sp, #16
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
	uint32_t i;

	ConsoleIoInit(huart);
 80008a8:	6878      	ldr	r0, [r7, #4]
 80008aa:	f000 f83b 	bl	8000924 <ConsoleIoInit>
	ConsoleIoSendString("Welcome to the Stone Subsystem, your gateway to testing code and hardware.");
 80008ae:	480f      	ldr	r0, [pc, #60]	; (80008ec <ConsoleInit+0x4c>)
 80008b0:	f000 f850 	bl	8000954 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 80008b4:	480e      	ldr	r0, [pc, #56]	; (80008f0 <ConsoleInit+0x50>)
 80008b6:	f000 f84d 	bl	8000954 <ConsoleIoSendString>
	ConsoleIoSendString(CONSOLE_PROMPT);
 80008ba:	480e      	ldr	r0, [pc, #56]	; (80008f4 <ConsoleInit+0x54>)
 80008bc:	f000 f84a 	bl	8000954 <ConsoleIoSendString>
	mReceivedSoFar = 0u;
 80008c0:	4b0d      	ldr	r3, [pc, #52]	; (80008f8 <ConsoleInit+0x58>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]

	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 80008c6:	2300      	movs	r3, #0
 80008c8:	60fb      	str	r3, [r7, #12]
 80008ca:	e007      	b.n	80008dc <ConsoleInit+0x3c>
	{
		mReceiveBuffer[i] = NULL_CHAR;
 80008cc:	4a0b      	ldr	r2, [pc, #44]	; (80008fc <ConsoleInit+0x5c>)
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	4413      	add	r3, r2
 80008d2:	2200      	movs	r2, #0
 80008d4:	701a      	strb	r2, [r3, #0]
	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	3301      	adds	r3, #1
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	2bff      	cmp	r3, #255	; 0xff
 80008e0:	d9f4      	bls.n	80008cc <ConsoleInit+0x2c>
	}

}
 80008e2:	bf00      	nop
 80008e4:	bf00      	nop
 80008e6:	3710      	adds	r7, #16
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	0800f418 	.word	0x0800f418
 80008f0:	0800f464 	.word	0x0800f464
 80008f4:	0800f468 	.word	0x0800f468
 80008f8:	20000280 	.word	0x20000280
 80008fc:	20000180 	.word	0x20000180

08000900 <ConsoleSendLine>:
}

// ConsoleSendLine
// Send a null terminated string to the console followed by a line ending.
eCommandResult_T ConsoleSendLine(const char *buffer)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
	ConsoleIoSendString(buffer);
 8000908:	6878      	ldr	r0, [r7, #4]
 800090a:	f000 f823 	bl	8000954 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 800090e:	4804      	ldr	r0, [pc, #16]	; (8000920 <ConsoleSendLine+0x20>)
 8000910:	f000 f820 	bl	8000954 <ConsoleIoSendString>
	return COMMAND_SUCCESS;
 8000914:	2300      	movs	r3, #0
}
 8000916:	4618      	mov	r0, r3
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	0800f464 	.word	0x0800f464

08000924 <ConsoleIoInit>:

}

eConsoleError ConsoleIoInit(UART_HandleTypeDef *huart)

{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
	consoleHuart = huart;
 800092c:	4a07      	ldr	r2, [pc, #28]	; (800094c <ConsoleIoInit+0x28>)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	6013      	str	r3, [r2, #0]
	// So that we start the call back
	HAL_UART_Receive_IT(consoleHuart,&byte,1);
 8000932:	4b06      	ldr	r3, [pc, #24]	; (800094c <ConsoleIoInit+0x28>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	2201      	movs	r2, #1
 8000938:	4905      	ldr	r1, [pc, #20]	; (8000950 <ConsoleIoInit+0x2c>)
 800093a:	4618      	mov	r0, r3
 800093c:	f008 f833 	bl	80089a6 <HAL_UART_Receive_IT>
	return CONSOLE_SUCCESS;
 8000940:	2300      	movs	r3, #0
}
 8000942:	4618      	mov	r0, r3
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	20000284 	.word	0x20000284
 8000950:	2000029a 	.word	0x2000029a

08000954 <ConsoleIoSendString>:
	*readLength = i;
	return CONSOLE_SUCCESS;
}

eConsoleError ConsoleIoSendString(const char *buffer)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
	printf("%s", buffer);
 800095c:	6879      	ldr	r1, [r7, #4]
 800095e:	4804      	ldr	r0, [pc, #16]	; (8000970 <ConsoleIoSendString+0x1c>)
 8000960:	f00d fd82 	bl	800e468 <iprintf>
	return CONSOLE_SUCCESS;
 8000964:	2300      	movs	r3, #0
}
 8000966:	4618      	mov	r0, r3
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	0800f490 	.word	0x0800f490

08000974 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback (UART_HandleTypeDef *huart)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]


	//uint8_t lastChar = *(huart->pRxBuffPtr);
	tempBuffer[charCount] = byte;
 800097c:	4b0e      	ldr	r3, [pc, #56]	; (80009b8 <HAL_UART_RxCpltCallback+0x44>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a0e      	ldr	r2, [pc, #56]	; (80009bc <HAL_UART_RxCpltCallback+0x48>)
 8000982:	7811      	ldrb	r1, [r2, #0]
 8000984:	4a0e      	ldr	r2, [pc, #56]	; (80009c0 <HAL_UART_RxCpltCallback+0x4c>)
 8000986:	54d1      	strb	r1, [r2, r3]

	charCount ++;
 8000988:	4b0b      	ldr	r3, [pc, #44]	; (80009b8 <HAL_UART_RxCpltCallback+0x44>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	3301      	adds	r3, #1
 800098e:	4a0a      	ldr	r2, [pc, #40]	; (80009b8 <HAL_UART_RxCpltCallback+0x44>)
 8000990:	6013      	str	r3, [r2, #0]

	if( byte == '\n'){
 8000992:	4b0a      	ldr	r3, [pc, #40]	; (80009bc <HAL_UART_RxCpltCallback+0x48>)
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	2b0a      	cmp	r3, #10
 8000998:	d102      	bne.n	80009a0 <HAL_UART_RxCpltCallback+0x2c>
	readComplete = 1;
 800099a:	4b0a      	ldr	r3, [pc, #40]	; (80009c4 <HAL_UART_RxCpltCallback+0x50>)
 800099c:	2201      	movs	r2, #1
 800099e:	601a      	str	r2, [r3, #0]

	}
	HAL_UART_Receive_IT(consoleHuart,&byte,1);
 80009a0:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <HAL_UART_RxCpltCallback+0x54>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	2201      	movs	r2, #1
 80009a6:	4905      	ldr	r1, [pc, #20]	; (80009bc <HAL_UART_RxCpltCallback+0x48>)
 80009a8:	4618      	mov	r0, r3
 80009aa:	f007 fffc 	bl	80089a6 <HAL_UART_Receive_IT>

}
 80009ae:	bf00      	nop
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	2000028c 	.word	0x2000028c
 80009bc:	2000029a 	.word	0x2000029a
 80009c0:	20000290 	.word	0x20000290
 80009c4:	20000288 	.word	0x20000288
 80009c8:	20000284 	.word	0x20000284

080009cc <I3G450D_Init>:

static uint8_t spiTxBuf[2];
static uint8_t spiRxBuf[7];

void I3G450D_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 80009d0:	2201      	movs	r2, #1
 80009d2:	2102      	movs	r1, #2
 80009d4:	4856      	ldr	r0, [pc, #344]	; (8000b30 <I3G450D_Init+0x164>)
 80009d6:	f002 fed7 	bl	8003788 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80009da:	2014      	movs	r0, #20
 80009dc:	f002 f842 	bl	8002a64 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 80009e0:	2200      	movs	r2, #0
 80009e2:	2102      	movs	r1, #2
 80009e4:	4852      	ldr	r0, [pc, #328]	; (8000b30 <I3G450D_Init+0x164>)
 80009e6:	f002 fecf 	bl	8003788 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80009ea:	2014      	movs	r0, #20
 80009ec:	f002 f83a 	bl	8002a64 <HAL_Delay>
	spiTxBuf[0]=0x20;
 80009f0:	4b50      	ldr	r3, [pc, #320]	; (8000b34 <I3G450D_Init+0x168>)
 80009f2:	2220      	movs	r2, #32
 80009f4:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0xff;
 80009f6:	4b4f      	ldr	r3, [pc, #316]	; (8000b34 <I3G450D_Init+0x168>)
 80009f8:	22ff      	movs	r2, #255	; 0xff
 80009fa:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi5,spiTxBuf,2,50);
 80009fc:	2332      	movs	r3, #50	; 0x32
 80009fe:	2202      	movs	r2, #2
 8000a00:	494c      	ldr	r1, [pc, #304]	; (8000b34 <I3G450D_Init+0x168>)
 8000a02:	484d      	ldr	r0, [pc, #308]	; (8000b38 <I3G450D_Init+0x16c>)
 8000a04:	f006 f95b 	bl	8006cbe <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8000a08:	2201      	movs	r2, #1
 8000a0a:	2102      	movs	r1, #2
 8000a0c:	4848      	ldr	r0, [pc, #288]	; (8000b30 <I3G450D_Init+0x164>)
 8000a0e:	f002 febb 	bl	8003788 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000a12:	2014      	movs	r0, #20
 8000a14:	f002 f826 	bl	8002a64 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	2102      	movs	r1, #2
 8000a1c:	4844      	ldr	r0, [pc, #272]	; (8000b30 <I3G450D_Init+0x164>)
 8000a1e:	f002 feb3 	bl	8003788 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000a22:	2014      	movs	r0, #20
 8000a24:	f002 f81e 	bl	8002a64 <HAL_Delay>
	spiTxBuf[0]=0x21;
 8000a28:	4b42      	ldr	r3, [pc, #264]	; (8000b34 <I3G450D_Init+0x168>)
 8000a2a:	2221      	movs	r2, #33	; 0x21
 8000a2c:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x00;
 8000a2e:	4b41      	ldr	r3, [pc, #260]	; (8000b34 <I3G450D_Init+0x168>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi5,spiTxBuf,2,50);
 8000a34:	2332      	movs	r3, #50	; 0x32
 8000a36:	2202      	movs	r2, #2
 8000a38:	493e      	ldr	r1, [pc, #248]	; (8000b34 <I3G450D_Init+0x168>)
 8000a3a:	483f      	ldr	r0, [pc, #252]	; (8000b38 <I3G450D_Init+0x16c>)
 8000a3c:	f006 f93f 	bl	8006cbe <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8000a40:	2201      	movs	r2, #1
 8000a42:	2102      	movs	r1, #2
 8000a44:	483a      	ldr	r0, [pc, #232]	; (8000b30 <I3G450D_Init+0x164>)
 8000a46:	f002 fe9f 	bl	8003788 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000a4a:	2014      	movs	r0, #20
 8000a4c:	f002 f80a 	bl	8002a64 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8000a50:	2200      	movs	r2, #0
 8000a52:	2102      	movs	r1, #2
 8000a54:	4836      	ldr	r0, [pc, #216]	; (8000b30 <I3G450D_Init+0x164>)
 8000a56:	f002 fe97 	bl	8003788 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000a5a:	2014      	movs	r0, #20
 8000a5c:	f002 f802 	bl	8002a64 <HAL_Delay>
	spiTxBuf[0]=0x22;
 8000a60:	4b34      	ldr	r3, [pc, #208]	; (8000b34 <I3G450D_Init+0x168>)
 8000a62:	2222      	movs	r2, #34	; 0x22
 8000a64:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x00;
 8000a66:	4b33      	ldr	r3, [pc, #204]	; (8000b34 <I3G450D_Init+0x168>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi5,spiTxBuf,2,50);
 8000a6c:	2332      	movs	r3, #50	; 0x32
 8000a6e:	2202      	movs	r2, #2
 8000a70:	4930      	ldr	r1, [pc, #192]	; (8000b34 <I3G450D_Init+0x168>)
 8000a72:	4831      	ldr	r0, [pc, #196]	; (8000b38 <I3G450D_Init+0x16c>)
 8000a74:	f006 f923 	bl	8006cbe <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8000a78:	2201      	movs	r2, #1
 8000a7a:	2102      	movs	r1, #2
 8000a7c:	482c      	ldr	r0, [pc, #176]	; (8000b30 <I3G450D_Init+0x164>)
 8000a7e:	f002 fe83 	bl	8003788 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000a82:	2014      	movs	r0, #20
 8000a84:	f001 ffee 	bl	8002a64 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	2102      	movs	r1, #2
 8000a8c:	4828      	ldr	r0, [pc, #160]	; (8000b30 <I3G450D_Init+0x164>)
 8000a8e:	f002 fe7b 	bl	8003788 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000a92:	2014      	movs	r0, #20
 8000a94:	f001 ffe6 	bl	8002a64 <HAL_Delay>
	spiTxBuf[0]=0x23;
 8000a98:	4b26      	ldr	r3, [pc, #152]	; (8000b34 <I3G450D_Init+0x168>)
 8000a9a:	2223      	movs	r2, #35	; 0x23
 8000a9c:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x20;
 8000a9e:	4b25      	ldr	r3, [pc, #148]	; (8000b34 <I3G450D_Init+0x168>)
 8000aa0:	2220      	movs	r2, #32
 8000aa2:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi5,spiTxBuf,2,50);
 8000aa4:	2332      	movs	r3, #50	; 0x32
 8000aa6:	2202      	movs	r2, #2
 8000aa8:	4922      	ldr	r1, [pc, #136]	; (8000b34 <I3G450D_Init+0x168>)
 8000aaa:	4823      	ldr	r0, [pc, #140]	; (8000b38 <I3G450D_Init+0x16c>)
 8000aac:	f006 f907 	bl	8006cbe <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	2102      	movs	r1, #2
 8000ab4:	481e      	ldr	r0, [pc, #120]	; (8000b30 <I3G450D_Init+0x164>)
 8000ab6:	f002 fe67 	bl	8003788 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000aba:	2014      	movs	r0, #20
 8000abc:	f001 ffd2 	bl	8002a64 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	2102      	movs	r1, #2
 8000ac4:	481a      	ldr	r0, [pc, #104]	; (8000b30 <I3G450D_Init+0x164>)
 8000ac6:	f002 fe5f 	bl	8003788 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000aca:	2014      	movs	r0, #20
 8000acc:	f001 ffca 	bl	8002a64 <HAL_Delay>
	spiTxBuf[0]=0x24;
 8000ad0:	4b18      	ldr	r3, [pc, #96]	; (8000b34 <I3G450D_Init+0x168>)
 8000ad2:	2224      	movs	r2, #36	; 0x24
 8000ad4:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x10;
 8000ad6:	4b17      	ldr	r3, [pc, #92]	; (8000b34 <I3G450D_Init+0x168>)
 8000ad8:	2210      	movs	r2, #16
 8000ada:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi5,spiTxBuf,2,50);
 8000adc:	2332      	movs	r3, #50	; 0x32
 8000ade:	2202      	movs	r2, #2
 8000ae0:	4914      	ldr	r1, [pc, #80]	; (8000b34 <I3G450D_Init+0x168>)
 8000ae2:	4815      	ldr	r0, [pc, #84]	; (8000b38 <I3G450D_Init+0x16c>)
 8000ae4:	f006 f8eb 	bl	8006cbe <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8000ae8:	2201      	movs	r2, #1
 8000aea:	2102      	movs	r1, #2
 8000aec:	4810      	ldr	r0, [pc, #64]	; (8000b30 <I3G450D_Init+0x164>)
 8000aee:	f002 fe4b 	bl	8003788 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000af2:	2014      	movs	r0, #20
 8000af4:	f001 ffb6 	bl	8002a64 <HAL_Delay>
	// read who am i register
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8000af8:	2200      	movs	r2, #0
 8000afa:	2102      	movs	r1, #2
 8000afc:	480c      	ldr	r0, [pc, #48]	; (8000b30 <I3G450D_Init+0x164>)
 8000afe:	f002 fe43 	bl	8003788 <HAL_GPIO_WritePin>
	spiTxBuf[0]=0x0F|0x80;
 8000b02:	4b0c      	ldr	r3, [pc, #48]	; (8000b34 <I3G450D_Init+0x168>)
 8000b04:	228f      	movs	r2, #143	; 0x8f
 8000b06:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi5,spiTxBuf,1,50);
 8000b08:	2332      	movs	r3, #50	; 0x32
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	4909      	ldr	r1, [pc, #36]	; (8000b34 <I3G450D_Init+0x168>)
 8000b0e:	480a      	ldr	r0, [pc, #40]	; (8000b38 <I3G450D_Init+0x16c>)
 8000b10:	f006 f8d5 	bl	8006cbe <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi5,&spiRxBuf[1],1,50);
 8000b14:	2332      	movs	r3, #50	; 0x32
 8000b16:	2201      	movs	r2, #1
 8000b18:	4908      	ldr	r1, [pc, #32]	; (8000b3c <I3G450D_Init+0x170>)
 8000b1a:	4807      	ldr	r0, [pc, #28]	; (8000b38 <I3G450D_Init+0x16c>)
 8000b1c:	f006 fa0b 	bl	8006f36 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8000b20:	2201      	movs	r2, #1
 8000b22:	2102      	movs	r1, #2
 8000b24:	4802      	ldr	r0, [pc, #8]	; (8000b30 <I3G450D_Init+0x164>)
 8000b26:	f002 fe2f 	bl	8003788 <HAL_GPIO_WritePin>
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40020800 	.word	0x40020800
 8000b34:	200031d4 	.word	0x200031d4
 8000b38:	200032f0 	.word	0x200032f0
 8000b3c:	200031d9 	.word	0x200031d9

08000b40 <I3G450D_loop>:

void I3G450D_loop(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b098      	sub	sp, #96	; 0x60
 8000b44:	af00      	add	r7, sp, #0
		volatile int16_t Raw_x=0;
 8000b46:	2300      	movs	r3, #0
 8000b48:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		volatile int16_t Raw_y=0;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
		volatile int16_t Raw_z=0;
 8000b52:	2300      	movs	r3, #0
 8000b54:	87fb      	strh	r3, [r7, #62]	; 0x3e

		float difftime=0;
 8000b56:	f04f 0300 	mov.w	r3, #0
 8000b5a:	647b      	str	r3, [r7, #68]	; 0x44

		int16_t averageWindow_X[AVERAGE_WINDOW_SIZE] = {0};
 8000b5c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	611a      	str	r2, [r3, #16]
		int16_t averageWindow_Y[AVERAGE_WINDOW_SIZE] = {0};
 8000b6c:	f107 0314 	add.w	r3, r7, #20
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]
 8000b7a:	611a      	str	r2, [r3, #16]
		int16_t averageWindow_Z[AVERAGE_WINDOW_SIZE] = {0};
 8000b7c:	463b      	mov	r3, r7
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	605a      	str	r2, [r3, #4]
 8000b84:	609a      	str	r2, [r3, #8]
 8000b86:	60da      	str	r2, [r3, #12]
 8000b88:	611a      	str	r2, [r3, #16]

		uint32_t windowPosition = 0;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	65fb      	str	r3, [r7, #92]	; 0x5c
		int32_t tempSum_X = 0;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	65bb      	str	r3, [r7, #88]	; 0x58
		int32_t tempSum_Y = 0;
 8000b92:	2300      	movs	r3, #0
 8000b94:	657b      	str	r3, [r7, #84]	; 0x54
		int32_t tempSum_Z = 0;
 8000b96:	2300      	movs	r3, #0
 8000b98:	653b      	str	r3, [r7, #80]	; 0x50

		switch(currentState)
 8000b9a:	4b55      	ldr	r3, [pc, #340]	; (8000cf0 <I3G450D_loop+0x1b0>)
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d003      	beq.n	8000baa <I3G450D_loop+0x6a>
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	f000 80ba 	beq.w	8000d1c <I3G450D_loop+0x1dc>
			currentState=L3GD20_fisrt;
			dataReadyFlag=L3GD20_DATA_READY;
			break;

					default:
						break;
 8000ba8:	e36d      	b.n	8001286 <I3G450D_loop+0x746>
				if(dataReadyFlag==L3GD20_DATA_READY)
 8000baa:	4b52      	ldr	r3, [pc, #328]	; (8000cf4 <I3G450D_loop+0x1b4>)
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	f040 8368 	bne.w	8001284 <I3G450D_loop+0x744>
					HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	2102      	movs	r1, #2
 8000bb8:	484f      	ldr	r0, [pc, #316]	; (8000cf8 <I3G450D_loop+0x1b8>)
 8000bba:	f002 fde5 	bl	8003788 <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x28|0x80;
 8000bbe:	4b4f      	ldr	r3, [pc, #316]	; (8000cfc <I3G450D_loop+0x1bc>)
 8000bc0:	22a8      	movs	r2, #168	; 0xa8
 8000bc2:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(&hspi5,spiTxBuf,1,50);
 8000bc4:	2332      	movs	r3, #50	; 0x32
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	494c      	ldr	r1, [pc, #304]	; (8000cfc <I3G450D_loop+0x1bc>)
 8000bca:	484d      	ldr	r0, [pc, #308]	; (8000d00 <I3G450D_loop+0x1c0>)
 8000bcc:	f006 f877 	bl	8006cbe <HAL_SPI_Transmit>
						HAL_SPI_Receive(&hspi5,&spiRxBuf[1],1,50);
 8000bd0:	2332      	movs	r3, #50	; 0x32
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	494b      	ldr	r1, [pc, #300]	; (8000d04 <I3G450D_loop+0x1c4>)
 8000bd6:	484a      	ldr	r0, [pc, #296]	; (8000d00 <I3G450D_loop+0x1c0>)
 8000bd8:	f006 f9ad 	bl	8006f36 <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8000bdc:	2201      	movs	r2, #1
 8000bde:	2102      	movs	r1, #2
 8000be0:	4845      	ldr	r0, [pc, #276]	; (8000cf8 <I3G450D_loop+0x1b8>)
 8000be2:	f002 fdd1 	bl	8003788 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8000be6:	2200      	movs	r2, #0
 8000be8:	2102      	movs	r1, #2
 8000bea:	4843      	ldr	r0, [pc, #268]	; (8000cf8 <I3G450D_loop+0x1b8>)
 8000bec:	f002 fdcc 	bl	8003788 <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x29|0x80;
 8000bf0:	4b42      	ldr	r3, [pc, #264]	; (8000cfc <I3G450D_loop+0x1bc>)
 8000bf2:	22a9      	movs	r2, #169	; 0xa9
 8000bf4:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(&hspi5,spiTxBuf,1,50);
 8000bf6:	2332      	movs	r3, #50	; 0x32
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	4940      	ldr	r1, [pc, #256]	; (8000cfc <I3G450D_loop+0x1bc>)
 8000bfc:	4840      	ldr	r0, [pc, #256]	; (8000d00 <I3G450D_loop+0x1c0>)
 8000bfe:	f006 f85e 	bl	8006cbe <HAL_SPI_Transmit>
						HAL_SPI_Receive(&hspi5,&spiRxBuf[2],1,50);
 8000c02:	2332      	movs	r3, #50	; 0x32
 8000c04:	2201      	movs	r2, #1
 8000c06:	4940      	ldr	r1, [pc, #256]	; (8000d08 <I3G450D_loop+0x1c8>)
 8000c08:	483d      	ldr	r0, [pc, #244]	; (8000d00 <I3G450D_loop+0x1c0>)
 8000c0a:	f006 f994 	bl	8006f36 <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8000c0e:	2201      	movs	r2, #1
 8000c10:	2102      	movs	r1, #2
 8000c12:	4839      	ldr	r0, [pc, #228]	; (8000cf8 <I3G450D_loop+0x1b8>)
 8000c14:	f002 fdb8 	bl	8003788 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	2102      	movs	r1, #2
 8000c1c:	4836      	ldr	r0, [pc, #216]	; (8000cf8 <I3G450D_loop+0x1b8>)
 8000c1e:	f002 fdb3 	bl	8003788 <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x2a|0x80;
 8000c22:	4b36      	ldr	r3, [pc, #216]	; (8000cfc <I3G450D_loop+0x1bc>)
 8000c24:	22aa      	movs	r2, #170	; 0xaa
 8000c26:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(&hspi5,spiTxBuf,1,50);
 8000c28:	2332      	movs	r3, #50	; 0x32
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	4933      	ldr	r1, [pc, #204]	; (8000cfc <I3G450D_loop+0x1bc>)
 8000c2e:	4834      	ldr	r0, [pc, #208]	; (8000d00 <I3G450D_loop+0x1c0>)
 8000c30:	f006 f845 	bl	8006cbe <HAL_SPI_Transmit>
						HAL_SPI_Receive(&hspi5,&spiRxBuf[3],1,50);
 8000c34:	2332      	movs	r3, #50	; 0x32
 8000c36:	2201      	movs	r2, #1
 8000c38:	4934      	ldr	r1, [pc, #208]	; (8000d0c <I3G450D_loop+0x1cc>)
 8000c3a:	4831      	ldr	r0, [pc, #196]	; (8000d00 <I3G450D_loop+0x1c0>)
 8000c3c:	f006 f97b 	bl	8006f36 <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8000c40:	2201      	movs	r2, #1
 8000c42:	2102      	movs	r1, #2
 8000c44:	482c      	ldr	r0, [pc, #176]	; (8000cf8 <I3G450D_loop+0x1b8>)
 8000c46:	f002 fd9f 	bl	8003788 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2102      	movs	r1, #2
 8000c4e:	482a      	ldr	r0, [pc, #168]	; (8000cf8 <I3G450D_loop+0x1b8>)
 8000c50:	f002 fd9a 	bl	8003788 <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x2b|0x80;
 8000c54:	4b29      	ldr	r3, [pc, #164]	; (8000cfc <I3G450D_loop+0x1bc>)
 8000c56:	22ab      	movs	r2, #171	; 0xab
 8000c58:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(&hspi5,spiTxBuf,1,50);
 8000c5a:	2332      	movs	r3, #50	; 0x32
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	4927      	ldr	r1, [pc, #156]	; (8000cfc <I3G450D_loop+0x1bc>)
 8000c60:	4827      	ldr	r0, [pc, #156]	; (8000d00 <I3G450D_loop+0x1c0>)
 8000c62:	f006 f82c 	bl	8006cbe <HAL_SPI_Transmit>
						HAL_SPI_Receive(&hspi5,&spiRxBuf[4],1,50);
 8000c66:	2332      	movs	r3, #50	; 0x32
 8000c68:	2201      	movs	r2, #1
 8000c6a:	4929      	ldr	r1, [pc, #164]	; (8000d10 <I3G450D_loop+0x1d0>)
 8000c6c:	4824      	ldr	r0, [pc, #144]	; (8000d00 <I3G450D_loop+0x1c0>)
 8000c6e:	f006 f962 	bl	8006f36 <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8000c72:	2201      	movs	r2, #1
 8000c74:	2102      	movs	r1, #2
 8000c76:	4820      	ldr	r0, [pc, #128]	; (8000cf8 <I3G450D_loop+0x1b8>)
 8000c78:	f002 fd86 	bl	8003788 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	2102      	movs	r1, #2
 8000c80:	481d      	ldr	r0, [pc, #116]	; (8000cf8 <I3G450D_loop+0x1b8>)
 8000c82:	f002 fd81 	bl	8003788 <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x2c|0x80;
 8000c86:	4b1d      	ldr	r3, [pc, #116]	; (8000cfc <I3G450D_loop+0x1bc>)
 8000c88:	22ac      	movs	r2, #172	; 0xac
 8000c8a:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(&hspi5,spiTxBuf,1,50);
 8000c8c:	2332      	movs	r3, #50	; 0x32
 8000c8e:	2201      	movs	r2, #1
 8000c90:	491a      	ldr	r1, [pc, #104]	; (8000cfc <I3G450D_loop+0x1bc>)
 8000c92:	481b      	ldr	r0, [pc, #108]	; (8000d00 <I3G450D_loop+0x1c0>)
 8000c94:	f006 f813 	bl	8006cbe <HAL_SPI_Transmit>
						HAL_SPI_Receive(&hspi5,&spiRxBuf[5],1,50);
 8000c98:	2332      	movs	r3, #50	; 0x32
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	491d      	ldr	r1, [pc, #116]	; (8000d14 <I3G450D_loop+0x1d4>)
 8000c9e:	4818      	ldr	r0, [pc, #96]	; (8000d00 <I3G450D_loop+0x1c0>)
 8000ca0:	f006 f949 	bl	8006f36 <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	2102      	movs	r1, #2
 8000ca8:	4813      	ldr	r0, [pc, #76]	; (8000cf8 <I3G450D_loop+0x1b8>)
 8000caa:	f002 fd6d 	bl	8003788 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	2102      	movs	r1, #2
 8000cb2:	4811      	ldr	r0, [pc, #68]	; (8000cf8 <I3G450D_loop+0x1b8>)
 8000cb4:	f002 fd68 	bl	8003788 <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x2d|0x80;
 8000cb8:	4b10      	ldr	r3, [pc, #64]	; (8000cfc <I3G450D_loop+0x1bc>)
 8000cba:	22ad      	movs	r2, #173	; 0xad
 8000cbc:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(&hspi5,spiTxBuf,1,50);
 8000cbe:	2332      	movs	r3, #50	; 0x32
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	490e      	ldr	r1, [pc, #56]	; (8000cfc <I3G450D_loop+0x1bc>)
 8000cc4:	480e      	ldr	r0, [pc, #56]	; (8000d00 <I3G450D_loop+0x1c0>)
 8000cc6:	f005 fffa 	bl	8006cbe <HAL_SPI_Transmit>
						HAL_SPI_Receive(&hspi5,&spiRxBuf[6],1,50);
 8000cca:	2332      	movs	r3, #50	; 0x32
 8000ccc:	2201      	movs	r2, #1
 8000cce:	4912      	ldr	r1, [pc, #72]	; (8000d18 <I3G450D_loop+0x1d8>)
 8000cd0:	480b      	ldr	r0, [pc, #44]	; (8000d00 <I3G450D_loop+0x1c0>)
 8000cd2:	f006 f930 	bl	8006f36 <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	2102      	movs	r1, #2
 8000cda:	4807      	ldr	r0, [pc, #28]	; (8000cf8 <I3G450D_loop+0x1b8>)
 8000cdc:	f002 fd54 	bl	8003788 <HAL_GPIO_WritePin>
						currentState=L3GD20_second;
 8000ce0:	4b03      	ldr	r3, [pc, #12]	; (8000cf0 <I3G450D_loop+0x1b0>)
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	701a      	strb	r2, [r3, #0]
						dataReadyFlag=L3GD20_DATA_NOT_READY;
 8000ce6:	4b03      	ldr	r3, [pc, #12]	; (8000cf4 <I3G450D_loop+0x1b4>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	701a      	strb	r2, [r3, #0]
				break;
 8000cec:	e2ca      	b.n	8001284 <I3G450D_loop+0x744>
 8000cee:	bf00      	nop
 8000cf0:	2000029c 	.word	0x2000029c
 8000cf4:	200000c4 	.word	0x200000c4
 8000cf8:	40020800 	.word	0x40020800
 8000cfc:	200031d4 	.word	0x200031d4
 8000d00:	200032f0 	.word	0x200032f0
 8000d04:	200031d9 	.word	0x200031d9
 8000d08:	200031da 	.word	0x200031da
 8000d0c:	200031db 	.word	0x200031db
 8000d10:	200031dc 	.word	0x200031dc
 8000d14:	200031dd 	.word	0x200031dd
 8000d18:	200031de 	.word	0x200031de
				Raw_x=(spiRxBuf[2]<<8)|spiRxBuf[1];
 8000d1c:	4ba0      	ldr	r3, [pc, #640]	; (8000fa0 <I3G450D_loop+0x460>)
 8000d1e:	789b      	ldrb	r3, [r3, #2]
 8000d20:	021b      	lsls	r3, r3, #8
 8000d22:	b21a      	sxth	r2, r3
 8000d24:	4b9e      	ldr	r3, [pc, #632]	; (8000fa0 <I3G450D_loop+0x460>)
 8000d26:	785b      	ldrb	r3, [r3, #1]
 8000d28:	b21b      	sxth	r3, r3
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	b21b      	sxth	r3, r3
 8000d2e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
				Raw_y=(spiRxBuf[4]<<8)|spiRxBuf[3];
 8000d32:	4b9b      	ldr	r3, [pc, #620]	; (8000fa0 <I3G450D_loop+0x460>)
 8000d34:	791b      	ldrb	r3, [r3, #4]
 8000d36:	021b      	lsls	r3, r3, #8
 8000d38:	b21a      	sxth	r2, r3
 8000d3a:	4b99      	ldr	r3, [pc, #612]	; (8000fa0 <I3G450D_loop+0x460>)
 8000d3c:	78db      	ldrb	r3, [r3, #3]
 8000d3e:	b21b      	sxth	r3, r3
 8000d40:	4313      	orrs	r3, r2
 8000d42:	b21b      	sxth	r3, r3
 8000d44:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
				Raw_z=(spiRxBuf[6]<<8)|spiRxBuf[5];
 8000d48:	4b95      	ldr	r3, [pc, #596]	; (8000fa0 <I3G450D_loop+0x460>)
 8000d4a:	799b      	ldrb	r3, [r3, #6]
 8000d4c:	021b      	lsls	r3, r3, #8
 8000d4e:	b21a      	sxth	r2, r3
 8000d50:	4b93      	ldr	r3, [pc, #588]	; (8000fa0 <I3G450D_loop+0x460>)
 8000d52:	795b      	ldrb	r3, [r3, #5]
 8000d54:	b21b      	sxth	r3, r3
 8000d56:	4313      	orrs	r3, r2
 8000d58:	b21b      	sxth	r3, r3
 8000d5a:	87fb      	strh	r3, [r7, #62]	; 0x3e
				test_Raw_x = Raw_x;
 8000d5c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8000d60:	b21a      	sxth	r2, r3
 8000d62:	4b90      	ldr	r3, [pc, #576]	; (8000fa4 <I3G450D_loop+0x464>)
 8000d64:	801a      	strh	r2, [r3, #0]
				test_Raw_y = Raw_y;
 8000d66:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000d6a:	b21a      	sxth	r2, r3
 8000d6c:	4b8e      	ldr	r3, [pc, #568]	; (8000fa8 <I3G450D_loop+0x468>)
 8000d6e:	801a      	strh	r2, [r3, #0]
				test_Raw_z = Raw_z;
 8000d70:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000d72:	b21a      	sxth	r2, r3
 8000d74:	4b8d      	ldr	r3, [pc, #564]	; (8000fac <I3G450D_loop+0x46c>)
 8000d76:	801a      	strh	r2, [r3, #0]
			if(currentcalistate==L3GD20_calibrated)
 8000d78:	4b8d      	ldr	r3, [pc, #564]	; (8000fb0 <I3G450D_loop+0x470>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	2b02      	cmp	r3, #2
 8000d7e:	f040 80d5 	bne.w	8000f2c <I3G450D_loop+0x3ec>
				angleRate_x=(float) (Raw_x - (offset_x))*L3GD20_SENSITIVITY;
 8000d82:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8000d86:	b21b      	sxth	r3, r3
 8000d88:	461a      	mov	r2, r3
 8000d8a:	4b8a      	ldr	r3, [pc, #552]	; (8000fb4 <I3G450D_loop+0x474>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	1ad3      	subs	r3, r2, r3
 8000d90:	ee07 3a90 	vmov	s15, r3
 8000d94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d98:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8000fb8 <I3G450D_loop+0x478>
 8000d9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000da0:	4b86      	ldr	r3, [pc, #536]	; (8000fbc <I3G450D_loop+0x47c>)
 8000da2:	edc3 7a00 	vstr	s15, [r3]
				angleRate_y=(float) (Raw_y - (offset_y))*L3GD20_SENSITIVITY;
 8000da6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000daa:	b21b      	sxth	r3, r3
 8000dac:	461a      	mov	r2, r3
 8000dae:	4b84      	ldr	r3, [pc, #528]	; (8000fc0 <I3G450D_loop+0x480>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	1ad3      	subs	r3, r2, r3
 8000db4:	ee07 3a90 	vmov	s15, r3
 8000db8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dbc:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8000fb8 <I3G450D_loop+0x478>
 8000dc0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000dc4:	4b7f      	ldr	r3, [pc, #508]	; (8000fc4 <I3G450D_loop+0x484>)
 8000dc6:	edc3 7a00 	vstr	s15, [r3]
				angleRate_z=(float) (Raw_z - (offset_z))*L3GD20_SENSITIVITY;
 8000dca:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000dcc:	b21b      	sxth	r3, r3
 8000dce:	461a      	mov	r2, r3
 8000dd0:	4b7d      	ldr	r3, [pc, #500]	; (8000fc8 <I3G450D_loop+0x488>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	ee07 3a90 	vmov	s15, r3
 8000dda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dde:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8000fb8 <I3G450D_loop+0x478>
 8000de2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000de6:	4b79      	ldr	r3, [pc, #484]	; (8000fcc <I3G450D_loop+0x48c>)
 8000de8:	edc3 7a00 	vstr	s15, [r3]
				difftime=0.003f;
 8000dec:	4b78      	ldr	r3, [pc, #480]	; (8000fd0 <I3G450D_loop+0x490>)
 8000dee:	647b      	str	r3, [r7, #68]	; 0x44
				if((angleRate_x>Noise_X)||(angleRate_x<-Noise_X))
 8000df0:	4b72      	ldr	r3, [pc, #456]	; (8000fbc <I3G450D_loop+0x47c>)
 8000df2:	ed93 7a00 	vldr	s14, [r3]
 8000df6:	4b77      	ldr	r3, [pc, #476]	; (8000fd4 <I3G450D_loop+0x494>)
 8000df8:	edd3 7a00 	vldr	s15, [r3]
 8000dfc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e04:	dc0c      	bgt.n	8000e20 <I3G450D_loop+0x2e0>
 8000e06:	4b73      	ldr	r3, [pc, #460]	; (8000fd4 <I3G450D_loop+0x494>)
 8000e08:	edd3 7a00 	vldr	s15, [r3]
 8000e0c:	eeb1 7a67 	vneg.f32	s14, s15
 8000e10:	4b6a      	ldr	r3, [pc, #424]	; (8000fbc <I3G450D_loop+0x47c>)
 8000e12:	edd3 7a00 	vldr	s15, [r3]
 8000e16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e1e:	dd1b      	ble.n	8000e58 <I3G450D_loop+0x318>
					Angle_X+=((angleRate_x+LastAngleRate_X)*difftime)/(2.0f);
 8000e20:	4b66      	ldr	r3, [pc, #408]	; (8000fbc <I3G450D_loop+0x47c>)
 8000e22:	ed93 7a00 	vldr	s14, [r3]
 8000e26:	4b6c      	ldr	r3, [pc, #432]	; (8000fd8 <I3G450D_loop+0x498>)
 8000e28:	edd3 7a00 	vldr	s15, [r3]
 8000e2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000e30:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8000e34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e38:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000e3c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000e40:	4b66      	ldr	r3, [pc, #408]	; (8000fdc <I3G450D_loop+0x49c>)
 8000e42:	edd3 7a00 	vldr	s15, [r3]
 8000e46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e4a:	4b64      	ldr	r3, [pc, #400]	; (8000fdc <I3G450D_loop+0x49c>)
 8000e4c:	edc3 7a00 	vstr	s15, [r3]
					LastAngleRate_X=angleRate_x;
 8000e50:	4b5a      	ldr	r3, [pc, #360]	; (8000fbc <I3G450D_loop+0x47c>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a60      	ldr	r2, [pc, #384]	; (8000fd8 <I3G450D_loop+0x498>)
 8000e56:	6013      	str	r3, [r2, #0]
				if((angleRate_y>Noise_Y)||(angleRate_y<-Noise_Y))
 8000e58:	4b5a      	ldr	r3, [pc, #360]	; (8000fc4 <I3G450D_loop+0x484>)
 8000e5a:	ed93 7a00 	vldr	s14, [r3]
 8000e5e:	4b60      	ldr	r3, [pc, #384]	; (8000fe0 <I3G450D_loop+0x4a0>)
 8000e60:	edd3 7a00 	vldr	s15, [r3]
 8000e64:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e6c:	dc0c      	bgt.n	8000e88 <I3G450D_loop+0x348>
 8000e6e:	4b5c      	ldr	r3, [pc, #368]	; (8000fe0 <I3G450D_loop+0x4a0>)
 8000e70:	edd3 7a00 	vldr	s15, [r3]
 8000e74:	eeb1 7a67 	vneg.f32	s14, s15
 8000e78:	4b52      	ldr	r3, [pc, #328]	; (8000fc4 <I3G450D_loop+0x484>)
 8000e7a:	edd3 7a00 	vldr	s15, [r3]
 8000e7e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e86:	dd1b      	ble.n	8000ec0 <I3G450D_loop+0x380>
					Angle_Y+=((angleRate_y+LastAngleRate_Y)*difftime)/(2.0f);
 8000e88:	4b4e      	ldr	r3, [pc, #312]	; (8000fc4 <I3G450D_loop+0x484>)
 8000e8a:	ed93 7a00 	vldr	s14, [r3]
 8000e8e:	4b55      	ldr	r3, [pc, #340]	; (8000fe4 <I3G450D_loop+0x4a4>)
 8000e90:	edd3 7a00 	vldr	s15, [r3]
 8000e94:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000e98:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8000e9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ea0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000ea4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000ea8:	4b4f      	ldr	r3, [pc, #316]	; (8000fe8 <I3G450D_loop+0x4a8>)
 8000eaa:	edd3 7a00 	vldr	s15, [r3]
 8000eae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000eb2:	4b4d      	ldr	r3, [pc, #308]	; (8000fe8 <I3G450D_loop+0x4a8>)
 8000eb4:	edc3 7a00 	vstr	s15, [r3]
					LastAngleRate_Y=angleRate_y;
 8000eb8:	4b42      	ldr	r3, [pc, #264]	; (8000fc4 <I3G450D_loop+0x484>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a49      	ldr	r2, [pc, #292]	; (8000fe4 <I3G450D_loop+0x4a4>)
 8000ebe:	6013      	str	r3, [r2, #0]
				if((angleRate_z>Noise_Z)||(angleRate_z<-Noise_Z))
 8000ec0:	4b42      	ldr	r3, [pc, #264]	; (8000fcc <I3G450D_loop+0x48c>)
 8000ec2:	ed93 7a00 	vldr	s14, [r3]
 8000ec6:	4b49      	ldr	r3, [pc, #292]	; (8000fec <I3G450D_loop+0x4ac>)
 8000ec8:	edd3 7a00 	vldr	s15, [r3]
 8000ecc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ed4:	dc0d      	bgt.n	8000ef2 <I3G450D_loop+0x3b2>
 8000ed6:	4b45      	ldr	r3, [pc, #276]	; (8000fec <I3G450D_loop+0x4ac>)
 8000ed8:	edd3 7a00 	vldr	s15, [r3]
 8000edc:	eeb1 7a67 	vneg.f32	s14, s15
 8000ee0:	4b3a      	ldr	r3, [pc, #232]	; (8000fcc <I3G450D_loop+0x48c>)
 8000ee2:	edd3 7a00 	vldr	s15, [r3]
 8000ee6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eee:	f340 81c2 	ble.w	8001276 <I3G450D_loop+0x736>
					Angle_Z+=((angleRate_z+LastAngleRate_Z)*difftime)/(2.0f);
 8000ef2:	4b36      	ldr	r3, [pc, #216]	; (8000fcc <I3G450D_loop+0x48c>)
 8000ef4:	ed93 7a00 	vldr	s14, [r3]
 8000ef8:	4b3d      	ldr	r3, [pc, #244]	; (8000ff0 <I3G450D_loop+0x4b0>)
 8000efa:	edd3 7a00 	vldr	s15, [r3]
 8000efe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f02:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8000f06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f0a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000f0e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000f12:	4b38      	ldr	r3, [pc, #224]	; (8000ff4 <I3G450D_loop+0x4b4>)
 8000f14:	edd3 7a00 	vldr	s15, [r3]
 8000f18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f1c:	4b35      	ldr	r3, [pc, #212]	; (8000ff4 <I3G450D_loop+0x4b4>)
 8000f1e:	edc3 7a00 	vstr	s15, [r3]
					LastAngleRate_Z=angleRate_z;
 8000f22:	4b2a      	ldr	r3, [pc, #168]	; (8000fcc <I3G450D_loop+0x48c>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a32      	ldr	r2, [pc, #200]	; (8000ff0 <I3G450D_loop+0x4b0>)
 8000f28:	6013      	str	r3, [r2, #0]
 8000f2a:	e1a4      	b.n	8001276 <I3G450D_loop+0x736>
				switch(currentcalistate)
 8000f2c:	4b20      	ldr	r3, [pc, #128]	; (8000fb0 <I3G450D_loop+0x470>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	2b02      	cmp	r3, #2
 8000f32:	f000 819b 	beq.w	800126c <I3G450D_loop+0x72c>
 8000f36:	2b02      	cmp	r3, #2
 8000f38:	f300 819a 	bgt.w	8001270 <I3G450D_loop+0x730>
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d002      	beq.n	8000f46 <I3G450D_loop+0x406>
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d029      	beq.n	8000f98 <I3G450D_loop+0x458>
						break;
 8000f44:	e194      	b.n	8001270 <I3G450D_loop+0x730>
						calibrationBuffer_X[caliCounter]=Raw_x;
 8000f46:	4b2c      	ldr	r3, [pc, #176]	; (8000ff8 <I3G450D_loop+0x4b8>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8000f4e:	b211      	sxth	r1, r2
 8000f50:	4a2a      	ldr	r2, [pc, #168]	; (8000ffc <I3G450D_loop+0x4bc>)
 8000f52:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						calibrationBuffer_Y[caliCounter]=Raw_y;
 8000f56:	4b28      	ldr	r3, [pc, #160]	; (8000ff8 <I3G450D_loop+0x4b8>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8000f5e:	b211      	sxth	r1, r2
 8000f60:	4a27      	ldr	r2, [pc, #156]	; (8001000 <I3G450D_loop+0x4c0>)
 8000f62:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						calibrationBuffer_Z[caliCounter]=Raw_z;
 8000f66:	4b24      	ldr	r3, [pc, #144]	; (8000ff8 <I3G450D_loop+0x4b8>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8000f6c:	b211      	sxth	r1, r2
 8000f6e:	4a25      	ldr	r2, [pc, #148]	; (8001004 <I3G450D_loop+0x4c4>)
 8000f70:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						caliCounter++;
 8000f74:	4b20      	ldr	r3, [pc, #128]	; (8000ff8 <I3G450D_loop+0x4b8>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	4a1f      	ldr	r2, [pc, #124]	; (8000ff8 <I3G450D_loop+0x4b8>)
 8000f7c:	6013      	str	r3, [r2, #0]
						if(caliCounter>=CALIBRATION_BUFFER_LENGTH)
 8000f7e:	4b1e      	ldr	r3, [pc, #120]	; (8000ff8 <I3G450D_loop+0x4b8>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000f86:	f0c0 8175 	bcc.w	8001274 <I3G450D_loop+0x734>
							caliCounter=0;
 8000f8a:	4b1b      	ldr	r3, [pc, #108]	; (8000ff8 <I3G450D_loop+0x4b8>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
							currentcalistate=L3GD20_process_calibration_samples;
 8000f90:	4b07      	ldr	r3, [pc, #28]	; (8000fb0 <I3G450D_loop+0x470>)
 8000f92:	2201      	movs	r2, #1
 8000f94:	701a      	strb	r2, [r3, #0]
						break;
 8000f96:	e16d      	b.n	8001274 <I3G450D_loop+0x734>
						for(uint32_t idx=0; idx<CALIBRATION_BUFFER_LENGTH;idx++)
 8000f98:	2300      	movs	r3, #0
 8000f9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000f9c:	e0a5      	b.n	80010ea <I3G450D_loop+0x5aa>
 8000f9e:	bf00      	nop
 8000fa0:	200031d8 	.word	0x200031d8
 8000fa4:	200002e8 	.word	0x200002e8
 8000fa8:	200002ea 	.word	0x200002ea
 8000fac:	200002ec 	.word	0x200002ec
 8000fb0:	2000029b 	.word	0x2000029b
 8000fb4:	200002ac 	.word	0x200002ac
 8000fb8:	3d8f5c29 	.word	0x3d8f5c29
 8000fbc:	200002a0 	.word	0x200002a0
 8000fc0:	200002b0 	.word	0x200002b0
 8000fc4:	200002a4 	.word	0x200002a4
 8000fc8:	200002b4 	.word	0x200002b4
 8000fcc:	200002a8 	.word	0x200002a8
 8000fd0:	3b449ba6 	.word	0x3b449ba6
 8000fd4:	200002b8 	.word	0x200002b8
 8000fd8:	200002d0 	.word	0x200002d0
 8000fdc:	200002c4 	.word	0x200002c4
 8000fe0:	200002bc 	.word	0x200002bc
 8000fe4:	200002d4 	.word	0x200002d4
 8000fe8:	200002c8 	.word	0x200002c8
 8000fec:	200002c0 	.word	0x200002c0
 8000ff0:	200002d8 	.word	0x200002d8
 8000ff4:	200002cc 	.word	0x200002cc
 8000ff8:	200002f0 	.word	0x200002f0
 8000ffc:	200002f4 	.word	0x200002f4
 8001000:	20001294 	.word	0x20001294
 8001004:	20002234 	.word	0x20002234
								tempSum_X=tempSum_X-averageWindow_X[windowPosition]+calibrationBuffer_X[idx];
 8001008:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	3360      	adds	r3, #96	; 0x60
 800100e:	443b      	add	r3, r7
 8001010:	f933 3c38 	ldrsh.w	r3, [r3, #-56]
 8001014:	461a      	mov	r2, r3
 8001016:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001018:	1a9b      	subs	r3, r3, r2
 800101a:	499d      	ldr	r1, [pc, #628]	; (8001290 <I3G450D_loop+0x750>)
 800101c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800101e:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8001022:	4413      	add	r3, r2
 8001024:	65bb      	str	r3, [r7, #88]	; 0x58
								tempSum_Y=tempSum_Y-averageWindow_Y[windowPosition]+calibrationBuffer_Y[idx];
 8001026:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	3360      	adds	r3, #96	; 0x60
 800102c:	443b      	add	r3, r7
 800102e:	f933 3c4c 	ldrsh.w	r3, [r3, #-76]
 8001032:	461a      	mov	r2, r3
 8001034:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001036:	1a9b      	subs	r3, r3, r2
 8001038:	4996      	ldr	r1, [pc, #600]	; (8001294 <I3G450D_loop+0x754>)
 800103a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800103c:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8001040:	4413      	add	r3, r2
 8001042:	657b      	str	r3, [r7, #84]	; 0x54
								tempSum_Z=tempSum_Z-averageWindow_Z[windowPosition]+calibrationBuffer_Z[idx];
 8001044:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	3360      	adds	r3, #96	; 0x60
 800104a:	443b      	add	r3, r7
 800104c:	f933 3c60 	ldrsh.w	r3, [r3, #-96]
 8001050:	461a      	mov	r2, r3
 8001052:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001054:	1a9b      	subs	r3, r3, r2
 8001056:	4990      	ldr	r1, [pc, #576]	; (8001298 <I3G450D_loop+0x758>)
 8001058:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800105a:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 800105e:	4413      	add	r3, r2
 8001060:	653b      	str	r3, [r7, #80]	; 0x50
								averageWindow_X[windowPosition]=calibrationBuffer_X[idx];
 8001062:	4a8b      	ldr	r2, [pc, #556]	; (8001290 <I3G450D_loop+0x750>)
 8001064:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001066:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 800106a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	3360      	adds	r3, #96	; 0x60
 8001070:	443b      	add	r3, r7
 8001072:	f823 2c38 	strh.w	r2, [r3, #-56]
								averageWindow_Y[windowPosition]=calibrationBuffer_Y[idx];
 8001076:	4a87      	ldr	r2, [pc, #540]	; (8001294 <I3G450D_loop+0x754>)
 8001078:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800107a:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 800107e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	3360      	adds	r3, #96	; 0x60
 8001084:	443b      	add	r3, r7
 8001086:	f823 2c4c 	strh.w	r2, [r3, #-76]
								averageWindow_Z[windowPosition]=calibrationBuffer_Z[idx];
 800108a:	4a83      	ldr	r2, [pc, #524]	; (8001298 <I3G450D_loop+0x758>)
 800108c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800108e:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8001092:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	3360      	adds	r3, #96	; 0x60
 8001098:	443b      	add	r3, r7
 800109a:	f823 2c60 	strh.w	r2, [r3, #-96]
								offset_x=tempSum_X/(int32_t)AVERAGE_WINDOW_SIZE;
 800109e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80010a0:	4a7e      	ldr	r2, [pc, #504]	; (800129c <I3G450D_loop+0x75c>)
 80010a2:	fb82 1203 	smull	r1, r2, r2, r3
 80010a6:	1092      	asrs	r2, r2, #2
 80010a8:	17db      	asrs	r3, r3, #31
 80010aa:	1ad3      	subs	r3, r2, r3
 80010ac:	4a7c      	ldr	r2, [pc, #496]	; (80012a0 <I3G450D_loop+0x760>)
 80010ae:	6013      	str	r3, [r2, #0]
								offset_y=tempSum_Y/(int32_t)AVERAGE_WINDOW_SIZE;
 80010b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010b2:	4a7a      	ldr	r2, [pc, #488]	; (800129c <I3G450D_loop+0x75c>)
 80010b4:	fb82 1203 	smull	r1, r2, r2, r3
 80010b8:	1092      	asrs	r2, r2, #2
 80010ba:	17db      	asrs	r3, r3, #31
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	4a79      	ldr	r2, [pc, #484]	; (80012a4 <I3G450D_loop+0x764>)
 80010c0:	6013      	str	r3, [r2, #0]
								offset_z=tempSum_Z/(int32_t)AVERAGE_WINDOW_SIZE;
 80010c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80010c4:	4a75      	ldr	r2, [pc, #468]	; (800129c <I3G450D_loop+0x75c>)
 80010c6:	fb82 1203 	smull	r1, r2, r2, r3
 80010ca:	1092      	asrs	r2, r2, #2
 80010cc:	17db      	asrs	r3, r3, #31
 80010ce:	1ad3      	subs	r3, r2, r3
 80010d0:	4a75      	ldr	r2, [pc, #468]	; (80012a8 <I3G450D_loop+0x768>)
 80010d2:	6013      	str	r3, [r2, #0]
								windowPosition++;
 80010d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80010d6:	3301      	adds	r3, #1
 80010d8:	65fb      	str	r3, [r7, #92]	; 0x5c
								if(windowPosition>=AVERAGE_WINDOW_SIZE)
 80010da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80010dc:	2b09      	cmp	r3, #9
 80010de:	d901      	bls.n	80010e4 <I3G450D_loop+0x5a4>
									windowPosition=0;
 80010e0:	2300      	movs	r3, #0
 80010e2:	65fb      	str	r3, [r7, #92]	; 0x5c
						for(uint32_t idx=0; idx<CALIBRATION_BUFFER_LENGTH;idx++)
 80010e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010e6:	3301      	adds	r3, #1
 80010e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80010ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010ec:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80010f0:	d38a      	bcc.n	8001008 <I3G450D_loop+0x4c8>
							for(uint32_t idx=0;idx<CALIBRATION_BUFFER_LENGTH;idx++)
 80010f2:	2300      	movs	r3, #0
 80010f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80010f6:	e089      	b.n	800120c <I3G450D_loop+0x6cc>
								if(((int32_t)calibrationBuffer_X[idx]-offset_x)>TempNoise_X)
 80010f8:	4a65      	ldr	r2, [pc, #404]	; (8001290 <I3G450D_loop+0x750>)
 80010fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80010fc:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001100:	461a      	mov	r2, r3
 8001102:	4b67      	ldr	r3, [pc, #412]	; (80012a0 <I3G450D_loop+0x760>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	1ad2      	subs	r2, r2, r3
 8001108:	4b68      	ldr	r3, [pc, #416]	; (80012ac <I3G450D_loop+0x76c>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	429a      	cmp	r2, r3
 800110e:	dd0a      	ble.n	8001126 <I3G450D_loop+0x5e6>
									TempNoise_X=(int32_t)calibrationBuffer_X[idx]-offset_x;
 8001110:	4a5f      	ldr	r2, [pc, #380]	; (8001290 <I3G450D_loop+0x750>)
 8001112:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001114:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001118:	461a      	mov	r2, r3
 800111a:	4b61      	ldr	r3, [pc, #388]	; (80012a0 <I3G450D_loop+0x760>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	1ad3      	subs	r3, r2, r3
 8001120:	4a62      	ldr	r2, [pc, #392]	; (80012ac <I3G450D_loop+0x76c>)
 8001122:	6013      	str	r3, [r2, #0]
 8001124:	e015      	b.n	8001152 <I3G450D_loop+0x612>
								else if(((int32_t)calibrationBuffer_X[idx]-offset_x)<-TempNoise_X)
 8001126:	4a5a      	ldr	r2, [pc, #360]	; (8001290 <I3G450D_loop+0x750>)
 8001128:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800112a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800112e:	461a      	mov	r2, r3
 8001130:	4b5b      	ldr	r3, [pc, #364]	; (80012a0 <I3G450D_loop+0x760>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	1ad2      	subs	r2, r2, r3
 8001136:	4b5d      	ldr	r3, [pc, #372]	; (80012ac <I3G450D_loop+0x76c>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	425b      	negs	r3, r3
 800113c:	429a      	cmp	r2, r3
 800113e:	da08      	bge.n	8001152 <I3G450D_loop+0x612>
									TempNoise_X=-((int32_t)calibrationBuffer_X[idx]-offset_x);
 8001140:	4b57      	ldr	r3, [pc, #348]	; (80012a0 <I3G450D_loop+0x760>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4952      	ldr	r1, [pc, #328]	; (8001290 <I3G450D_loop+0x750>)
 8001146:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001148:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 800114c:	1a9b      	subs	r3, r3, r2
 800114e:	4a57      	ldr	r2, [pc, #348]	; (80012ac <I3G450D_loop+0x76c>)
 8001150:	6013      	str	r3, [r2, #0]
								if(((int32_t)calibrationBuffer_Y[idx]-offset_y)>TempNoise_Y)
 8001152:	4a50      	ldr	r2, [pc, #320]	; (8001294 <I3G450D_loop+0x754>)
 8001154:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001156:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800115a:	461a      	mov	r2, r3
 800115c:	4b51      	ldr	r3, [pc, #324]	; (80012a4 <I3G450D_loop+0x764>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	1ad2      	subs	r2, r2, r3
 8001162:	4b53      	ldr	r3, [pc, #332]	; (80012b0 <I3G450D_loop+0x770>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	429a      	cmp	r2, r3
 8001168:	dd0a      	ble.n	8001180 <I3G450D_loop+0x640>
									TempNoise_Y=(int32_t)calibrationBuffer_Y[idx]-offset_y;
 800116a:	4a4a      	ldr	r2, [pc, #296]	; (8001294 <I3G450D_loop+0x754>)
 800116c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800116e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001172:	461a      	mov	r2, r3
 8001174:	4b4b      	ldr	r3, [pc, #300]	; (80012a4 <I3G450D_loop+0x764>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	4a4d      	ldr	r2, [pc, #308]	; (80012b0 <I3G450D_loop+0x770>)
 800117c:	6013      	str	r3, [r2, #0]
 800117e:	e015      	b.n	80011ac <I3G450D_loop+0x66c>
								else if(((int32_t)calibrationBuffer_Y[idx]-offset_y)<-TempNoise_Y)
 8001180:	4a44      	ldr	r2, [pc, #272]	; (8001294 <I3G450D_loop+0x754>)
 8001182:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001184:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001188:	461a      	mov	r2, r3
 800118a:	4b46      	ldr	r3, [pc, #280]	; (80012a4 <I3G450D_loop+0x764>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	1ad2      	subs	r2, r2, r3
 8001190:	4b47      	ldr	r3, [pc, #284]	; (80012b0 <I3G450D_loop+0x770>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	425b      	negs	r3, r3
 8001196:	429a      	cmp	r2, r3
 8001198:	da08      	bge.n	80011ac <I3G450D_loop+0x66c>
									TempNoise_Y=-((int32_t)calibrationBuffer_Y[idx]-offset_y);
 800119a:	4b42      	ldr	r3, [pc, #264]	; (80012a4 <I3G450D_loop+0x764>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	493d      	ldr	r1, [pc, #244]	; (8001294 <I3G450D_loop+0x754>)
 80011a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80011a2:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 80011a6:	1a9b      	subs	r3, r3, r2
 80011a8:	4a41      	ldr	r2, [pc, #260]	; (80012b0 <I3G450D_loop+0x770>)
 80011aa:	6013      	str	r3, [r2, #0]
								if(((int32_t)calibrationBuffer_Z[idx]-offset_z)>TempNoise_Z)
 80011ac:	4a3a      	ldr	r2, [pc, #232]	; (8001298 <I3G450D_loop+0x758>)
 80011ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80011b0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80011b4:	461a      	mov	r2, r3
 80011b6:	4b3c      	ldr	r3, [pc, #240]	; (80012a8 <I3G450D_loop+0x768>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	1ad2      	subs	r2, r2, r3
 80011bc:	4b3d      	ldr	r3, [pc, #244]	; (80012b4 <I3G450D_loop+0x774>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	dd0a      	ble.n	80011da <I3G450D_loop+0x69a>
									TempNoise_Z=(int32_t)calibrationBuffer_Z[idx]-offset_z;
 80011c4:	4a34      	ldr	r2, [pc, #208]	; (8001298 <I3G450D_loop+0x758>)
 80011c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80011c8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80011cc:	461a      	mov	r2, r3
 80011ce:	4b36      	ldr	r3, [pc, #216]	; (80012a8 <I3G450D_loop+0x768>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	4a37      	ldr	r2, [pc, #220]	; (80012b4 <I3G450D_loop+0x774>)
 80011d6:	6013      	str	r3, [r2, #0]
 80011d8:	e015      	b.n	8001206 <I3G450D_loop+0x6c6>
								else if(((int32_t)calibrationBuffer_Z[idx]-offset_z)<-TempNoise_Z)
 80011da:	4a2f      	ldr	r2, [pc, #188]	; (8001298 <I3G450D_loop+0x758>)
 80011dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80011de:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80011e2:	461a      	mov	r2, r3
 80011e4:	4b30      	ldr	r3, [pc, #192]	; (80012a8 <I3G450D_loop+0x768>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	1ad2      	subs	r2, r2, r3
 80011ea:	4b32      	ldr	r3, [pc, #200]	; (80012b4 <I3G450D_loop+0x774>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	425b      	negs	r3, r3
 80011f0:	429a      	cmp	r2, r3
 80011f2:	da08      	bge.n	8001206 <I3G450D_loop+0x6c6>
									TempNoise_Z=-((int32_t)calibrationBuffer_Z[idx]-offset_z);
 80011f4:	4b2c      	ldr	r3, [pc, #176]	; (80012a8 <I3G450D_loop+0x768>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4927      	ldr	r1, [pc, #156]	; (8001298 <I3G450D_loop+0x758>)
 80011fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80011fc:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8001200:	1a9b      	subs	r3, r3, r2
 8001202:	4a2c      	ldr	r2, [pc, #176]	; (80012b4 <I3G450D_loop+0x774>)
 8001204:	6013      	str	r3, [r2, #0]
							for(uint32_t idx=0;idx<CALIBRATION_BUFFER_LENGTH;idx++)
 8001206:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001208:	3301      	adds	r3, #1
 800120a:	64bb      	str	r3, [r7, #72]	; 0x48
 800120c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800120e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001212:	f4ff af71 	bcc.w	80010f8 <I3G450D_loop+0x5b8>
							Noise_X=(float)TempNoise_X*L3GD20_SENSITIVITY;
 8001216:	4b25      	ldr	r3, [pc, #148]	; (80012ac <I3G450D_loop+0x76c>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	ee07 3a90 	vmov	s15, r3
 800121e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001222:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80012b8 <I3G450D_loop+0x778>
 8001226:	ee67 7a87 	vmul.f32	s15, s15, s14
 800122a:	4b24      	ldr	r3, [pc, #144]	; (80012bc <I3G450D_loop+0x77c>)
 800122c:	edc3 7a00 	vstr	s15, [r3]
							Noise_Y=(float)TempNoise_Y*L3GD20_SENSITIVITY;
 8001230:	4b1f      	ldr	r3, [pc, #124]	; (80012b0 <I3G450D_loop+0x770>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	ee07 3a90 	vmov	s15, r3
 8001238:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800123c:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80012b8 <I3G450D_loop+0x778>
 8001240:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001244:	4b1e      	ldr	r3, [pc, #120]	; (80012c0 <I3G450D_loop+0x780>)
 8001246:	edc3 7a00 	vstr	s15, [r3]
							Noise_Z=(float)TempNoise_Z*L3GD20_SENSITIVITY;
 800124a:	4b1a      	ldr	r3, [pc, #104]	; (80012b4 <I3G450D_loop+0x774>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	ee07 3a90 	vmov	s15, r3
 8001252:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001256:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80012b8 <I3G450D_loop+0x778>
 800125a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800125e:	4b19      	ldr	r3, [pc, #100]	; (80012c4 <I3G450D_loop+0x784>)
 8001260:	edc3 7a00 	vstr	s15, [r3]
							currentcalistate=L3GD20_calibrated;
 8001264:	4b18      	ldr	r3, [pc, #96]	; (80012c8 <I3G450D_loop+0x788>)
 8001266:	2202      	movs	r2, #2
 8001268:	701a      	strb	r2, [r3, #0]
							break;
 800126a:	e004      	b.n	8001276 <I3G450D_loop+0x736>
						break;
 800126c:	bf00      	nop
 800126e:	e002      	b.n	8001276 <I3G450D_loop+0x736>
						break;
 8001270:	bf00      	nop
 8001272:	e000      	b.n	8001276 <I3G450D_loop+0x736>
						break;
 8001274:	bf00      	nop
			currentState=L3GD20_fisrt;
 8001276:	4b15      	ldr	r3, [pc, #84]	; (80012cc <I3G450D_loop+0x78c>)
 8001278:	2200      	movs	r2, #0
 800127a:	701a      	strb	r2, [r3, #0]
			dataReadyFlag=L3GD20_DATA_READY;
 800127c:	4b14      	ldr	r3, [pc, #80]	; (80012d0 <I3G450D_loop+0x790>)
 800127e:	2201      	movs	r2, #1
 8001280:	701a      	strb	r2, [r3, #0]
			break;
 8001282:	e000      	b.n	8001286 <I3G450D_loop+0x746>
				break;
 8001284:	bf00      	nop

		}
}
 8001286:	bf00      	nop
 8001288:	3760      	adds	r7, #96	; 0x60
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	200002f4 	.word	0x200002f4
 8001294:	20001294 	.word	0x20001294
 8001298:	20002234 	.word	0x20002234
 800129c:	66666667 	.word	0x66666667
 80012a0:	200002ac 	.word	0x200002ac
 80012a4:	200002b0 	.word	0x200002b0
 80012a8:	200002b4 	.word	0x200002b4
 80012ac:	200002dc 	.word	0x200002dc
 80012b0:	200002e0 	.word	0x200002e0
 80012b4:	200002e4 	.word	0x200002e4
 80012b8:	3d8f5c29 	.word	0x3d8f5c29
 80012bc:	200002b8 	.word	0x200002b8
 80012c0:	200002bc 	.word	0x200002bc
 80012c4:	200002c0 	.word	0x200002c0
 80012c8:	2000029b 	.word	0x2000029b
 80012cc:	2000029c 	.word	0x2000029c
 80012d0:	200000c4 	.word	0x200000c4

080012d4 <GyroGetData>:
void GyroGetData(int16_t *x, int16_t*y, int16_t*z)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	60b9      	str	r1, [r7, #8]
 80012de:	607a      	str	r2, [r7, #4]
	*x = Angle_X;
 80012e0:	4b11      	ldr	r3, [pc, #68]	; (8001328 <GyroGetData+0x54>)
 80012e2:	edd3 7a00 	vldr	s15, [r3]
 80012e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012ea:	ee17 3a90 	vmov	r3, s15
 80012ee:	b21a      	sxth	r2, r3
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	801a      	strh	r2, [r3, #0]
	*y = Angle_Y;
 80012f4:	4b0d      	ldr	r3, [pc, #52]	; (800132c <GyroGetData+0x58>)
 80012f6:	edd3 7a00 	vldr	s15, [r3]
 80012fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012fe:	ee17 3a90 	vmov	r3, s15
 8001302:	b21a      	sxth	r2, r3
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	801a      	strh	r2, [r3, #0]
	*z = Angle_Z;
 8001308:	4b09      	ldr	r3, [pc, #36]	; (8001330 <GyroGetData+0x5c>)
 800130a:	edd3 7a00 	vldr	s15, [r3]
 800130e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001312:	ee17 3a90 	vmov	r3, s15
 8001316:	b21a      	sxth	r2, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	801a      	strh	r2, [r3, #0]
}
 800131c:	bf00      	nop
 800131e:	3714      	adds	r7, #20
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	200002c4 	.word	0x200002c4
 800132c:	200002c8 	.word	0x200002c8
 8001330:	200002cc 	.word	0x200002cc

08001334 <Lis3dhInit>:

}



void Lis3dhInit(I2C_HandleTypeDef *I2Cxhandle){
 8001334:	b580      	push	{r7, lr}
 8001336:	b088      	sub	sp, #32
 8001338:	af02      	add	r7, sp, #8
 800133a:	6078      	str	r0, [r7, #4]

	 HAL_StatusTypeDef ret;

	    uint8_t sendBuff[2];
	    uint8_t reciveBuff[12];
	    I2Cx = I2Cxhandle;
 800133c:	4a40      	ldr	r2, [pc, #256]	; (8001440 <Lis3dhInit+0x10c>)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6013      	str	r3, [r2, #0]

	    sendBuff[0] = WHO_AM_I|LIS3DH_READ;
 8001342:	238f      	movs	r3, #143	; 0x8f
 8001344:	753b      	strb	r3, [r7, #20]
	    ret = HAL_I2C_IsDeviceReady(I2Cx,LIS3DH_ADDR,1, HAL_MAX_DELAY);
 8001346:	4b3e      	ldr	r3, [pc, #248]	; (8001440 <Lis3dhInit+0x10c>)
 8001348:	6818      	ldr	r0, [r3, #0]
 800134a:	2130      	movs	r1, #48	; 0x30
 800134c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001350:	2201      	movs	r2, #1
 8001352:	f004 fabd 	bl	80058d0 <HAL_I2C_IsDeviceReady>
 8001356:	4603      	mov	r3, r0
 8001358:	75fb      	strb	r3, [r7, #23]

	    ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 1, HAL_MAX_DELAY);
 800135a:	4b39      	ldr	r3, [pc, #228]	; (8001440 <Lis3dhInit+0x10c>)
 800135c:	6818      	ldr	r0, [r3, #0]
 800135e:	2130      	movs	r1, #48	; 0x30
 8001360:	f107 0214 	add.w	r2, r7, #20
 8001364:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001368:	9300      	str	r3, [sp, #0]
 800136a:	2301      	movs	r3, #1
 800136c:	f003 ff8c 	bl	8005288 <HAL_I2C_Master_Transmit>
 8001370:	4603      	mov	r3, r0
 8001372:	75fb      	strb	r3, [r7, #23]
	    if(ret != HAL_OK) {
 8001374:	7dfb      	ldrb	r3, [r7, #23]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d002      	beq.n	8001380 <Lis3dhInit+0x4c>
	        //Handle Error
	    	errorHandler();
 800137a:	f000 f8f5 	bl	8001568 <errorHandler>





}
 800137e:	e05b      	b.n	8001438 <Lis3dhInit+0x104>
	        ret = HAL_I2C_Master_Receive(I2Cx, LIS3DH_ADDR, reciveBuff, 2, HAL_MAX_DELAY);
 8001380:	4b2f      	ldr	r3, [pc, #188]	; (8001440 <Lis3dhInit+0x10c>)
 8001382:	6818      	ldr	r0, [r3, #0]
 8001384:	2130      	movs	r1, #48	; 0x30
 8001386:	f107 0208 	add.w	r2, r7, #8
 800138a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800138e:	9300      	str	r3, [sp, #0]
 8001390:	2302      	movs	r3, #2
 8001392:	f004 f877 	bl	8005484 <HAL_I2C_Master_Receive>
 8001396:	4603      	mov	r3, r0
 8001398:	75fb      	strb	r3, [r7, #23]
	        if(ret != HAL_OK) {
 800139a:	7dfb      	ldrb	r3, [r7, #23]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d002      	beq.n	80013a6 <Lis3dhInit+0x72>
	        	errorHandler();
 80013a0:	f000 f8e2 	bl	8001568 <errorHandler>
}
 80013a4:	e048      	b.n	8001438 <Lis3dhInit+0x104>
				sendBuff[0]  = LIS3DH_REG_CTRL1  |LIS3DH_READ;
 80013a6:	23a0      	movs	r3, #160	; 0xa0
 80013a8:	753b      	strb	r3, [r7, #20]
				ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 1, HAL_MAX_DELAY);
 80013aa:	4b25      	ldr	r3, [pc, #148]	; (8001440 <Lis3dhInit+0x10c>)
 80013ac:	6818      	ldr	r0, [r3, #0]
 80013ae:	2130      	movs	r1, #48	; 0x30
 80013b0:	f107 0214 	add.w	r2, r7, #20
 80013b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013b8:	9300      	str	r3, [sp, #0]
 80013ba:	2301      	movs	r3, #1
 80013bc:	f003 ff64 	bl	8005288 <HAL_I2C_Master_Transmit>
 80013c0:	4603      	mov	r3, r0
 80013c2:	75fb      	strb	r3, [r7, #23]
				ret = HAL_I2C_Master_Receive(I2Cx, LIS3DH_ADDR, reciveBuff, 2, HAL_MAX_DELAY);
 80013c4:	4b1e      	ldr	r3, [pc, #120]	; (8001440 <Lis3dhInit+0x10c>)
 80013c6:	6818      	ldr	r0, [r3, #0]
 80013c8:	2130      	movs	r1, #48	; 0x30
 80013ca:	f107 0208 	add.w	r2, r7, #8
 80013ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013d2:	9300      	str	r3, [sp, #0]
 80013d4:	2302      	movs	r3, #2
 80013d6:	f004 f855 	bl	8005484 <HAL_I2C_Master_Receive>
 80013da:	4603      	mov	r3, r0
 80013dc:	75fb      	strb	r3, [r7, #23]
				sendBuff[0] = LIS3DH_REG_CTRL1;
 80013de:	2320      	movs	r3, #32
 80013e0:	753b      	strb	r3, [r7, #20]
				sendBuff[1] = 0x57;
 80013e2:	2357      	movs	r3, #87	; 0x57
 80013e4:	757b      	strb	r3, [r7, #21]
				ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 2, HAL_MAX_DELAY);
 80013e6:	4b16      	ldr	r3, [pc, #88]	; (8001440 <Lis3dhInit+0x10c>)
 80013e8:	6818      	ldr	r0, [r3, #0]
 80013ea:	2130      	movs	r1, #48	; 0x30
 80013ec:	f107 0214 	add.w	r2, r7, #20
 80013f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013f4:	9300      	str	r3, [sp, #0]
 80013f6:	2302      	movs	r3, #2
 80013f8:	f003 ff46 	bl	8005288 <HAL_I2C_Master_Transmit>
 80013fc:	4603      	mov	r3, r0
 80013fe:	75fb      	strb	r3, [r7, #23]
				sendBuff[0]  = LIS3DH_REG_CTRL1  |LIS3DH_READ;
 8001400:	23a0      	movs	r3, #160	; 0xa0
 8001402:	753b      	strb	r3, [r7, #20]
				ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 1, HAL_MAX_DELAY);
 8001404:	4b0e      	ldr	r3, [pc, #56]	; (8001440 <Lis3dhInit+0x10c>)
 8001406:	6818      	ldr	r0, [r3, #0]
 8001408:	2130      	movs	r1, #48	; 0x30
 800140a:	f107 0214 	add.w	r2, r7, #20
 800140e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001412:	9300      	str	r3, [sp, #0]
 8001414:	2301      	movs	r3, #1
 8001416:	f003 ff37 	bl	8005288 <HAL_I2C_Master_Transmit>
 800141a:	4603      	mov	r3, r0
 800141c:	75fb      	strb	r3, [r7, #23]
				ret = HAL_I2C_Master_Receive(I2Cx, LIS3DH_ADDR, reciveBuff, 2, HAL_MAX_DELAY);
 800141e:	4b08      	ldr	r3, [pc, #32]	; (8001440 <Lis3dhInit+0x10c>)
 8001420:	6818      	ldr	r0, [r3, #0]
 8001422:	2130      	movs	r1, #48	; 0x30
 8001424:	f107 0208 	add.w	r2, r7, #8
 8001428:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800142c:	9300      	str	r3, [sp, #0]
 800142e:	2302      	movs	r3, #2
 8001430:	f004 f828 	bl	8005484 <HAL_I2C_Master_Receive>
 8001434:	4603      	mov	r3, r0
 8001436:	75fb      	strb	r3, [r7, #23]
}
 8001438:	bf00      	nop
 800143a:	3718      	adds	r7, #24
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	200031e0 	.word	0x200031e0

08001444 <Lis3dhGetAcc>:
int Lis3dhGetAcc(){
 8001444:	b580      	push	{r7, lr}
 8001446:	b086      	sub	sp, #24
 8001448:	af02      	add	r7, sp, #8
	uint8_t reciveBuff[12];

	HAL_StatusTypeDef ret;

	//1. Read STATUS_REG
	 sendBuff[0]  = LIS3DH_REG_STATUS  | LIS3DH_READ;
 800144a:	23a7      	movs	r3, #167	; 0xa7
 800144c:	733b      	strb	r3, [r7, #12]
		ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 1, HAL_MAX_DELAY);
 800144e:	4b31      	ldr	r3, [pc, #196]	; (8001514 <Lis3dhGetAcc+0xd0>)
 8001450:	6818      	ldr	r0, [r3, #0]
 8001452:	2130      	movs	r1, #48	; 0x30
 8001454:	f107 020c 	add.w	r2, r7, #12
 8001458:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800145c:	9300      	str	r3, [sp, #0]
 800145e:	2301      	movs	r3, #1
 8001460:	f003 ff12 	bl	8005288 <HAL_I2C_Master_Transmit>
 8001464:	4603      	mov	r3, r0
 8001466:	73fb      	strb	r3, [r7, #15]
		ret = HAL_I2C_Master_Receive(I2Cx, LIS3DH_ADDR, reciveBuff, 2, HAL_MAX_DELAY);
 8001468:	4b2a      	ldr	r3, [pc, #168]	; (8001514 <Lis3dhGetAcc+0xd0>)
 800146a:	6818      	ldr	r0, [r3, #0]
 800146c:	2130      	movs	r1, #48	; 0x30
 800146e:	463a      	mov	r2, r7
 8001470:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001474:	9300      	str	r3, [sp, #0]
 8001476:	2302      	movs	r3, #2
 8001478:	f004 f804 	bl	8005484 <HAL_I2C_Master_Receive>
 800147c:	4603      	mov	r3, r0
 800147e:	73fb      	strb	r3, [r7, #15]

	// if there is new data on any axis proceed ZYXDA,ZDA,YDA = 1 in the status_reg.

	// else do nothing. this isn't ideal maybe we should hang out here till there is new data.
	sendBuff[0] = LIS3DH_REG_OUT_X_L  | LIS3DH_READ;
 8001480:	23a8      	movs	r3, #168	; 0xa8
 8001482:	733b      	strb	r3, [r7, #12]
	ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 1, HAL_MAX_DELAY);
 8001484:	4b23      	ldr	r3, [pc, #140]	; (8001514 <Lis3dhGetAcc+0xd0>)
 8001486:	6818      	ldr	r0, [r3, #0]
 8001488:	2130      	movs	r1, #48	; 0x30
 800148a:	f107 020c 	add.w	r2, r7, #12
 800148e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001492:	9300      	str	r3, [sp, #0]
 8001494:	2301      	movs	r3, #1
 8001496:	f003 fef7 	bl	8005288 <HAL_I2C_Master_Transmit>
 800149a:	4603      	mov	r3, r0
 800149c:	73fb      	strb	r3, [r7, #15]
	ret = HAL_I2C_Master_Receive(I2Cx, LIS3DH_ADDR, reciveBuff, 6 , HAL_MAX_DELAY);
 800149e:	4b1d      	ldr	r3, [pc, #116]	; (8001514 <Lis3dhGetAcc+0xd0>)
 80014a0:	6818      	ldr	r0, [r3, #0]
 80014a2:	2130      	movs	r1, #48	; 0x30
 80014a4:	463a      	mov	r2, r7
 80014a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014aa:	9300      	str	r3, [sp, #0]
 80014ac:	2306      	movs	r3, #6
 80014ae:	f003 ffe9 	bl	8005484 <HAL_I2C_Master_Receive>
 80014b2:	4603      	mov	r3, r0
 80014b4:	73fb      	strb	r3, [r7, #15]


	  x = reciveBuff[0];
 80014b6:	783a      	ldrb	r2, [r7, #0]
 80014b8:	4b17      	ldr	r3, [pc, #92]	; (8001518 <Lis3dhGetAcc+0xd4>)
 80014ba:	701a      	strb	r2, [r3, #0]
	  x |= ((uint16_t)reciveBuff[1]) << 8;
 80014bc:	787b      	ldrb	r3, [r7, #1]
 80014be:	021b      	lsls	r3, r3, #8
 80014c0:	b25a      	sxtb	r2, r3
 80014c2:	4b15      	ldr	r3, [pc, #84]	; (8001518 <Lis3dhGetAcc+0xd4>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	b25b      	sxtb	r3, r3
 80014c8:	4313      	orrs	r3, r2
 80014ca:	b25b      	sxtb	r3, r3
 80014cc:	b2da      	uxtb	r2, r3
 80014ce:	4b12      	ldr	r3, [pc, #72]	; (8001518 <Lis3dhGetAcc+0xd4>)
 80014d0:	701a      	strb	r2, [r3, #0]
	  y = reciveBuff[2];
 80014d2:	78ba      	ldrb	r2, [r7, #2]
 80014d4:	4b11      	ldr	r3, [pc, #68]	; (800151c <Lis3dhGetAcc+0xd8>)
 80014d6:	701a      	strb	r2, [r3, #0]
	  y |= ((uint16_t)reciveBuff[3]) << 8;
 80014d8:	78fb      	ldrb	r3, [r7, #3]
 80014da:	021b      	lsls	r3, r3, #8
 80014dc:	b25a      	sxtb	r2, r3
 80014de:	4b0f      	ldr	r3, [pc, #60]	; (800151c <Lis3dhGetAcc+0xd8>)
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	b25b      	sxtb	r3, r3
 80014e4:	4313      	orrs	r3, r2
 80014e6:	b25b      	sxtb	r3, r3
 80014e8:	b2da      	uxtb	r2, r3
 80014ea:	4b0c      	ldr	r3, [pc, #48]	; (800151c <Lis3dhGetAcc+0xd8>)
 80014ec:	701a      	strb	r2, [r3, #0]
	  z = reciveBuff[4];
 80014ee:	793a      	ldrb	r2, [r7, #4]
 80014f0:	4b0b      	ldr	r3, [pc, #44]	; (8001520 <Lis3dhGetAcc+0xdc>)
 80014f2:	701a      	strb	r2, [r3, #0]
	  z |= ((uint16_t)reciveBuff[5]) << 8;
 80014f4:	797b      	ldrb	r3, [r7, #5]
 80014f6:	021b      	lsls	r3, r3, #8
 80014f8:	b25a      	sxtb	r2, r3
 80014fa:	4b09      	ldr	r3, [pc, #36]	; (8001520 <Lis3dhGetAcc+0xdc>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	b25b      	sxtb	r3, r3
 8001500:	4313      	orrs	r3, r2
 8001502:	b25b      	sxtb	r3, r3
 8001504:	b2da      	uxtb	r2, r3
 8001506:	4b06      	ldr	r3, [pc, #24]	; (8001520 <Lis3dhGetAcc+0xdc>)
 8001508:	701a      	strb	r2, [r3, #0]


	return 0;
 800150a:	2300      	movs	r3, #0
}
 800150c:	4618      	mov	r0, r3
 800150e:	3710      	adds	r7, #16
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	200031e0 	.word	0x200031e0
 8001518:	200031e4 	.word	0x200031e4
 800151c:	200031e5 	.word	0x200031e5
 8001520:	200031e6 	.word	0x200031e6

08001524 <AccelGetData>:
void Lis3dhSetRange(int8_t range){}

void AccelGetData(int16_t *acelX, int16_t*acelY, int16_t*acelZ)
{
 8001524:	b480      	push	{r7}
 8001526:	b085      	sub	sp, #20
 8001528:	af00      	add	r7, sp, #0
 800152a:	60f8      	str	r0, [r7, #12]
 800152c:	60b9      	str	r1, [r7, #8]
 800152e:	607a      	str	r2, [r7, #4]
	*acelX = x;
 8001530:	4b0a      	ldr	r3, [pc, #40]	; (800155c <AccelGetData+0x38>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	b21a      	sxth	r2, r3
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	801a      	strh	r2, [r3, #0]
	*acelY = y;
 800153a:	4b09      	ldr	r3, [pc, #36]	; (8001560 <AccelGetData+0x3c>)
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	b21a      	sxth	r2, r3
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	801a      	strh	r2, [r3, #0]
	*acelZ = z;
 8001544:	4b07      	ldr	r3, [pc, #28]	; (8001564 <AccelGetData+0x40>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	b21a      	sxth	r2, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	801a      	strh	r2, [r3, #0]

}
 800154e:	bf00      	nop
 8001550:	3714      	adds	r7, #20
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	200031e4 	.word	0x200031e4
 8001560:	200031e5 	.word	0x200031e5
 8001564:	200031e6 	.word	0x200031e6

08001568 <errorHandler>:
void errorHandler()
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
	// handle the error
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
	...

08001578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800157e:	f001 f9ff 	bl	8002980 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001582:	f000 f839 	bl	80015f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001586:	f000 fadd 	bl	8001b44 <MX_GPIO_Init>
  MX_CRC_Init();
 800158a:	f000 f89f 	bl	80016cc <MX_CRC_Init>
  MX_I2C3_Init();
 800158e:	f000 f8f1 	bl	8001774 <MX_I2C3_Init>
  MX_SPI5_Init();
 8001592:	f000 f965 	bl	8001860 <MX_SPI5_Init>
  MX_TIM1_Init();
 8001596:	f000 f999 	bl	80018cc <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800159a:	f000 fa5f 	bl	8001a5c <MX_USART1_UART_Init>
  MX_DMA_Init();
 800159e:	f000 fab1 	bl	8001b04 <MX_DMA_Init>
  MX_TIM2_Init();
 80015a2:	f000 f9e7 	bl	8001974 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80015a6:	f000 fa83 	bl	8001ab0 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 80015aa:	f000 f923 	bl	80017f4 <MX_SPI3_Init>
  MX_FATFS_Init();
 80015ae:	f009 f979 	bl	800a8a4 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 80015b2:	f00c faeb 	bl	800db8c <MX_USB_HOST_Init>
  MX_I2C2_Init();
 80015b6:	f000 f89d 	bl	80016f4 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */



  RetargetInit(&huart1);
 80015ba:	480b      	ldr	r0, [pc, #44]	; (80015e8 <main+0x70>)
 80015bc:	f000 fcf0 	bl	8001fa0 <RetargetInit>
  ConsoleInit(&huart1);
 80015c0:	4809      	ldr	r0, [pc, #36]	; (80015e8 <main+0x70>)
 80015c2:	f7ff f96d 	bl	80008a0 <ConsoleInit>
  //Lis3dhInit(&htim2);
  SessionControllerInit(&hi2c2,&htim2,&hspi5);
 80015c6:	4a09      	ldr	r2, [pc, #36]	; (80015ec <main+0x74>)
 80015c8:	4909      	ldr	r1, [pc, #36]	; (80015f0 <main+0x78>)
 80015ca:	480a      	ldr	r0, [pc, #40]	; (80015f4 <main+0x7c>)
 80015cc:	f7ff f80a 	bl	80005e4 <SessionControllerInit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t angle = 0;
 80015d0:	2300      	movs	r3, #0
 80015d2:	71fb      	strb	r3, [r7, #7]
  const uint8_t angle_difference = 11;
 80015d4:	230b      	movs	r3, #11
 80015d6:	71bb      	strb	r3, [r7, #6]
  int usbWriteFlag = 1;
 80015d8:	2301      	movs	r3, #1
 80015da:	603b      	str	r3, [r7, #0]
uint8_t x,y,z;

  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80015dc:	f00c fafc 	bl	800dbd8 <MX_USB_HOST_Process>


	  //		ConsoleProcess();
	  //		I3G450D_loop();
	  //		Lis3dhGetAcc();
	  SessionControllerProcess();
 80015e0:	f7ff f81a 	bl	8000618 <SessionControllerProcess>
  {
 80015e4:	e7fa      	b.n	80015dc <main+0x64>
 80015e6:	bf00      	nop
 80015e8:	20003438 	.word	0x20003438
 80015ec:	200032f0 	.word	0x200032f0
 80015f0:	20003390 	.word	0x20003390
 80015f4:	200031f0 	.word	0x200031f0

080015f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b094      	sub	sp, #80	; 0x50
 80015fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015fe:	f107 0320 	add.w	r3, r7, #32
 8001602:	2230      	movs	r2, #48	; 0x30
 8001604:	2100      	movs	r1, #0
 8001606:	4618      	mov	r0, r3
 8001608:	f00c fe46 	bl	800e298 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800160c:	f107 030c 	add.w	r3, r7, #12
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	609a      	str	r2, [r3, #8]
 8001618:	60da      	str	r2, [r3, #12]
 800161a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800161c:	2300      	movs	r3, #0
 800161e:	60bb      	str	r3, [r7, #8]
 8001620:	4b28      	ldr	r3, [pc, #160]	; (80016c4 <SystemClock_Config+0xcc>)
 8001622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001624:	4a27      	ldr	r2, [pc, #156]	; (80016c4 <SystemClock_Config+0xcc>)
 8001626:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800162a:	6413      	str	r3, [r2, #64]	; 0x40
 800162c:	4b25      	ldr	r3, [pc, #148]	; (80016c4 <SystemClock_Config+0xcc>)
 800162e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001634:	60bb      	str	r3, [r7, #8]
 8001636:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001638:	2300      	movs	r3, #0
 800163a:	607b      	str	r3, [r7, #4]
 800163c:	4b22      	ldr	r3, [pc, #136]	; (80016c8 <SystemClock_Config+0xd0>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001644:	4a20      	ldr	r2, [pc, #128]	; (80016c8 <SystemClock_Config+0xd0>)
 8001646:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800164a:	6013      	str	r3, [r2, #0]
 800164c:	4b1e      	ldr	r3, [pc, #120]	; (80016c8 <SystemClock_Config+0xd0>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001654:	607b      	str	r3, [r7, #4]
 8001656:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001658:	2301      	movs	r3, #1
 800165a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800165c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001660:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001662:	2302      	movs	r3, #2
 8001664:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001666:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800166a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800166c:	2304      	movs	r3, #4
 800166e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001670:	2348      	movs	r3, #72	; 0x48
 8001672:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001674:	2302      	movs	r3, #2
 8001676:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001678:	2303      	movs	r3, #3
 800167a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800167c:	f107 0320 	add.w	r3, r7, #32
 8001680:	4618      	mov	r0, r3
 8001682:	f004 fdfb 	bl	800627c <HAL_RCC_OscConfig>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800168c:	f000 fc82 	bl	8001f94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001690:	230f      	movs	r3, #15
 8001692:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001694:	2302      	movs	r3, #2
 8001696:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001698:	2300      	movs	r3, #0
 800169a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800169c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016a2:	2300      	movs	r3, #0
 80016a4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016a6:	f107 030c 	add.w	r3, r7, #12
 80016aa:	2102      	movs	r1, #2
 80016ac:	4618      	mov	r0, r3
 80016ae:	f005 f85d 	bl	800676c <HAL_RCC_ClockConfig>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80016b8:	f000 fc6c 	bl	8001f94 <Error_Handler>
  }
}
 80016bc:	bf00      	nop
 80016be:	3750      	adds	r7, #80	; 0x50
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40023800 	.word	0x40023800
 80016c8:	40007000 	.word	0x40007000

080016cc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80016d0:	4b06      	ldr	r3, [pc, #24]	; (80016ec <MX_CRC_Init+0x20>)
 80016d2:	4a07      	ldr	r2, [pc, #28]	; (80016f0 <MX_CRC_Init+0x24>)
 80016d4:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80016d6:	4805      	ldr	r0, [pc, #20]	; (80016ec <MX_CRC_Init+0x20>)
 80016d8:	f001 faf9 	bl	8002cce <HAL_CRC_Init>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80016e2:	f000 fc57 	bl	8001f94 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	200031e8 	.word	0x200031e8
 80016f0:	40023000 	.word	0x40023000

080016f4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80016f8:	4b1b      	ldr	r3, [pc, #108]	; (8001768 <MX_I2C2_Init+0x74>)
 80016fa:	4a1c      	ldr	r2, [pc, #112]	; (800176c <MX_I2C2_Init+0x78>)
 80016fc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80016fe:	4b1a      	ldr	r3, [pc, #104]	; (8001768 <MX_I2C2_Init+0x74>)
 8001700:	4a1b      	ldr	r2, [pc, #108]	; (8001770 <MX_I2C2_Init+0x7c>)
 8001702:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001704:	4b18      	ldr	r3, [pc, #96]	; (8001768 <MX_I2C2_Init+0x74>)
 8001706:	2200      	movs	r2, #0
 8001708:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800170a:	4b17      	ldr	r3, [pc, #92]	; (8001768 <MX_I2C2_Init+0x74>)
 800170c:	2200      	movs	r2, #0
 800170e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001710:	4b15      	ldr	r3, [pc, #84]	; (8001768 <MX_I2C2_Init+0x74>)
 8001712:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001716:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001718:	4b13      	ldr	r3, [pc, #76]	; (8001768 <MX_I2C2_Init+0x74>)
 800171a:	2200      	movs	r2, #0
 800171c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800171e:	4b12      	ldr	r3, [pc, #72]	; (8001768 <MX_I2C2_Init+0x74>)
 8001720:	2200      	movs	r2, #0
 8001722:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001724:	4b10      	ldr	r3, [pc, #64]	; (8001768 <MX_I2C2_Init+0x74>)
 8001726:	2200      	movs	r2, #0
 8001728:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800172a:	4b0f      	ldr	r3, [pc, #60]	; (8001768 <MX_I2C2_Init+0x74>)
 800172c:	2200      	movs	r2, #0
 800172e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001730:	480d      	ldr	r0, [pc, #52]	; (8001768 <MX_I2C2_Init+0x74>)
 8001732:	f003 fc65 	bl	8005000 <HAL_I2C_Init>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800173c:	f000 fc2a 	bl	8001f94 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001740:	2100      	movs	r1, #0
 8001742:	4809      	ldr	r0, [pc, #36]	; (8001768 <MX_I2C2_Init+0x74>)
 8001744:	f004 fd1f 	bl	8006186 <HAL_I2CEx_ConfigAnalogFilter>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800174e:	f000 fc21 	bl	8001f94 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001752:	2100      	movs	r1, #0
 8001754:	4804      	ldr	r0, [pc, #16]	; (8001768 <MX_I2C2_Init+0x74>)
 8001756:	f004 fd52 	bl	80061fe <HAL_I2CEx_ConfigDigitalFilter>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001760:	f000 fc18 	bl	8001f94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001764:	bf00      	nop
 8001766:	bd80      	pop	{r7, pc}
 8001768:	200031f0 	.word	0x200031f0
 800176c:	40005800 	.word	0x40005800
 8001770:	000186a0 	.word	0x000186a0

08001774 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001778:	4b1b      	ldr	r3, [pc, #108]	; (80017e8 <MX_I2C3_Init+0x74>)
 800177a:	4a1c      	ldr	r2, [pc, #112]	; (80017ec <MX_I2C3_Init+0x78>)
 800177c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800177e:	4b1a      	ldr	r3, [pc, #104]	; (80017e8 <MX_I2C3_Init+0x74>)
 8001780:	4a1b      	ldr	r2, [pc, #108]	; (80017f0 <MX_I2C3_Init+0x7c>)
 8001782:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001784:	4b18      	ldr	r3, [pc, #96]	; (80017e8 <MX_I2C3_Init+0x74>)
 8001786:	2200      	movs	r2, #0
 8001788:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800178a:	4b17      	ldr	r3, [pc, #92]	; (80017e8 <MX_I2C3_Init+0x74>)
 800178c:	2200      	movs	r2, #0
 800178e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001790:	4b15      	ldr	r3, [pc, #84]	; (80017e8 <MX_I2C3_Init+0x74>)
 8001792:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001796:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001798:	4b13      	ldr	r3, [pc, #76]	; (80017e8 <MX_I2C3_Init+0x74>)
 800179a:	2200      	movs	r2, #0
 800179c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800179e:	4b12      	ldr	r3, [pc, #72]	; (80017e8 <MX_I2C3_Init+0x74>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017a4:	4b10      	ldr	r3, [pc, #64]	; (80017e8 <MX_I2C3_Init+0x74>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017aa:	4b0f      	ldr	r3, [pc, #60]	; (80017e8 <MX_I2C3_Init+0x74>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80017b0:	480d      	ldr	r0, [pc, #52]	; (80017e8 <MX_I2C3_Init+0x74>)
 80017b2:	f003 fc25 	bl	8005000 <HAL_I2C_Init>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80017bc:	f000 fbea 	bl	8001f94 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017c0:	2100      	movs	r1, #0
 80017c2:	4809      	ldr	r0, [pc, #36]	; (80017e8 <MX_I2C3_Init+0x74>)
 80017c4:	f004 fcdf 	bl	8006186 <HAL_I2CEx_ConfigAnalogFilter>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80017ce:	f000 fbe1 	bl	8001f94 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80017d2:	2100      	movs	r1, #0
 80017d4:	4804      	ldr	r0, [pc, #16]	; (80017e8 <MX_I2C3_Init+0x74>)
 80017d6:	f004 fd12 	bl	80061fe <HAL_I2CEx_ConfigDigitalFilter>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80017e0:	f000 fbd8 	bl	8001f94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80017e4:	bf00      	nop
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	20003244 	.word	0x20003244
 80017ec:	40005c00 	.word	0x40005c00
 80017f0:	000186a0 	.word	0x000186a0

080017f4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80017f8:	4b17      	ldr	r3, [pc, #92]	; (8001858 <MX_SPI3_Init+0x64>)
 80017fa:	4a18      	ldr	r2, [pc, #96]	; (800185c <MX_SPI3_Init+0x68>)
 80017fc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80017fe:	4b16      	ldr	r3, [pc, #88]	; (8001858 <MX_SPI3_Init+0x64>)
 8001800:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001804:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001806:	4b14      	ldr	r3, [pc, #80]	; (8001858 <MX_SPI3_Init+0x64>)
 8001808:	2200      	movs	r2, #0
 800180a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800180c:	4b12      	ldr	r3, [pc, #72]	; (8001858 <MX_SPI3_Init+0x64>)
 800180e:	2200      	movs	r2, #0
 8001810:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001812:	4b11      	ldr	r3, [pc, #68]	; (8001858 <MX_SPI3_Init+0x64>)
 8001814:	2200      	movs	r2, #0
 8001816:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001818:	4b0f      	ldr	r3, [pc, #60]	; (8001858 <MX_SPI3_Init+0x64>)
 800181a:	2200      	movs	r2, #0
 800181c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800181e:	4b0e      	ldr	r3, [pc, #56]	; (8001858 <MX_SPI3_Init+0x64>)
 8001820:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001824:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001826:	4b0c      	ldr	r3, [pc, #48]	; (8001858 <MX_SPI3_Init+0x64>)
 8001828:	2200      	movs	r2, #0
 800182a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800182c:	4b0a      	ldr	r3, [pc, #40]	; (8001858 <MX_SPI3_Init+0x64>)
 800182e:	2200      	movs	r2, #0
 8001830:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001832:	4b09      	ldr	r3, [pc, #36]	; (8001858 <MX_SPI3_Init+0x64>)
 8001834:	2200      	movs	r2, #0
 8001836:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001838:	4b07      	ldr	r3, [pc, #28]	; (8001858 <MX_SPI3_Init+0x64>)
 800183a:	2200      	movs	r2, #0
 800183c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800183e:	4b06      	ldr	r3, [pc, #24]	; (8001858 <MX_SPI3_Init+0x64>)
 8001840:	220a      	movs	r2, #10
 8001842:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001844:	4804      	ldr	r0, [pc, #16]	; (8001858 <MX_SPI3_Init+0x64>)
 8001846:	f005 f9b1 	bl	8006bac <HAL_SPI_Init>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001850:	f000 fba0 	bl	8001f94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001854:	bf00      	nop
 8001856:	bd80      	pop	{r7, pc}
 8001858:	20003298 	.word	0x20003298
 800185c:	40003c00 	.word	0x40003c00

08001860 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001864:	4b17      	ldr	r3, [pc, #92]	; (80018c4 <MX_SPI5_Init+0x64>)
 8001866:	4a18      	ldr	r2, [pc, #96]	; (80018c8 <MX_SPI5_Init+0x68>)
 8001868:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800186a:	4b16      	ldr	r3, [pc, #88]	; (80018c4 <MX_SPI5_Init+0x64>)
 800186c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001870:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001872:	4b14      	ldr	r3, [pc, #80]	; (80018c4 <MX_SPI5_Init+0x64>)
 8001874:	2200      	movs	r2, #0
 8001876:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001878:	4b12      	ldr	r3, [pc, #72]	; (80018c4 <MX_SPI5_Init+0x64>)
 800187a:	2200      	movs	r2, #0
 800187c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800187e:	4b11      	ldr	r3, [pc, #68]	; (80018c4 <MX_SPI5_Init+0x64>)
 8001880:	2200      	movs	r2, #0
 8001882:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001884:	4b0f      	ldr	r3, [pc, #60]	; (80018c4 <MX_SPI5_Init+0x64>)
 8001886:	2200      	movs	r2, #0
 8001888:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800188a:	4b0e      	ldr	r3, [pc, #56]	; (80018c4 <MX_SPI5_Init+0x64>)
 800188c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001890:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001892:	4b0c      	ldr	r3, [pc, #48]	; (80018c4 <MX_SPI5_Init+0x64>)
 8001894:	2218      	movs	r2, #24
 8001896:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001898:	4b0a      	ldr	r3, [pc, #40]	; (80018c4 <MX_SPI5_Init+0x64>)
 800189a:	2200      	movs	r2, #0
 800189c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800189e:	4b09      	ldr	r3, [pc, #36]	; (80018c4 <MX_SPI5_Init+0x64>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018a4:	4b07      	ldr	r3, [pc, #28]	; (80018c4 <MX_SPI5_Init+0x64>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80018aa:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <MX_SPI5_Init+0x64>)
 80018ac:	220a      	movs	r2, #10
 80018ae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80018b0:	4804      	ldr	r0, [pc, #16]	; (80018c4 <MX_SPI5_Init+0x64>)
 80018b2:	f005 f97b 	bl	8006bac <HAL_SPI_Init>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80018bc:	f000 fb6a 	bl	8001f94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80018c0:	bf00      	nop
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	200032f0 	.word	0x200032f0
 80018c8:	40015000 	.word	0x40015000

080018cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018d2:	f107 0308 	add.w	r3, r7, #8
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	605a      	str	r2, [r3, #4]
 80018dc:	609a      	str	r2, [r3, #8]
 80018de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018e0:	463b      	mov	r3, r7
 80018e2:	2200      	movs	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]
 80018e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80018e8:	4b20      	ldr	r3, [pc, #128]	; (800196c <MX_TIM1_Init+0xa0>)
 80018ea:	4a21      	ldr	r2, [pc, #132]	; (8001970 <MX_TIM1_Init+0xa4>)
 80018ec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80018ee:	4b1f      	ldr	r3, [pc, #124]	; (800196c <MX_TIM1_Init+0xa0>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018f4:	4b1d      	ldr	r3, [pc, #116]	; (800196c <MX_TIM1_Init+0xa0>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80018fa:	4b1c      	ldr	r3, [pc, #112]	; (800196c <MX_TIM1_Init+0xa0>)
 80018fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001900:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001902:	4b1a      	ldr	r3, [pc, #104]	; (800196c <MX_TIM1_Init+0xa0>)
 8001904:	2200      	movs	r2, #0
 8001906:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001908:	4b18      	ldr	r3, [pc, #96]	; (800196c <MX_TIM1_Init+0xa0>)
 800190a:	2200      	movs	r2, #0
 800190c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800190e:	4b17      	ldr	r3, [pc, #92]	; (800196c <MX_TIM1_Init+0xa0>)
 8001910:	2200      	movs	r2, #0
 8001912:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001914:	4815      	ldr	r0, [pc, #84]	; (800196c <MX_TIM1_Init+0xa0>)
 8001916:	f005 fef1 	bl	80076fc <HAL_TIM_Base_Init>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001920:	f000 fb38 	bl	8001f94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001924:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001928:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800192a:	f107 0308 	add.w	r3, r7, #8
 800192e:	4619      	mov	r1, r3
 8001930:	480e      	ldr	r0, [pc, #56]	; (800196c <MX_TIM1_Init+0xa0>)
 8001932:	f006 fa27 	bl	8007d84 <HAL_TIM_ConfigClockSource>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800193c:	f000 fb2a 	bl	8001f94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001940:	2300      	movs	r3, #0
 8001942:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001944:	2300      	movs	r3, #0
 8001946:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001948:	463b      	mov	r3, r7
 800194a:	4619      	mov	r1, r3
 800194c:	4807      	ldr	r0, [pc, #28]	; (800196c <MX_TIM1_Init+0xa0>)
 800194e:	f006 fe19 	bl	8008584 <HAL_TIMEx_MasterConfigSynchronization>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001958:	f000 fb1c 	bl	8001f94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_Base_MspInit(&htim1);
 800195c:	4803      	ldr	r0, [pc, #12]	; (800196c <MX_TIM1_Init+0xa0>)
 800195e:	f000 fe11 	bl	8002584 <HAL_TIM_Base_MspInit>
  /* USER CODE END TIM1_Init 2 */

}
 8001962:	bf00      	nop
 8001964:	3718      	adds	r7, #24
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	20003348 	.word	0x20003348
 8001970:	40010000 	.word	0x40010000

08001974 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b08e      	sub	sp, #56	; 0x38
 8001978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800197a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800197e:	2200      	movs	r2, #0
 8001980:	601a      	str	r2, [r3, #0]
 8001982:	605a      	str	r2, [r3, #4]
 8001984:	609a      	str	r2, [r3, #8]
 8001986:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001988:	f107 0320 	add.w	r3, r7, #32
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001992:	1d3b      	adds	r3, r7, #4
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	605a      	str	r2, [r3, #4]
 800199a:	609a      	str	r2, [r3, #8]
 800199c:	60da      	str	r2, [r3, #12]
 800199e:	611a      	str	r2, [r3, #16]
 80019a0:	615a      	str	r2, [r3, #20]
 80019a2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019a4:	4b2c      	ldr	r3, [pc, #176]	; (8001a58 <MX_TIM2_Init+0xe4>)
 80019a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019aa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80019ac:	4b2a      	ldr	r3, [pc, #168]	; (8001a58 <MX_TIM2_Init+0xe4>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019b2:	4b29      	ldr	r3, [pc, #164]	; (8001a58 <MX_TIM2_Init+0xe4>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60-1;
 80019b8:	4b27      	ldr	r3, [pc, #156]	; (8001a58 <MX_TIM2_Init+0xe4>)
 80019ba:	223b      	movs	r2, #59	; 0x3b
 80019bc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019be:	4b26      	ldr	r3, [pc, #152]	; (8001a58 <MX_TIM2_Init+0xe4>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019c4:	4b24      	ldr	r3, [pc, #144]	; (8001a58 <MX_TIM2_Init+0xe4>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019ca:	4823      	ldr	r0, [pc, #140]	; (8001a58 <MX_TIM2_Init+0xe4>)
 80019cc:	f005 fe96 	bl	80076fc <HAL_TIM_Base_Init>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80019d6:	f000 fadd 	bl	8001f94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019de:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019e4:	4619      	mov	r1, r3
 80019e6:	481c      	ldr	r0, [pc, #112]	; (8001a58 <MX_TIM2_Init+0xe4>)
 80019e8:	f006 f9cc 	bl	8007d84 <HAL_TIM_ConfigClockSource>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80019f2:	f000 facf 	bl	8001f94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80019f6:	4818      	ldr	r0, [pc, #96]	; (8001a58 <MX_TIM2_Init+0xe4>)
 80019f8:	f005 fecf 	bl	800779a <HAL_TIM_PWM_Init>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001a02:	f000 fac7 	bl	8001f94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a06:	2300      	movs	r3, #0
 8001a08:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a0e:	f107 0320 	add.w	r3, r7, #32
 8001a12:	4619      	mov	r1, r3
 8001a14:	4810      	ldr	r0, [pc, #64]	; (8001a58 <MX_TIM2_Init+0xe4>)
 8001a16:	f006 fdb5 	bl	8008584 <HAL_TIMEx_MasterConfigSynchronization>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001a20:	f000 fab8 	bl	8001f94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a24:	2360      	movs	r3, #96	; 0x60
 8001a26:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a30:	2300      	movs	r3, #0
 8001a32:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a34:	1d3b      	adds	r3, r7, #4
 8001a36:	2200      	movs	r2, #0
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4807      	ldr	r0, [pc, #28]	; (8001a58 <MX_TIM2_Init+0xe4>)
 8001a3c:	f006 f8e0 	bl	8007c00 <HAL_TIM_PWM_ConfigChannel>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8001a46:	f000 faa5 	bl	8001f94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001a4a:	4803      	ldr	r0, [pc, #12]	; (8001a58 <MX_TIM2_Init+0xe4>)
 8001a4c:	f000 fe08 	bl	8002660 <HAL_TIM_MspPostInit>

}
 8001a50:	bf00      	nop
 8001a52:	3738      	adds	r7, #56	; 0x38
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	20003390 	.word	0x20003390

08001a5c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a60:	4b11      	ldr	r3, [pc, #68]	; (8001aa8 <MX_USART1_UART_Init+0x4c>)
 8001a62:	4a12      	ldr	r2, [pc, #72]	; (8001aac <MX_USART1_UART_Init+0x50>)
 8001a64:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a66:	4b10      	ldr	r3, [pc, #64]	; (8001aa8 <MX_USART1_UART_Init+0x4c>)
 8001a68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a6c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a6e:	4b0e      	ldr	r3, [pc, #56]	; (8001aa8 <MX_USART1_UART_Init+0x4c>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a74:	4b0c      	ldr	r3, [pc, #48]	; (8001aa8 <MX_USART1_UART_Init+0x4c>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a7a:	4b0b      	ldr	r3, [pc, #44]	; (8001aa8 <MX_USART1_UART_Init+0x4c>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a80:	4b09      	ldr	r3, [pc, #36]	; (8001aa8 <MX_USART1_UART_Init+0x4c>)
 8001a82:	220c      	movs	r2, #12
 8001a84:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a86:	4b08      	ldr	r3, [pc, #32]	; (8001aa8 <MX_USART1_UART_Init+0x4c>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a8c:	4b06      	ldr	r3, [pc, #24]	; (8001aa8 <MX_USART1_UART_Init+0x4c>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a92:	4805      	ldr	r0, [pc, #20]	; (8001aa8 <MX_USART1_UART_Init+0x4c>)
 8001a94:	f006 fe06 	bl	80086a4 <HAL_UART_Init>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001a9e:	f000 fa79 	bl	8001f94 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20003438 	.word	0x20003438
 8001aac:	40011000 	.word	0x40011000

08001ab0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ab4:	4b11      	ldr	r3, [pc, #68]	; (8001afc <MX_USART2_UART_Init+0x4c>)
 8001ab6:	4a12      	ldr	r2, [pc, #72]	; (8001b00 <MX_USART2_UART_Init+0x50>)
 8001ab8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001aba:	4b10      	ldr	r3, [pc, #64]	; (8001afc <MX_USART2_UART_Init+0x4c>)
 8001abc:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001ac0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ac2:	4b0e      	ldr	r3, [pc, #56]	; (8001afc <MX_USART2_UART_Init+0x4c>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ac8:	4b0c      	ldr	r3, [pc, #48]	; (8001afc <MX_USART2_UART_Init+0x4c>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ace:	4b0b      	ldr	r3, [pc, #44]	; (8001afc <MX_USART2_UART_Init+0x4c>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ad4:	4b09      	ldr	r3, [pc, #36]	; (8001afc <MX_USART2_UART_Init+0x4c>)
 8001ad6:	220c      	movs	r2, #12
 8001ad8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ada:	4b08      	ldr	r3, [pc, #32]	; (8001afc <MX_USART2_UART_Init+0x4c>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ae0:	4b06      	ldr	r3, [pc, #24]	; (8001afc <MX_USART2_UART_Init+0x4c>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ae6:	4805      	ldr	r0, [pc, #20]	; (8001afc <MX_USART2_UART_Init+0x4c>)
 8001ae8:	f006 fddc 	bl	80086a4 <HAL_UART_Init>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001af2:	f000 fa4f 	bl	8001f94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001af6:	bf00      	nop
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	2000347c 	.word	0x2000347c
 8001b00:	40004400 	.word	0x40004400

08001b04 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	607b      	str	r3, [r7, #4]
 8001b0e:	4b0c      	ldr	r3, [pc, #48]	; (8001b40 <MX_DMA_Init+0x3c>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	4a0b      	ldr	r2, [pc, #44]	; (8001b40 <MX_DMA_Init+0x3c>)
 8001b14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b18:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1a:	4b09      	ldr	r3, [pc, #36]	; (8001b40 <MX_DMA_Init+0x3c>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b22:	607b      	str	r3, [r7, #4]
 8001b24:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001b26:	2200      	movs	r2, #0
 8001b28:	2100      	movs	r1, #0
 8001b2a:	2010      	movs	r0, #16
 8001b2c:	f001 f899 	bl	8002c62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001b30:	2010      	movs	r0, #16
 8001b32:	f001 f8b2 	bl	8002c9a <HAL_NVIC_EnableIRQ>

}
 8001b36:	bf00      	nop
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	40023800 	.word	0x40023800

08001b44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b08e      	sub	sp, #56	; 0x38
 8001b48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b4e:	2200      	movs	r2, #0
 8001b50:	601a      	str	r2, [r3, #0]
 8001b52:	605a      	str	r2, [r3, #4]
 8001b54:	609a      	str	r2, [r3, #8]
 8001b56:	60da      	str	r2, [r3, #12]
 8001b58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	623b      	str	r3, [r7, #32]
 8001b5e:	4bb2      	ldr	r3, [pc, #712]	; (8001e28 <MX_GPIO_Init+0x2e4>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	4ab1      	ldr	r2, [pc, #708]	; (8001e28 <MX_GPIO_Init+0x2e4>)
 8001b64:	f043 0304 	orr.w	r3, r3, #4
 8001b68:	6313      	str	r3, [r2, #48]	; 0x30
 8001b6a:	4baf      	ldr	r3, [pc, #700]	; (8001e28 <MX_GPIO_Init+0x2e4>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	f003 0304 	and.w	r3, r3, #4
 8001b72:	623b      	str	r3, [r7, #32]
 8001b74:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b76:	2300      	movs	r3, #0
 8001b78:	61fb      	str	r3, [r7, #28]
 8001b7a:	4bab      	ldr	r3, [pc, #684]	; (8001e28 <MX_GPIO_Init+0x2e4>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7e:	4aaa      	ldr	r2, [pc, #680]	; (8001e28 <MX_GPIO_Init+0x2e4>)
 8001b80:	f043 0320 	orr.w	r3, r3, #32
 8001b84:	6313      	str	r3, [r2, #48]	; 0x30
 8001b86:	4ba8      	ldr	r3, [pc, #672]	; (8001e28 <MX_GPIO_Init+0x2e4>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8a:	f003 0320 	and.w	r3, r3, #32
 8001b8e:	61fb      	str	r3, [r7, #28]
 8001b90:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b92:	2300      	movs	r3, #0
 8001b94:	61bb      	str	r3, [r7, #24]
 8001b96:	4ba4      	ldr	r3, [pc, #656]	; (8001e28 <MX_GPIO_Init+0x2e4>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	4aa3      	ldr	r2, [pc, #652]	; (8001e28 <MX_GPIO_Init+0x2e4>)
 8001b9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ba2:	4ba1      	ldr	r3, [pc, #644]	; (8001e28 <MX_GPIO_Init+0x2e4>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001baa:	61bb      	str	r3, [r7, #24]
 8001bac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bae:	2300      	movs	r3, #0
 8001bb0:	617b      	str	r3, [r7, #20]
 8001bb2:	4b9d      	ldr	r3, [pc, #628]	; (8001e28 <MX_GPIO_Init+0x2e4>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb6:	4a9c      	ldr	r2, [pc, #624]	; (8001e28 <MX_GPIO_Init+0x2e4>)
 8001bb8:	f043 0301 	orr.w	r3, r3, #1
 8001bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bbe:	4b9a      	ldr	r3, [pc, #616]	; (8001e28 <MX_GPIO_Init+0x2e4>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc2:	f003 0301 	and.w	r3, r3, #1
 8001bc6:	617b      	str	r3, [r7, #20]
 8001bc8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bca:	2300      	movs	r3, #0
 8001bcc:	613b      	str	r3, [r7, #16]
 8001bce:	4b96      	ldr	r3, [pc, #600]	; (8001e28 <MX_GPIO_Init+0x2e4>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd2:	4a95      	ldr	r2, [pc, #596]	; (8001e28 <MX_GPIO_Init+0x2e4>)
 8001bd4:	f043 0302 	orr.w	r3, r3, #2
 8001bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bda:	4b93      	ldr	r3, [pc, #588]	; (8001e28 <MX_GPIO_Init+0x2e4>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	613b      	str	r3, [r7, #16]
 8001be4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001be6:	2300      	movs	r3, #0
 8001be8:	60fb      	str	r3, [r7, #12]
 8001bea:	4b8f      	ldr	r3, [pc, #572]	; (8001e28 <MX_GPIO_Init+0x2e4>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bee:	4a8e      	ldr	r2, [pc, #568]	; (8001e28 <MX_GPIO_Init+0x2e4>)
 8001bf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf6:	4b8c      	ldr	r3, [pc, #560]	; (8001e28 <MX_GPIO_Init+0x2e4>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bfe:	60fb      	str	r3, [r7, #12]
 8001c00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	60bb      	str	r3, [r7, #8]
 8001c06:	4b88      	ldr	r3, [pc, #544]	; (8001e28 <MX_GPIO_Init+0x2e4>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0a:	4a87      	ldr	r2, [pc, #540]	; (8001e28 <MX_GPIO_Init+0x2e4>)
 8001c0c:	f043 0310 	orr.w	r3, r3, #16
 8001c10:	6313      	str	r3, [r2, #48]	; 0x30
 8001c12:	4b85      	ldr	r3, [pc, #532]	; (8001e28 <MX_GPIO_Init+0x2e4>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c16:	f003 0310 	and.w	r3, r3, #16
 8001c1a:	60bb      	str	r3, [r7, #8]
 8001c1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c1e:	2300      	movs	r3, #0
 8001c20:	607b      	str	r3, [r7, #4]
 8001c22:	4b81      	ldr	r3, [pc, #516]	; (8001e28 <MX_GPIO_Init+0x2e4>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c26:	4a80      	ldr	r2, [pc, #512]	; (8001e28 <MX_GPIO_Init+0x2e4>)
 8001c28:	f043 0308 	orr.w	r3, r3, #8
 8001c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c2e:	4b7e      	ldr	r3, [pc, #504]	; (8001e28 <MX_GPIO_Init+0x2e4>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c32:	f003 0308 	and.w	r3, r3, #8
 8001c36:	607b      	str	r3, [r7, #4]
 8001c38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	2116      	movs	r1, #22
 8001c3e:	487b      	ldr	r0, [pc, #492]	; (8001e2c <MX_GPIO_Init+0x2e8>)
 8001c40:	f001 fda2 	bl	8003788 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8001c44:	2200      	movs	r2, #0
 8001c46:	2180      	movs	r1, #128	; 0x80
 8001c48:	4879      	ldr	r0, [pc, #484]	; (8001e30 <MX_GPIO_Init+0x2ec>)
 8001c4a:	f001 fd9d 	bl	8003788 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin|GPIO_PIN_2, GPIO_PIN_RESET);
 8001c4e:	2200      	movs	r2, #0
 8001c50:	f243 0104 	movw	r1, #12292	; 0x3004
 8001c54:	4877      	ldr	r0, [pc, #476]	; (8001e34 <MX_GPIO_Init+0x2f0>)
 8001c56:	f001 fd97 	bl	8003788 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001c60:	4875      	ldr	r0, [pc, #468]	; (8001e38 <MX_GPIO_Init+0x2f4>)
 8001c62:	f001 fd91 	bl	8003788 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A3_Pin A4_Pin A5_Pin SDNRAS_Pin
                           A6_Pin A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A3_Pin|A4_Pin|A5_Pin|SDNRAS_Pin
 8001c66:	f64f 0338 	movw	r3, #63544	; 0xf838
 8001c6a:	627b      	str	r3, [r7, #36]	; 0x24
                          |A6_Pin|A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c70:	2300      	movs	r3, #0
 8001c72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c74:	2303      	movs	r3, #3
 8001c76:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001c78:	230c      	movs	r3, #12
 8001c7a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c80:	4619      	mov	r1, r3
 8001c82:	486e      	ldr	r0, [pc, #440]	; (8001e3c <MX_GPIO_Init+0x2f8>)
 8001c84:	f001 fbbc 	bl	8003400 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 8001c88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8e:	2302      	movs	r3, #2
 8001c90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c92:	2300      	movs	r3, #0
 8001c94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c96:	2300      	movs	r3, #0
 8001c98:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001c9a:	230e      	movs	r3, #14
 8001c9c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001c9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4865      	ldr	r0, [pc, #404]	; (8001e3c <MX_GPIO_Init+0x2f8>)
 8001ca6:	f001 fbab 	bl	8003400 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001caa:	2301      	movs	r3, #1
 8001cac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cae:	2302      	movs	r3, #2
 8001cb0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001cba:	230c      	movs	r3, #12
 8001cbc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001cbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4859      	ldr	r0, [pc, #356]	; (8001e2c <MX_GPIO_Init+0x2e8>)
 8001cc6:	f001 fb9b 	bl	8003400 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8001cca:	2316      	movs	r3, #22
 8001ccc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4852      	ldr	r0, [pc, #328]	; (8001e2c <MX_GPIO_Init+0x2e8>)
 8001ce2:	f001 fb8d 	bl	8003400 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001cea:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001cee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001cf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	484d      	ldr	r0, [pc, #308]	; (8001e30 <MX_GPIO_Init+0x2ec>)
 8001cfc:	f001 fb80 	bl	8003400 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin;
 8001d00:	2306      	movs	r3, #6
 8001d02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001d04:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001d08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d12:	4619      	mov	r1, r3
 8001d14:	4846      	ldr	r0, [pc, #280]	; (8001e30 <MX_GPIO_Init+0x2ec>)
 8001d16:	f001 fb73 	bl	8003400 <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin
                           R5_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001d1a:	f641 0358 	movw	r3, #6232	; 0x1858
 8001d1e:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d20:	2302      	movs	r3, #2
 8001d22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d24:	2300      	movs	r3, #0
 8001d26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001d2c:	230e      	movs	r3, #14
 8001d2e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d34:	4619      	mov	r1, r3
 8001d36:	483e      	ldr	r0, [pc, #248]	; (8001e30 <MX_GPIO_Init+0x2ec>)
 8001d38:	f001 fb62 	bl	8003400 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8001d3c:	2380      	movs	r3, #128	; 0x80
 8001d3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d40:	2301      	movs	r3, #1
 8001d42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d44:	2300      	movs	r3, #0
 8001d46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8001d4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d50:	4619      	mov	r1, r3
 8001d52:	4837      	ldr	r0, [pc, #220]	; (8001e30 <MX_GPIO_Init+0x2ec>)
 8001d54:	f001 fb54 	bl	8003400 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8001d58:	2320      	movs	r3, #32
 8001d5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001d5c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001d60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d62:	2300      	movs	r3, #0
 8001d64:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8001d66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	482f      	ldr	r0, [pc, #188]	; (8001e2c <MX_GPIO_Init+0x2e8>)
 8001d6e:	f001 fb47 	bl	8003400 <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001d72:	2303      	movs	r3, #3
 8001d74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d76:	2302      	movs	r3, #2
 8001d78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001d82:	2309      	movs	r3, #9
 8001d84:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	482c      	ldr	r0, [pc, #176]	; (8001e40 <MX_GPIO_Init+0x2fc>)
 8001d8e:	f001 fb37 	bl	8003400 <HAL_GPIO_Init>

  /*Configure GPIO pins : BOOT1_Pin test_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin|test_Pin;
 8001d92:	2384      	movs	r3, #132	; 0x84
 8001d94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d96:	2300      	movs	r3, #0
 8001d98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001da2:	4619      	mov	r1, r3
 8001da4:	4826      	ldr	r0, [pc, #152]	; (8001e40 <MX_GPIO_Init+0x2fc>)
 8001da6:	f001 fb2b 	bl	8003400 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001daa:	f248 1333 	movw	r3, #33075	; 0x8133
 8001dae:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db0:	2302      	movs	r3, #2
 8001db2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db4:	2300      	movs	r3, #0
 8001db6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db8:	2303      	movs	r3, #3
 8001dba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001dbc:	230c      	movs	r3, #12
 8001dbe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001dc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	481c      	ldr	r0, [pc, #112]	; (8001e38 <MX_GPIO_Init+0x2f4>)
 8001dc8:	f001 fb1a 	bl	8003400 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001dcc:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001dd0:	627b      	str	r3, [r7, #36]	; 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001dde:	230c      	movs	r3, #12
 8001de0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001de2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001de6:	4619      	mov	r1, r3
 8001de8:	4816      	ldr	r0, [pc, #88]	; (8001e44 <MX_GPIO_Init+0x300>)
 8001dea:	f001 fb09 	bl	8003400 <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001dee:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001df2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df4:	2302      	movs	r3, #2
 8001df6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e00:	230e      	movs	r3, #14
 8001e02:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e08:	4619      	mov	r1, r3
 8001e0a:	480d      	ldr	r0, [pc, #52]	; (8001e40 <MX_GPIO_Init+0x2fc>)
 8001e0c:	f001 faf8 	bl	8003400 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8001e10:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001e14:	627b      	str	r3, [r7, #36]	; 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e16:	2302      	movs	r3, #2
 8001e18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001e22:	230c      	movs	r3, #12
 8001e24:	e010      	b.n	8001e48 <MX_GPIO_Init+0x304>
 8001e26:	bf00      	nop
 8001e28:	40023800 	.word	0x40023800
 8001e2c:	40020800 	.word	0x40020800
 8001e30:	40020000 	.word	0x40020000
 8001e34:	40020c00 	.word	0x40020c00
 8001e38:	40021800 	.word	0x40021800
 8001e3c:	40021400 	.word	0x40021400
 8001e40:	40020400 	.word	0x40020400
 8001e44:	40021000 	.word	0x40021000
 8001e48:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e4e:	4619      	mov	r1, r3
 8001e50:	484c      	ldr	r0, [pc, #304]	; (8001f84 <MX_GPIO_Init+0x440>)
 8001e52:	f001 fad5 	bl	8003400 <HAL_GPIO_Init>

  /*Configure GPIO pins : TE_Pin PWM_DEBUG_Pin */
  GPIO_InitStruct.Pin = TE_Pin|PWM_DEBUG_Pin;
 8001e56:	f44f 6301 	mov.w	r3, #2064	; 0x810
 8001e5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e60:	2300      	movs	r3, #0
 8001e62:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e68:	4619      	mov	r1, r3
 8001e6a:	4846      	ldr	r0, [pc, #280]	; (8001f84 <MX_GPIO_Init+0x440>)
 8001e6c:	f001 fac8 	bl	8003400 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin PD2 */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin|GPIO_PIN_2;
 8001e70:	f243 0304 	movw	r3, #12292	; 0x3004
 8001e74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e76:	2301      	movs	r3, #1
 8001e78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e86:	4619      	mov	r1, r3
 8001e88:	483e      	ldr	r0, [pc, #248]	; (8001f84 <MX_GPIO_Init+0x440>)
 8001e8a:	f001 fab9 	bl	8003400 <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001e8e:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001e92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e94:	2302      	movs	r3, #2
 8001e96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001ea0:	230e      	movs	r3, #14
 8001ea2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ea4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	4837      	ldr	r0, [pc, #220]	; (8001f88 <MX_GPIO_Init+0x444>)
 8001eac:	f001 faa8 	bl	8003400 <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin;
 8001eb0:	23c0      	movs	r3, #192	; 0xc0
 8001eb2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001ec0:	230e      	movs	r3, #14
 8001ec2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ec4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ec8:	4619      	mov	r1, r3
 8001eca:	4830      	ldr	r0, [pc, #192]	; (8001f8c <MX_GPIO_Init+0x448>)
 8001ecc:	f001 fa98 	bl	8003400 <HAL_GPIO_Init>

  /*Configure GPIO pin : G7_Pin */
  GPIO_InitStruct.Pin = G7_Pin;
 8001ed0:	2308      	movs	r3, #8
 8001ed2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001edc:	2300      	movs	r3, #0
 8001ede:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001ee0:	230e      	movs	r3, #14
 8001ee2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(G7_GPIO_Port, &GPIO_InitStruct);
 8001ee4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ee8:	4619      	mov	r1, r3
 8001eea:	4826      	ldr	r0, [pc, #152]	; (8001f84 <MX_GPIO_Init+0x440>)
 8001eec:	f001 fa88 	bl	8003400 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ef0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ef4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efa:	2300      	movs	r3, #0
 8001efc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001efe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f02:	4619      	mov	r1, r3
 8001f04:	4820      	ldr	r0, [pc, #128]	; (8001f88 <MX_GPIO_Init+0x444>)
 8001f06:	f001 fa7b 	bl	8003400 <HAL_GPIO_Init>

  /*Configure GPIO pins : G3_Pin B4_Pin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001f0a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001f0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f10:	2302      	movs	r3, #2
 8001f12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f14:	2300      	movs	r3, #0
 8001f16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001f1c:	2309      	movs	r3, #9
 8001f1e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f24:	4619      	mov	r1, r3
 8001f26:	4818      	ldr	r0, [pc, #96]	; (8001f88 <MX_GPIO_Init+0x444>)
 8001f28:	f001 fa6a 	bl	8003400 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8001f2c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001f30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f32:	2301      	movs	r3, #1
 8001f34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f36:	2300      	movs	r3, #0
 8001f38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f42:	4619      	mov	r1, r3
 8001f44:	4810      	ldr	r0, [pc, #64]	; (8001f88 <MX_GPIO_Init+0x444>)
 8001f46:	f001 fa5b 	bl	8003400 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001f4a:	2360      	movs	r3, #96	; 0x60
 8001f4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4e:	2302      	movs	r3, #2
 8001f50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f52:	2300      	movs	r3, #0
 8001f54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f56:	2303      	movs	r3, #3
 8001f58:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f5a:	230c      	movs	r3, #12
 8001f5c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f62:	4619      	mov	r1, r3
 8001f64:	480a      	ldr	r0, [pc, #40]	; (8001f90 <MX_GPIO_Init+0x44c>)
 8001f66:	f001 fa4b 	bl	8003400 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	2006      	movs	r0, #6
 8001f70:	f000 fe77 	bl	8002c62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001f74:	2006      	movs	r0, #6
 8001f76:	f000 fe90 	bl	8002c9a <HAL_NVIC_EnableIRQ>

}
 8001f7a:	bf00      	nop
 8001f7c:	3738      	adds	r7, #56	; 0x38
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	40020c00 	.word	0x40020c00
 8001f88:	40021800 	.word	0x40021800
 8001f8c:	40020800 	.word	0x40020800
 8001f90:	40020400 	.word	0x40020400

08001f94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f98:	b672      	cpsid	i
}
 8001f9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f9c:	e7fe      	b.n	8001f9c <Error_Handler+0x8>
	...

08001fa0 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8001fa8:	4a07      	ldr	r2, [pc, #28]	; (8001fc8 <RetargetInit+0x28>)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8001fae:	4b07      	ldr	r3, [pc, #28]	; (8001fcc <RetargetInit+0x2c>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	6898      	ldr	r0, [r3, #8]
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	2202      	movs	r2, #2
 8001fb8:	2100      	movs	r1, #0
 8001fba:	f00c fa7d 	bl	800e4b8 <setvbuf>
}
 8001fbe:	bf00      	nop
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	200034c0 	.word	0x200034c0
 8001fcc:	200000f4 	.word	0x200000f4

08001fd0 <_isatty>:

int _isatty(int fd) {
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	db04      	blt.n	8001fe8 <_isatty+0x18>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	dc01      	bgt.n	8001fe8 <_isatty+0x18>
    return 1;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e005      	b.n	8001ff4 <_isatty+0x24>

  errno = EBADF;
 8001fe8:	f00c f90e 	bl	800e208 <__errno>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2209      	movs	r2, #9
 8001ff0:	601a      	str	r2, [r3, #0]
  return 0;
 8001ff2:	2300      	movs	r3, #0
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3708      	adds	r7, #8
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <_write>:

int _write(int fd, char* ptr, int len) {
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b086      	sub	sp, #24
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d002      	beq.n	8002014 <_write+0x18>
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2b02      	cmp	r3, #2
 8002012:	d111      	bne.n	8002038 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8002014:	4b0e      	ldr	r3, [pc, #56]	; (8002050 <_write+0x54>)
 8002016:	6818      	ldr	r0, [r3, #0]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	b29a      	uxth	r2, r3
 800201c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002020:	68b9      	ldr	r1, [r7, #8]
 8002022:	f006 fb8c 	bl	800873e <HAL_UART_Transmit>
 8002026:	4603      	mov	r3, r0
 8002028:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800202a:	7dfb      	ldrb	r3, [r7, #23]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d101      	bne.n	8002034 <_write+0x38>
      return len;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	e008      	b.n	8002046 <_write+0x4a>
    else
      return EIO;
 8002034:	2305      	movs	r3, #5
 8002036:	e006      	b.n	8002046 <_write+0x4a>
  }
  errno = EBADF;
 8002038:	f00c f8e6 	bl	800e208 <__errno>
 800203c:	4603      	mov	r3, r0
 800203e:	2209      	movs	r2, #9
 8002040:	601a      	str	r2, [r3, #0]
  return -1;
 8002042:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002046:	4618      	mov	r0, r3
 8002048:	3718      	adds	r7, #24
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	200034c0 	.word	0x200034c0

08002054 <_close>:

int _close(int fd) {
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	db04      	blt.n	800206c <_close+0x18>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2b02      	cmp	r3, #2
 8002066:	dc01      	bgt.n	800206c <_close+0x18>
    return 0;
 8002068:	2300      	movs	r3, #0
 800206a:	e006      	b.n	800207a <_close+0x26>

  errno = EBADF;
 800206c:	f00c f8cc 	bl	800e208 <__errno>
 8002070:	4603      	mov	r3, r0
 8002072:	2209      	movs	r2, #9
 8002074:	601a      	str	r2, [r3, #0]
  return -1;
 8002076:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800207a:	4618      	mov	r0, r3
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8002082:	b580      	push	{r7, lr}
 8002084:	b084      	sub	sp, #16
 8002086:	af00      	add	r7, sp, #0
 8002088:	60f8      	str	r0, [r7, #12]
 800208a:	60b9      	str	r1, [r7, #8]
 800208c:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 800208e:	f00c f8bb 	bl	800e208 <__errno>
 8002092:	4603      	mov	r3, r0
 8002094:	2209      	movs	r2, #9
 8002096:	601a      	str	r2, [r3, #0]
  return -1;
 8002098:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800209c:	4618      	mov	r0, r3
 800209e:	3710      	adds	r7, #16
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <_read>:

int _read(int fd, char* ptr, int len) {
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b086      	sub	sp, #24
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	60b9      	str	r1, [r7, #8]
 80020ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d110      	bne.n	80020d8 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 80020b6:	4b0e      	ldr	r3, [pc, #56]	; (80020f0 <_read+0x4c>)
 80020b8:	6818      	ldr	r0, [r3, #0]
 80020ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020be:	2201      	movs	r2, #1
 80020c0:	68b9      	ldr	r1, [r7, #8]
 80020c2:	f006 fbce 	bl	8008862 <HAL_UART_Receive>
 80020c6:	4603      	mov	r3, r0
 80020c8:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80020ca:	7dfb      	ldrb	r3, [r7, #23]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d101      	bne.n	80020d4 <_read+0x30>
      return 1;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e008      	b.n	80020e6 <_read+0x42>
    else
      return EIO;
 80020d4:	2305      	movs	r3, #5
 80020d6:	e006      	b.n	80020e6 <_read+0x42>
  }
  errno = EBADF;
 80020d8:	f00c f896 	bl	800e208 <__errno>
 80020dc:	4603      	mov	r3, r0
 80020de:	2209      	movs	r2, #9
 80020e0:	601a      	str	r2, [r3, #0]
  return -1;
 80020e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3718      	adds	r7, #24
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	200034c0 	.word	0x200034c0

080020f4 <_fstat>:

int _fstat(int fd, struct stat* st) {
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2b00      	cmp	r3, #0
 8002102:	db08      	blt.n	8002116 <_fstat+0x22>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2b02      	cmp	r3, #2
 8002108:	dc05      	bgt.n	8002116 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002110:	605a      	str	r2, [r3, #4]
    return 0;
 8002112:	2300      	movs	r3, #0
 8002114:	e005      	b.n	8002122 <_fstat+0x2e>
  }

  errno = EBADF;
 8002116:	f00c f877 	bl	800e208 <__errno>
 800211a:	4603      	mov	r3, r0
 800211c:	2209      	movs	r2, #9
 800211e:	601a      	str	r2, [r3, #0]
  return 0;
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
	...

0800212c <HAL_TIM_PWM_PulseFinishedCallback>:
    for(uint8_t i = 0; i < WR_BUF_LEN / 2; ++i) wr_buf[i] = 0;
    wr_buf_p++;
  }
}

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  // DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
  if(wr_buf_p < NUM_PIXELS) {
 8002134:	4b3c      	ldr	r3, [pc, #240]	; (8002228 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2b05      	cmp	r3, #5
 800213a:	d852      	bhi.n	80021e2 <HAL_TIM_PWM_PulseFinishedCallback+0xb6>
      wr_buf[i + 40] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 1] << i) & 0x80) > 0);
      wr_buf[i + 48] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 2] << i) & 0x80) > 0);
      wr_buf[i + 56] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 3] << i) & 0x80) > 0);
    }
#else // WS2812B
    for(uint_fast8_t i = 0; i < NUM_PIXELS; ++i) {
 800213c:	2300      	movs	r3, #0
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	e046      	b.n	80021d0 <HAL_TIM_PWM_PulseFinishedCallback+0xa4>
      wr_buf[i + 24] = PWM_LO << (((rgb_arr[3 * wr_buf_p    ] << i) & 0x80) > 0);
 8002142:	4b39      	ldr	r3, [pc, #228]	; (8002228 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	4613      	mov	r3, r2
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	4413      	add	r3, r2
 800214c:	4a37      	ldr	r2, [pc, #220]	; (800222c <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 800214e:	5cd3      	ldrb	r3, [r2, r3]
 8002150:	461a      	mov	r2, r3
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800215c:	2b00      	cmp	r3, #0
 800215e:	dd01      	ble.n	8002164 <HAL_TIM_PWM_PulseFinishedCallback+0x38>
 8002160:	2126      	movs	r1, #38	; 0x26
 8002162:	e000      	b.n	8002166 <HAL_TIM_PWM_PulseFinishedCallback+0x3a>
 8002164:	2113      	movs	r1, #19
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	3318      	adds	r3, #24
 800216a:	4a31      	ldr	r2, [pc, #196]	; (8002230 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 800216c:	54d1      	strb	r1, [r2, r3]
      wr_buf[i + 32] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 1] << i) & 0x80) > 0);
 800216e:	4b2e      	ldr	r3, [pc, #184]	; (8002228 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	4613      	mov	r3, r2
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	4413      	add	r3, r2
 8002178:	3301      	adds	r3, #1
 800217a:	4a2c      	ldr	r2, [pc, #176]	; (800222c <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 800217c:	5cd3      	ldrb	r3, [r2, r3]
 800217e:	461a      	mov	r2, r3
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	fa02 f303 	lsl.w	r3, r2, r3
 8002186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800218a:	2b00      	cmp	r3, #0
 800218c:	dd01      	ble.n	8002192 <HAL_TIM_PWM_PulseFinishedCallback+0x66>
 800218e:	2126      	movs	r1, #38	; 0x26
 8002190:	e000      	b.n	8002194 <HAL_TIM_PWM_PulseFinishedCallback+0x68>
 8002192:	2113      	movs	r1, #19
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	3320      	adds	r3, #32
 8002198:	4a25      	ldr	r2, [pc, #148]	; (8002230 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 800219a:	54d1      	strb	r1, [r2, r3]
      wr_buf[i + 40] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 2] << i) & 0x80) > 0);
 800219c:	4b22      	ldr	r3, [pc, #136]	; (8002228 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	4613      	mov	r3, r2
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	4413      	add	r3, r2
 80021a6:	3302      	adds	r3, #2
 80021a8:	4a20      	ldr	r2, [pc, #128]	; (800222c <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 80021aa:	5cd3      	ldrb	r3, [r2, r3]
 80021ac:	461a      	mov	r2, r3
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	dd01      	ble.n	80021c0 <HAL_TIM_PWM_PulseFinishedCallback+0x94>
 80021bc:	2126      	movs	r1, #38	; 0x26
 80021be:	e000      	b.n	80021c2 <HAL_TIM_PWM_PulseFinishedCallback+0x96>
 80021c0:	2113      	movs	r1, #19
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	3328      	adds	r3, #40	; 0x28
 80021c6:	4a1a      	ldr	r2, [pc, #104]	; (8002230 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 80021c8:	54d1      	strb	r1, [r2, r3]
    for(uint_fast8_t i = 0; i < NUM_PIXELS; ++i) {
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	3301      	adds	r3, #1
 80021ce:	60fb      	str	r3, [r7, #12]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2b05      	cmp	r3, #5
 80021d4:	d9b5      	bls.n	8002142 <HAL_TIM_PWM_PulseFinishedCallback+0x16>
    }
#endif // End SK6812 WS2812B case differentiation
    wr_buf_p++;
 80021d6:	4b14      	ldr	r3, [pc, #80]	; (8002228 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	3301      	adds	r3, #1
 80021dc:	4a12      	ldr	r2, [pc, #72]	; (8002228 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 80021de:	6013      	str	r3, [r2, #0]
  } else {
    // We're done. Lean back and until next time!
    wr_buf_p = 0;
    HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_1);
  }
}
 80021e0:	e01d      	b.n	800221e <HAL_TIM_PWM_PulseFinishedCallback+0xf2>
  } else if (wr_buf_p < NUM_PIXELS + 2) {
 80021e2:	4b11      	ldr	r3, [pc, #68]	; (8002228 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2b07      	cmp	r3, #7
 80021e8:	d812      	bhi.n	8002210 <HAL_TIM_PWM_PulseFinishedCallback+0xe4>
    for(uint8_t i = WR_BUF_LEN / 2; i < WR_BUF_LEN; ++i) wr_buf[i] = 0;
 80021ea:	2318      	movs	r3, #24
 80021ec:	72fb      	strb	r3, [r7, #11]
 80021ee:	e006      	b.n	80021fe <HAL_TIM_PWM_PulseFinishedCallback+0xd2>
 80021f0:	7afb      	ldrb	r3, [r7, #11]
 80021f2:	4a0f      	ldr	r2, [pc, #60]	; (8002230 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 80021f4:	2100      	movs	r1, #0
 80021f6:	54d1      	strb	r1, [r2, r3]
 80021f8:	7afb      	ldrb	r3, [r7, #11]
 80021fa:	3301      	adds	r3, #1
 80021fc:	72fb      	strb	r3, [r7, #11]
 80021fe:	7afb      	ldrb	r3, [r7, #11]
 8002200:	2b2f      	cmp	r3, #47	; 0x2f
 8002202:	d9f5      	bls.n	80021f0 <HAL_TIM_PWM_PulseFinishedCallback+0xc4>
    ++wr_buf_p;
 8002204:	4b08      	ldr	r3, [pc, #32]	; (8002228 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	3301      	adds	r3, #1
 800220a:	4a07      	ldr	r2, [pc, #28]	; (8002228 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 800220c:	6013      	str	r3, [r2, #0]
}
 800220e:	e006      	b.n	800221e <HAL_TIM_PWM_PulseFinishedCallback+0xf2>
    wr_buf_p = 0;
 8002210:	4b05      	ldr	r3, [pc, #20]	; (8002228 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8002212:	2200      	movs	r2, #0
 8002214:	601a      	str	r2, [r3, #0]
    HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_1);
 8002216:	2100      	movs	r1, #0
 8002218:	4806      	ldr	r0, [pc, #24]	; (8002234 <HAL_TIM_PWM_PulseFinishedCallback+0x108>)
 800221a:	f005 fb17 	bl	800784c <HAL_TIM_PWM_Stop_DMA>
}
 800221e:	bf00      	nop
 8002220:	3710      	adds	r7, #16
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	20003508 	.word	0x20003508
 800222c:	200034c4 	.word	0x200034c4
 8002230:	200034d8 	.word	0x200034d8
 8002234:	20003390 	.word	0x20003390

08002238 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800223e:	2300      	movs	r3, #0
 8002240:	607b      	str	r3, [r7, #4]
 8002242:	4b17      	ldr	r3, [pc, #92]	; (80022a0 <HAL_MspInit+0x68>)
 8002244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002246:	4a16      	ldr	r2, [pc, #88]	; (80022a0 <HAL_MspInit+0x68>)
 8002248:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800224c:	6453      	str	r3, [r2, #68]	; 0x44
 800224e:	4b14      	ldr	r3, [pc, #80]	; (80022a0 <HAL_MspInit+0x68>)
 8002250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002252:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002256:	607b      	str	r3, [r7, #4]
 8002258:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800225a:	2300      	movs	r3, #0
 800225c:	603b      	str	r3, [r7, #0]
 800225e:	4b10      	ldr	r3, [pc, #64]	; (80022a0 <HAL_MspInit+0x68>)
 8002260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002262:	4a0f      	ldr	r2, [pc, #60]	; (80022a0 <HAL_MspInit+0x68>)
 8002264:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002268:	6413      	str	r3, [r2, #64]	; 0x40
 800226a:	4b0d      	ldr	r3, [pc, #52]	; (80022a0 <HAL_MspInit+0x68>)
 800226c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002272:	603b      	str	r3, [r7, #0]
 8002274:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8002276:	2200      	movs	r2, #0
 8002278:	2100      	movs	r1, #0
 800227a:	2005      	movs	r0, #5
 800227c:	f000 fcf1 	bl	8002c62 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002280:	2005      	movs	r0, #5
 8002282:	f000 fd0a 	bl	8002c9a <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8002286:	2200      	movs	r2, #0
 8002288:	2100      	movs	r1, #0
 800228a:	2005      	movs	r0, #5
 800228c:	f000 fce9 	bl	8002c62 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002290:	2005      	movs	r0, #5
 8002292:	f000 fd02 	bl	8002c9a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002296:	bf00      	nop
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	40023800 	.word	0x40023800

080022a4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a0b      	ldr	r2, [pc, #44]	; (80022e0 <HAL_CRC_MspInit+0x3c>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d10d      	bne.n	80022d2 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80022b6:	2300      	movs	r3, #0
 80022b8:	60fb      	str	r3, [r7, #12]
 80022ba:	4b0a      	ldr	r3, [pc, #40]	; (80022e4 <HAL_CRC_MspInit+0x40>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	4a09      	ldr	r2, [pc, #36]	; (80022e4 <HAL_CRC_MspInit+0x40>)
 80022c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80022c4:	6313      	str	r3, [r2, #48]	; 0x30
 80022c6:	4b07      	ldr	r3, [pc, #28]	; (80022e4 <HAL_CRC_MspInit+0x40>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022ce:	60fb      	str	r3, [r7, #12]
 80022d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80022d2:	bf00      	nop
 80022d4:	3714      	adds	r7, #20
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	40023000 	.word	0x40023000
 80022e4:	40023800 	.word	0x40023800

080022e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b08e      	sub	sp, #56	; 0x38
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022f4:	2200      	movs	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]
 80022f8:	605a      	str	r2, [r3, #4]
 80022fa:	609a      	str	r2, [r3, #8]
 80022fc:	60da      	str	r2, [r3, #12]
 80022fe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a49      	ldr	r2, [pc, #292]	; (800242c <HAL_I2C_MspInit+0x144>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d13a      	bne.n	8002380 <HAL_I2C_MspInit+0x98>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */
	  __HAL_RCC_I2C2_CLK_ENABLE();
 800230a:	2300      	movs	r3, #0
 800230c:	623b      	str	r3, [r7, #32]
 800230e:	4b48      	ldr	r3, [pc, #288]	; (8002430 <HAL_I2C_MspInit+0x148>)
 8002310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002312:	4a47      	ldr	r2, [pc, #284]	; (8002430 <HAL_I2C_MspInit+0x148>)
 8002314:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002318:	6413      	str	r3, [r2, #64]	; 0x40
 800231a:	4b45      	ldr	r3, [pc, #276]	; (8002430 <HAL_I2C_MspInit+0x148>)
 800231c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002322:	623b      	str	r3, [r7, #32]
 8002324:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002326:	2300      	movs	r3, #0
 8002328:	61fb      	str	r3, [r7, #28]
 800232a:	4b41      	ldr	r3, [pc, #260]	; (8002430 <HAL_I2C_MspInit+0x148>)
 800232c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232e:	4a40      	ldr	r2, [pc, #256]	; (8002430 <HAL_I2C_MspInit+0x148>)
 8002330:	f043 0320 	orr.w	r3, r3, #32
 8002334:	6313      	str	r3, [r2, #48]	; 0x30
 8002336:	4b3e      	ldr	r3, [pc, #248]	; (8002430 <HAL_I2C_MspInit+0x148>)
 8002338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233a:	f003 0320 	and.w	r3, r3, #32
 800233e:	61fb      	str	r3, [r7, #28]
 8002340:	69fb      	ldr	r3, [r7, #28]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002342:	2303      	movs	r3, #3
 8002344:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002346:	2312      	movs	r3, #18
 8002348:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234a:	2300      	movs	r3, #0
 800234c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800234e:	2303      	movs	r3, #3
 8002350:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002352:	2304      	movs	r3, #4
 8002354:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002356:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800235a:	4619      	mov	r1, r3
 800235c:	4835      	ldr	r0, [pc, #212]	; (8002434 <HAL_I2C_MspInit+0x14c>)
 800235e:	f001 f84f 	bl	8003400 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002362:	2300      	movs	r3, #0
 8002364:	61bb      	str	r3, [r7, #24]
 8002366:	4b32      	ldr	r3, [pc, #200]	; (8002430 <HAL_I2C_MspInit+0x148>)
 8002368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236a:	4a31      	ldr	r2, [pc, #196]	; (8002430 <HAL_I2C_MspInit+0x148>)
 800236c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002370:	6413      	str	r3, [r2, #64]	; 0x40
 8002372:	4b2f      	ldr	r3, [pc, #188]	; (8002430 <HAL_I2C_MspInit+0x148>)
 8002374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002376:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800237a:	61bb      	str	r3, [r7, #24]
 800237c:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800237e:	e050      	b.n	8002422 <HAL_I2C_MspInit+0x13a>
  else if(hi2c->Instance==I2C3)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a2c      	ldr	r2, [pc, #176]	; (8002438 <HAL_I2C_MspInit+0x150>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d14b      	bne.n	8002422 <HAL_I2C_MspInit+0x13a>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800238a:	2300      	movs	r3, #0
 800238c:	617b      	str	r3, [r7, #20]
 800238e:	4b28      	ldr	r3, [pc, #160]	; (8002430 <HAL_I2C_MspInit+0x148>)
 8002390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002392:	4a27      	ldr	r2, [pc, #156]	; (8002430 <HAL_I2C_MspInit+0x148>)
 8002394:	f043 0304 	orr.w	r3, r3, #4
 8002398:	6313      	str	r3, [r2, #48]	; 0x30
 800239a:	4b25      	ldr	r3, [pc, #148]	; (8002430 <HAL_I2C_MspInit+0x148>)
 800239c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239e:	f003 0304 	and.w	r3, r3, #4
 80023a2:	617b      	str	r3, [r7, #20]
 80023a4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023a6:	2300      	movs	r3, #0
 80023a8:	613b      	str	r3, [r7, #16]
 80023aa:	4b21      	ldr	r3, [pc, #132]	; (8002430 <HAL_I2C_MspInit+0x148>)
 80023ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ae:	4a20      	ldr	r2, [pc, #128]	; (8002430 <HAL_I2C_MspInit+0x148>)
 80023b0:	f043 0301 	orr.w	r3, r3, #1
 80023b4:	6313      	str	r3, [r2, #48]	; 0x30
 80023b6:	4b1e      	ldr	r3, [pc, #120]	; (8002430 <HAL_I2C_MspInit+0x148>)
 80023b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	613b      	str	r3, [r7, #16]
 80023c0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80023c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023c8:	2312      	movs	r3, #18
 80023ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023cc:	2301      	movs	r3, #1
 80023ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d0:	2300      	movs	r3, #0
 80023d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80023d4:	2304      	movs	r3, #4
 80023d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80023d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023dc:	4619      	mov	r1, r3
 80023de:	4817      	ldr	r0, [pc, #92]	; (800243c <HAL_I2C_MspInit+0x154>)
 80023e0:	f001 f80e 	bl	8003400 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80023e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023ea:	2312      	movs	r3, #18
 80023ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023ee:	2301      	movs	r3, #1
 80023f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f2:	2300      	movs	r3, #0
 80023f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80023f6:	2304      	movs	r3, #4
 80023f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80023fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023fe:	4619      	mov	r1, r3
 8002400:	480f      	ldr	r0, [pc, #60]	; (8002440 <HAL_I2C_MspInit+0x158>)
 8002402:	f000 fffd 	bl	8003400 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002406:	2300      	movs	r3, #0
 8002408:	60fb      	str	r3, [r7, #12]
 800240a:	4b09      	ldr	r3, [pc, #36]	; (8002430 <HAL_I2C_MspInit+0x148>)
 800240c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240e:	4a08      	ldr	r2, [pc, #32]	; (8002430 <HAL_I2C_MspInit+0x148>)
 8002410:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002414:	6413      	str	r3, [r2, #64]	; 0x40
 8002416:	4b06      	ldr	r3, [pc, #24]	; (8002430 <HAL_I2C_MspInit+0x148>)
 8002418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800241e:	60fb      	str	r3, [r7, #12]
 8002420:	68fb      	ldr	r3, [r7, #12]
}
 8002422:	bf00      	nop
 8002424:	3738      	adds	r7, #56	; 0x38
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	40005800 	.word	0x40005800
 8002430:	40023800 	.word	0x40023800
 8002434:	40021400 	.word	0x40021400
 8002438:	40005c00 	.word	0x40005c00
 800243c:	40020800 	.word	0x40020800
 8002440:	40020000 	.word	0x40020000

08002444 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b08c      	sub	sp, #48	; 0x30
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800244c:	f107 031c 	add.w	r3, r7, #28
 8002450:	2200      	movs	r2, #0
 8002452:	601a      	str	r2, [r3, #0]
 8002454:	605a      	str	r2, [r3, #4]
 8002456:	609a      	str	r2, [r3, #8]
 8002458:	60da      	str	r2, [r3, #12]
 800245a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a42      	ldr	r2, [pc, #264]	; (800256c <HAL_SPI_MspInit+0x128>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d14c      	bne.n	8002500 <HAL_SPI_MspInit+0xbc>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002466:	2300      	movs	r3, #0
 8002468:	61bb      	str	r3, [r7, #24]
 800246a:	4b41      	ldr	r3, [pc, #260]	; (8002570 <HAL_SPI_MspInit+0x12c>)
 800246c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246e:	4a40      	ldr	r2, [pc, #256]	; (8002570 <HAL_SPI_MspInit+0x12c>)
 8002470:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002474:	6413      	str	r3, [r2, #64]	; 0x40
 8002476:	4b3e      	ldr	r3, [pc, #248]	; (8002570 <HAL_SPI_MspInit+0x12c>)
 8002478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800247e:	61bb      	str	r3, [r7, #24]
 8002480:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002482:	2300      	movs	r3, #0
 8002484:	617b      	str	r3, [r7, #20]
 8002486:	4b3a      	ldr	r3, [pc, #232]	; (8002570 <HAL_SPI_MspInit+0x12c>)
 8002488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248a:	4a39      	ldr	r2, [pc, #228]	; (8002570 <HAL_SPI_MspInit+0x12c>)
 800248c:	f043 0301 	orr.w	r3, r3, #1
 8002490:	6313      	str	r3, [r2, #48]	; 0x30
 8002492:	4b37      	ldr	r3, [pc, #220]	; (8002570 <HAL_SPI_MspInit+0x12c>)
 8002494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	617b      	str	r3, [r7, #20]
 800249c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800249e:	2300      	movs	r3, #0
 80024a0:	613b      	str	r3, [r7, #16]
 80024a2:	4b33      	ldr	r3, [pc, #204]	; (8002570 <HAL_SPI_MspInit+0x12c>)
 80024a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a6:	4a32      	ldr	r2, [pc, #200]	; (8002570 <HAL_SPI_MspInit+0x12c>)
 80024a8:	f043 0304 	orr.w	r3, r3, #4
 80024ac:	6313      	str	r3, [r2, #48]	; 0x30
 80024ae:	4b30      	ldr	r3, [pc, #192]	; (8002570 <HAL_SPI_MspInit+0x12c>)
 80024b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b2:	f003 0304 	and.w	r3, r3, #4
 80024b6:	613b      	str	r3, [r7, #16]
 80024b8:	693b      	ldr	r3, [r7, #16]
    PA15     ------> SPI3_NSS
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80024ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c0:	2302      	movs	r3, #2
 80024c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c4:	2300      	movs	r3, #0
 80024c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024c8:	2303      	movs	r3, #3
 80024ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80024cc:	2306      	movs	r3, #6
 80024ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024d0:	f107 031c 	add.w	r3, r7, #28
 80024d4:	4619      	mov	r1, r3
 80024d6:	4827      	ldr	r0, [pc, #156]	; (8002574 <HAL_SPI_MspInit+0x130>)
 80024d8:	f000 ff92 	bl	8003400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80024dc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80024e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e2:	2302      	movs	r3, #2
 80024e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e6:	2300      	movs	r3, #0
 80024e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ea:	2300      	movs	r3, #0
 80024ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80024ee:	2306      	movs	r3, #6
 80024f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024f2:	f107 031c 	add.w	r3, r7, #28
 80024f6:	4619      	mov	r1, r3
 80024f8:	481f      	ldr	r0, [pc, #124]	; (8002578 <HAL_SPI_MspInit+0x134>)
 80024fa:	f000 ff81 	bl	8003400 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80024fe:	e031      	b.n	8002564 <HAL_SPI_MspInit+0x120>
  else if(hspi->Instance==SPI5)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a1d      	ldr	r2, [pc, #116]	; (800257c <HAL_SPI_MspInit+0x138>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d12c      	bne.n	8002564 <HAL_SPI_MspInit+0x120>
    __HAL_RCC_SPI5_CLK_ENABLE();
 800250a:	2300      	movs	r3, #0
 800250c:	60fb      	str	r3, [r7, #12]
 800250e:	4b18      	ldr	r3, [pc, #96]	; (8002570 <HAL_SPI_MspInit+0x12c>)
 8002510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002512:	4a17      	ldr	r2, [pc, #92]	; (8002570 <HAL_SPI_MspInit+0x12c>)
 8002514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002518:	6453      	str	r3, [r2, #68]	; 0x44
 800251a:	4b15      	ldr	r3, [pc, #84]	; (8002570 <HAL_SPI_MspInit+0x12c>)
 800251c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800251e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002522:	60fb      	str	r3, [r7, #12]
 8002524:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002526:	2300      	movs	r3, #0
 8002528:	60bb      	str	r3, [r7, #8]
 800252a:	4b11      	ldr	r3, [pc, #68]	; (8002570 <HAL_SPI_MspInit+0x12c>)
 800252c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252e:	4a10      	ldr	r2, [pc, #64]	; (8002570 <HAL_SPI_MspInit+0x12c>)
 8002530:	f043 0320 	orr.w	r3, r3, #32
 8002534:	6313      	str	r3, [r2, #48]	; 0x30
 8002536:	4b0e      	ldr	r3, [pc, #56]	; (8002570 <HAL_SPI_MspInit+0x12c>)
 8002538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253a:	f003 0320 	and.w	r3, r3, #32
 800253e:	60bb      	str	r3, [r7, #8]
 8002540:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8002542:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002546:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002548:	2302      	movs	r3, #2
 800254a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254c:	2300      	movs	r3, #0
 800254e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002550:	2300      	movs	r3, #0
 8002552:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002554:	2305      	movs	r3, #5
 8002556:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002558:	f107 031c 	add.w	r3, r7, #28
 800255c:	4619      	mov	r1, r3
 800255e:	4808      	ldr	r0, [pc, #32]	; (8002580 <HAL_SPI_MspInit+0x13c>)
 8002560:	f000 ff4e 	bl	8003400 <HAL_GPIO_Init>
}
 8002564:	bf00      	nop
 8002566:	3730      	adds	r7, #48	; 0x30
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	40003c00 	.word	0x40003c00
 8002570:	40023800 	.word	0x40023800
 8002574:	40020000 	.word	0x40020000
 8002578:	40020800 	.word	0x40020800
 800257c:	40015000 	.word	0x40015000
 8002580:	40021400 	.word	0x40021400

08002584 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a2f      	ldr	r2, [pc, #188]	; (8002650 <HAL_TIM_Base_MspInit+0xcc>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d10e      	bne.n	80025b4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002596:	2300      	movs	r3, #0
 8002598:	60fb      	str	r3, [r7, #12]
 800259a:	4b2e      	ldr	r3, [pc, #184]	; (8002654 <HAL_TIM_Base_MspInit+0xd0>)
 800259c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800259e:	4a2d      	ldr	r2, [pc, #180]	; (8002654 <HAL_TIM_Base_MspInit+0xd0>)
 80025a0:	f043 0301 	orr.w	r3, r3, #1
 80025a4:	6453      	str	r3, [r2, #68]	; 0x44
 80025a6:	4b2b      	ldr	r3, [pc, #172]	; (8002654 <HAL_TIM_Base_MspInit+0xd0>)
 80025a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	60fb      	str	r3, [r7, #12]
 80025b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80025b2:	e049      	b.n	8002648 <HAL_TIM_Base_MspInit+0xc4>
  else if(htim_base->Instance==TIM2)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025bc:	d144      	bne.n	8002648 <HAL_TIM_Base_MspInit+0xc4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025be:	2300      	movs	r3, #0
 80025c0:	60bb      	str	r3, [r7, #8]
 80025c2:	4b24      	ldr	r3, [pc, #144]	; (8002654 <HAL_TIM_Base_MspInit+0xd0>)
 80025c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c6:	4a23      	ldr	r2, [pc, #140]	; (8002654 <HAL_TIM_Base_MspInit+0xd0>)
 80025c8:	f043 0301 	orr.w	r3, r3, #1
 80025cc:	6413      	str	r3, [r2, #64]	; 0x40
 80025ce:	4b21      	ldr	r3, [pc, #132]	; (8002654 <HAL_TIM_Base_MspInit+0xd0>)
 80025d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	60bb      	str	r3, [r7, #8]
 80025d8:	68bb      	ldr	r3, [r7, #8]
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 80025da:	4b1f      	ldr	r3, [pc, #124]	; (8002658 <HAL_TIM_Base_MspInit+0xd4>)
 80025dc:	4a1f      	ldr	r2, [pc, #124]	; (800265c <HAL_TIM_Base_MspInit+0xd8>)
 80025de:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 80025e0:	4b1d      	ldr	r3, [pc, #116]	; (8002658 <HAL_TIM_Base_MspInit+0xd4>)
 80025e2:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80025e6:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80025e8:	4b1b      	ldr	r3, [pc, #108]	; (8002658 <HAL_TIM_Base_MspInit+0xd4>)
 80025ea:	2240      	movs	r2, #64	; 0x40
 80025ec:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80025ee:	4b1a      	ldr	r3, [pc, #104]	; (8002658 <HAL_TIM_Base_MspInit+0xd4>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80025f4:	4b18      	ldr	r3, [pc, #96]	; (8002658 <HAL_TIM_Base_MspInit+0xd4>)
 80025f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025fa:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025fc:	4b16      	ldr	r3, [pc, #88]	; (8002658 <HAL_TIM_Base_MspInit+0xd4>)
 80025fe:	2200      	movs	r2, #0
 8002600:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002602:	4b15      	ldr	r3, [pc, #84]	; (8002658 <HAL_TIM_Base_MspInit+0xd4>)
 8002604:	2200      	movs	r2, #0
 8002606:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8002608:	4b13      	ldr	r3, [pc, #76]	; (8002658 <HAL_TIM_Base_MspInit+0xd4>)
 800260a:	2200      	movs	r2, #0
 800260c:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 800260e:	4b12      	ldr	r3, [pc, #72]	; (8002658 <HAL_TIM_Base_MspInit+0xd4>)
 8002610:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002614:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002616:	4b10      	ldr	r3, [pc, #64]	; (8002658 <HAL_TIM_Base_MspInit+0xd4>)
 8002618:	2200      	movs	r2, #0
 800261a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 800261c:	480e      	ldr	r0, [pc, #56]	; (8002658 <HAL_TIM_Base_MspInit+0xd4>)
 800261e:	f000 fb73 	bl	8002d08 <HAL_DMA_Init>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d001      	beq.n	800262c <HAL_TIM_Base_MspInit+0xa8>
      Error_Handler();
 8002628:	f7ff fcb4 	bl	8001f94 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	4a0a      	ldr	r2, [pc, #40]	; (8002658 <HAL_TIM_Base_MspInit+0xd4>)
 8002630:	625a      	str	r2, [r3, #36]	; 0x24
 8002632:	4a09      	ldr	r2, [pc, #36]	; (8002658 <HAL_TIM_Base_MspInit+0xd4>)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002638:	2200      	movs	r2, #0
 800263a:	2100      	movs	r1, #0
 800263c:	201c      	movs	r0, #28
 800263e:	f000 fb10 	bl	8002c62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002642:	201c      	movs	r0, #28
 8002644:	f000 fb29 	bl	8002c9a <HAL_NVIC_EnableIRQ>
}
 8002648:	bf00      	nop
 800264a:	3710      	adds	r7, #16
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	40010000 	.word	0x40010000
 8002654:	40023800 	.word	0x40023800
 8002658:	200033d8 	.word	0x200033d8
 800265c:	40026088 	.word	0x40026088

08002660 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b088      	sub	sp, #32
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002668:	f107 030c 	add.w	r3, r7, #12
 800266c:	2200      	movs	r2, #0
 800266e:	601a      	str	r2, [r3, #0]
 8002670:	605a      	str	r2, [r3, #4]
 8002672:	609a      	str	r2, [r3, #8]
 8002674:	60da      	str	r2, [r3, #12]
 8002676:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002680:	d11d      	bne.n	80026be <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002682:	2300      	movs	r3, #0
 8002684:	60bb      	str	r3, [r7, #8]
 8002686:	4b10      	ldr	r3, [pc, #64]	; (80026c8 <HAL_TIM_MspPostInit+0x68>)
 8002688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268a:	4a0f      	ldr	r2, [pc, #60]	; (80026c8 <HAL_TIM_MspPostInit+0x68>)
 800268c:	f043 0301 	orr.w	r3, r3, #1
 8002690:	6313      	str	r3, [r2, #48]	; 0x30
 8002692:	4b0d      	ldr	r3, [pc, #52]	; (80026c8 <HAL_TIM_MspPostInit+0x68>)
 8002694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	60bb      	str	r3, [r7, #8]
 800269c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800269e:	2320      	movs	r3, #32
 80026a0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a2:	2302      	movs	r3, #2
 80026a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a6:	2300      	movs	r3, #0
 80026a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026aa:	2300      	movs	r3, #0
 80026ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80026ae:	2301      	movs	r3, #1
 80026b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026b2:	f107 030c 	add.w	r3, r7, #12
 80026b6:	4619      	mov	r1, r3
 80026b8:	4804      	ldr	r0, [pc, #16]	; (80026cc <HAL_TIM_MspPostInit+0x6c>)
 80026ba:	f000 fea1 	bl	8003400 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80026be:	bf00      	nop
 80026c0:	3720      	adds	r7, #32
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	40023800 	.word	0x40023800
 80026cc:	40020000 	.word	0x40020000

080026d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b08c      	sub	sp, #48	; 0x30
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026d8:	f107 031c 	add.w	r3, r7, #28
 80026dc:	2200      	movs	r2, #0
 80026de:	601a      	str	r2, [r3, #0]
 80026e0:	605a      	str	r2, [r3, #4]
 80026e2:	609a      	str	r2, [r3, #8]
 80026e4:	60da      	str	r2, [r3, #12]
 80026e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a36      	ldr	r2, [pc, #216]	; (80027c8 <HAL_UART_MspInit+0xf8>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d135      	bne.n	800275e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80026f2:	2300      	movs	r3, #0
 80026f4:	61bb      	str	r3, [r7, #24]
 80026f6:	4b35      	ldr	r3, [pc, #212]	; (80027cc <HAL_UART_MspInit+0xfc>)
 80026f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fa:	4a34      	ldr	r2, [pc, #208]	; (80027cc <HAL_UART_MspInit+0xfc>)
 80026fc:	f043 0310 	orr.w	r3, r3, #16
 8002700:	6453      	str	r3, [r2, #68]	; 0x44
 8002702:	4b32      	ldr	r3, [pc, #200]	; (80027cc <HAL_UART_MspInit+0xfc>)
 8002704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002706:	f003 0310 	and.w	r3, r3, #16
 800270a:	61bb      	str	r3, [r7, #24]
 800270c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800270e:	2300      	movs	r3, #0
 8002710:	617b      	str	r3, [r7, #20]
 8002712:	4b2e      	ldr	r3, [pc, #184]	; (80027cc <HAL_UART_MspInit+0xfc>)
 8002714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002716:	4a2d      	ldr	r2, [pc, #180]	; (80027cc <HAL_UART_MspInit+0xfc>)
 8002718:	f043 0301 	orr.w	r3, r3, #1
 800271c:	6313      	str	r3, [r2, #48]	; 0x30
 800271e:	4b2b      	ldr	r3, [pc, #172]	; (80027cc <HAL_UART_MspInit+0xfc>)
 8002720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002722:	f003 0301 	and.w	r3, r3, #1
 8002726:	617b      	str	r3, [r7, #20]
 8002728:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800272a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800272e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002730:	2302      	movs	r3, #2
 8002732:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002734:	2300      	movs	r3, #0
 8002736:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002738:	2303      	movs	r3, #3
 800273a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800273c:	2307      	movs	r3, #7
 800273e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002740:	f107 031c 	add.w	r3, r7, #28
 8002744:	4619      	mov	r1, r3
 8002746:	4822      	ldr	r0, [pc, #136]	; (80027d0 <HAL_UART_MspInit+0x100>)
 8002748:	f000 fe5a 	bl	8003400 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800274c:	2200      	movs	r2, #0
 800274e:	2100      	movs	r1, #0
 8002750:	2025      	movs	r0, #37	; 0x25
 8002752:	f000 fa86 	bl	8002c62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002756:	2025      	movs	r0, #37	; 0x25
 8002758:	f000 fa9f 	bl	8002c9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800275c:	e030      	b.n	80027c0 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a1c      	ldr	r2, [pc, #112]	; (80027d4 <HAL_UART_MspInit+0x104>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d12b      	bne.n	80027c0 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002768:	2300      	movs	r3, #0
 800276a:	613b      	str	r3, [r7, #16]
 800276c:	4b17      	ldr	r3, [pc, #92]	; (80027cc <HAL_UART_MspInit+0xfc>)
 800276e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002770:	4a16      	ldr	r2, [pc, #88]	; (80027cc <HAL_UART_MspInit+0xfc>)
 8002772:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002776:	6413      	str	r3, [r2, #64]	; 0x40
 8002778:	4b14      	ldr	r3, [pc, #80]	; (80027cc <HAL_UART_MspInit+0xfc>)
 800277a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002780:	613b      	str	r3, [r7, #16]
 8002782:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002784:	2300      	movs	r3, #0
 8002786:	60fb      	str	r3, [r7, #12]
 8002788:	4b10      	ldr	r3, [pc, #64]	; (80027cc <HAL_UART_MspInit+0xfc>)
 800278a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278c:	4a0f      	ldr	r2, [pc, #60]	; (80027cc <HAL_UART_MspInit+0xfc>)
 800278e:	f043 0308 	orr.w	r3, r3, #8
 8002792:	6313      	str	r3, [r2, #48]	; 0x30
 8002794:	4b0d      	ldr	r3, [pc, #52]	; (80027cc <HAL_UART_MspInit+0xfc>)
 8002796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002798:	f003 0308 	and.w	r3, r3, #8
 800279c:	60fb      	str	r3, [r7, #12]
 800279e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80027a0:	2360      	movs	r3, #96	; 0x60
 80027a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a4:	2302      	movs	r3, #2
 80027a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a8:	2300      	movs	r3, #0
 80027aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027ac:	2303      	movs	r3, #3
 80027ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80027b0:	2307      	movs	r3, #7
 80027b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027b4:	f107 031c 	add.w	r3, r7, #28
 80027b8:	4619      	mov	r1, r3
 80027ba:	4807      	ldr	r0, [pc, #28]	; (80027d8 <HAL_UART_MspInit+0x108>)
 80027bc:	f000 fe20 	bl	8003400 <HAL_GPIO_Init>
}
 80027c0:	bf00      	nop
 80027c2:	3730      	adds	r7, #48	; 0x30
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	40011000 	.word	0x40011000
 80027cc:	40023800 	.word	0x40023800
 80027d0:	40020000 	.word	0x40020000
 80027d4:	40004400 	.word	0x40004400
 80027d8:	40020c00 	.word	0x40020c00

080027dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027e0:	e7fe      	b.n	80027e0 <NMI_Handler+0x4>

080027e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027e2:	b480      	push	{r7}
 80027e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027e6:	e7fe      	b.n	80027e6 <HardFault_Handler+0x4>

080027e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027ec:	e7fe      	b.n	80027ec <MemManage_Handler+0x4>

080027ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027ee:	b480      	push	{r7}
 80027f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027f2:	e7fe      	b.n	80027f2 <BusFault_Handler+0x4>

080027f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027f8:	e7fe      	b.n	80027f8 <UsageFault_Handler+0x4>

080027fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027fa:	b480      	push	{r7}
 80027fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027fe:	bf00      	nop
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr

08002808 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800280c:	bf00      	nop
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr

08002816 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002816:	b480      	push	{r7}
 8002818:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800281a:	bf00      	nop
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002828:	f000 f8fc 	bl	8002a24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800282c:	bf00      	nop
 800282e:	bd80      	pop	{r7, pc}

08002830 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002834:	bf00      	nop
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr

0800283e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_Pin);
 8002842:	2001      	movs	r0, #1
 8002844:	f000 ffba 	bl	80037bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002848:	bf00      	nop
 800284a:	bd80      	pop	{r7, pc}

0800284c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8002850:	4802      	ldr	r0, [pc, #8]	; (800285c <DMA1_Stream5_IRQHandler+0x10>)
 8002852:	f000 fb99 	bl	8002f88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002856:	bf00      	nop
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	200033d8 	.word	0x200033d8

08002860 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002864:	4802      	ldr	r0, [pc, #8]	; (8002870 <TIM2_IRQHandler+0x10>)
 8002866:	f005 f8c3 	bl	80079f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800286a:	bf00      	nop
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	20003390 	.word	0x20003390

08002874 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002878:	4802      	ldr	r0, [pc, #8]	; (8002884 <USART1_IRQHandler+0x10>)
 800287a:	f006 f8c5 	bl	8008a08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800287e:	bf00      	nop
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	20003438 	.word	0x20003438

08002888 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 800288c:	4802      	ldr	r0, [pc, #8]	; (8002898 <OTG_HS_IRQHandler+0x10>)
 800288e:	f001 fa17 	bl	8003cc0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8002892:	bf00      	nop
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	20003904 	.word	0x20003904

0800289c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b086      	sub	sp, #24
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028a4:	4a14      	ldr	r2, [pc, #80]	; (80028f8 <_sbrk+0x5c>)
 80028a6:	4b15      	ldr	r3, [pc, #84]	; (80028fc <_sbrk+0x60>)
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028b0:	4b13      	ldr	r3, [pc, #76]	; (8002900 <_sbrk+0x64>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d102      	bne.n	80028be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028b8:	4b11      	ldr	r3, [pc, #68]	; (8002900 <_sbrk+0x64>)
 80028ba:	4a12      	ldr	r2, [pc, #72]	; (8002904 <_sbrk+0x68>)
 80028bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028be:	4b10      	ldr	r3, [pc, #64]	; (8002900 <_sbrk+0x64>)
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4413      	add	r3, r2
 80028c6:	693a      	ldr	r2, [r7, #16]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d207      	bcs.n	80028dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028cc:	f00b fc9c 	bl	800e208 <__errno>
 80028d0:	4603      	mov	r3, r0
 80028d2:	220c      	movs	r2, #12
 80028d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028da:	e009      	b.n	80028f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028dc:	4b08      	ldr	r3, [pc, #32]	; (8002900 <_sbrk+0x64>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028e2:	4b07      	ldr	r3, [pc, #28]	; (8002900 <_sbrk+0x64>)
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4413      	add	r3, r2
 80028ea:	4a05      	ldr	r2, [pc, #20]	; (8002900 <_sbrk+0x64>)
 80028ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028ee:	68fb      	ldr	r3, [r7, #12]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3718      	adds	r7, #24
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	20030000 	.word	0x20030000
 80028fc:	00000400 	.word	0x00000400
 8002900:	2000350c 	.word	0x2000350c
 8002904:	20003c18 	.word	0x20003c18

08002908 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800290c:	4b06      	ldr	r3, [pc, #24]	; (8002928 <SystemInit+0x20>)
 800290e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002912:	4a05      	ldr	r2, [pc, #20]	; (8002928 <SystemInit+0x20>)
 8002914:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002918:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800291c:	bf00      	nop
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	e000ed00 	.word	0xe000ed00

0800292c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800292c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002964 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002930:	480d      	ldr	r0, [pc, #52]	; (8002968 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002932:	490e      	ldr	r1, [pc, #56]	; (800296c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002934:	4a0e      	ldr	r2, [pc, #56]	; (8002970 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002936:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002938:	e002      	b.n	8002940 <LoopCopyDataInit>

0800293a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800293a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800293c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800293e:	3304      	adds	r3, #4

08002940 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002940:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002942:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002944:	d3f9      	bcc.n	800293a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002946:	4a0b      	ldr	r2, [pc, #44]	; (8002974 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002948:	4c0b      	ldr	r4, [pc, #44]	; (8002978 <LoopFillZerobss+0x26>)
  movs r3, #0
 800294a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800294c:	e001      	b.n	8002952 <LoopFillZerobss>

0800294e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800294e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002950:	3204      	adds	r2, #4

08002952 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002952:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002954:	d3fb      	bcc.n	800294e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002956:	f7ff ffd7 	bl	8002908 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800295a:	f00b fc5b 	bl	800e214 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800295e:	f7fe fe0b 	bl	8001578 <main>
  bx  lr    
 8002962:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002964:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002968:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800296c:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 8002970:	0800f574 	.word	0x0800f574
  ldr r2, =_sbss
 8002974:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 8002978:	20003c18 	.word	0x20003c18

0800297c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800297c:	e7fe      	b.n	800297c <ADC_IRQHandler>
	...

08002980 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002984:	4b0e      	ldr	r3, [pc, #56]	; (80029c0 <HAL_Init+0x40>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a0d      	ldr	r2, [pc, #52]	; (80029c0 <HAL_Init+0x40>)
 800298a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800298e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002990:	4b0b      	ldr	r3, [pc, #44]	; (80029c0 <HAL_Init+0x40>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a0a      	ldr	r2, [pc, #40]	; (80029c0 <HAL_Init+0x40>)
 8002996:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800299a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800299c:	4b08      	ldr	r3, [pc, #32]	; (80029c0 <HAL_Init+0x40>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a07      	ldr	r2, [pc, #28]	; (80029c0 <HAL_Init+0x40>)
 80029a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029a8:	2003      	movs	r0, #3
 80029aa:	f000 f94f 	bl	8002c4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029ae:	200f      	movs	r0, #15
 80029b0:	f000 f808 	bl	80029c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029b4:	f7ff fc40 	bl	8002238 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	40023c00 	.word	0x40023c00

080029c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029cc:	4b12      	ldr	r3, [pc, #72]	; (8002a18 <HAL_InitTick+0x54>)
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	4b12      	ldr	r3, [pc, #72]	; (8002a1c <HAL_InitTick+0x58>)
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	4619      	mov	r1, r3
 80029d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029da:	fbb3 f3f1 	udiv	r3, r3, r1
 80029de:	fbb2 f3f3 	udiv	r3, r2, r3
 80029e2:	4618      	mov	r0, r3
 80029e4:	f000 f967 	bl	8002cb6 <HAL_SYSTICK_Config>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d001      	beq.n	80029f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e00e      	b.n	8002a10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2b0f      	cmp	r3, #15
 80029f6:	d80a      	bhi.n	8002a0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029f8:	2200      	movs	r2, #0
 80029fa:	6879      	ldr	r1, [r7, #4]
 80029fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a00:	f000 f92f 	bl	8002c62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a04:	4a06      	ldr	r2, [pc, #24]	; (8002a20 <HAL_InitTick+0x5c>)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	e000      	b.n	8002a10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3708      	adds	r7, #8
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	200000c8 	.word	0x200000c8
 8002a1c:	200000d0 	.word	0x200000d0
 8002a20:	200000cc 	.word	0x200000cc

08002a24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a28:	4b06      	ldr	r3, [pc, #24]	; (8002a44 <HAL_IncTick+0x20>)
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	4b06      	ldr	r3, [pc, #24]	; (8002a48 <HAL_IncTick+0x24>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4413      	add	r3, r2
 8002a34:	4a04      	ldr	r2, [pc, #16]	; (8002a48 <HAL_IncTick+0x24>)
 8002a36:	6013      	str	r3, [r2, #0]
}
 8002a38:	bf00      	nop
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	200000d0 	.word	0x200000d0
 8002a48:	20003510 	.word	0x20003510

08002a4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	af00      	add	r7, sp, #0
  return uwTick;
 8002a50:	4b03      	ldr	r3, [pc, #12]	; (8002a60 <HAL_GetTick+0x14>)
 8002a52:	681b      	ldr	r3, [r3, #0]
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	20003510 	.word	0x20003510

08002a64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a6c:	f7ff ffee 	bl	8002a4c <HAL_GetTick>
 8002a70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a7c:	d005      	beq.n	8002a8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a7e:	4b0a      	ldr	r3, [pc, #40]	; (8002aa8 <HAL_Delay+0x44>)
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	461a      	mov	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	4413      	add	r3, r2
 8002a88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a8a:	bf00      	nop
 8002a8c:	f7ff ffde 	bl	8002a4c <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	68fa      	ldr	r2, [r7, #12]
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d8f7      	bhi.n	8002a8c <HAL_Delay+0x28>
  {
  }
}
 8002a9c:	bf00      	nop
 8002a9e:	bf00      	nop
 8002aa0:	3710      	adds	r7, #16
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	200000d0 	.word	0x200000d0

08002aac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b085      	sub	sp, #20
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f003 0307 	and.w	r3, r3, #7
 8002aba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002abc:	4b0c      	ldr	r3, [pc, #48]	; (8002af0 <__NVIC_SetPriorityGrouping+0x44>)
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ac2:	68ba      	ldr	r2, [r7, #8]
 8002ac4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ac8:	4013      	ands	r3, r2
 8002aca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ad4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ad8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002adc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ade:	4a04      	ldr	r2, [pc, #16]	; (8002af0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	60d3      	str	r3, [r2, #12]
}
 8002ae4:	bf00      	nop
 8002ae6:	3714      	adds	r7, #20
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr
 8002af0:	e000ed00 	.word	0xe000ed00

08002af4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002af4:	b480      	push	{r7}
 8002af6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002af8:	4b04      	ldr	r3, [pc, #16]	; (8002b0c <__NVIC_GetPriorityGrouping+0x18>)
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	0a1b      	lsrs	r3, r3, #8
 8002afe:	f003 0307 	and.w	r3, r3, #7
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr
 8002b0c:	e000ed00 	.word	0xe000ed00

08002b10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	4603      	mov	r3, r0
 8002b18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	db0b      	blt.n	8002b3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b22:	79fb      	ldrb	r3, [r7, #7]
 8002b24:	f003 021f 	and.w	r2, r3, #31
 8002b28:	4907      	ldr	r1, [pc, #28]	; (8002b48 <__NVIC_EnableIRQ+0x38>)
 8002b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b2e:	095b      	lsrs	r3, r3, #5
 8002b30:	2001      	movs	r0, #1
 8002b32:	fa00 f202 	lsl.w	r2, r0, r2
 8002b36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b3a:	bf00      	nop
 8002b3c:	370c      	adds	r7, #12
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	e000e100 	.word	0xe000e100

08002b4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	4603      	mov	r3, r0
 8002b54:	6039      	str	r1, [r7, #0]
 8002b56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	db0a      	blt.n	8002b76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	b2da      	uxtb	r2, r3
 8002b64:	490c      	ldr	r1, [pc, #48]	; (8002b98 <__NVIC_SetPriority+0x4c>)
 8002b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b6a:	0112      	lsls	r2, r2, #4
 8002b6c:	b2d2      	uxtb	r2, r2
 8002b6e:	440b      	add	r3, r1
 8002b70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b74:	e00a      	b.n	8002b8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	b2da      	uxtb	r2, r3
 8002b7a:	4908      	ldr	r1, [pc, #32]	; (8002b9c <__NVIC_SetPriority+0x50>)
 8002b7c:	79fb      	ldrb	r3, [r7, #7]
 8002b7e:	f003 030f 	and.w	r3, r3, #15
 8002b82:	3b04      	subs	r3, #4
 8002b84:	0112      	lsls	r2, r2, #4
 8002b86:	b2d2      	uxtb	r2, r2
 8002b88:	440b      	add	r3, r1
 8002b8a:	761a      	strb	r2, [r3, #24]
}
 8002b8c:	bf00      	nop
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr
 8002b98:	e000e100 	.word	0xe000e100
 8002b9c:	e000ed00 	.word	0xe000ed00

08002ba0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b089      	sub	sp, #36	; 0x24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f003 0307 	and.w	r3, r3, #7
 8002bb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	f1c3 0307 	rsb	r3, r3, #7
 8002bba:	2b04      	cmp	r3, #4
 8002bbc:	bf28      	it	cs
 8002bbe:	2304      	movcs	r3, #4
 8002bc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	3304      	adds	r3, #4
 8002bc6:	2b06      	cmp	r3, #6
 8002bc8:	d902      	bls.n	8002bd0 <NVIC_EncodePriority+0x30>
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	3b03      	subs	r3, #3
 8002bce:	e000      	b.n	8002bd2 <NVIC_EncodePriority+0x32>
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002bd8:	69bb      	ldr	r3, [r7, #24]
 8002bda:	fa02 f303 	lsl.w	r3, r2, r3
 8002bde:	43da      	mvns	r2, r3
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	401a      	ands	r2, r3
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002be8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf2:	43d9      	mvns	r1, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bf8:	4313      	orrs	r3, r2
         );
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3724      	adds	r7, #36	; 0x24
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
	...

08002c08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	3b01      	subs	r3, #1
 8002c14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c18:	d301      	bcc.n	8002c1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e00f      	b.n	8002c3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c1e:	4a0a      	ldr	r2, [pc, #40]	; (8002c48 <SysTick_Config+0x40>)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	3b01      	subs	r3, #1
 8002c24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c26:	210f      	movs	r1, #15
 8002c28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c2c:	f7ff ff8e 	bl	8002b4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c30:	4b05      	ldr	r3, [pc, #20]	; (8002c48 <SysTick_Config+0x40>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c36:	4b04      	ldr	r3, [pc, #16]	; (8002c48 <SysTick_Config+0x40>)
 8002c38:	2207      	movs	r2, #7
 8002c3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3708      	adds	r7, #8
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	e000e010 	.word	0xe000e010

08002c4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f7ff ff29 	bl	8002aac <__NVIC_SetPriorityGrouping>
}
 8002c5a:	bf00      	nop
 8002c5c:	3708      	adds	r7, #8
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}

08002c62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c62:	b580      	push	{r7, lr}
 8002c64:	b086      	sub	sp, #24
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	4603      	mov	r3, r0
 8002c6a:	60b9      	str	r1, [r7, #8]
 8002c6c:	607a      	str	r2, [r7, #4]
 8002c6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c70:	2300      	movs	r3, #0
 8002c72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c74:	f7ff ff3e 	bl	8002af4 <__NVIC_GetPriorityGrouping>
 8002c78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	68b9      	ldr	r1, [r7, #8]
 8002c7e:	6978      	ldr	r0, [r7, #20]
 8002c80:	f7ff ff8e 	bl	8002ba0 <NVIC_EncodePriority>
 8002c84:	4602      	mov	r2, r0
 8002c86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c8a:	4611      	mov	r1, r2
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7ff ff5d 	bl	8002b4c <__NVIC_SetPriority>
}
 8002c92:	bf00      	nop
 8002c94:	3718      	adds	r7, #24
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b082      	sub	sp, #8
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7ff ff31 	bl	8002b10 <__NVIC_EnableIRQ>
}
 8002cae:	bf00      	nop
 8002cb0:	3708      	adds	r7, #8
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	b082      	sub	sp, #8
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f7ff ffa2 	bl	8002c08 <SysTick_Config>
 8002cc4:	4603      	mov	r3, r0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3708      	adds	r7, #8
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b082      	sub	sp, #8
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d101      	bne.n	8002ce0 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e00e      	b.n	8002cfe <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	795b      	ldrb	r3, [r3, #5]
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d105      	bne.n	8002cf6 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f7ff fad7 	bl	80022a4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3708      	adds	r7, #8
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
	...

08002d08 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b086      	sub	sp, #24
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d10:	2300      	movs	r3, #0
 8002d12:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002d14:	f7ff fe9a 	bl	8002a4c <HAL_GetTick>
 8002d18:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d101      	bne.n	8002d24 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e099      	b.n	8002e58 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2202      	movs	r2, #2
 8002d28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f022 0201 	bic.w	r2, r2, #1
 8002d42:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d44:	e00f      	b.n	8002d66 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d46:	f7ff fe81 	bl	8002a4c <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	2b05      	cmp	r3, #5
 8002d52:	d908      	bls.n	8002d66 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2220      	movs	r2, #32
 8002d58:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2203      	movs	r2, #3
 8002d5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e078      	b.n	8002e58 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0301 	and.w	r3, r3, #1
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d1e8      	bne.n	8002d46 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002d7c:	697a      	ldr	r2, [r7, #20]
 8002d7e:	4b38      	ldr	r3, [pc, #224]	; (8002e60 <HAL_DMA_Init+0x158>)
 8002d80:	4013      	ands	r3, r2
 8002d82:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685a      	ldr	r2, [r3, #4]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d92:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	691b      	ldr	r3, [r3, #16]
 8002d98:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	699b      	ldr	r3, [r3, #24]
 8002da4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002daa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a1b      	ldr	r3, [r3, #32]
 8002db0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002db2:	697a      	ldr	r2, [r7, #20]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbc:	2b04      	cmp	r3, #4
 8002dbe:	d107      	bne.n	8002dd0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	697a      	ldr	r2, [r7, #20]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	697a      	ldr	r2, [r7, #20]
 8002dd6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	695b      	ldr	r3, [r3, #20]
 8002dde:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	f023 0307 	bic.w	r3, r3, #7
 8002de6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dec:	697a      	ldr	r2, [r7, #20]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df6:	2b04      	cmp	r3, #4
 8002df8:	d117      	bne.n	8002e2a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dfe:	697a      	ldr	r2, [r7, #20]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d00e      	beq.n	8002e2a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f000 fa7b 	bl	8003308 <DMA_CheckFifoParam>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d008      	beq.n	8002e2a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2240      	movs	r2, #64	; 0x40
 8002e1c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2201      	movs	r2, #1
 8002e22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002e26:	2301      	movs	r3, #1
 8002e28:	e016      	b.n	8002e58 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	697a      	ldr	r2, [r7, #20]
 8002e30:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 fa32 	bl	800329c <DMA_CalcBaseAndBitshift>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e40:	223f      	movs	r2, #63	; 0x3f
 8002e42:	409a      	lsls	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2201      	movs	r2, #1
 8002e52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3718      	adds	r7, #24
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	f010803f 	.word	0xf010803f

08002e64 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e70:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002e72:	f7ff fdeb 	bl	8002a4c <HAL_GetTick>
 8002e76:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d008      	beq.n	8002e96 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2280      	movs	r2, #128	; 0x80
 8002e88:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e052      	b.n	8002f3c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f022 0216 	bic.w	r2, r2, #22
 8002ea4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	695a      	ldr	r2, [r3, #20]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002eb4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d103      	bne.n	8002ec6 <HAL_DMA_Abort+0x62>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d007      	beq.n	8002ed6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f022 0208 	bic.w	r2, r2, #8
 8002ed4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f022 0201 	bic.w	r2, r2, #1
 8002ee4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ee6:	e013      	b.n	8002f10 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ee8:	f7ff fdb0 	bl	8002a4c <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	2b05      	cmp	r3, #5
 8002ef4:	d90c      	bls.n	8002f10 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2220      	movs	r2, #32
 8002efa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2203      	movs	r2, #3
 8002f00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e015      	b.n	8002f3c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d1e4      	bne.n	8002ee8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f22:	223f      	movs	r2, #63	; 0x3f
 8002f24:	409a      	lsls	r2, r3
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002f3a:	2300      	movs	r3, #0
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3710      	adds	r7, #16
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d004      	beq.n	8002f62 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2280      	movs	r2, #128	; 0x80
 8002f5c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e00c      	b.n	8002f7c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2205      	movs	r2, #5
 8002f66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f022 0201 	bic.w	r2, r2, #1
 8002f78:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b086      	sub	sp, #24
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002f90:	2300      	movs	r3, #0
 8002f92:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002f94:	4b8e      	ldr	r3, [pc, #568]	; (80031d0 <HAL_DMA_IRQHandler+0x248>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a8e      	ldr	r2, [pc, #568]	; (80031d4 <HAL_DMA_IRQHandler+0x24c>)
 8002f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f9e:	0a9b      	lsrs	r3, r3, #10
 8002fa0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fb2:	2208      	movs	r2, #8
 8002fb4:	409a      	lsls	r2, r3
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	4013      	ands	r3, r2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d01a      	beq.n	8002ff4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0304 	and.w	r3, r3, #4
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d013      	beq.n	8002ff4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f022 0204 	bic.w	r2, r2, #4
 8002fda:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fe0:	2208      	movs	r2, #8
 8002fe2:	409a      	lsls	r2, r3
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fec:	f043 0201 	orr.w	r2, r3, #1
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	409a      	lsls	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	4013      	ands	r3, r2
 8003000:	2b00      	cmp	r3, #0
 8003002:	d012      	beq.n	800302a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	695b      	ldr	r3, [r3, #20]
 800300a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800300e:	2b00      	cmp	r3, #0
 8003010:	d00b      	beq.n	800302a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003016:	2201      	movs	r2, #1
 8003018:	409a      	lsls	r2, r3
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003022:	f043 0202 	orr.w	r2, r3, #2
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800302e:	2204      	movs	r2, #4
 8003030:	409a      	lsls	r2, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	4013      	ands	r3, r2
 8003036:	2b00      	cmp	r3, #0
 8003038:	d012      	beq.n	8003060 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0302 	and.w	r3, r3, #2
 8003044:	2b00      	cmp	r3, #0
 8003046:	d00b      	beq.n	8003060 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800304c:	2204      	movs	r2, #4
 800304e:	409a      	lsls	r2, r3
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003058:	f043 0204 	orr.w	r2, r3, #4
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003064:	2210      	movs	r2, #16
 8003066:	409a      	lsls	r2, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	4013      	ands	r3, r2
 800306c:	2b00      	cmp	r3, #0
 800306e:	d043      	beq.n	80030f8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0308 	and.w	r3, r3, #8
 800307a:	2b00      	cmp	r3, #0
 800307c:	d03c      	beq.n	80030f8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003082:	2210      	movs	r2, #16
 8003084:	409a      	lsls	r2, r3
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d018      	beq.n	80030ca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d108      	bne.n	80030b8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d024      	beq.n	80030f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	4798      	blx	r3
 80030b6:	e01f      	b.n	80030f8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d01b      	beq.n	80030f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	4798      	blx	r3
 80030c8:	e016      	b.n	80030f8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d107      	bne.n	80030e8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f022 0208 	bic.w	r2, r2, #8
 80030e6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d003      	beq.n	80030f8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030fc:	2220      	movs	r2, #32
 80030fe:	409a      	lsls	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	4013      	ands	r3, r2
 8003104:	2b00      	cmp	r3, #0
 8003106:	f000 808f 	beq.w	8003228 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0310 	and.w	r3, r3, #16
 8003114:	2b00      	cmp	r3, #0
 8003116:	f000 8087 	beq.w	8003228 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800311e:	2220      	movs	r2, #32
 8003120:	409a      	lsls	r2, r3
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800312c:	b2db      	uxtb	r3, r3
 800312e:	2b05      	cmp	r3, #5
 8003130:	d136      	bne.n	80031a0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f022 0216 	bic.w	r2, r2, #22
 8003140:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	695a      	ldr	r2, [r3, #20]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003150:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003156:	2b00      	cmp	r3, #0
 8003158:	d103      	bne.n	8003162 <HAL_DMA_IRQHandler+0x1da>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800315e:	2b00      	cmp	r3, #0
 8003160:	d007      	beq.n	8003172 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f022 0208 	bic.w	r2, r2, #8
 8003170:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003176:	223f      	movs	r2, #63	; 0x3f
 8003178:	409a      	lsls	r2, r3
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2201      	movs	r2, #1
 8003182:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003192:	2b00      	cmp	r3, #0
 8003194:	d07e      	beq.n	8003294 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	4798      	blx	r3
        }
        return;
 800319e:	e079      	b.n	8003294 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d01d      	beq.n	80031ea <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d10d      	bne.n	80031d8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d031      	beq.n	8003228 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	4798      	blx	r3
 80031cc:	e02c      	b.n	8003228 <HAL_DMA_IRQHandler+0x2a0>
 80031ce:	bf00      	nop
 80031d0:	200000c8 	.word	0x200000c8
 80031d4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d023      	beq.n	8003228 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	4798      	blx	r3
 80031e8:	e01e      	b.n	8003228 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d10f      	bne.n	8003218 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f022 0210 	bic.w	r2, r2, #16
 8003206:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800321c:	2b00      	cmp	r3, #0
 800321e:	d003      	beq.n	8003228 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800322c:	2b00      	cmp	r3, #0
 800322e:	d032      	beq.n	8003296 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003234:	f003 0301 	and.w	r3, r3, #1
 8003238:	2b00      	cmp	r3, #0
 800323a:	d022      	beq.n	8003282 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2205      	movs	r2, #5
 8003240:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f022 0201 	bic.w	r2, r2, #1
 8003252:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	3301      	adds	r3, #1
 8003258:	60bb      	str	r3, [r7, #8]
 800325a:	697a      	ldr	r2, [r7, #20]
 800325c:	429a      	cmp	r2, r3
 800325e:	d307      	bcc.n	8003270 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0301 	and.w	r3, r3, #1
 800326a:	2b00      	cmp	r3, #0
 800326c:	d1f2      	bne.n	8003254 <HAL_DMA_IRQHandler+0x2cc>
 800326e:	e000      	b.n	8003272 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003270:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2201      	movs	r2, #1
 8003276:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003286:	2b00      	cmp	r3, #0
 8003288:	d005      	beq.n	8003296 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	4798      	blx	r3
 8003292:	e000      	b.n	8003296 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003294:	bf00      	nop
    }
  }
}
 8003296:	3718      	adds	r7, #24
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800329c:	b480      	push	{r7}
 800329e:	b085      	sub	sp, #20
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	3b10      	subs	r3, #16
 80032ac:	4a14      	ldr	r2, [pc, #80]	; (8003300 <DMA_CalcBaseAndBitshift+0x64>)
 80032ae:	fba2 2303 	umull	r2, r3, r2, r3
 80032b2:	091b      	lsrs	r3, r3, #4
 80032b4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80032b6:	4a13      	ldr	r2, [pc, #76]	; (8003304 <DMA_CalcBaseAndBitshift+0x68>)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	4413      	add	r3, r2
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	461a      	mov	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2b03      	cmp	r3, #3
 80032c8:	d909      	bls.n	80032de <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80032d2:	f023 0303 	bic.w	r3, r3, #3
 80032d6:	1d1a      	adds	r2, r3, #4
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	659a      	str	r2, [r3, #88]	; 0x58
 80032dc:	e007      	b.n	80032ee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80032e6:	f023 0303 	bic.w	r3, r3, #3
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3714      	adds	r7, #20
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	aaaaaaab 	.word	0xaaaaaaab
 8003304:	0800f4b0 	.word	0x0800f4b0

08003308 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003308:	b480      	push	{r7}
 800330a:	b085      	sub	sp, #20
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003310:	2300      	movs	r3, #0
 8003312:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003318:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	699b      	ldr	r3, [r3, #24]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d11f      	bne.n	8003362 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	2b03      	cmp	r3, #3
 8003326:	d856      	bhi.n	80033d6 <DMA_CheckFifoParam+0xce>
 8003328:	a201      	add	r2, pc, #4	; (adr r2, 8003330 <DMA_CheckFifoParam+0x28>)
 800332a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800332e:	bf00      	nop
 8003330:	08003341 	.word	0x08003341
 8003334:	08003353 	.word	0x08003353
 8003338:	08003341 	.word	0x08003341
 800333c:	080033d7 	.word	0x080033d7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003344:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d046      	beq.n	80033da <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003350:	e043      	b.n	80033da <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003356:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800335a:	d140      	bne.n	80033de <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003360:	e03d      	b.n	80033de <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	699b      	ldr	r3, [r3, #24]
 8003366:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800336a:	d121      	bne.n	80033b0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	2b03      	cmp	r3, #3
 8003370:	d837      	bhi.n	80033e2 <DMA_CheckFifoParam+0xda>
 8003372:	a201      	add	r2, pc, #4	; (adr r2, 8003378 <DMA_CheckFifoParam+0x70>)
 8003374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003378:	08003389 	.word	0x08003389
 800337c:	0800338f 	.word	0x0800338f
 8003380:	08003389 	.word	0x08003389
 8003384:	080033a1 	.word	0x080033a1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	73fb      	strb	r3, [r7, #15]
      break;
 800338c:	e030      	b.n	80033f0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003392:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d025      	beq.n	80033e6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800339e:	e022      	b.n	80033e6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80033a8:	d11f      	bne.n	80033ea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80033ae:	e01c      	b.n	80033ea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d903      	bls.n	80033be <DMA_CheckFifoParam+0xb6>
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	2b03      	cmp	r3, #3
 80033ba:	d003      	beq.n	80033c4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80033bc:	e018      	b.n	80033f0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	73fb      	strb	r3, [r7, #15]
      break;
 80033c2:	e015      	b.n	80033f0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d00e      	beq.n	80033ee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	73fb      	strb	r3, [r7, #15]
      break;
 80033d4:	e00b      	b.n	80033ee <DMA_CheckFifoParam+0xe6>
      break;
 80033d6:	bf00      	nop
 80033d8:	e00a      	b.n	80033f0 <DMA_CheckFifoParam+0xe8>
      break;
 80033da:	bf00      	nop
 80033dc:	e008      	b.n	80033f0 <DMA_CheckFifoParam+0xe8>
      break;
 80033de:	bf00      	nop
 80033e0:	e006      	b.n	80033f0 <DMA_CheckFifoParam+0xe8>
      break;
 80033e2:	bf00      	nop
 80033e4:	e004      	b.n	80033f0 <DMA_CheckFifoParam+0xe8>
      break;
 80033e6:	bf00      	nop
 80033e8:	e002      	b.n	80033f0 <DMA_CheckFifoParam+0xe8>
      break;   
 80033ea:	bf00      	nop
 80033ec:	e000      	b.n	80033f0 <DMA_CheckFifoParam+0xe8>
      break;
 80033ee:	bf00      	nop
    }
  } 
  
  return status; 
 80033f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3714      	adds	r7, #20
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop

08003400 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003400:	b480      	push	{r7}
 8003402:	b089      	sub	sp, #36	; 0x24
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800340a:	2300      	movs	r3, #0
 800340c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800340e:	2300      	movs	r3, #0
 8003410:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003412:	2300      	movs	r3, #0
 8003414:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003416:	2300      	movs	r3, #0
 8003418:	61fb      	str	r3, [r7, #28]
 800341a:	e177      	b.n	800370c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800341c:	2201      	movs	r2, #1
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	fa02 f303 	lsl.w	r3, r2, r3
 8003424:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	697a      	ldr	r2, [r7, #20]
 800342c:	4013      	ands	r3, r2
 800342e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003430:	693a      	ldr	r2, [r7, #16]
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	429a      	cmp	r2, r3
 8003436:	f040 8166 	bne.w	8003706 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	f003 0303 	and.w	r3, r3, #3
 8003442:	2b01      	cmp	r3, #1
 8003444:	d005      	beq.n	8003452 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800344e:	2b02      	cmp	r3, #2
 8003450:	d130      	bne.n	80034b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	005b      	lsls	r3, r3, #1
 800345c:	2203      	movs	r2, #3
 800345e:	fa02 f303 	lsl.w	r3, r2, r3
 8003462:	43db      	mvns	r3, r3
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	4013      	ands	r3, r2
 8003468:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	68da      	ldr	r2, [r3, #12]
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	005b      	lsls	r3, r3, #1
 8003472:	fa02 f303 	lsl.w	r3, r2, r3
 8003476:	69ba      	ldr	r2, [r7, #24]
 8003478:	4313      	orrs	r3, r2
 800347a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	69ba      	ldr	r2, [r7, #24]
 8003480:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003488:	2201      	movs	r2, #1
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	fa02 f303 	lsl.w	r3, r2, r3
 8003490:	43db      	mvns	r3, r3
 8003492:	69ba      	ldr	r2, [r7, #24]
 8003494:	4013      	ands	r3, r2
 8003496:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	091b      	lsrs	r3, r3, #4
 800349e:	f003 0201 	and.w	r2, r3, #1
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	fa02 f303 	lsl.w	r3, r2, r3
 80034a8:	69ba      	ldr	r2, [r7, #24]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	69ba      	ldr	r2, [r7, #24]
 80034b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f003 0303 	and.w	r3, r3, #3
 80034bc:	2b03      	cmp	r3, #3
 80034be:	d017      	beq.n	80034f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	005b      	lsls	r3, r3, #1
 80034ca:	2203      	movs	r2, #3
 80034cc:	fa02 f303 	lsl.w	r3, r2, r3
 80034d0:	43db      	mvns	r3, r3
 80034d2:	69ba      	ldr	r2, [r7, #24]
 80034d4:	4013      	ands	r3, r2
 80034d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	689a      	ldr	r2, [r3, #8]
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	005b      	lsls	r3, r3, #1
 80034e0:	fa02 f303 	lsl.w	r3, r2, r3
 80034e4:	69ba      	ldr	r2, [r7, #24]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	69ba      	ldr	r2, [r7, #24]
 80034ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f003 0303 	and.w	r3, r3, #3
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d123      	bne.n	8003544 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	08da      	lsrs	r2, r3, #3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	3208      	adds	r2, #8
 8003504:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003508:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	f003 0307 	and.w	r3, r3, #7
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	220f      	movs	r2, #15
 8003514:	fa02 f303 	lsl.w	r3, r2, r3
 8003518:	43db      	mvns	r3, r3
 800351a:	69ba      	ldr	r2, [r7, #24]
 800351c:	4013      	ands	r3, r2
 800351e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	691a      	ldr	r2, [r3, #16]
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	f003 0307 	and.w	r3, r3, #7
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	fa02 f303 	lsl.w	r3, r2, r3
 8003530:	69ba      	ldr	r2, [r7, #24]
 8003532:	4313      	orrs	r3, r2
 8003534:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	08da      	lsrs	r2, r3, #3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	3208      	adds	r2, #8
 800353e:	69b9      	ldr	r1, [r7, #24]
 8003540:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	005b      	lsls	r3, r3, #1
 800354e:	2203      	movs	r2, #3
 8003550:	fa02 f303 	lsl.w	r3, r2, r3
 8003554:	43db      	mvns	r3, r3
 8003556:	69ba      	ldr	r2, [r7, #24]
 8003558:	4013      	ands	r3, r2
 800355a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f003 0203 	and.w	r2, r3, #3
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	005b      	lsls	r3, r3, #1
 8003568:	fa02 f303 	lsl.w	r3, r2, r3
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	4313      	orrs	r3, r2
 8003570:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	69ba      	ldr	r2, [r7, #24]
 8003576:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003580:	2b00      	cmp	r3, #0
 8003582:	f000 80c0 	beq.w	8003706 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003586:	2300      	movs	r3, #0
 8003588:	60fb      	str	r3, [r7, #12]
 800358a:	4b66      	ldr	r3, [pc, #408]	; (8003724 <HAL_GPIO_Init+0x324>)
 800358c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800358e:	4a65      	ldr	r2, [pc, #404]	; (8003724 <HAL_GPIO_Init+0x324>)
 8003590:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003594:	6453      	str	r3, [r2, #68]	; 0x44
 8003596:	4b63      	ldr	r3, [pc, #396]	; (8003724 <HAL_GPIO_Init+0x324>)
 8003598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800359a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800359e:	60fb      	str	r3, [r7, #12]
 80035a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80035a2:	4a61      	ldr	r2, [pc, #388]	; (8003728 <HAL_GPIO_Init+0x328>)
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	089b      	lsrs	r3, r3, #2
 80035a8:	3302      	adds	r3, #2
 80035aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	f003 0303 	and.w	r3, r3, #3
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	220f      	movs	r2, #15
 80035ba:	fa02 f303 	lsl.w	r3, r2, r3
 80035be:	43db      	mvns	r3, r3
 80035c0:	69ba      	ldr	r2, [r7, #24]
 80035c2:	4013      	ands	r3, r2
 80035c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a58      	ldr	r2, [pc, #352]	; (800372c <HAL_GPIO_Init+0x32c>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d037      	beq.n	800363e <HAL_GPIO_Init+0x23e>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a57      	ldr	r2, [pc, #348]	; (8003730 <HAL_GPIO_Init+0x330>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d031      	beq.n	800363a <HAL_GPIO_Init+0x23a>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a56      	ldr	r2, [pc, #344]	; (8003734 <HAL_GPIO_Init+0x334>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d02b      	beq.n	8003636 <HAL_GPIO_Init+0x236>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a55      	ldr	r2, [pc, #340]	; (8003738 <HAL_GPIO_Init+0x338>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d025      	beq.n	8003632 <HAL_GPIO_Init+0x232>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a54      	ldr	r2, [pc, #336]	; (800373c <HAL_GPIO_Init+0x33c>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d01f      	beq.n	800362e <HAL_GPIO_Init+0x22e>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a53      	ldr	r2, [pc, #332]	; (8003740 <HAL_GPIO_Init+0x340>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d019      	beq.n	800362a <HAL_GPIO_Init+0x22a>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a52      	ldr	r2, [pc, #328]	; (8003744 <HAL_GPIO_Init+0x344>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d013      	beq.n	8003626 <HAL_GPIO_Init+0x226>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a51      	ldr	r2, [pc, #324]	; (8003748 <HAL_GPIO_Init+0x348>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d00d      	beq.n	8003622 <HAL_GPIO_Init+0x222>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a50      	ldr	r2, [pc, #320]	; (800374c <HAL_GPIO_Init+0x34c>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d007      	beq.n	800361e <HAL_GPIO_Init+0x21e>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a4f      	ldr	r2, [pc, #316]	; (8003750 <HAL_GPIO_Init+0x350>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d101      	bne.n	800361a <HAL_GPIO_Init+0x21a>
 8003616:	2309      	movs	r3, #9
 8003618:	e012      	b.n	8003640 <HAL_GPIO_Init+0x240>
 800361a:	230a      	movs	r3, #10
 800361c:	e010      	b.n	8003640 <HAL_GPIO_Init+0x240>
 800361e:	2308      	movs	r3, #8
 8003620:	e00e      	b.n	8003640 <HAL_GPIO_Init+0x240>
 8003622:	2307      	movs	r3, #7
 8003624:	e00c      	b.n	8003640 <HAL_GPIO_Init+0x240>
 8003626:	2306      	movs	r3, #6
 8003628:	e00a      	b.n	8003640 <HAL_GPIO_Init+0x240>
 800362a:	2305      	movs	r3, #5
 800362c:	e008      	b.n	8003640 <HAL_GPIO_Init+0x240>
 800362e:	2304      	movs	r3, #4
 8003630:	e006      	b.n	8003640 <HAL_GPIO_Init+0x240>
 8003632:	2303      	movs	r3, #3
 8003634:	e004      	b.n	8003640 <HAL_GPIO_Init+0x240>
 8003636:	2302      	movs	r3, #2
 8003638:	e002      	b.n	8003640 <HAL_GPIO_Init+0x240>
 800363a:	2301      	movs	r3, #1
 800363c:	e000      	b.n	8003640 <HAL_GPIO_Init+0x240>
 800363e:	2300      	movs	r3, #0
 8003640:	69fa      	ldr	r2, [r7, #28]
 8003642:	f002 0203 	and.w	r2, r2, #3
 8003646:	0092      	lsls	r2, r2, #2
 8003648:	4093      	lsls	r3, r2
 800364a:	69ba      	ldr	r2, [r7, #24]
 800364c:	4313      	orrs	r3, r2
 800364e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003650:	4935      	ldr	r1, [pc, #212]	; (8003728 <HAL_GPIO_Init+0x328>)
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	089b      	lsrs	r3, r3, #2
 8003656:	3302      	adds	r3, #2
 8003658:	69ba      	ldr	r2, [r7, #24]
 800365a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800365e:	4b3d      	ldr	r3, [pc, #244]	; (8003754 <HAL_GPIO_Init+0x354>)
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	43db      	mvns	r3, r3
 8003668:	69ba      	ldr	r2, [r7, #24]
 800366a:	4013      	ands	r3, r2
 800366c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d003      	beq.n	8003682 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800367a:	69ba      	ldr	r2, [r7, #24]
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	4313      	orrs	r3, r2
 8003680:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003682:	4a34      	ldr	r2, [pc, #208]	; (8003754 <HAL_GPIO_Init+0x354>)
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003688:	4b32      	ldr	r3, [pc, #200]	; (8003754 <HAL_GPIO_Init+0x354>)
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	43db      	mvns	r3, r3
 8003692:	69ba      	ldr	r2, [r7, #24]
 8003694:	4013      	ands	r3, r2
 8003696:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d003      	beq.n	80036ac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80036a4:	69ba      	ldr	r2, [r7, #24]
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80036ac:	4a29      	ldr	r2, [pc, #164]	; (8003754 <HAL_GPIO_Init+0x354>)
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80036b2:	4b28      	ldr	r3, [pc, #160]	; (8003754 <HAL_GPIO_Init+0x354>)
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	43db      	mvns	r3, r3
 80036bc:	69ba      	ldr	r2, [r7, #24]
 80036be:	4013      	ands	r3, r2
 80036c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d003      	beq.n	80036d6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80036ce:	69ba      	ldr	r2, [r7, #24]
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036d6:	4a1f      	ldr	r2, [pc, #124]	; (8003754 <HAL_GPIO_Init+0x354>)
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036dc:	4b1d      	ldr	r3, [pc, #116]	; (8003754 <HAL_GPIO_Init+0x354>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	43db      	mvns	r3, r3
 80036e6:	69ba      	ldr	r2, [r7, #24]
 80036e8:	4013      	ands	r3, r2
 80036ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d003      	beq.n	8003700 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80036f8:	69ba      	ldr	r2, [r7, #24]
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003700:	4a14      	ldr	r2, [pc, #80]	; (8003754 <HAL_GPIO_Init+0x354>)
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	3301      	adds	r3, #1
 800370a:	61fb      	str	r3, [r7, #28]
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	2b0f      	cmp	r3, #15
 8003710:	f67f ae84 	bls.w	800341c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003714:	bf00      	nop
 8003716:	bf00      	nop
 8003718:	3724      	adds	r7, #36	; 0x24
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop
 8003724:	40023800 	.word	0x40023800
 8003728:	40013800 	.word	0x40013800
 800372c:	40020000 	.word	0x40020000
 8003730:	40020400 	.word	0x40020400
 8003734:	40020800 	.word	0x40020800
 8003738:	40020c00 	.word	0x40020c00
 800373c:	40021000 	.word	0x40021000
 8003740:	40021400 	.word	0x40021400
 8003744:	40021800 	.word	0x40021800
 8003748:	40021c00 	.word	0x40021c00
 800374c:	40022000 	.word	0x40022000
 8003750:	40022400 	.word	0x40022400
 8003754:	40013c00 	.word	0x40013c00

08003758 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003758:	b480      	push	{r7}
 800375a:	b085      	sub	sp, #20
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	460b      	mov	r3, r1
 8003762:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	691a      	ldr	r2, [r3, #16]
 8003768:	887b      	ldrh	r3, [r7, #2]
 800376a:	4013      	ands	r3, r2
 800376c:	2b00      	cmp	r3, #0
 800376e:	d002      	beq.n	8003776 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003770:	2301      	movs	r3, #1
 8003772:	73fb      	strb	r3, [r7, #15]
 8003774:	e001      	b.n	800377a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003776:	2300      	movs	r3, #0
 8003778:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800377a:	7bfb      	ldrb	r3, [r7, #15]
}
 800377c:	4618      	mov	r0, r3
 800377e:	3714      	adds	r7, #20
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	460b      	mov	r3, r1
 8003792:	807b      	strh	r3, [r7, #2]
 8003794:	4613      	mov	r3, r2
 8003796:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003798:	787b      	ldrb	r3, [r7, #1]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d003      	beq.n	80037a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800379e:	887a      	ldrh	r2, [r7, #2]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80037a4:	e003      	b.n	80037ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80037a6:	887b      	ldrh	r3, [r7, #2]
 80037a8:	041a      	lsls	r2, r3, #16
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	619a      	str	r2, [r3, #24]
}
 80037ae:	bf00      	nop
 80037b0:	370c      	adds	r7, #12
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
	...

080037bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	4603      	mov	r3, r0
 80037c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80037c6:	4b08      	ldr	r3, [pc, #32]	; (80037e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037c8:	695a      	ldr	r2, [r3, #20]
 80037ca:	88fb      	ldrh	r3, [r7, #6]
 80037cc:	4013      	ands	r3, r2
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d006      	beq.n	80037e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80037d2:	4a05      	ldr	r2, [pc, #20]	; (80037e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037d4:	88fb      	ldrh	r3, [r7, #6]
 80037d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80037d8:	88fb      	ldrh	r3, [r7, #6]
 80037da:	4618      	mov	r0, r3
 80037dc:	f7fd f844 	bl	8000868 <HAL_GPIO_EXTI_Callback>
  }
}
 80037e0:	bf00      	nop
 80037e2:	3708      	adds	r7, #8
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	40013c00 	.word	0x40013c00

080037ec <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80037ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037ee:	b08f      	sub	sp, #60	; 0x3c
 80037f0:	af0a      	add	r7, sp, #40	; 0x28
 80037f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d101      	bne.n	80037fe <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e054      	b.n	80038a8 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800380a:	b2db      	uxtb	r3, r3
 800380c:	2b00      	cmp	r3, #0
 800380e:	d106      	bne.n	800381e <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f00a fa15 	bl	800dc48 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2203      	movs	r2, #3
 8003822:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800382a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800382e:	2b00      	cmp	r3, #0
 8003830:	d102      	bne.n	8003838 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4618      	mov	r0, r3
 800383e:	f006 f8bd 	bl	80099bc <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	603b      	str	r3, [r7, #0]
 8003848:	687e      	ldr	r6, [r7, #4]
 800384a:	466d      	mov	r5, sp
 800384c:	f106 0410 	add.w	r4, r6, #16
 8003850:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003852:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003854:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003856:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003858:	e894 0003 	ldmia.w	r4, {r0, r1}
 800385c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003860:	1d33      	adds	r3, r6, #4
 8003862:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003864:	6838      	ldr	r0, [r7, #0]
 8003866:	f006 f837 	bl	80098d8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	2101      	movs	r1, #1
 8003870:	4618      	mov	r0, r3
 8003872:	f006 f8b4 	bl	80099de <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	603b      	str	r3, [r7, #0]
 800387c:	687e      	ldr	r6, [r7, #4]
 800387e:	466d      	mov	r5, sp
 8003880:	f106 0410 	add.w	r4, r6, #16
 8003884:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003886:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003888:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800388a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800388c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003890:	e885 0003 	stmia.w	r5, {r0, r1}
 8003894:	1d33      	adds	r3, r6, #4
 8003896:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003898:	6838      	ldr	r0, [r7, #0]
 800389a:	f006 fa3d 	bl	8009d18 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2201      	movs	r2, #1
 80038a2:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80038a6:	2300      	movs	r3, #0
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3714      	adds	r7, #20
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080038b0 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80038b0:	b590      	push	{r4, r7, lr}
 80038b2:	b089      	sub	sp, #36	; 0x24
 80038b4:	af04      	add	r7, sp, #16
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	4608      	mov	r0, r1
 80038ba:	4611      	mov	r1, r2
 80038bc:	461a      	mov	r2, r3
 80038be:	4603      	mov	r3, r0
 80038c0:	70fb      	strb	r3, [r7, #3]
 80038c2:	460b      	mov	r3, r1
 80038c4:	70bb      	strb	r3, [r7, #2]
 80038c6:	4613      	mov	r3, r2
 80038c8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d101      	bne.n	80038d8 <HAL_HCD_HC_Init+0x28>
 80038d4:	2302      	movs	r3, #2
 80038d6:	e076      	b.n	80039c6 <HAL_HCD_HC_Init+0x116>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80038e0:	78fb      	ldrb	r3, [r7, #3]
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	212c      	movs	r1, #44	; 0x2c
 80038e6:	fb01 f303 	mul.w	r3, r1, r3
 80038ea:	4413      	add	r3, r2
 80038ec:	333d      	adds	r3, #61	; 0x3d
 80038ee:	2200      	movs	r2, #0
 80038f0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80038f2:	78fb      	ldrb	r3, [r7, #3]
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	212c      	movs	r1, #44	; 0x2c
 80038f8:	fb01 f303 	mul.w	r3, r1, r3
 80038fc:	4413      	add	r3, r2
 80038fe:	3338      	adds	r3, #56	; 0x38
 8003900:	787a      	ldrb	r2, [r7, #1]
 8003902:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003904:	78fb      	ldrb	r3, [r7, #3]
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	212c      	movs	r1, #44	; 0x2c
 800390a:	fb01 f303 	mul.w	r3, r1, r3
 800390e:	4413      	add	r3, r2
 8003910:	3340      	adds	r3, #64	; 0x40
 8003912:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003914:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003916:	78fb      	ldrb	r3, [r7, #3]
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	212c      	movs	r1, #44	; 0x2c
 800391c:	fb01 f303 	mul.w	r3, r1, r3
 8003920:	4413      	add	r3, r2
 8003922:	3339      	adds	r3, #57	; 0x39
 8003924:	78fa      	ldrb	r2, [r7, #3]
 8003926:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003928:	78fb      	ldrb	r3, [r7, #3]
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	212c      	movs	r1, #44	; 0x2c
 800392e:	fb01 f303 	mul.w	r3, r1, r3
 8003932:	4413      	add	r3, r2
 8003934:	333f      	adds	r3, #63	; 0x3f
 8003936:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800393a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800393c:	78fb      	ldrb	r3, [r7, #3]
 800393e:	78ba      	ldrb	r2, [r7, #2]
 8003940:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003944:	b2d0      	uxtb	r0, r2
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	212c      	movs	r1, #44	; 0x2c
 800394a:	fb01 f303 	mul.w	r3, r1, r3
 800394e:	4413      	add	r3, r2
 8003950:	333a      	adds	r3, #58	; 0x3a
 8003952:	4602      	mov	r2, r0
 8003954:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003956:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800395a:	2b00      	cmp	r3, #0
 800395c:	da09      	bge.n	8003972 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800395e:	78fb      	ldrb	r3, [r7, #3]
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	212c      	movs	r1, #44	; 0x2c
 8003964:	fb01 f303 	mul.w	r3, r1, r3
 8003968:	4413      	add	r3, r2
 800396a:	333b      	adds	r3, #59	; 0x3b
 800396c:	2201      	movs	r2, #1
 800396e:	701a      	strb	r2, [r3, #0]
 8003970:	e008      	b.n	8003984 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003972:	78fb      	ldrb	r3, [r7, #3]
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	212c      	movs	r1, #44	; 0x2c
 8003978:	fb01 f303 	mul.w	r3, r1, r3
 800397c:	4413      	add	r3, r2
 800397e:	333b      	adds	r3, #59	; 0x3b
 8003980:	2200      	movs	r2, #0
 8003982:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8003984:	78fb      	ldrb	r3, [r7, #3]
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	212c      	movs	r1, #44	; 0x2c
 800398a:	fb01 f303 	mul.w	r3, r1, r3
 800398e:	4413      	add	r3, r2
 8003990:	333c      	adds	r3, #60	; 0x3c
 8003992:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003996:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6818      	ldr	r0, [r3, #0]
 800399c:	787c      	ldrb	r4, [r7, #1]
 800399e:	78ba      	ldrb	r2, [r7, #2]
 80039a0:	78f9      	ldrb	r1, [r7, #3]
 80039a2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80039a4:	9302      	str	r3, [sp, #8]
 80039a6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80039aa:	9301      	str	r3, [sp, #4]
 80039ac:	f897 3020 	ldrb.w	r3, [r7, #32]
 80039b0:	9300      	str	r3, [sp, #0]
 80039b2:	4623      	mov	r3, r4
 80039b4:	f006 fb36 	bl	800a024 <USB_HC_Init>
 80039b8:	4603      	mov	r3, r0
 80039ba:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80039c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3714      	adds	r7, #20
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd90      	pop	{r4, r7, pc}

080039ce <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80039ce:	b580      	push	{r7, lr}
 80039d0:	b084      	sub	sp, #16
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]
 80039d6:	460b      	mov	r3, r1
 80039d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80039da:	2300      	movs	r3, #0
 80039dc:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d101      	bne.n	80039ec <HAL_HCD_HC_Halt+0x1e>
 80039e8:	2302      	movs	r3, #2
 80039ea:	e00f      	b.n	8003a0c <HAL_HCD_HC_Halt+0x3e>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	78fa      	ldrb	r2, [r7, #3]
 80039fa:	4611      	mov	r1, r2
 80039fc:	4618      	mov	r0, r3
 80039fe:	f006 fd86 	bl	800a50e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3710      	adds	r7, #16
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b082      	sub	sp, #8
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	4608      	mov	r0, r1
 8003a1e:	4611      	mov	r1, r2
 8003a20:	461a      	mov	r2, r3
 8003a22:	4603      	mov	r3, r0
 8003a24:	70fb      	strb	r3, [r7, #3]
 8003a26:	460b      	mov	r3, r1
 8003a28:	70bb      	strb	r3, [r7, #2]
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003a2e:	78fb      	ldrb	r3, [r7, #3]
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	212c      	movs	r1, #44	; 0x2c
 8003a34:	fb01 f303 	mul.w	r3, r1, r3
 8003a38:	4413      	add	r3, r2
 8003a3a:	333b      	adds	r3, #59	; 0x3b
 8003a3c:	78ba      	ldrb	r2, [r7, #2]
 8003a3e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003a40:	78fb      	ldrb	r3, [r7, #3]
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	212c      	movs	r1, #44	; 0x2c
 8003a46:	fb01 f303 	mul.w	r3, r1, r3
 8003a4a:	4413      	add	r3, r2
 8003a4c:	333f      	adds	r3, #63	; 0x3f
 8003a4e:	787a      	ldrb	r2, [r7, #1]
 8003a50:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003a52:	7c3b      	ldrb	r3, [r7, #16]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d112      	bne.n	8003a7e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003a58:	78fb      	ldrb	r3, [r7, #3]
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	212c      	movs	r1, #44	; 0x2c
 8003a5e:	fb01 f303 	mul.w	r3, r1, r3
 8003a62:	4413      	add	r3, r2
 8003a64:	3342      	adds	r3, #66	; 0x42
 8003a66:	2203      	movs	r2, #3
 8003a68:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003a6a:	78fb      	ldrb	r3, [r7, #3]
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	212c      	movs	r1, #44	; 0x2c
 8003a70:	fb01 f303 	mul.w	r3, r1, r3
 8003a74:	4413      	add	r3, r2
 8003a76:	333d      	adds	r3, #61	; 0x3d
 8003a78:	7f3a      	ldrb	r2, [r7, #28]
 8003a7a:	701a      	strb	r2, [r3, #0]
 8003a7c:	e008      	b.n	8003a90 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003a7e:	78fb      	ldrb	r3, [r7, #3]
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	212c      	movs	r1, #44	; 0x2c
 8003a84:	fb01 f303 	mul.w	r3, r1, r3
 8003a88:	4413      	add	r3, r2
 8003a8a:	3342      	adds	r3, #66	; 0x42
 8003a8c:	2202      	movs	r2, #2
 8003a8e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003a90:	787b      	ldrb	r3, [r7, #1]
 8003a92:	2b03      	cmp	r3, #3
 8003a94:	f200 80c6 	bhi.w	8003c24 <HAL_HCD_HC_SubmitRequest+0x210>
 8003a98:	a201      	add	r2, pc, #4	; (adr r2, 8003aa0 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8003a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a9e:	bf00      	nop
 8003aa0:	08003ab1 	.word	0x08003ab1
 8003aa4:	08003c11 	.word	0x08003c11
 8003aa8:	08003b15 	.word	0x08003b15
 8003aac:	08003b93 	.word	0x08003b93
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003ab0:	7c3b      	ldrb	r3, [r7, #16]
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	f040 80b8 	bne.w	8003c28 <HAL_HCD_HC_SubmitRequest+0x214>
 8003ab8:	78bb      	ldrb	r3, [r7, #2]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	f040 80b4 	bne.w	8003c28 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8003ac0:	8b3b      	ldrh	r3, [r7, #24]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d108      	bne.n	8003ad8 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8003ac6:	78fb      	ldrb	r3, [r7, #3]
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	212c      	movs	r1, #44	; 0x2c
 8003acc:	fb01 f303 	mul.w	r3, r1, r3
 8003ad0:	4413      	add	r3, r2
 8003ad2:	3355      	adds	r3, #85	; 0x55
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003ad8:	78fb      	ldrb	r3, [r7, #3]
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	212c      	movs	r1, #44	; 0x2c
 8003ade:	fb01 f303 	mul.w	r3, r1, r3
 8003ae2:	4413      	add	r3, r2
 8003ae4:	3355      	adds	r3, #85	; 0x55
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d109      	bne.n	8003b00 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003aec:	78fb      	ldrb	r3, [r7, #3]
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	212c      	movs	r1, #44	; 0x2c
 8003af2:	fb01 f303 	mul.w	r3, r1, r3
 8003af6:	4413      	add	r3, r2
 8003af8:	3342      	adds	r3, #66	; 0x42
 8003afa:	2200      	movs	r2, #0
 8003afc:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003afe:	e093      	b.n	8003c28 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003b00:	78fb      	ldrb	r3, [r7, #3]
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	212c      	movs	r1, #44	; 0x2c
 8003b06:	fb01 f303 	mul.w	r3, r1, r3
 8003b0a:	4413      	add	r3, r2
 8003b0c:	3342      	adds	r3, #66	; 0x42
 8003b0e:	2202      	movs	r2, #2
 8003b10:	701a      	strb	r2, [r3, #0]
      break;
 8003b12:	e089      	b.n	8003c28 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003b14:	78bb      	ldrb	r3, [r7, #2]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d11d      	bne.n	8003b56 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003b1a:	78fb      	ldrb	r3, [r7, #3]
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	212c      	movs	r1, #44	; 0x2c
 8003b20:	fb01 f303 	mul.w	r3, r1, r3
 8003b24:	4413      	add	r3, r2
 8003b26:	3355      	adds	r3, #85	; 0x55
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d109      	bne.n	8003b42 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003b2e:	78fb      	ldrb	r3, [r7, #3]
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	212c      	movs	r1, #44	; 0x2c
 8003b34:	fb01 f303 	mul.w	r3, r1, r3
 8003b38:	4413      	add	r3, r2
 8003b3a:	3342      	adds	r3, #66	; 0x42
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003b40:	e073      	b.n	8003c2a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003b42:	78fb      	ldrb	r3, [r7, #3]
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	212c      	movs	r1, #44	; 0x2c
 8003b48:	fb01 f303 	mul.w	r3, r1, r3
 8003b4c:	4413      	add	r3, r2
 8003b4e:	3342      	adds	r3, #66	; 0x42
 8003b50:	2202      	movs	r2, #2
 8003b52:	701a      	strb	r2, [r3, #0]
      break;
 8003b54:	e069      	b.n	8003c2a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003b56:	78fb      	ldrb	r3, [r7, #3]
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	212c      	movs	r1, #44	; 0x2c
 8003b5c:	fb01 f303 	mul.w	r3, r1, r3
 8003b60:	4413      	add	r3, r2
 8003b62:	3354      	adds	r3, #84	; 0x54
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d109      	bne.n	8003b7e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003b6a:	78fb      	ldrb	r3, [r7, #3]
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	212c      	movs	r1, #44	; 0x2c
 8003b70:	fb01 f303 	mul.w	r3, r1, r3
 8003b74:	4413      	add	r3, r2
 8003b76:	3342      	adds	r3, #66	; 0x42
 8003b78:	2200      	movs	r2, #0
 8003b7a:	701a      	strb	r2, [r3, #0]
      break;
 8003b7c:	e055      	b.n	8003c2a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003b7e:	78fb      	ldrb	r3, [r7, #3]
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	212c      	movs	r1, #44	; 0x2c
 8003b84:	fb01 f303 	mul.w	r3, r1, r3
 8003b88:	4413      	add	r3, r2
 8003b8a:	3342      	adds	r3, #66	; 0x42
 8003b8c:	2202      	movs	r2, #2
 8003b8e:	701a      	strb	r2, [r3, #0]
      break;
 8003b90:	e04b      	b.n	8003c2a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003b92:	78bb      	ldrb	r3, [r7, #2]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d11d      	bne.n	8003bd4 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003b98:	78fb      	ldrb	r3, [r7, #3]
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	212c      	movs	r1, #44	; 0x2c
 8003b9e:	fb01 f303 	mul.w	r3, r1, r3
 8003ba2:	4413      	add	r3, r2
 8003ba4:	3355      	adds	r3, #85	; 0x55
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d109      	bne.n	8003bc0 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003bac:	78fb      	ldrb	r3, [r7, #3]
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	212c      	movs	r1, #44	; 0x2c
 8003bb2:	fb01 f303 	mul.w	r3, r1, r3
 8003bb6:	4413      	add	r3, r2
 8003bb8:	3342      	adds	r3, #66	; 0x42
 8003bba:	2200      	movs	r2, #0
 8003bbc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003bbe:	e034      	b.n	8003c2a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003bc0:	78fb      	ldrb	r3, [r7, #3]
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	212c      	movs	r1, #44	; 0x2c
 8003bc6:	fb01 f303 	mul.w	r3, r1, r3
 8003bca:	4413      	add	r3, r2
 8003bcc:	3342      	adds	r3, #66	; 0x42
 8003bce:	2202      	movs	r2, #2
 8003bd0:	701a      	strb	r2, [r3, #0]
      break;
 8003bd2:	e02a      	b.n	8003c2a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003bd4:	78fb      	ldrb	r3, [r7, #3]
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	212c      	movs	r1, #44	; 0x2c
 8003bda:	fb01 f303 	mul.w	r3, r1, r3
 8003bde:	4413      	add	r3, r2
 8003be0:	3354      	adds	r3, #84	; 0x54
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d109      	bne.n	8003bfc <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003be8:	78fb      	ldrb	r3, [r7, #3]
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	212c      	movs	r1, #44	; 0x2c
 8003bee:	fb01 f303 	mul.w	r3, r1, r3
 8003bf2:	4413      	add	r3, r2
 8003bf4:	3342      	adds	r3, #66	; 0x42
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	701a      	strb	r2, [r3, #0]
      break;
 8003bfa:	e016      	b.n	8003c2a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003bfc:	78fb      	ldrb	r3, [r7, #3]
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	212c      	movs	r1, #44	; 0x2c
 8003c02:	fb01 f303 	mul.w	r3, r1, r3
 8003c06:	4413      	add	r3, r2
 8003c08:	3342      	adds	r3, #66	; 0x42
 8003c0a:	2202      	movs	r2, #2
 8003c0c:	701a      	strb	r2, [r3, #0]
      break;
 8003c0e:	e00c      	b.n	8003c2a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003c10:	78fb      	ldrb	r3, [r7, #3]
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	212c      	movs	r1, #44	; 0x2c
 8003c16:	fb01 f303 	mul.w	r3, r1, r3
 8003c1a:	4413      	add	r3, r2
 8003c1c:	3342      	adds	r3, #66	; 0x42
 8003c1e:	2200      	movs	r2, #0
 8003c20:	701a      	strb	r2, [r3, #0]
      break;
 8003c22:	e002      	b.n	8003c2a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003c24:	bf00      	nop
 8003c26:	e000      	b.n	8003c2a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8003c28:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003c2a:	78fb      	ldrb	r3, [r7, #3]
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	212c      	movs	r1, #44	; 0x2c
 8003c30:	fb01 f303 	mul.w	r3, r1, r3
 8003c34:	4413      	add	r3, r2
 8003c36:	3344      	adds	r3, #68	; 0x44
 8003c38:	697a      	ldr	r2, [r7, #20]
 8003c3a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003c3c:	78fb      	ldrb	r3, [r7, #3]
 8003c3e:	8b3a      	ldrh	r2, [r7, #24]
 8003c40:	6879      	ldr	r1, [r7, #4]
 8003c42:	202c      	movs	r0, #44	; 0x2c
 8003c44:	fb00 f303 	mul.w	r3, r0, r3
 8003c48:	440b      	add	r3, r1
 8003c4a:	334c      	adds	r3, #76	; 0x4c
 8003c4c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003c4e:	78fb      	ldrb	r3, [r7, #3]
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	212c      	movs	r1, #44	; 0x2c
 8003c54:	fb01 f303 	mul.w	r3, r1, r3
 8003c58:	4413      	add	r3, r2
 8003c5a:	3360      	adds	r3, #96	; 0x60
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003c60:	78fb      	ldrb	r3, [r7, #3]
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	212c      	movs	r1, #44	; 0x2c
 8003c66:	fb01 f303 	mul.w	r3, r1, r3
 8003c6a:	4413      	add	r3, r2
 8003c6c:	3350      	adds	r3, #80	; 0x50
 8003c6e:	2200      	movs	r2, #0
 8003c70:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003c72:	78fb      	ldrb	r3, [r7, #3]
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	212c      	movs	r1, #44	; 0x2c
 8003c78:	fb01 f303 	mul.w	r3, r1, r3
 8003c7c:	4413      	add	r3, r2
 8003c7e:	3339      	adds	r3, #57	; 0x39
 8003c80:	78fa      	ldrb	r2, [r7, #3]
 8003c82:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003c84:	78fb      	ldrb	r3, [r7, #3]
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	212c      	movs	r1, #44	; 0x2c
 8003c8a:	fb01 f303 	mul.w	r3, r1, r3
 8003c8e:	4413      	add	r3, r2
 8003c90:	3361      	adds	r3, #97	; 0x61
 8003c92:	2200      	movs	r2, #0
 8003c94:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6818      	ldr	r0, [r3, #0]
 8003c9a:	78fb      	ldrb	r3, [r7, #3]
 8003c9c:	222c      	movs	r2, #44	; 0x2c
 8003c9e:	fb02 f303 	mul.w	r3, r2, r3
 8003ca2:	3338      	adds	r3, #56	; 0x38
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	18d1      	adds	r1, r2, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	691b      	ldr	r3, [r3, #16]
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	461a      	mov	r2, r3
 8003cb0:	f006 fada 	bl	800a268 <USB_HC_StartXfer>
 8003cb4:	4603      	mov	r3, r0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3708      	adds	r7, #8
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop

08003cc0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b086      	sub	sp, #24
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f005 ffdb 	bl	8009c92 <USB_GetMode>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	f040 80f6 	bne.w	8003ed0 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f005 ffbf 	bl	8009c6c <USB_ReadInterrupts>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	f000 80ec 	beq.w	8003ece <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f005 ffb6 	bl	8009c6c <USB_ReadInterrupts>
 8003d00:	4603      	mov	r3, r0
 8003d02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d06:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d0a:	d104      	bne.n	8003d16 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003d14:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f005 ffa6 	bl	8009c6c <USB_ReadInterrupts>
 8003d20:	4603      	mov	r3, r0
 8003d22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d2a:	d104      	bne.n	8003d36 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003d34:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f005 ff96 	bl	8009c6c <USB_ReadInterrupts>
 8003d40:	4603      	mov	r3, r0
 8003d42:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d46:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d4a:	d104      	bne.n	8003d56 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003d54:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f005 ff86 	bl	8009c6c <USB_ReadInterrupts>
 8003d60:	4603      	mov	r3, r0
 8003d62:	f003 0302 	and.w	r3, r3, #2
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d103      	bne.n	8003d72 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	2202      	movs	r2, #2
 8003d70:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4618      	mov	r0, r3
 8003d78:	f005 ff78 	bl	8009c6c <USB_ReadInterrupts>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d86:	d11c      	bne.n	8003dc2 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003d90:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0301 	and.w	r3, r3, #1
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d10f      	bne.n	8003dc2 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003da2:	2110      	movs	r1, #16
 8003da4:	6938      	ldr	r0, [r7, #16]
 8003da6:	f005 fe67 	bl	8009a78 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003daa:	6938      	ldr	r0, [r7, #16]
 8003dac:	f005 fe98 	bl	8009ae0 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2101      	movs	r1, #1
 8003db6:	4618      	mov	r0, r3
 8003db8:	f006 f86e 	bl	8009e98 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f009 ffbd 	bl	800dd3c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f005 ff50 	bl	8009c6c <USB_ReadInterrupts>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dd2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003dd6:	d102      	bne.n	8003dde <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f001 f89e 	bl	8004f1a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4618      	mov	r0, r3
 8003de4:	f005 ff42 	bl	8009c6c <USB_ReadInterrupts>
 8003de8:	4603      	mov	r3, r0
 8003dea:	f003 0308 	and.w	r3, r3, #8
 8003dee:	2b08      	cmp	r3, #8
 8003df0:	d106      	bne.n	8003e00 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f009 ff86 	bl	800dd04 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2208      	movs	r2, #8
 8003dfe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4618      	mov	r0, r3
 8003e06:	f005 ff31 	bl	8009c6c <USB_ReadInterrupts>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	f003 0310 	and.w	r3, r3, #16
 8003e10:	2b10      	cmp	r3, #16
 8003e12:	d101      	bne.n	8003e18 <HAL_HCD_IRQHandler+0x158>
 8003e14:	2301      	movs	r3, #1
 8003e16:	e000      	b.n	8003e1a <HAL_HCD_IRQHandler+0x15a>
 8003e18:	2300      	movs	r3, #0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d012      	beq.n	8003e44 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	699a      	ldr	r2, [r3, #24]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f022 0210 	bic.w	r2, r2, #16
 8003e2c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 ffa1 	bl	8004d76 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	699a      	ldr	r2, [r3, #24]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f042 0210 	orr.w	r2, r2, #16
 8003e42:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f005 ff0f 	bl	8009c6c <USB_ReadInterrupts>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e58:	d13a      	bne.n	8003ed0 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f006 fb44 	bl	800a4ec <USB_HC_ReadInterrupt>
 8003e64:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003e66:	2300      	movs	r3, #0
 8003e68:	617b      	str	r3, [r7, #20]
 8003e6a:	e025      	b.n	8003eb8 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	f003 030f 	and.w	r3, r3, #15
 8003e72:	68ba      	ldr	r2, [r7, #8]
 8003e74:	fa22 f303 	lsr.w	r3, r2, r3
 8003e78:	f003 0301 	and.w	r3, r3, #1
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d018      	beq.n	8003eb2 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	015a      	lsls	r2, r3, #5
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	4413      	add	r3, r2
 8003e88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e96:	d106      	bne.n	8003ea6 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 f8ab 	bl	8003ffa <HCD_HC_IN_IRQHandler>
 8003ea4:	e005      	b.n	8003eb2 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	4619      	mov	r1, r3
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f000 fbf9 	bl	80046a4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	3301      	adds	r3, #1
 8003eb6:	617b      	str	r3, [r7, #20]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	697a      	ldr	r2, [r7, #20]
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d3d4      	bcc.n	8003e6c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003eca:	615a      	str	r2, [r3, #20]
 8003ecc:	e000      	b.n	8003ed0 <HAL_HCD_IRQHandler+0x210>
      return;
 8003ece:	bf00      	nop
    }
  }
}
 8003ed0:	3718      	adds	r7, #24
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}

08003ed6 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003ed6:	b580      	push	{r7, lr}
 8003ed8:	b082      	sub	sp, #8
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d101      	bne.n	8003eec <HAL_HCD_Start+0x16>
 8003ee8:	2302      	movs	r3, #2
 8003eea:	e013      	b.n	8003f14 <HAL_HCD_Start+0x3e>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2101      	movs	r1, #1
 8003efa:	4618      	mov	r0, r3
 8003efc:	f006 f830 	bl	8009f60 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4618      	mov	r0, r3
 8003f06:	f005 fd48 	bl	800999a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003f12:	2300      	movs	r3, #0
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3708      	adds	r7, #8
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d101      	bne.n	8003f32 <HAL_HCD_Stop+0x16>
 8003f2e:	2302      	movs	r3, #2
 8003f30:	e00d      	b.n	8003f4e <HAL_HCD_Stop+0x32>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2201      	movs	r2, #1
 8003f36:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f006 fc1e 	bl	800a780 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003f4c:	2300      	movs	r3, #0
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3708      	adds	r7, #8
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}

08003f56 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003f56:	b580      	push	{r7, lr}
 8003f58:	b082      	sub	sp, #8
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4618      	mov	r0, r3
 8003f64:	f005 ffd2 	bl	8009f0c <USB_ResetPort>
 8003f68:	4603      	mov	r3, r0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3708      	adds	r7, #8
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}

08003f72 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003f72:	b480      	push	{r7}
 8003f74:	b083      	sub	sp, #12
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
 8003f7a:	460b      	mov	r3, r1
 8003f7c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003f7e:	78fb      	ldrb	r3, [r7, #3]
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	212c      	movs	r1, #44	; 0x2c
 8003f84:	fb01 f303 	mul.w	r3, r1, r3
 8003f88:	4413      	add	r3, r2
 8003f8a:	3360      	adds	r3, #96	; 0x60
 8003f8c:	781b      	ldrb	r3, [r3, #0]
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	370c      	adds	r7, #12
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr

08003f9a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003f9a:	b480      	push	{r7}
 8003f9c:	b083      	sub	sp, #12
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
 8003fa2:	460b      	mov	r3, r1
 8003fa4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003fa6:	78fb      	ldrb	r3, [r7, #3]
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	212c      	movs	r1, #44	; 0x2c
 8003fac:	fb01 f303 	mul.w	r3, r1, r3
 8003fb0:	4413      	add	r3, r2
 8003fb2:	3350      	adds	r3, #80	; 0x50
 8003fb4:	681b      	ldr	r3, [r3, #0]
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	370c      	adds	r7, #12
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr

08003fc2 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003fc2:	b580      	push	{r7, lr}
 8003fc4:	b082      	sub	sp, #8
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f006 f816 	bl	800a000 <USB_GetCurrentFrame>
 8003fd4:	4603      	mov	r3, r0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3708      	adds	r7, #8
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}

08003fde <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003fde:	b580      	push	{r7, lr}
 8003fe0:	b082      	sub	sp, #8
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f005 fff1 	bl	8009fd2 <USB_GetHostSpeed>
 8003ff0:	4603      	mov	r3, r0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3708      	adds	r7, #8
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}

08003ffa <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003ffa:	b580      	push	{r7, lr}
 8003ffc:	b086      	sub	sp, #24
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
 8004002:	460b      	mov	r3, r1
 8004004:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004010:	78fb      	ldrb	r3, [r7, #3]
 8004012:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	015a      	lsls	r2, r3, #5
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	4413      	add	r3, r2
 800401c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f003 0304 	and.w	r3, r3, #4
 8004026:	2b04      	cmp	r3, #4
 8004028:	d11a      	bne.n	8004060 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	015a      	lsls	r2, r3, #5
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	4413      	add	r3, r2
 8004032:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004036:	461a      	mov	r2, r3
 8004038:	2304      	movs	r3, #4
 800403a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	212c      	movs	r1, #44	; 0x2c
 8004042:	fb01 f303 	mul.w	r3, r1, r3
 8004046:	4413      	add	r3, r2
 8004048:	3361      	adds	r3, #97	; 0x61
 800404a:	2206      	movs	r2, #6
 800404c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	68fa      	ldr	r2, [r7, #12]
 8004054:	b2d2      	uxtb	r2, r2
 8004056:	4611      	mov	r1, r2
 8004058:	4618      	mov	r0, r3
 800405a:	f006 fa58 	bl	800a50e <USB_HC_Halt>
 800405e:	e0af      	b.n	80041c0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	015a      	lsls	r2, r3, #5
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	4413      	add	r3, r2
 8004068:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004072:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004076:	d11b      	bne.n	80040b0 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	015a      	lsls	r2, r3, #5
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	4413      	add	r3, r2
 8004080:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004084:	461a      	mov	r2, r3
 8004086:	f44f 7380 	mov.w	r3, #256	; 0x100
 800408a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	212c      	movs	r1, #44	; 0x2c
 8004092:	fb01 f303 	mul.w	r3, r1, r3
 8004096:	4413      	add	r3, r2
 8004098:	3361      	adds	r3, #97	; 0x61
 800409a:	2207      	movs	r2, #7
 800409c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	68fa      	ldr	r2, [r7, #12]
 80040a4:	b2d2      	uxtb	r2, r2
 80040a6:	4611      	mov	r1, r2
 80040a8:	4618      	mov	r0, r3
 80040aa:	f006 fa30 	bl	800a50e <USB_HC_Halt>
 80040ae:	e087      	b.n	80041c0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	015a      	lsls	r2, r3, #5
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	4413      	add	r3, r2
 80040b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	f003 0320 	and.w	r3, r3, #32
 80040c2:	2b20      	cmp	r3, #32
 80040c4:	d109      	bne.n	80040da <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	015a      	lsls	r2, r3, #5
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	4413      	add	r3, r2
 80040ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040d2:	461a      	mov	r2, r3
 80040d4:	2320      	movs	r3, #32
 80040d6:	6093      	str	r3, [r2, #8]
 80040d8:	e072      	b.n	80041c0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	015a      	lsls	r2, r3, #5
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	4413      	add	r3, r2
 80040e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	f003 0308 	and.w	r3, r3, #8
 80040ec:	2b08      	cmp	r3, #8
 80040ee:	d11a      	bne.n	8004126 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	015a      	lsls	r2, r3, #5
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	4413      	add	r3, r2
 80040f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040fc:	461a      	mov	r2, r3
 80040fe:	2308      	movs	r3, #8
 8004100:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	212c      	movs	r1, #44	; 0x2c
 8004108:	fb01 f303 	mul.w	r3, r1, r3
 800410c:	4413      	add	r3, r2
 800410e:	3361      	adds	r3, #97	; 0x61
 8004110:	2205      	movs	r2, #5
 8004112:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68fa      	ldr	r2, [r7, #12]
 800411a:	b2d2      	uxtb	r2, r2
 800411c:	4611      	mov	r1, r2
 800411e:	4618      	mov	r0, r3
 8004120:	f006 f9f5 	bl	800a50e <USB_HC_Halt>
 8004124:	e04c      	b.n	80041c0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	015a      	lsls	r2, r3, #5
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	4413      	add	r3, r2
 800412e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004138:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800413c:	d11b      	bne.n	8004176 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	015a      	lsls	r2, r3, #5
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	4413      	add	r3, r2
 8004146:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800414a:	461a      	mov	r2, r3
 800414c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004150:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	212c      	movs	r1, #44	; 0x2c
 8004158:	fb01 f303 	mul.w	r3, r1, r3
 800415c:	4413      	add	r3, r2
 800415e:	3361      	adds	r3, #97	; 0x61
 8004160:	2208      	movs	r2, #8
 8004162:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	68fa      	ldr	r2, [r7, #12]
 800416a:	b2d2      	uxtb	r2, r2
 800416c:	4611      	mov	r1, r2
 800416e:	4618      	mov	r0, r3
 8004170:	f006 f9cd 	bl	800a50e <USB_HC_Halt>
 8004174:	e024      	b.n	80041c0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	015a      	lsls	r2, r3, #5
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	4413      	add	r3, r2
 800417e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004188:	2b80      	cmp	r3, #128	; 0x80
 800418a:	d119      	bne.n	80041c0 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	015a      	lsls	r2, r3, #5
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	4413      	add	r3, r2
 8004194:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004198:	461a      	mov	r2, r3
 800419a:	2380      	movs	r3, #128	; 0x80
 800419c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	212c      	movs	r1, #44	; 0x2c
 80041a4:	fb01 f303 	mul.w	r3, r1, r3
 80041a8:	4413      	add	r3, r2
 80041aa:	3361      	adds	r3, #97	; 0x61
 80041ac:	2206      	movs	r2, #6
 80041ae:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68fa      	ldr	r2, [r7, #12]
 80041b6:	b2d2      	uxtb	r2, r2
 80041b8:	4611      	mov	r1, r2
 80041ba:	4618      	mov	r0, r3
 80041bc:	f006 f9a7 	bl	800a50e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	015a      	lsls	r2, r3, #5
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	4413      	add	r3, r2
 80041c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041d6:	d112      	bne.n	80041fe <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	68fa      	ldr	r2, [r7, #12]
 80041de:	b2d2      	uxtb	r2, r2
 80041e0:	4611      	mov	r1, r2
 80041e2:	4618      	mov	r0, r3
 80041e4:	f006 f993 	bl	800a50e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	015a      	lsls	r2, r3, #5
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	4413      	add	r3, r2
 80041f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041f4:	461a      	mov	r2, r3
 80041f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80041fa:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80041fc:	e24e      	b.n	800469c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	015a      	lsls	r2, r3, #5
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	4413      	add	r3, r2
 8004206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	f003 0301 	and.w	r3, r3, #1
 8004210:	2b01      	cmp	r3, #1
 8004212:	f040 80df 	bne.w	80043d4 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d019      	beq.n	8004252 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	212c      	movs	r1, #44	; 0x2c
 8004224:	fb01 f303 	mul.w	r3, r1, r3
 8004228:	4413      	add	r3, r2
 800422a:	3348      	adds	r3, #72	; 0x48
 800422c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	0159      	lsls	r1, r3, #5
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	440b      	add	r3, r1
 8004236:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800423a:	691b      	ldr	r3, [r3, #16]
 800423c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004240:	1ad2      	subs	r2, r2, r3
 8004242:	6879      	ldr	r1, [r7, #4]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	202c      	movs	r0, #44	; 0x2c
 8004248:	fb00 f303 	mul.w	r3, r0, r3
 800424c:	440b      	add	r3, r1
 800424e:	3350      	adds	r3, #80	; 0x50
 8004250:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	212c      	movs	r1, #44	; 0x2c
 8004258:	fb01 f303 	mul.w	r3, r1, r3
 800425c:	4413      	add	r3, r2
 800425e:	3361      	adds	r3, #97	; 0x61
 8004260:	2201      	movs	r2, #1
 8004262:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	212c      	movs	r1, #44	; 0x2c
 800426a:	fb01 f303 	mul.w	r3, r1, r3
 800426e:	4413      	add	r3, r2
 8004270:	335c      	adds	r3, #92	; 0x5c
 8004272:	2200      	movs	r2, #0
 8004274:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	015a      	lsls	r2, r3, #5
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	4413      	add	r3, r2
 800427e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004282:	461a      	mov	r2, r3
 8004284:	2301      	movs	r3, #1
 8004286:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	212c      	movs	r1, #44	; 0x2c
 800428e:	fb01 f303 	mul.w	r3, r1, r3
 8004292:	4413      	add	r3, r2
 8004294:	333f      	adds	r3, #63	; 0x3f
 8004296:	781b      	ldrb	r3, [r3, #0]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d009      	beq.n	80042b0 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	212c      	movs	r1, #44	; 0x2c
 80042a2:	fb01 f303 	mul.w	r3, r1, r3
 80042a6:	4413      	add	r3, r2
 80042a8:	333f      	adds	r3, #63	; 0x3f
 80042aa:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d111      	bne.n	80042d4 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68fa      	ldr	r2, [r7, #12]
 80042b6:	b2d2      	uxtb	r2, r2
 80042b8:	4611      	mov	r1, r2
 80042ba:	4618      	mov	r0, r3
 80042bc:	f006 f927 	bl	800a50e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	015a      	lsls	r2, r3, #5
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	4413      	add	r3, r2
 80042c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042cc:	461a      	mov	r2, r3
 80042ce:	2310      	movs	r3, #16
 80042d0:	6093      	str	r3, [r2, #8]
 80042d2:	e03a      	b.n	800434a <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	212c      	movs	r1, #44	; 0x2c
 80042da:	fb01 f303 	mul.w	r3, r1, r3
 80042de:	4413      	add	r3, r2
 80042e0:	333f      	adds	r3, #63	; 0x3f
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	2b03      	cmp	r3, #3
 80042e6:	d009      	beq.n	80042fc <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	212c      	movs	r1, #44	; 0x2c
 80042ee:	fb01 f303 	mul.w	r3, r1, r3
 80042f2:	4413      	add	r3, r2
 80042f4:	333f      	adds	r3, #63	; 0x3f
 80042f6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d126      	bne.n	800434a <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	015a      	lsls	r2, r3, #5
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	4413      	add	r3, r2
 8004304:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	68fa      	ldr	r2, [r7, #12]
 800430c:	0151      	lsls	r1, r2, #5
 800430e:	693a      	ldr	r2, [r7, #16]
 8004310:	440a      	add	r2, r1
 8004312:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004316:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800431a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	212c      	movs	r1, #44	; 0x2c
 8004322:	fb01 f303 	mul.w	r3, r1, r3
 8004326:	4413      	add	r3, r2
 8004328:	3360      	adds	r3, #96	; 0x60
 800432a:	2201      	movs	r2, #1
 800432c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	b2d9      	uxtb	r1, r3
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	202c      	movs	r0, #44	; 0x2c
 8004338:	fb00 f303 	mul.w	r3, r0, r3
 800433c:	4413      	add	r3, r2
 800433e:	3360      	adds	r3, #96	; 0x60
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	461a      	mov	r2, r3
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f009 fd07 	bl	800dd58 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	2b01      	cmp	r3, #1
 8004350:	d12b      	bne.n	80043aa <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	212c      	movs	r1, #44	; 0x2c
 8004358:	fb01 f303 	mul.w	r3, r1, r3
 800435c:	4413      	add	r3, r2
 800435e:	3348      	adds	r3, #72	; 0x48
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	6879      	ldr	r1, [r7, #4]
 8004364:	68fa      	ldr	r2, [r7, #12]
 8004366:	202c      	movs	r0, #44	; 0x2c
 8004368:	fb00 f202 	mul.w	r2, r0, r2
 800436c:	440a      	add	r2, r1
 800436e:	3240      	adds	r2, #64	; 0x40
 8004370:	8812      	ldrh	r2, [r2, #0]
 8004372:	fbb3 f3f2 	udiv	r3, r3, r2
 8004376:	f003 0301 	and.w	r3, r3, #1
 800437a:	2b00      	cmp	r3, #0
 800437c:	f000 818e 	beq.w	800469c <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	212c      	movs	r1, #44	; 0x2c
 8004386:	fb01 f303 	mul.w	r3, r1, r3
 800438a:	4413      	add	r3, r2
 800438c:	3354      	adds	r3, #84	; 0x54
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	f083 0301 	eor.w	r3, r3, #1
 8004394:	b2d8      	uxtb	r0, r3
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	212c      	movs	r1, #44	; 0x2c
 800439c:	fb01 f303 	mul.w	r3, r1, r3
 80043a0:	4413      	add	r3, r2
 80043a2:	3354      	adds	r3, #84	; 0x54
 80043a4:	4602      	mov	r2, r0
 80043a6:	701a      	strb	r2, [r3, #0]
}
 80043a8:	e178      	b.n	800469c <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	212c      	movs	r1, #44	; 0x2c
 80043b0:	fb01 f303 	mul.w	r3, r1, r3
 80043b4:	4413      	add	r3, r2
 80043b6:	3354      	adds	r3, #84	; 0x54
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	f083 0301 	eor.w	r3, r3, #1
 80043be:	b2d8      	uxtb	r0, r3
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	212c      	movs	r1, #44	; 0x2c
 80043c6:	fb01 f303 	mul.w	r3, r1, r3
 80043ca:	4413      	add	r3, r2
 80043cc:	3354      	adds	r3, #84	; 0x54
 80043ce:	4602      	mov	r2, r0
 80043d0:	701a      	strb	r2, [r3, #0]
}
 80043d2:	e163      	b.n	800469c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	015a      	lsls	r2, r3, #5
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	4413      	add	r3, r2
 80043dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	f003 0302 	and.w	r3, r3, #2
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	f040 80f6 	bne.w	80045d8 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	212c      	movs	r1, #44	; 0x2c
 80043f2:	fb01 f303 	mul.w	r3, r1, r3
 80043f6:	4413      	add	r3, r2
 80043f8:	3361      	adds	r3, #97	; 0x61
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d109      	bne.n	8004414 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	212c      	movs	r1, #44	; 0x2c
 8004406:	fb01 f303 	mul.w	r3, r1, r3
 800440a:	4413      	add	r3, r2
 800440c:	3360      	adds	r3, #96	; 0x60
 800440e:	2201      	movs	r2, #1
 8004410:	701a      	strb	r2, [r3, #0]
 8004412:	e0c9      	b.n	80045a8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	212c      	movs	r1, #44	; 0x2c
 800441a:	fb01 f303 	mul.w	r3, r1, r3
 800441e:	4413      	add	r3, r2
 8004420:	3361      	adds	r3, #97	; 0x61
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	2b05      	cmp	r3, #5
 8004426:	d109      	bne.n	800443c <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	212c      	movs	r1, #44	; 0x2c
 800442e:	fb01 f303 	mul.w	r3, r1, r3
 8004432:	4413      	add	r3, r2
 8004434:	3360      	adds	r3, #96	; 0x60
 8004436:	2205      	movs	r2, #5
 8004438:	701a      	strb	r2, [r3, #0]
 800443a:	e0b5      	b.n	80045a8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	212c      	movs	r1, #44	; 0x2c
 8004442:	fb01 f303 	mul.w	r3, r1, r3
 8004446:	4413      	add	r3, r2
 8004448:	3361      	adds	r3, #97	; 0x61
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	2b06      	cmp	r3, #6
 800444e:	d009      	beq.n	8004464 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	212c      	movs	r1, #44	; 0x2c
 8004456:	fb01 f303 	mul.w	r3, r1, r3
 800445a:	4413      	add	r3, r2
 800445c:	3361      	adds	r3, #97	; 0x61
 800445e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004460:	2b08      	cmp	r3, #8
 8004462:	d150      	bne.n	8004506 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	212c      	movs	r1, #44	; 0x2c
 800446a:	fb01 f303 	mul.w	r3, r1, r3
 800446e:	4413      	add	r3, r2
 8004470:	335c      	adds	r3, #92	; 0x5c
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	1c5a      	adds	r2, r3, #1
 8004476:	6879      	ldr	r1, [r7, #4]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	202c      	movs	r0, #44	; 0x2c
 800447c:	fb00 f303 	mul.w	r3, r0, r3
 8004480:	440b      	add	r3, r1
 8004482:	335c      	adds	r3, #92	; 0x5c
 8004484:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	212c      	movs	r1, #44	; 0x2c
 800448c:	fb01 f303 	mul.w	r3, r1, r3
 8004490:	4413      	add	r3, r2
 8004492:	335c      	adds	r3, #92	; 0x5c
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2b02      	cmp	r3, #2
 8004498:	d912      	bls.n	80044c0 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	212c      	movs	r1, #44	; 0x2c
 80044a0:	fb01 f303 	mul.w	r3, r1, r3
 80044a4:	4413      	add	r3, r2
 80044a6:	335c      	adds	r3, #92	; 0x5c
 80044a8:	2200      	movs	r2, #0
 80044aa:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	212c      	movs	r1, #44	; 0x2c
 80044b2:	fb01 f303 	mul.w	r3, r1, r3
 80044b6:	4413      	add	r3, r2
 80044b8:	3360      	adds	r3, #96	; 0x60
 80044ba:	2204      	movs	r2, #4
 80044bc:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80044be:	e073      	b.n	80045a8 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	212c      	movs	r1, #44	; 0x2c
 80044c6:	fb01 f303 	mul.w	r3, r1, r3
 80044ca:	4413      	add	r3, r2
 80044cc:	3360      	adds	r3, #96	; 0x60
 80044ce:	2202      	movs	r2, #2
 80044d0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	015a      	lsls	r2, r3, #5
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	4413      	add	r3, r2
 80044da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80044e8:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80044f0:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	015a      	lsls	r2, r3, #5
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	4413      	add	r3, r2
 80044fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044fe:	461a      	mov	r2, r3
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004504:	e050      	b.n	80045a8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	212c      	movs	r1, #44	; 0x2c
 800450c:	fb01 f303 	mul.w	r3, r1, r3
 8004510:	4413      	add	r3, r2
 8004512:	3361      	adds	r3, #97	; 0x61
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	2b03      	cmp	r3, #3
 8004518:	d122      	bne.n	8004560 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	212c      	movs	r1, #44	; 0x2c
 8004520:	fb01 f303 	mul.w	r3, r1, r3
 8004524:	4413      	add	r3, r2
 8004526:	3360      	adds	r3, #96	; 0x60
 8004528:	2202      	movs	r2, #2
 800452a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	015a      	lsls	r2, r3, #5
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	4413      	add	r3, r2
 8004534:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004542:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800454a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	015a      	lsls	r2, r3, #5
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	4413      	add	r3, r2
 8004554:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004558:	461a      	mov	r2, r3
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	6013      	str	r3, [r2, #0]
 800455e:	e023      	b.n	80045a8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	212c      	movs	r1, #44	; 0x2c
 8004566:	fb01 f303 	mul.w	r3, r1, r3
 800456a:	4413      	add	r3, r2
 800456c:	3361      	adds	r3, #97	; 0x61
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	2b07      	cmp	r3, #7
 8004572:	d119      	bne.n	80045a8 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	212c      	movs	r1, #44	; 0x2c
 800457a:	fb01 f303 	mul.w	r3, r1, r3
 800457e:	4413      	add	r3, r2
 8004580:	335c      	adds	r3, #92	; 0x5c
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	1c5a      	adds	r2, r3, #1
 8004586:	6879      	ldr	r1, [r7, #4]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	202c      	movs	r0, #44	; 0x2c
 800458c:	fb00 f303 	mul.w	r3, r0, r3
 8004590:	440b      	add	r3, r1
 8004592:	335c      	adds	r3, #92	; 0x5c
 8004594:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	212c      	movs	r1, #44	; 0x2c
 800459c:	fb01 f303 	mul.w	r3, r1, r3
 80045a0:	4413      	add	r3, r2
 80045a2:	3360      	adds	r3, #96	; 0x60
 80045a4:	2204      	movs	r2, #4
 80045a6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	015a      	lsls	r2, r3, #5
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	4413      	add	r3, r2
 80045b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045b4:	461a      	mov	r2, r3
 80045b6:	2302      	movs	r3, #2
 80045b8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	b2d9      	uxtb	r1, r3
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	202c      	movs	r0, #44	; 0x2c
 80045c4:	fb00 f303 	mul.w	r3, r0, r3
 80045c8:	4413      	add	r3, r2
 80045ca:	3360      	adds	r3, #96	; 0x60
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	461a      	mov	r2, r3
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f009 fbc1 	bl	800dd58 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80045d6:	e061      	b.n	800469c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	015a      	lsls	r2, r3, #5
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	4413      	add	r3, r2
 80045e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	f003 0310 	and.w	r3, r3, #16
 80045ea:	2b10      	cmp	r3, #16
 80045ec:	d156      	bne.n	800469c <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	212c      	movs	r1, #44	; 0x2c
 80045f4:	fb01 f303 	mul.w	r3, r1, r3
 80045f8:	4413      	add	r3, r2
 80045fa:	333f      	adds	r3, #63	; 0x3f
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	2b03      	cmp	r3, #3
 8004600:	d111      	bne.n	8004626 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	212c      	movs	r1, #44	; 0x2c
 8004608:	fb01 f303 	mul.w	r3, r1, r3
 800460c:	4413      	add	r3, r2
 800460e:	335c      	adds	r3, #92	; 0x5c
 8004610:	2200      	movs	r2, #0
 8004612:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	68fa      	ldr	r2, [r7, #12]
 800461a:	b2d2      	uxtb	r2, r2
 800461c:	4611      	mov	r1, r2
 800461e:	4618      	mov	r0, r3
 8004620:	f005 ff75 	bl	800a50e <USB_HC_Halt>
 8004624:	e031      	b.n	800468a <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	212c      	movs	r1, #44	; 0x2c
 800462c:	fb01 f303 	mul.w	r3, r1, r3
 8004630:	4413      	add	r3, r2
 8004632:	333f      	adds	r3, #63	; 0x3f
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d009      	beq.n	800464e <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	212c      	movs	r1, #44	; 0x2c
 8004640:	fb01 f303 	mul.w	r3, r1, r3
 8004644:	4413      	add	r3, r2
 8004646:	333f      	adds	r3, #63	; 0x3f
 8004648:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800464a:	2b02      	cmp	r3, #2
 800464c:	d11d      	bne.n	800468a <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	212c      	movs	r1, #44	; 0x2c
 8004654:	fb01 f303 	mul.w	r3, r1, r3
 8004658:	4413      	add	r3, r2
 800465a:	335c      	adds	r3, #92	; 0x5c
 800465c:	2200      	movs	r2, #0
 800465e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	691b      	ldr	r3, [r3, #16]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d110      	bne.n	800468a <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	212c      	movs	r1, #44	; 0x2c
 800466e:	fb01 f303 	mul.w	r3, r1, r3
 8004672:	4413      	add	r3, r2
 8004674:	3361      	adds	r3, #97	; 0x61
 8004676:	2203      	movs	r2, #3
 8004678:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68fa      	ldr	r2, [r7, #12]
 8004680:	b2d2      	uxtb	r2, r2
 8004682:	4611      	mov	r1, r2
 8004684:	4618      	mov	r0, r3
 8004686:	f005 ff42 	bl	800a50e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	015a      	lsls	r2, r3, #5
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	4413      	add	r3, r2
 8004692:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004696:	461a      	mov	r2, r3
 8004698:	2310      	movs	r3, #16
 800469a:	6093      	str	r3, [r2, #8]
}
 800469c:	bf00      	nop
 800469e:	3718      	adds	r7, #24
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b088      	sub	sp, #32
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	460b      	mov	r3, r1
 80046ae:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80046ba:	78fb      	ldrb	r3, [r7, #3]
 80046bc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	015a      	lsls	r2, r3, #5
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	4413      	add	r3, r2
 80046c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	f003 0304 	and.w	r3, r3, #4
 80046d0:	2b04      	cmp	r3, #4
 80046d2:	d11a      	bne.n	800470a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	015a      	lsls	r2, r3, #5
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	4413      	add	r3, r2
 80046dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046e0:	461a      	mov	r2, r3
 80046e2:	2304      	movs	r3, #4
 80046e4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	212c      	movs	r1, #44	; 0x2c
 80046ec:	fb01 f303 	mul.w	r3, r1, r3
 80046f0:	4413      	add	r3, r2
 80046f2:	3361      	adds	r3, #97	; 0x61
 80046f4:	2206      	movs	r2, #6
 80046f6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	697a      	ldr	r2, [r7, #20]
 80046fe:	b2d2      	uxtb	r2, r2
 8004700:	4611      	mov	r1, r2
 8004702:	4618      	mov	r0, r3
 8004704:	f005 ff03 	bl	800a50e <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8004708:	e331      	b.n	8004d6e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	015a      	lsls	r2, r3, #5
 800470e:	69bb      	ldr	r3, [r7, #24]
 8004710:	4413      	add	r3, r2
 8004712:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	f003 0320 	and.w	r3, r3, #32
 800471c:	2b20      	cmp	r3, #32
 800471e:	d12e      	bne.n	800477e <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	015a      	lsls	r2, r3, #5
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	4413      	add	r3, r2
 8004728:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800472c:	461a      	mov	r2, r3
 800472e:	2320      	movs	r3, #32
 8004730:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	212c      	movs	r1, #44	; 0x2c
 8004738:	fb01 f303 	mul.w	r3, r1, r3
 800473c:	4413      	add	r3, r2
 800473e:	333d      	adds	r3, #61	; 0x3d
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	2b01      	cmp	r3, #1
 8004744:	f040 8313 	bne.w	8004d6e <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	212c      	movs	r1, #44	; 0x2c
 800474e:	fb01 f303 	mul.w	r3, r1, r3
 8004752:	4413      	add	r3, r2
 8004754:	333d      	adds	r3, #61	; 0x3d
 8004756:	2200      	movs	r2, #0
 8004758:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	212c      	movs	r1, #44	; 0x2c
 8004760:	fb01 f303 	mul.w	r3, r1, r3
 8004764:	4413      	add	r3, r2
 8004766:	3360      	adds	r3, #96	; 0x60
 8004768:	2202      	movs	r2, #2
 800476a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	697a      	ldr	r2, [r7, #20]
 8004772:	b2d2      	uxtb	r2, r2
 8004774:	4611      	mov	r1, r2
 8004776:	4618      	mov	r0, r3
 8004778:	f005 fec9 	bl	800a50e <USB_HC_Halt>
}
 800477c:	e2f7      	b.n	8004d6e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	015a      	lsls	r2, r3, #5
 8004782:	69bb      	ldr	r3, [r7, #24]
 8004784:	4413      	add	r3, r2
 8004786:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004790:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004794:	d112      	bne.n	80047bc <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	015a      	lsls	r2, r3, #5
 800479a:	69bb      	ldr	r3, [r7, #24]
 800479c:	4413      	add	r3, r2
 800479e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047a2:	461a      	mov	r2, r3
 80047a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80047a8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	697a      	ldr	r2, [r7, #20]
 80047b0:	b2d2      	uxtb	r2, r2
 80047b2:	4611      	mov	r1, r2
 80047b4:	4618      	mov	r0, r3
 80047b6:	f005 feaa 	bl	800a50e <USB_HC_Halt>
}
 80047ba:	e2d8      	b.n	8004d6e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	015a      	lsls	r2, r3, #5
 80047c0:	69bb      	ldr	r3, [r7, #24]
 80047c2:	4413      	add	r3, r2
 80047c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f003 0301 	and.w	r3, r3, #1
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d140      	bne.n	8004854 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	212c      	movs	r1, #44	; 0x2c
 80047d8:	fb01 f303 	mul.w	r3, r1, r3
 80047dc:	4413      	add	r3, r2
 80047de:	335c      	adds	r3, #92	; 0x5c
 80047e0:	2200      	movs	r2, #0
 80047e2:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	015a      	lsls	r2, r3, #5
 80047e8:	69bb      	ldr	r3, [r7, #24]
 80047ea:	4413      	add	r3, r2
 80047ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047f6:	2b40      	cmp	r3, #64	; 0x40
 80047f8:	d111      	bne.n	800481e <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	212c      	movs	r1, #44	; 0x2c
 8004800:	fb01 f303 	mul.w	r3, r1, r3
 8004804:	4413      	add	r3, r2
 8004806:	333d      	adds	r3, #61	; 0x3d
 8004808:	2201      	movs	r2, #1
 800480a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	015a      	lsls	r2, r3, #5
 8004810:	69bb      	ldr	r3, [r7, #24]
 8004812:	4413      	add	r3, r2
 8004814:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004818:	461a      	mov	r2, r3
 800481a:	2340      	movs	r3, #64	; 0x40
 800481c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	015a      	lsls	r2, r3, #5
 8004822:	69bb      	ldr	r3, [r7, #24]
 8004824:	4413      	add	r3, r2
 8004826:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800482a:	461a      	mov	r2, r3
 800482c:	2301      	movs	r3, #1
 800482e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	212c      	movs	r1, #44	; 0x2c
 8004836:	fb01 f303 	mul.w	r3, r1, r3
 800483a:	4413      	add	r3, r2
 800483c:	3361      	adds	r3, #97	; 0x61
 800483e:	2201      	movs	r2, #1
 8004840:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	697a      	ldr	r2, [r7, #20]
 8004848:	b2d2      	uxtb	r2, r2
 800484a:	4611      	mov	r1, r2
 800484c:	4618      	mov	r0, r3
 800484e:	f005 fe5e 	bl	800a50e <USB_HC_Halt>
}
 8004852:	e28c      	b.n	8004d6e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	015a      	lsls	r2, r3, #5
 8004858:	69bb      	ldr	r3, [r7, #24]
 800485a:	4413      	add	r3, r2
 800485c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004866:	2b40      	cmp	r3, #64	; 0x40
 8004868:	d12c      	bne.n	80048c4 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	212c      	movs	r1, #44	; 0x2c
 8004870:	fb01 f303 	mul.w	r3, r1, r3
 8004874:	4413      	add	r3, r2
 8004876:	3361      	adds	r3, #97	; 0x61
 8004878:	2204      	movs	r2, #4
 800487a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	212c      	movs	r1, #44	; 0x2c
 8004882:	fb01 f303 	mul.w	r3, r1, r3
 8004886:	4413      	add	r3, r2
 8004888:	333d      	adds	r3, #61	; 0x3d
 800488a:	2201      	movs	r2, #1
 800488c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	212c      	movs	r1, #44	; 0x2c
 8004894:	fb01 f303 	mul.w	r3, r1, r3
 8004898:	4413      	add	r3, r2
 800489a:	335c      	adds	r3, #92	; 0x5c
 800489c:	2200      	movs	r2, #0
 800489e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	697a      	ldr	r2, [r7, #20]
 80048a6:	b2d2      	uxtb	r2, r2
 80048a8:	4611      	mov	r1, r2
 80048aa:	4618      	mov	r0, r3
 80048ac:	f005 fe2f 	bl	800a50e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	015a      	lsls	r2, r3, #5
 80048b4:	69bb      	ldr	r3, [r7, #24]
 80048b6:	4413      	add	r3, r2
 80048b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048bc:	461a      	mov	r2, r3
 80048be:	2340      	movs	r3, #64	; 0x40
 80048c0:	6093      	str	r3, [r2, #8]
}
 80048c2:	e254      	b.n	8004d6e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	015a      	lsls	r2, r3, #5
 80048c8:	69bb      	ldr	r3, [r7, #24]
 80048ca:	4413      	add	r3, r2
 80048cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	f003 0308 	and.w	r3, r3, #8
 80048d6:	2b08      	cmp	r3, #8
 80048d8:	d11a      	bne.n	8004910 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	015a      	lsls	r2, r3, #5
 80048de:	69bb      	ldr	r3, [r7, #24]
 80048e0:	4413      	add	r3, r2
 80048e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048e6:	461a      	mov	r2, r3
 80048e8:	2308      	movs	r3, #8
 80048ea:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	212c      	movs	r1, #44	; 0x2c
 80048f2:	fb01 f303 	mul.w	r3, r1, r3
 80048f6:	4413      	add	r3, r2
 80048f8:	3361      	adds	r3, #97	; 0x61
 80048fa:	2205      	movs	r2, #5
 80048fc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	697a      	ldr	r2, [r7, #20]
 8004904:	b2d2      	uxtb	r2, r2
 8004906:	4611      	mov	r1, r2
 8004908:	4618      	mov	r0, r3
 800490a:	f005 fe00 	bl	800a50e <USB_HC_Halt>
}
 800490e:	e22e      	b.n	8004d6e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	015a      	lsls	r2, r3, #5
 8004914:	69bb      	ldr	r3, [r7, #24]
 8004916:	4413      	add	r3, r2
 8004918:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	f003 0310 	and.w	r3, r3, #16
 8004922:	2b10      	cmp	r3, #16
 8004924:	d140      	bne.n	80049a8 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	212c      	movs	r1, #44	; 0x2c
 800492c:	fb01 f303 	mul.w	r3, r1, r3
 8004930:	4413      	add	r3, r2
 8004932:	335c      	adds	r3, #92	; 0x5c
 8004934:	2200      	movs	r2, #0
 8004936:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	212c      	movs	r1, #44	; 0x2c
 800493e:	fb01 f303 	mul.w	r3, r1, r3
 8004942:	4413      	add	r3, r2
 8004944:	3361      	adds	r3, #97	; 0x61
 8004946:	2203      	movs	r2, #3
 8004948:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	212c      	movs	r1, #44	; 0x2c
 8004950:	fb01 f303 	mul.w	r3, r1, r3
 8004954:	4413      	add	r3, r2
 8004956:	333d      	adds	r3, #61	; 0x3d
 8004958:	781b      	ldrb	r3, [r3, #0]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d112      	bne.n	8004984 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	212c      	movs	r1, #44	; 0x2c
 8004964:	fb01 f303 	mul.w	r3, r1, r3
 8004968:	4413      	add	r3, r2
 800496a:	333c      	adds	r3, #60	; 0x3c
 800496c:	781b      	ldrb	r3, [r3, #0]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d108      	bne.n	8004984 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	212c      	movs	r1, #44	; 0x2c
 8004978:	fb01 f303 	mul.w	r3, r1, r3
 800497c:	4413      	add	r3, r2
 800497e:	333d      	adds	r3, #61	; 0x3d
 8004980:	2201      	movs	r2, #1
 8004982:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	697a      	ldr	r2, [r7, #20]
 800498a:	b2d2      	uxtb	r2, r2
 800498c:	4611      	mov	r1, r2
 800498e:	4618      	mov	r0, r3
 8004990:	f005 fdbd 	bl	800a50e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	015a      	lsls	r2, r3, #5
 8004998:	69bb      	ldr	r3, [r7, #24]
 800499a:	4413      	add	r3, r2
 800499c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049a0:	461a      	mov	r2, r3
 80049a2:	2310      	movs	r3, #16
 80049a4:	6093      	str	r3, [r2, #8]
}
 80049a6:	e1e2      	b.n	8004d6e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	015a      	lsls	r2, r3, #5
 80049ac:	69bb      	ldr	r3, [r7, #24]
 80049ae:	4413      	add	r3, r2
 80049b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049ba:	2b80      	cmp	r3, #128	; 0x80
 80049bc:	d164      	bne.n	8004a88 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d111      	bne.n	80049ea <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	212c      	movs	r1, #44	; 0x2c
 80049cc:	fb01 f303 	mul.w	r3, r1, r3
 80049d0:	4413      	add	r3, r2
 80049d2:	3361      	adds	r3, #97	; 0x61
 80049d4:	2206      	movs	r2, #6
 80049d6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	697a      	ldr	r2, [r7, #20]
 80049de:	b2d2      	uxtb	r2, r2
 80049e0:	4611      	mov	r1, r2
 80049e2:	4618      	mov	r0, r3
 80049e4:	f005 fd93 	bl	800a50e <USB_HC_Halt>
 80049e8:	e044      	b.n	8004a74 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	212c      	movs	r1, #44	; 0x2c
 80049f0:	fb01 f303 	mul.w	r3, r1, r3
 80049f4:	4413      	add	r3, r2
 80049f6:	335c      	adds	r3, #92	; 0x5c
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	1c5a      	adds	r2, r3, #1
 80049fc:	6879      	ldr	r1, [r7, #4]
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	202c      	movs	r0, #44	; 0x2c
 8004a02:	fb00 f303 	mul.w	r3, r0, r3
 8004a06:	440b      	add	r3, r1
 8004a08:	335c      	adds	r3, #92	; 0x5c
 8004a0a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	212c      	movs	r1, #44	; 0x2c
 8004a12:	fb01 f303 	mul.w	r3, r1, r3
 8004a16:	4413      	add	r3, r2
 8004a18:	335c      	adds	r3, #92	; 0x5c
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2b02      	cmp	r3, #2
 8004a1e:	d920      	bls.n	8004a62 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	212c      	movs	r1, #44	; 0x2c
 8004a26:	fb01 f303 	mul.w	r3, r1, r3
 8004a2a:	4413      	add	r3, r2
 8004a2c:	335c      	adds	r3, #92	; 0x5c
 8004a2e:	2200      	movs	r2, #0
 8004a30:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	212c      	movs	r1, #44	; 0x2c
 8004a38:	fb01 f303 	mul.w	r3, r1, r3
 8004a3c:	4413      	add	r3, r2
 8004a3e:	3360      	adds	r3, #96	; 0x60
 8004a40:	2204      	movs	r2, #4
 8004a42:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	b2d9      	uxtb	r1, r3
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	202c      	movs	r0, #44	; 0x2c
 8004a4e:	fb00 f303 	mul.w	r3, r0, r3
 8004a52:	4413      	add	r3, r2
 8004a54:	3360      	adds	r3, #96	; 0x60
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	461a      	mov	r2, r3
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f009 f97c 	bl	800dd58 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004a60:	e008      	b.n	8004a74 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	212c      	movs	r1, #44	; 0x2c
 8004a68:	fb01 f303 	mul.w	r3, r1, r3
 8004a6c:	4413      	add	r3, r2
 8004a6e:	3360      	adds	r3, #96	; 0x60
 8004a70:	2202      	movs	r2, #2
 8004a72:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	015a      	lsls	r2, r3, #5
 8004a78:	69bb      	ldr	r3, [r7, #24]
 8004a7a:	4413      	add	r3, r2
 8004a7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a80:	461a      	mov	r2, r3
 8004a82:	2380      	movs	r3, #128	; 0x80
 8004a84:	6093      	str	r3, [r2, #8]
}
 8004a86:	e172      	b.n	8004d6e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	015a      	lsls	r2, r3, #5
 8004a8c:	69bb      	ldr	r3, [r7, #24]
 8004a8e:	4413      	add	r3, r2
 8004a90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a9e:	d11b      	bne.n	8004ad8 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	212c      	movs	r1, #44	; 0x2c
 8004aa6:	fb01 f303 	mul.w	r3, r1, r3
 8004aaa:	4413      	add	r3, r2
 8004aac:	3361      	adds	r3, #97	; 0x61
 8004aae:	2208      	movs	r2, #8
 8004ab0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	697a      	ldr	r2, [r7, #20]
 8004ab8:	b2d2      	uxtb	r2, r2
 8004aba:	4611      	mov	r1, r2
 8004abc:	4618      	mov	r0, r3
 8004abe:	f005 fd26 	bl	800a50e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	015a      	lsls	r2, r3, #5
 8004ac6:	69bb      	ldr	r3, [r7, #24]
 8004ac8:	4413      	add	r3, r2
 8004aca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ace:	461a      	mov	r2, r3
 8004ad0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ad4:	6093      	str	r3, [r2, #8]
}
 8004ad6:	e14a      	b.n	8004d6e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	015a      	lsls	r2, r3, #5
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	4413      	add	r3, r2
 8004ae0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	f003 0302 	and.w	r3, r3, #2
 8004aea:	2b02      	cmp	r3, #2
 8004aec:	f040 813f 	bne.w	8004d6e <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	212c      	movs	r1, #44	; 0x2c
 8004af6:	fb01 f303 	mul.w	r3, r1, r3
 8004afa:	4413      	add	r3, r2
 8004afc:	3361      	adds	r3, #97	; 0x61
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d17d      	bne.n	8004c00 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	212c      	movs	r1, #44	; 0x2c
 8004b0a:	fb01 f303 	mul.w	r3, r1, r3
 8004b0e:	4413      	add	r3, r2
 8004b10:	3360      	adds	r3, #96	; 0x60
 8004b12:	2201      	movs	r2, #1
 8004b14:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	212c      	movs	r1, #44	; 0x2c
 8004b1c:	fb01 f303 	mul.w	r3, r1, r3
 8004b20:	4413      	add	r3, r2
 8004b22:	333f      	adds	r3, #63	; 0x3f
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d00a      	beq.n	8004b40 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	212c      	movs	r1, #44	; 0x2c
 8004b30:	fb01 f303 	mul.w	r3, r1, r3
 8004b34:	4413      	add	r3, r2
 8004b36:	333f      	adds	r3, #63	; 0x3f
 8004b38:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004b3a:	2b03      	cmp	r3, #3
 8004b3c:	f040 8100 	bne.w	8004d40 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d113      	bne.n	8004b70 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	212c      	movs	r1, #44	; 0x2c
 8004b4e:	fb01 f303 	mul.w	r3, r1, r3
 8004b52:	4413      	add	r3, r2
 8004b54:	3355      	adds	r3, #85	; 0x55
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	f083 0301 	eor.w	r3, r3, #1
 8004b5c:	b2d8      	uxtb	r0, r3
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	212c      	movs	r1, #44	; 0x2c
 8004b64:	fb01 f303 	mul.w	r3, r1, r3
 8004b68:	4413      	add	r3, r2
 8004b6a:	3355      	adds	r3, #85	; 0x55
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	691b      	ldr	r3, [r3, #16]
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	f040 80e3 	bne.w	8004d40 <HCD_HC_OUT_IRQHandler+0x69c>
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	212c      	movs	r1, #44	; 0x2c
 8004b80:	fb01 f303 	mul.w	r3, r1, r3
 8004b84:	4413      	add	r3, r2
 8004b86:	334c      	adds	r3, #76	; 0x4c
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	f000 80d8 	beq.w	8004d40 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	212c      	movs	r1, #44	; 0x2c
 8004b96:	fb01 f303 	mul.w	r3, r1, r3
 8004b9a:	4413      	add	r3, r2
 8004b9c:	334c      	adds	r3, #76	; 0x4c
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	6879      	ldr	r1, [r7, #4]
 8004ba2:	697a      	ldr	r2, [r7, #20]
 8004ba4:	202c      	movs	r0, #44	; 0x2c
 8004ba6:	fb00 f202 	mul.w	r2, r0, r2
 8004baa:	440a      	add	r2, r1
 8004bac:	3240      	adds	r2, #64	; 0x40
 8004bae:	8812      	ldrh	r2, [r2, #0]
 8004bb0:	4413      	add	r3, r2
 8004bb2:	3b01      	subs	r3, #1
 8004bb4:	6879      	ldr	r1, [r7, #4]
 8004bb6:	697a      	ldr	r2, [r7, #20]
 8004bb8:	202c      	movs	r0, #44	; 0x2c
 8004bba:	fb00 f202 	mul.w	r2, r0, r2
 8004bbe:	440a      	add	r2, r1
 8004bc0:	3240      	adds	r2, #64	; 0x40
 8004bc2:	8812      	ldrh	r2, [r2, #0]
 8004bc4:	fbb3 f3f2 	udiv	r3, r3, r2
 8004bc8:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	f003 0301 	and.w	r3, r3, #1
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	f000 80b5 	beq.w	8004d40 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	212c      	movs	r1, #44	; 0x2c
 8004bdc:	fb01 f303 	mul.w	r3, r1, r3
 8004be0:	4413      	add	r3, r2
 8004be2:	3355      	adds	r3, #85	; 0x55
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	f083 0301 	eor.w	r3, r3, #1
 8004bea:	b2d8      	uxtb	r0, r3
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	212c      	movs	r1, #44	; 0x2c
 8004bf2:	fb01 f303 	mul.w	r3, r1, r3
 8004bf6:	4413      	add	r3, r2
 8004bf8:	3355      	adds	r3, #85	; 0x55
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	701a      	strb	r2, [r3, #0]
 8004bfe:	e09f      	b.n	8004d40 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	212c      	movs	r1, #44	; 0x2c
 8004c06:	fb01 f303 	mul.w	r3, r1, r3
 8004c0a:	4413      	add	r3, r2
 8004c0c:	3361      	adds	r3, #97	; 0x61
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	2b03      	cmp	r3, #3
 8004c12:	d109      	bne.n	8004c28 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	212c      	movs	r1, #44	; 0x2c
 8004c1a:	fb01 f303 	mul.w	r3, r1, r3
 8004c1e:	4413      	add	r3, r2
 8004c20:	3360      	adds	r3, #96	; 0x60
 8004c22:	2202      	movs	r2, #2
 8004c24:	701a      	strb	r2, [r3, #0]
 8004c26:	e08b      	b.n	8004d40 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	212c      	movs	r1, #44	; 0x2c
 8004c2e:	fb01 f303 	mul.w	r3, r1, r3
 8004c32:	4413      	add	r3, r2
 8004c34:	3361      	adds	r3, #97	; 0x61
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	2b04      	cmp	r3, #4
 8004c3a:	d109      	bne.n	8004c50 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	212c      	movs	r1, #44	; 0x2c
 8004c42:	fb01 f303 	mul.w	r3, r1, r3
 8004c46:	4413      	add	r3, r2
 8004c48:	3360      	adds	r3, #96	; 0x60
 8004c4a:	2202      	movs	r2, #2
 8004c4c:	701a      	strb	r2, [r3, #0]
 8004c4e:	e077      	b.n	8004d40 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	212c      	movs	r1, #44	; 0x2c
 8004c56:	fb01 f303 	mul.w	r3, r1, r3
 8004c5a:	4413      	add	r3, r2
 8004c5c:	3361      	adds	r3, #97	; 0x61
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	2b05      	cmp	r3, #5
 8004c62:	d109      	bne.n	8004c78 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004c64:	687a      	ldr	r2, [r7, #4]
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	212c      	movs	r1, #44	; 0x2c
 8004c6a:	fb01 f303 	mul.w	r3, r1, r3
 8004c6e:	4413      	add	r3, r2
 8004c70:	3360      	adds	r3, #96	; 0x60
 8004c72:	2205      	movs	r2, #5
 8004c74:	701a      	strb	r2, [r3, #0]
 8004c76:	e063      	b.n	8004d40 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	212c      	movs	r1, #44	; 0x2c
 8004c7e:	fb01 f303 	mul.w	r3, r1, r3
 8004c82:	4413      	add	r3, r2
 8004c84:	3361      	adds	r3, #97	; 0x61
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	2b06      	cmp	r3, #6
 8004c8a:	d009      	beq.n	8004ca0 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	212c      	movs	r1, #44	; 0x2c
 8004c92:	fb01 f303 	mul.w	r3, r1, r3
 8004c96:	4413      	add	r3, r2
 8004c98:	3361      	adds	r3, #97	; 0x61
 8004c9a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004c9c:	2b08      	cmp	r3, #8
 8004c9e:	d14f      	bne.n	8004d40 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	212c      	movs	r1, #44	; 0x2c
 8004ca6:	fb01 f303 	mul.w	r3, r1, r3
 8004caa:	4413      	add	r3, r2
 8004cac:	335c      	adds	r3, #92	; 0x5c
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	1c5a      	adds	r2, r3, #1
 8004cb2:	6879      	ldr	r1, [r7, #4]
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	202c      	movs	r0, #44	; 0x2c
 8004cb8:	fb00 f303 	mul.w	r3, r0, r3
 8004cbc:	440b      	add	r3, r1
 8004cbe:	335c      	adds	r3, #92	; 0x5c
 8004cc0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	212c      	movs	r1, #44	; 0x2c
 8004cc8:	fb01 f303 	mul.w	r3, r1, r3
 8004ccc:	4413      	add	r3, r2
 8004cce:	335c      	adds	r3, #92	; 0x5c
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2b02      	cmp	r3, #2
 8004cd4:	d912      	bls.n	8004cfc <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	212c      	movs	r1, #44	; 0x2c
 8004cdc:	fb01 f303 	mul.w	r3, r1, r3
 8004ce0:	4413      	add	r3, r2
 8004ce2:	335c      	adds	r3, #92	; 0x5c
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	212c      	movs	r1, #44	; 0x2c
 8004cee:	fb01 f303 	mul.w	r3, r1, r3
 8004cf2:	4413      	add	r3, r2
 8004cf4:	3360      	adds	r3, #96	; 0x60
 8004cf6:	2204      	movs	r2, #4
 8004cf8:	701a      	strb	r2, [r3, #0]
 8004cfa:	e021      	b.n	8004d40 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	212c      	movs	r1, #44	; 0x2c
 8004d02:	fb01 f303 	mul.w	r3, r1, r3
 8004d06:	4413      	add	r3, r2
 8004d08:	3360      	adds	r3, #96	; 0x60
 8004d0a:	2202      	movs	r2, #2
 8004d0c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	015a      	lsls	r2, r3, #5
 8004d12:	69bb      	ldr	r3, [r7, #24]
 8004d14:	4413      	add	r3, r2
 8004d16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004d24:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004d2c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	015a      	lsls	r2, r3, #5
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	4413      	add	r3, r2
 8004d36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	015a      	lsls	r2, r3, #5
 8004d44:	69bb      	ldr	r3, [r7, #24]
 8004d46:	4413      	add	r3, r2
 8004d48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	2302      	movs	r3, #2
 8004d50:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	b2d9      	uxtb	r1, r3
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	202c      	movs	r0, #44	; 0x2c
 8004d5c:	fb00 f303 	mul.w	r3, r0, r3
 8004d60:	4413      	add	r3, r2
 8004d62:	3360      	adds	r3, #96	; 0x60
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	461a      	mov	r2, r3
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f008 fff5 	bl	800dd58 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004d6e:	bf00      	nop
 8004d70:	3720      	adds	r7, #32
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}

08004d76 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004d76:	b580      	push	{r7, lr}
 8004d78:	b08a      	sub	sp, #40	; 0x28
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d86:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	6a1b      	ldr	r3, [r3, #32]
 8004d8e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	f003 030f 	and.w	r3, r3, #15
 8004d96:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	0c5b      	lsrs	r3, r3, #17
 8004d9c:	f003 030f 	and.w	r3, r3, #15
 8004da0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	091b      	lsrs	r3, r3, #4
 8004da6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004daa:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	d004      	beq.n	8004dbc <HCD_RXQLVL_IRQHandler+0x46>
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	2b05      	cmp	r3, #5
 8004db6:	f000 80a9 	beq.w	8004f0c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004dba:	e0aa      	b.n	8004f12 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	f000 80a6 	beq.w	8004f10 <HCD_RXQLVL_IRQHandler+0x19a>
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	69bb      	ldr	r3, [r7, #24]
 8004dc8:	212c      	movs	r1, #44	; 0x2c
 8004dca:	fb01 f303 	mul.w	r3, r1, r3
 8004dce:	4413      	add	r3, r2
 8004dd0:	3344      	adds	r3, #68	; 0x44
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	f000 809b 	beq.w	8004f10 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	69bb      	ldr	r3, [r7, #24]
 8004dde:	212c      	movs	r1, #44	; 0x2c
 8004de0:	fb01 f303 	mul.w	r3, r1, r3
 8004de4:	4413      	add	r3, r2
 8004de6:	3350      	adds	r3, #80	; 0x50
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	441a      	add	r2, r3
 8004dee:	6879      	ldr	r1, [r7, #4]
 8004df0:	69bb      	ldr	r3, [r7, #24]
 8004df2:	202c      	movs	r0, #44	; 0x2c
 8004df4:	fb00 f303 	mul.w	r3, r0, r3
 8004df8:	440b      	add	r3, r1
 8004dfa:	334c      	adds	r3, #76	; 0x4c
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d87a      	bhi.n	8004ef8 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6818      	ldr	r0, [r3, #0]
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	69bb      	ldr	r3, [r7, #24]
 8004e0a:	212c      	movs	r1, #44	; 0x2c
 8004e0c:	fb01 f303 	mul.w	r3, r1, r3
 8004e10:	4413      	add	r3, r2
 8004e12:	3344      	adds	r3, #68	; 0x44
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	693a      	ldr	r2, [r7, #16]
 8004e18:	b292      	uxth	r2, r2
 8004e1a:	4619      	mov	r1, r3
 8004e1c:	f004 fece 	bl	8009bbc <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	212c      	movs	r1, #44	; 0x2c
 8004e26:	fb01 f303 	mul.w	r3, r1, r3
 8004e2a:	4413      	add	r3, r2
 8004e2c:	3344      	adds	r3, #68	; 0x44
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	441a      	add	r2, r3
 8004e34:	6879      	ldr	r1, [r7, #4]
 8004e36:	69bb      	ldr	r3, [r7, #24]
 8004e38:	202c      	movs	r0, #44	; 0x2c
 8004e3a:	fb00 f303 	mul.w	r3, r0, r3
 8004e3e:	440b      	add	r3, r1
 8004e40:	3344      	adds	r3, #68	; 0x44
 8004e42:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	69bb      	ldr	r3, [r7, #24]
 8004e48:	212c      	movs	r1, #44	; 0x2c
 8004e4a:	fb01 f303 	mul.w	r3, r1, r3
 8004e4e:	4413      	add	r3, r2
 8004e50:	3350      	adds	r3, #80	; 0x50
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	441a      	add	r2, r3
 8004e58:	6879      	ldr	r1, [r7, #4]
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	202c      	movs	r0, #44	; 0x2c
 8004e5e:	fb00 f303 	mul.w	r3, r0, r3
 8004e62:	440b      	add	r3, r1
 8004e64:	3350      	adds	r3, #80	; 0x50
 8004e66:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004e68:	69bb      	ldr	r3, [r7, #24]
 8004e6a:	015a      	lsls	r2, r3, #5
 8004e6c:	6a3b      	ldr	r3, [r7, #32]
 8004e6e:	4413      	add	r3, r2
 8004e70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e74:	691b      	ldr	r3, [r3, #16]
 8004e76:	0cdb      	lsrs	r3, r3, #19
 8004e78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e7c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	69bb      	ldr	r3, [r7, #24]
 8004e82:	212c      	movs	r1, #44	; 0x2c
 8004e84:	fb01 f303 	mul.w	r3, r1, r3
 8004e88:	4413      	add	r3, r2
 8004e8a:	3340      	adds	r3, #64	; 0x40
 8004e8c:	881b      	ldrh	r3, [r3, #0]
 8004e8e:	461a      	mov	r2, r3
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d13c      	bne.n	8004f10 <HCD_RXQLVL_IRQHandler+0x19a>
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d039      	beq.n	8004f10 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004e9c:	69bb      	ldr	r3, [r7, #24]
 8004e9e:	015a      	lsls	r2, r3, #5
 8004ea0:	6a3b      	ldr	r3, [r7, #32]
 8004ea2:	4413      	add	r3, r2
 8004ea4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004eb2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004eba:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004ebc:	69bb      	ldr	r3, [r7, #24]
 8004ebe:	015a      	lsls	r2, r3, #5
 8004ec0:	6a3b      	ldr	r3, [r7, #32]
 8004ec2:	4413      	add	r3, r2
 8004ec4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ec8:	461a      	mov	r2, r3
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	212c      	movs	r1, #44	; 0x2c
 8004ed4:	fb01 f303 	mul.w	r3, r1, r3
 8004ed8:	4413      	add	r3, r2
 8004eda:	3354      	adds	r3, #84	; 0x54
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	f083 0301 	eor.w	r3, r3, #1
 8004ee2:	b2d8      	uxtb	r0, r3
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	212c      	movs	r1, #44	; 0x2c
 8004eea:	fb01 f303 	mul.w	r3, r1, r3
 8004eee:	4413      	add	r3, r2
 8004ef0:	3354      	adds	r3, #84	; 0x54
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	701a      	strb	r2, [r3, #0]
      break;
 8004ef6:	e00b      	b.n	8004f10 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	69bb      	ldr	r3, [r7, #24]
 8004efc:	212c      	movs	r1, #44	; 0x2c
 8004efe:	fb01 f303 	mul.w	r3, r1, r3
 8004f02:	4413      	add	r3, r2
 8004f04:	3360      	adds	r3, #96	; 0x60
 8004f06:	2204      	movs	r2, #4
 8004f08:	701a      	strb	r2, [r3, #0]
      break;
 8004f0a:	e001      	b.n	8004f10 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004f0c:	bf00      	nop
 8004f0e:	e000      	b.n	8004f12 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004f10:	bf00      	nop
  }
}
 8004f12:	bf00      	nop
 8004f14:	3728      	adds	r7, #40	; 0x28
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}

08004f1a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004f1a:	b580      	push	{r7, lr}
 8004f1c:	b086      	sub	sp, #24
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004f46:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f003 0302 	and.w	r3, r3, #2
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d10b      	bne.n	8004f6a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	f003 0301 	and.w	r3, r3, #1
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d102      	bne.n	8004f62 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f008 fedf 	bl	800dd20 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	f043 0302 	orr.w	r3, r3, #2
 8004f68:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f003 0308 	and.w	r3, r3, #8
 8004f70:	2b08      	cmp	r3, #8
 8004f72:	d132      	bne.n	8004fda <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	f043 0308 	orr.w	r3, r3, #8
 8004f7a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f003 0304 	and.w	r3, r3, #4
 8004f82:	2b04      	cmp	r3, #4
 8004f84:	d126      	bne.n	8004fd4 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	699b      	ldr	r3, [r3, #24]
 8004f8a:	2b02      	cmp	r3, #2
 8004f8c:	d113      	bne.n	8004fb6 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004f94:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004f98:	d106      	bne.n	8004fa8 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	2102      	movs	r1, #2
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f004 ff79 	bl	8009e98 <USB_InitFSLSPClkSel>
 8004fa6:	e011      	b.n	8004fcc <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2101      	movs	r1, #1
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f004 ff72 	bl	8009e98 <USB_InitFSLSPClkSel>
 8004fb4:	e00a      	b.n	8004fcc <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d106      	bne.n	8004fcc <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004fca:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f008 fed1 	bl	800dd74 <HAL_HCD_PortEnabled_Callback>
 8004fd2:	e002      	b.n	8004fda <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f008 fedb 	bl	800dd90 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	f003 0320 	and.w	r3, r3, #32
 8004fe0:	2b20      	cmp	r3, #32
 8004fe2:	d103      	bne.n	8004fec <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	f043 0320 	orr.w	r3, r3, #32
 8004fea:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	6013      	str	r3, [r2, #0]
}
 8004ff8:	bf00      	nop
 8004ffa:	3718      	adds	r7, #24
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}

08005000 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b084      	sub	sp, #16
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d101      	bne.n	8005012 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e12b      	b.n	800526a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005018:	b2db      	uxtb	r3, r3
 800501a:	2b00      	cmp	r3, #0
 800501c:	d106      	bne.n	800502c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f7fd f95e 	bl	80022e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2224      	movs	r2, #36	; 0x24
 8005030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f022 0201 	bic.w	r2, r2, #1
 8005042:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005052:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005062:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005064:	f001 fd7a 	bl	8006b5c <HAL_RCC_GetPCLK1Freq>
 8005068:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	4a81      	ldr	r2, [pc, #516]	; (8005274 <HAL_I2C_Init+0x274>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d807      	bhi.n	8005084 <HAL_I2C_Init+0x84>
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	4a80      	ldr	r2, [pc, #512]	; (8005278 <HAL_I2C_Init+0x278>)
 8005078:	4293      	cmp	r3, r2
 800507a:	bf94      	ite	ls
 800507c:	2301      	movls	r3, #1
 800507e:	2300      	movhi	r3, #0
 8005080:	b2db      	uxtb	r3, r3
 8005082:	e006      	b.n	8005092 <HAL_I2C_Init+0x92>
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	4a7d      	ldr	r2, [pc, #500]	; (800527c <HAL_I2C_Init+0x27c>)
 8005088:	4293      	cmp	r3, r2
 800508a:	bf94      	ite	ls
 800508c:	2301      	movls	r3, #1
 800508e:	2300      	movhi	r3, #0
 8005090:	b2db      	uxtb	r3, r3
 8005092:	2b00      	cmp	r3, #0
 8005094:	d001      	beq.n	800509a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	e0e7      	b.n	800526a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	4a78      	ldr	r2, [pc, #480]	; (8005280 <HAL_I2C_Init+0x280>)
 800509e:	fba2 2303 	umull	r2, r3, r2, r3
 80050a2:	0c9b      	lsrs	r3, r3, #18
 80050a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	68ba      	ldr	r2, [r7, #8]
 80050b6:	430a      	orrs	r2, r1
 80050b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	6a1b      	ldr	r3, [r3, #32]
 80050c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	4a6a      	ldr	r2, [pc, #424]	; (8005274 <HAL_I2C_Init+0x274>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d802      	bhi.n	80050d4 <HAL_I2C_Init+0xd4>
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	3301      	adds	r3, #1
 80050d2:	e009      	b.n	80050e8 <HAL_I2C_Init+0xe8>
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80050da:	fb02 f303 	mul.w	r3, r2, r3
 80050de:	4a69      	ldr	r2, [pc, #420]	; (8005284 <HAL_I2C_Init+0x284>)
 80050e0:	fba2 2303 	umull	r2, r3, r2, r3
 80050e4:	099b      	lsrs	r3, r3, #6
 80050e6:	3301      	adds	r3, #1
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	6812      	ldr	r2, [r2, #0]
 80050ec:	430b      	orrs	r3, r1
 80050ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	69db      	ldr	r3, [r3, #28]
 80050f6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80050fa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	495c      	ldr	r1, [pc, #368]	; (8005274 <HAL_I2C_Init+0x274>)
 8005104:	428b      	cmp	r3, r1
 8005106:	d819      	bhi.n	800513c <HAL_I2C_Init+0x13c>
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	1e59      	subs	r1, r3, #1
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	005b      	lsls	r3, r3, #1
 8005112:	fbb1 f3f3 	udiv	r3, r1, r3
 8005116:	1c59      	adds	r1, r3, #1
 8005118:	f640 73fc 	movw	r3, #4092	; 0xffc
 800511c:	400b      	ands	r3, r1
 800511e:	2b00      	cmp	r3, #0
 8005120:	d00a      	beq.n	8005138 <HAL_I2C_Init+0x138>
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	1e59      	subs	r1, r3, #1
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	005b      	lsls	r3, r3, #1
 800512c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005130:	3301      	adds	r3, #1
 8005132:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005136:	e051      	b.n	80051dc <HAL_I2C_Init+0x1dc>
 8005138:	2304      	movs	r3, #4
 800513a:	e04f      	b.n	80051dc <HAL_I2C_Init+0x1dc>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d111      	bne.n	8005168 <HAL_I2C_Init+0x168>
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	1e58      	subs	r0, r3, #1
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6859      	ldr	r1, [r3, #4]
 800514c:	460b      	mov	r3, r1
 800514e:	005b      	lsls	r3, r3, #1
 8005150:	440b      	add	r3, r1
 8005152:	fbb0 f3f3 	udiv	r3, r0, r3
 8005156:	3301      	adds	r3, #1
 8005158:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800515c:	2b00      	cmp	r3, #0
 800515e:	bf0c      	ite	eq
 8005160:	2301      	moveq	r3, #1
 8005162:	2300      	movne	r3, #0
 8005164:	b2db      	uxtb	r3, r3
 8005166:	e012      	b.n	800518e <HAL_I2C_Init+0x18e>
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	1e58      	subs	r0, r3, #1
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6859      	ldr	r1, [r3, #4]
 8005170:	460b      	mov	r3, r1
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	440b      	add	r3, r1
 8005176:	0099      	lsls	r1, r3, #2
 8005178:	440b      	add	r3, r1
 800517a:	fbb0 f3f3 	udiv	r3, r0, r3
 800517e:	3301      	adds	r3, #1
 8005180:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005184:	2b00      	cmp	r3, #0
 8005186:	bf0c      	ite	eq
 8005188:	2301      	moveq	r3, #1
 800518a:	2300      	movne	r3, #0
 800518c:	b2db      	uxtb	r3, r3
 800518e:	2b00      	cmp	r3, #0
 8005190:	d001      	beq.n	8005196 <HAL_I2C_Init+0x196>
 8005192:	2301      	movs	r3, #1
 8005194:	e022      	b.n	80051dc <HAL_I2C_Init+0x1dc>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d10e      	bne.n	80051bc <HAL_I2C_Init+0x1bc>
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	1e58      	subs	r0, r3, #1
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6859      	ldr	r1, [r3, #4]
 80051a6:	460b      	mov	r3, r1
 80051a8:	005b      	lsls	r3, r3, #1
 80051aa:	440b      	add	r3, r1
 80051ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80051b0:	3301      	adds	r3, #1
 80051b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051ba:	e00f      	b.n	80051dc <HAL_I2C_Init+0x1dc>
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	1e58      	subs	r0, r3, #1
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6859      	ldr	r1, [r3, #4]
 80051c4:	460b      	mov	r3, r1
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	440b      	add	r3, r1
 80051ca:	0099      	lsls	r1, r3, #2
 80051cc:	440b      	add	r3, r1
 80051ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80051d2:	3301      	adds	r3, #1
 80051d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80051dc:	6879      	ldr	r1, [r7, #4]
 80051de:	6809      	ldr	r1, [r1, #0]
 80051e0:	4313      	orrs	r3, r2
 80051e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	69da      	ldr	r2, [r3, #28]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a1b      	ldr	r3, [r3, #32]
 80051f6:	431a      	orrs	r2, r3
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	430a      	orrs	r2, r1
 80051fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800520a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	6911      	ldr	r1, [r2, #16]
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	68d2      	ldr	r2, [r2, #12]
 8005216:	4311      	orrs	r1, r2
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	6812      	ldr	r2, [r2, #0]
 800521c:	430b      	orrs	r3, r1
 800521e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	695a      	ldr	r2, [r3, #20]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	699b      	ldr	r3, [r3, #24]
 8005232:	431a      	orrs	r2, r3
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	430a      	orrs	r2, r1
 800523a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f042 0201 	orr.w	r2, r2, #1
 800524a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2220      	movs	r2, #32
 8005256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005268:	2300      	movs	r3, #0
}
 800526a:	4618      	mov	r0, r3
 800526c:	3710      	adds	r7, #16
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
 8005272:	bf00      	nop
 8005274:	000186a0 	.word	0x000186a0
 8005278:	001e847f 	.word	0x001e847f
 800527c:	003d08ff 	.word	0x003d08ff
 8005280:	431bde83 	.word	0x431bde83
 8005284:	10624dd3 	.word	0x10624dd3

08005288 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b088      	sub	sp, #32
 800528c:	af02      	add	r7, sp, #8
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	607a      	str	r2, [r7, #4]
 8005292:	461a      	mov	r2, r3
 8005294:	460b      	mov	r3, r1
 8005296:	817b      	strh	r3, [r7, #10]
 8005298:	4613      	mov	r3, r2
 800529a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800529c:	f7fd fbd6 	bl	8002a4c <HAL_GetTick>
 80052a0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	2b20      	cmp	r3, #32
 80052ac:	f040 80e0 	bne.w	8005470 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	9300      	str	r3, [sp, #0]
 80052b4:	2319      	movs	r3, #25
 80052b6:	2201      	movs	r2, #1
 80052b8:	4970      	ldr	r1, [pc, #448]	; (800547c <HAL_I2C_Master_Transmit+0x1f4>)
 80052ba:	68f8      	ldr	r0, [r7, #12]
 80052bc:	f000 fd86 	bl	8005dcc <I2C_WaitOnFlagUntilTimeout>
 80052c0:	4603      	mov	r3, r0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d001      	beq.n	80052ca <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80052c6:	2302      	movs	r3, #2
 80052c8:	e0d3      	b.n	8005472 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d101      	bne.n	80052d8 <HAL_I2C_Master_Transmit+0x50>
 80052d4:	2302      	movs	r3, #2
 80052d6:	e0cc      	b.n	8005472 <HAL_I2C_Master_Transmit+0x1ea>
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2201      	movs	r2, #1
 80052dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 0301 	and.w	r3, r3, #1
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d007      	beq.n	80052fe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f042 0201 	orr.w	r2, r2, #1
 80052fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800530c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2221      	movs	r2, #33	; 0x21
 8005312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2210      	movs	r2, #16
 800531a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2200      	movs	r2, #0
 8005322:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	893a      	ldrh	r2, [r7, #8]
 800532e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005334:	b29a      	uxth	r2, r3
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	4a50      	ldr	r2, [pc, #320]	; (8005480 <HAL_I2C_Master_Transmit+0x1f8>)
 800533e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005340:	8979      	ldrh	r1, [r7, #10]
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	6a3a      	ldr	r2, [r7, #32]
 8005346:	68f8      	ldr	r0, [r7, #12]
 8005348:	f000 fbf0 	bl	8005b2c <I2C_MasterRequestWrite>
 800534c:	4603      	mov	r3, r0
 800534e:	2b00      	cmp	r3, #0
 8005350:	d001      	beq.n	8005356 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e08d      	b.n	8005472 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005356:	2300      	movs	r3, #0
 8005358:	613b      	str	r3, [r7, #16]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	695b      	ldr	r3, [r3, #20]
 8005360:	613b      	str	r3, [r7, #16]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	699b      	ldr	r3, [r3, #24]
 8005368:	613b      	str	r3, [r7, #16]
 800536a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800536c:	e066      	b.n	800543c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800536e:	697a      	ldr	r2, [r7, #20]
 8005370:	6a39      	ldr	r1, [r7, #32]
 8005372:	68f8      	ldr	r0, [r7, #12]
 8005374:	f000 fe00 	bl	8005f78 <I2C_WaitOnTXEFlagUntilTimeout>
 8005378:	4603      	mov	r3, r0
 800537a:	2b00      	cmp	r3, #0
 800537c:	d00d      	beq.n	800539a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005382:	2b04      	cmp	r3, #4
 8005384:	d107      	bne.n	8005396 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005394:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e06b      	b.n	8005472 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539e:	781a      	ldrb	r2, [r3, #0]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053aa:	1c5a      	adds	r2, r3, #1
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	3b01      	subs	r3, #1
 80053b8:	b29a      	uxth	r2, r3
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053c2:	3b01      	subs	r3, #1
 80053c4:	b29a      	uxth	r2, r3
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	695b      	ldr	r3, [r3, #20]
 80053d0:	f003 0304 	and.w	r3, r3, #4
 80053d4:	2b04      	cmp	r3, #4
 80053d6:	d11b      	bne.n	8005410 <HAL_I2C_Master_Transmit+0x188>
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d017      	beq.n	8005410 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e4:	781a      	ldrb	r2, [r3, #0]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f0:	1c5a      	adds	r2, r3, #1
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	3b01      	subs	r3, #1
 80053fe:	b29a      	uxth	r2, r3
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005408:	3b01      	subs	r3, #1
 800540a:	b29a      	uxth	r2, r3
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005410:	697a      	ldr	r2, [r7, #20]
 8005412:	6a39      	ldr	r1, [r7, #32]
 8005414:	68f8      	ldr	r0, [r7, #12]
 8005416:	f000 fdf0 	bl	8005ffa <I2C_WaitOnBTFFlagUntilTimeout>
 800541a:	4603      	mov	r3, r0
 800541c:	2b00      	cmp	r3, #0
 800541e:	d00d      	beq.n	800543c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005424:	2b04      	cmp	r3, #4
 8005426:	d107      	bne.n	8005438 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005436:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	e01a      	b.n	8005472 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005440:	2b00      	cmp	r3, #0
 8005442:	d194      	bne.n	800536e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005452:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2220      	movs	r2, #32
 8005458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2200      	movs	r2, #0
 8005460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2200      	movs	r2, #0
 8005468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800546c:	2300      	movs	r3, #0
 800546e:	e000      	b.n	8005472 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005470:	2302      	movs	r3, #2
  }
}
 8005472:	4618      	mov	r0, r3
 8005474:	3718      	adds	r7, #24
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop
 800547c:	00100002 	.word	0x00100002
 8005480:	ffff0000 	.word	0xffff0000

08005484 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b08c      	sub	sp, #48	; 0x30
 8005488:	af02      	add	r7, sp, #8
 800548a:	60f8      	str	r0, [r7, #12]
 800548c:	607a      	str	r2, [r7, #4]
 800548e:	461a      	mov	r2, r3
 8005490:	460b      	mov	r3, r1
 8005492:	817b      	strh	r3, [r7, #10]
 8005494:	4613      	mov	r3, r2
 8005496:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005498:	f7fd fad8 	bl	8002a4c <HAL_GetTick>
 800549c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	2b20      	cmp	r3, #32
 80054a8:	f040 820b 	bne.w	80058c2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80054ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ae:	9300      	str	r3, [sp, #0]
 80054b0:	2319      	movs	r3, #25
 80054b2:	2201      	movs	r2, #1
 80054b4:	497c      	ldr	r1, [pc, #496]	; (80056a8 <HAL_I2C_Master_Receive+0x224>)
 80054b6:	68f8      	ldr	r0, [r7, #12]
 80054b8:	f000 fc88 	bl	8005dcc <I2C_WaitOnFlagUntilTimeout>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d001      	beq.n	80054c6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80054c2:	2302      	movs	r3, #2
 80054c4:	e1fe      	b.n	80058c4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d101      	bne.n	80054d4 <HAL_I2C_Master_Receive+0x50>
 80054d0:	2302      	movs	r3, #2
 80054d2:	e1f7      	b.n	80058c4 <HAL_I2C_Master_Receive+0x440>
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 0301 	and.w	r3, r3, #1
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d007      	beq.n	80054fa <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f042 0201 	orr.w	r2, r2, #1
 80054f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005508:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2222      	movs	r2, #34	; 0x22
 800550e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2210      	movs	r2, #16
 8005516:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2200      	movs	r2, #0
 800551e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	893a      	ldrh	r2, [r7, #8]
 800552a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005530:	b29a      	uxth	r2, r3
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	4a5c      	ldr	r2, [pc, #368]	; (80056ac <HAL_I2C_Master_Receive+0x228>)
 800553a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800553c:	8979      	ldrh	r1, [r7, #10]
 800553e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005540:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005542:	68f8      	ldr	r0, [r7, #12]
 8005544:	f000 fb74 	bl	8005c30 <I2C_MasterRequestRead>
 8005548:	4603      	mov	r3, r0
 800554a:	2b00      	cmp	r3, #0
 800554c:	d001      	beq.n	8005552 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e1b8      	b.n	80058c4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005556:	2b00      	cmp	r3, #0
 8005558:	d113      	bne.n	8005582 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800555a:	2300      	movs	r3, #0
 800555c:	623b      	str	r3, [r7, #32]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	695b      	ldr	r3, [r3, #20]
 8005564:	623b      	str	r3, [r7, #32]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	699b      	ldr	r3, [r3, #24]
 800556c:	623b      	str	r3, [r7, #32]
 800556e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800557e:	601a      	str	r2, [r3, #0]
 8005580:	e18c      	b.n	800589c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005586:	2b01      	cmp	r3, #1
 8005588:	d11b      	bne.n	80055c2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005598:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800559a:	2300      	movs	r3, #0
 800559c:	61fb      	str	r3, [r7, #28]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	695b      	ldr	r3, [r3, #20]
 80055a4:	61fb      	str	r3, [r7, #28]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	699b      	ldr	r3, [r3, #24]
 80055ac:	61fb      	str	r3, [r7, #28]
 80055ae:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055be:	601a      	str	r2, [r3, #0]
 80055c0:	e16c      	b.n	800589c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055c6:	2b02      	cmp	r3, #2
 80055c8:	d11b      	bne.n	8005602 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055d8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055ea:	2300      	movs	r3, #0
 80055ec:	61bb      	str	r3, [r7, #24]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	695b      	ldr	r3, [r3, #20]
 80055f4:	61bb      	str	r3, [r7, #24]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	699b      	ldr	r3, [r3, #24]
 80055fc:	61bb      	str	r3, [r7, #24]
 80055fe:	69bb      	ldr	r3, [r7, #24]
 8005600:	e14c      	b.n	800589c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005610:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005612:	2300      	movs	r3, #0
 8005614:	617b      	str	r3, [r7, #20]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	695b      	ldr	r3, [r3, #20]
 800561c:	617b      	str	r3, [r7, #20]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	699b      	ldr	r3, [r3, #24]
 8005624:	617b      	str	r3, [r7, #20]
 8005626:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005628:	e138      	b.n	800589c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800562e:	2b03      	cmp	r3, #3
 8005630:	f200 80f1 	bhi.w	8005816 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005638:	2b01      	cmp	r3, #1
 800563a:	d123      	bne.n	8005684 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800563c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800563e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005640:	68f8      	ldr	r0, [r7, #12]
 8005642:	f000 fd1b 	bl	800607c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005646:	4603      	mov	r3, r0
 8005648:	2b00      	cmp	r3, #0
 800564a:	d001      	beq.n	8005650 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	e139      	b.n	80058c4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	691a      	ldr	r2, [r3, #16]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565a:	b2d2      	uxtb	r2, r2
 800565c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005662:	1c5a      	adds	r2, r3, #1
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800566c:	3b01      	subs	r3, #1
 800566e:	b29a      	uxth	r2, r3
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005678:	b29b      	uxth	r3, r3
 800567a:	3b01      	subs	r3, #1
 800567c:	b29a      	uxth	r2, r3
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005682:	e10b      	b.n	800589c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005688:	2b02      	cmp	r3, #2
 800568a:	d14e      	bne.n	800572a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800568c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568e:	9300      	str	r3, [sp, #0]
 8005690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005692:	2200      	movs	r2, #0
 8005694:	4906      	ldr	r1, [pc, #24]	; (80056b0 <HAL_I2C_Master_Receive+0x22c>)
 8005696:	68f8      	ldr	r0, [r7, #12]
 8005698:	f000 fb98 	bl	8005dcc <I2C_WaitOnFlagUntilTimeout>
 800569c:	4603      	mov	r3, r0
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d008      	beq.n	80056b4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e10e      	b.n	80058c4 <HAL_I2C_Master_Receive+0x440>
 80056a6:	bf00      	nop
 80056a8:	00100002 	.word	0x00100002
 80056ac:	ffff0000 	.word	0xffff0000
 80056b0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	691a      	ldr	r2, [r3, #16]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ce:	b2d2      	uxtb	r2, r2
 80056d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d6:	1c5a      	adds	r2, r3, #1
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056e0:	3b01      	subs	r3, #1
 80056e2:	b29a      	uxth	r2, r3
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	3b01      	subs	r3, #1
 80056f0:	b29a      	uxth	r2, r3
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	691a      	ldr	r2, [r3, #16]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005700:	b2d2      	uxtb	r2, r2
 8005702:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005708:	1c5a      	adds	r2, r3, #1
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005712:	3b01      	subs	r3, #1
 8005714:	b29a      	uxth	r2, r3
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800571e:	b29b      	uxth	r3, r3
 8005720:	3b01      	subs	r3, #1
 8005722:	b29a      	uxth	r2, r3
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005728:	e0b8      	b.n	800589c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800572a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572c:	9300      	str	r3, [sp, #0]
 800572e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005730:	2200      	movs	r2, #0
 8005732:	4966      	ldr	r1, [pc, #408]	; (80058cc <HAL_I2C_Master_Receive+0x448>)
 8005734:	68f8      	ldr	r0, [r7, #12]
 8005736:	f000 fb49 	bl	8005dcc <I2C_WaitOnFlagUntilTimeout>
 800573a:	4603      	mov	r3, r0
 800573c:	2b00      	cmp	r3, #0
 800573e:	d001      	beq.n	8005744 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	e0bf      	b.n	80058c4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005752:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	691a      	ldr	r2, [r3, #16]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575e:	b2d2      	uxtb	r2, r2
 8005760:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005766:	1c5a      	adds	r2, r3, #1
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005770:	3b01      	subs	r3, #1
 8005772:	b29a      	uxth	r2, r3
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800577c:	b29b      	uxth	r3, r3
 800577e:	3b01      	subs	r3, #1
 8005780:	b29a      	uxth	r2, r3
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005788:	9300      	str	r3, [sp, #0]
 800578a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800578c:	2200      	movs	r2, #0
 800578e:	494f      	ldr	r1, [pc, #316]	; (80058cc <HAL_I2C_Master_Receive+0x448>)
 8005790:	68f8      	ldr	r0, [r7, #12]
 8005792:	f000 fb1b 	bl	8005dcc <I2C_WaitOnFlagUntilTimeout>
 8005796:	4603      	mov	r3, r0
 8005798:	2b00      	cmp	r3, #0
 800579a:	d001      	beq.n	80057a0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800579c:	2301      	movs	r3, #1
 800579e:	e091      	b.n	80058c4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	691a      	ldr	r2, [r3, #16]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ba:	b2d2      	uxtb	r2, r2
 80057bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c2:	1c5a      	adds	r2, r3, #1
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057cc:	3b01      	subs	r3, #1
 80057ce:	b29a      	uxth	r2, r3
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057d8:	b29b      	uxth	r3, r3
 80057da:	3b01      	subs	r3, #1
 80057dc:	b29a      	uxth	r2, r3
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	691a      	ldr	r2, [r3, #16]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ec:	b2d2      	uxtb	r2, r2
 80057ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f4:	1c5a      	adds	r2, r3, #1
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057fe:	3b01      	subs	r3, #1
 8005800:	b29a      	uxth	r2, r3
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800580a:	b29b      	uxth	r3, r3
 800580c:	3b01      	subs	r3, #1
 800580e:	b29a      	uxth	r2, r3
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005814:	e042      	b.n	800589c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005816:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005818:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800581a:	68f8      	ldr	r0, [r7, #12]
 800581c:	f000 fc2e 	bl	800607c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005820:	4603      	mov	r3, r0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d001      	beq.n	800582a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	e04c      	b.n	80058c4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	691a      	ldr	r2, [r3, #16]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005834:	b2d2      	uxtb	r2, r2
 8005836:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583c:	1c5a      	adds	r2, r3, #1
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005846:	3b01      	subs	r3, #1
 8005848:	b29a      	uxth	r2, r3
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005852:	b29b      	uxth	r3, r3
 8005854:	3b01      	subs	r3, #1
 8005856:	b29a      	uxth	r2, r3
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	695b      	ldr	r3, [r3, #20]
 8005862:	f003 0304 	and.w	r3, r3, #4
 8005866:	2b04      	cmp	r3, #4
 8005868:	d118      	bne.n	800589c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	691a      	ldr	r2, [r3, #16]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005874:	b2d2      	uxtb	r2, r2
 8005876:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587c:	1c5a      	adds	r2, r3, #1
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005886:	3b01      	subs	r3, #1
 8005888:	b29a      	uxth	r2, r3
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005892:	b29b      	uxth	r3, r3
 8005894:	3b01      	subs	r3, #1
 8005896:	b29a      	uxth	r2, r3
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	f47f aec2 	bne.w	800562a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2220      	movs	r2, #32
 80058aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2200      	movs	r2, #0
 80058b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2200      	movs	r2, #0
 80058ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80058be:	2300      	movs	r3, #0
 80058c0:	e000      	b.n	80058c4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80058c2:	2302      	movs	r3, #2
  }
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3728      	adds	r7, #40	; 0x28
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}
 80058cc:	00010004 	.word	0x00010004

080058d0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b08a      	sub	sp, #40	; 0x28
 80058d4:	af02      	add	r7, sp, #8
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	607a      	str	r2, [r7, #4]
 80058da:	603b      	str	r3, [r7, #0]
 80058dc:	460b      	mov	r3, r1
 80058de:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80058e0:	f7fd f8b4 	bl	8002a4c <HAL_GetTick>
 80058e4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80058e6:	2300      	movs	r3, #0
 80058e8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	2b20      	cmp	r3, #32
 80058f4:	f040 8111 	bne.w	8005b1a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	9300      	str	r3, [sp, #0]
 80058fc:	2319      	movs	r3, #25
 80058fe:	2201      	movs	r2, #1
 8005900:	4988      	ldr	r1, [pc, #544]	; (8005b24 <HAL_I2C_IsDeviceReady+0x254>)
 8005902:	68f8      	ldr	r0, [r7, #12]
 8005904:	f000 fa62 	bl	8005dcc <I2C_WaitOnFlagUntilTimeout>
 8005908:	4603      	mov	r3, r0
 800590a:	2b00      	cmp	r3, #0
 800590c:	d001      	beq.n	8005912 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800590e:	2302      	movs	r3, #2
 8005910:	e104      	b.n	8005b1c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005918:	2b01      	cmp	r3, #1
 800591a:	d101      	bne.n	8005920 <HAL_I2C_IsDeviceReady+0x50>
 800591c:	2302      	movs	r3, #2
 800591e:	e0fd      	b.n	8005b1c <HAL_I2C_IsDeviceReady+0x24c>
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2201      	movs	r2, #1
 8005924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f003 0301 	and.w	r3, r3, #1
 8005932:	2b01      	cmp	r3, #1
 8005934:	d007      	beq.n	8005946 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f042 0201 	orr.w	r2, r2, #1
 8005944:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005954:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2224      	movs	r2, #36	; 0x24
 800595a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2200      	movs	r2, #0
 8005962:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	4a70      	ldr	r2, [pc, #448]	; (8005b28 <HAL_I2C_IsDeviceReady+0x258>)
 8005968:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005978:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800597a:	69fb      	ldr	r3, [r7, #28]
 800597c:	9300      	str	r3, [sp, #0]
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	2200      	movs	r2, #0
 8005982:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005986:	68f8      	ldr	r0, [r7, #12]
 8005988:	f000 fa20 	bl	8005dcc <I2C_WaitOnFlagUntilTimeout>
 800598c:	4603      	mov	r3, r0
 800598e:	2b00      	cmp	r3, #0
 8005990:	d00d      	beq.n	80059ae <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800599c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059a0:	d103      	bne.n	80059aa <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059a8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80059aa:	2303      	movs	r3, #3
 80059ac:	e0b6      	b.n	8005b1c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80059ae:	897b      	ldrh	r3, [r7, #10]
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	461a      	mov	r2, r3
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80059bc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80059be:	f7fd f845 	bl	8002a4c <HAL_GetTick>
 80059c2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	695b      	ldr	r3, [r3, #20]
 80059ca:	f003 0302 	and.w	r3, r3, #2
 80059ce:	2b02      	cmp	r3, #2
 80059d0:	bf0c      	ite	eq
 80059d2:	2301      	moveq	r3, #1
 80059d4:	2300      	movne	r3, #0
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	695b      	ldr	r3, [r3, #20]
 80059e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059e8:	bf0c      	ite	eq
 80059ea:	2301      	moveq	r3, #1
 80059ec:	2300      	movne	r3, #0
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80059f2:	e025      	b.n	8005a40 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80059f4:	f7fd f82a 	bl	8002a4c <HAL_GetTick>
 80059f8:	4602      	mov	r2, r0
 80059fa:	69fb      	ldr	r3, [r7, #28]
 80059fc:	1ad3      	subs	r3, r2, r3
 80059fe:	683a      	ldr	r2, [r7, #0]
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d302      	bcc.n	8005a0a <HAL_I2C_IsDeviceReady+0x13a>
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d103      	bne.n	8005a12 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	22a0      	movs	r2, #160	; 0xa0
 8005a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	695b      	ldr	r3, [r3, #20]
 8005a18:	f003 0302 	and.w	r3, r3, #2
 8005a1c:	2b02      	cmp	r3, #2
 8005a1e:	bf0c      	ite	eq
 8005a20:	2301      	moveq	r3, #1
 8005a22:	2300      	movne	r3, #0
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	695b      	ldr	r3, [r3, #20]
 8005a2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a36:	bf0c      	ite	eq
 8005a38:	2301      	moveq	r3, #1
 8005a3a:	2300      	movne	r3, #0
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	2ba0      	cmp	r3, #160	; 0xa0
 8005a4a:	d005      	beq.n	8005a58 <HAL_I2C_IsDeviceReady+0x188>
 8005a4c:	7dfb      	ldrb	r3, [r7, #23]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d102      	bne.n	8005a58 <HAL_I2C_IsDeviceReady+0x188>
 8005a52:	7dbb      	ldrb	r3, [r7, #22]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d0cd      	beq.n	80059f4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2220      	movs	r2, #32
 8005a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	695b      	ldr	r3, [r3, #20]
 8005a66:	f003 0302 	and.w	r3, r3, #2
 8005a6a:	2b02      	cmp	r3, #2
 8005a6c:	d129      	bne.n	8005ac2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a7c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a7e:	2300      	movs	r3, #0
 8005a80:	613b      	str	r3, [r7, #16]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	695b      	ldr	r3, [r3, #20]
 8005a88:	613b      	str	r3, [r7, #16]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	699b      	ldr	r3, [r3, #24]
 8005a90:	613b      	str	r3, [r7, #16]
 8005a92:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005a94:	69fb      	ldr	r3, [r7, #28]
 8005a96:	9300      	str	r3, [sp, #0]
 8005a98:	2319      	movs	r3, #25
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	4921      	ldr	r1, [pc, #132]	; (8005b24 <HAL_I2C_IsDeviceReady+0x254>)
 8005a9e:	68f8      	ldr	r0, [r7, #12]
 8005aa0:	f000 f994 	bl	8005dcc <I2C_WaitOnFlagUntilTimeout>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d001      	beq.n	8005aae <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e036      	b.n	8005b1c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2220      	movs	r2, #32
 8005ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	e02c      	b.n	8005b1c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ad0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005ada:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005adc:	69fb      	ldr	r3, [r7, #28]
 8005ade:	9300      	str	r3, [sp, #0]
 8005ae0:	2319      	movs	r3, #25
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	490f      	ldr	r1, [pc, #60]	; (8005b24 <HAL_I2C_IsDeviceReady+0x254>)
 8005ae6:	68f8      	ldr	r0, [r7, #12]
 8005ae8:	f000 f970 	bl	8005dcc <I2C_WaitOnFlagUntilTimeout>
 8005aec:	4603      	mov	r3, r0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d001      	beq.n	8005af6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e012      	b.n	8005b1c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005af6:	69bb      	ldr	r3, [r7, #24]
 8005af8:	3301      	adds	r3, #1
 8005afa:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005afc:	69ba      	ldr	r2, [r7, #24]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	429a      	cmp	r2, r3
 8005b02:	f4ff af32 	bcc.w	800596a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2220      	movs	r2, #32
 8005b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2200      	movs	r2, #0
 8005b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	e000      	b.n	8005b1c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8005b1a:	2302      	movs	r3, #2
  }
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3720      	adds	r7, #32
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}
 8005b24:	00100002 	.word	0x00100002
 8005b28:	ffff0000 	.word	0xffff0000

08005b2c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b088      	sub	sp, #32
 8005b30:	af02      	add	r7, sp, #8
 8005b32:	60f8      	str	r0, [r7, #12]
 8005b34:	607a      	str	r2, [r7, #4]
 8005b36:	603b      	str	r3, [r7, #0]
 8005b38:	460b      	mov	r3, r1
 8005b3a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b40:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	2b08      	cmp	r3, #8
 8005b46:	d006      	beq.n	8005b56 <I2C_MasterRequestWrite+0x2a>
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d003      	beq.n	8005b56 <I2C_MasterRequestWrite+0x2a>
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005b54:	d108      	bne.n	8005b68 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b64:	601a      	str	r2, [r3, #0]
 8005b66:	e00b      	b.n	8005b80 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b6c:	2b12      	cmp	r3, #18
 8005b6e:	d107      	bne.n	8005b80 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b7e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	9300      	str	r3, [sp, #0]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2200      	movs	r2, #0
 8005b88:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005b8c:	68f8      	ldr	r0, [r7, #12]
 8005b8e:	f000 f91d 	bl	8005dcc <I2C_WaitOnFlagUntilTimeout>
 8005b92:	4603      	mov	r3, r0
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d00d      	beq.n	8005bb4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ba2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ba6:	d103      	bne.n	8005bb0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005bb0:	2303      	movs	r3, #3
 8005bb2:	e035      	b.n	8005c20 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	691b      	ldr	r3, [r3, #16]
 8005bb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005bbc:	d108      	bne.n	8005bd0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005bbe:	897b      	ldrh	r3, [r7, #10]
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005bcc:	611a      	str	r2, [r3, #16]
 8005bce:	e01b      	b.n	8005c08 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005bd0:	897b      	ldrh	r3, [r7, #10]
 8005bd2:	11db      	asrs	r3, r3, #7
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	f003 0306 	and.w	r3, r3, #6
 8005bda:	b2db      	uxtb	r3, r3
 8005bdc:	f063 030f 	orn	r3, r3, #15
 8005be0:	b2da      	uxtb	r2, r3
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	490e      	ldr	r1, [pc, #56]	; (8005c28 <I2C_MasterRequestWrite+0xfc>)
 8005bee:	68f8      	ldr	r0, [r7, #12]
 8005bf0:	f000 f943 	bl	8005e7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d001      	beq.n	8005bfe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e010      	b.n	8005c20 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005bfe:	897b      	ldrh	r3, [r7, #10]
 8005c00:	b2da      	uxtb	r2, r3
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	687a      	ldr	r2, [r7, #4]
 8005c0c:	4907      	ldr	r1, [pc, #28]	; (8005c2c <I2C_MasterRequestWrite+0x100>)
 8005c0e:	68f8      	ldr	r0, [r7, #12]
 8005c10:	f000 f933 	bl	8005e7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c14:	4603      	mov	r3, r0
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d001      	beq.n	8005c1e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e000      	b.n	8005c20 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005c1e:	2300      	movs	r3, #0
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3718      	adds	r7, #24
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}
 8005c28:	00010008 	.word	0x00010008
 8005c2c:	00010002 	.word	0x00010002

08005c30 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b088      	sub	sp, #32
 8005c34:	af02      	add	r7, sp, #8
 8005c36:	60f8      	str	r0, [r7, #12]
 8005c38:	607a      	str	r2, [r7, #4]
 8005c3a:	603b      	str	r3, [r7, #0]
 8005c3c:	460b      	mov	r3, r1
 8005c3e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c44:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005c54:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	2b08      	cmp	r3, #8
 8005c5a:	d006      	beq.n	8005c6a <I2C_MasterRequestRead+0x3a>
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d003      	beq.n	8005c6a <I2C_MasterRequestRead+0x3a>
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005c68:	d108      	bne.n	8005c7c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c78:	601a      	str	r2, [r3, #0]
 8005c7a:	e00b      	b.n	8005c94 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c80:	2b11      	cmp	r3, #17
 8005c82:	d107      	bne.n	8005c94 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c92:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	9300      	str	r3, [sp, #0]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005ca0:	68f8      	ldr	r0, [r7, #12]
 8005ca2:	f000 f893 	bl	8005dcc <I2C_WaitOnFlagUntilTimeout>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d00d      	beq.n	8005cc8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cba:	d103      	bne.n	8005cc4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cc2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005cc4:	2303      	movs	r3, #3
 8005cc6:	e079      	b.n	8005dbc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	691b      	ldr	r3, [r3, #16]
 8005ccc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005cd0:	d108      	bne.n	8005ce4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005cd2:	897b      	ldrh	r3, [r7, #10]
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	f043 0301 	orr.w	r3, r3, #1
 8005cda:	b2da      	uxtb	r2, r3
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	611a      	str	r2, [r3, #16]
 8005ce2:	e05f      	b.n	8005da4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005ce4:	897b      	ldrh	r3, [r7, #10]
 8005ce6:	11db      	asrs	r3, r3, #7
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	f003 0306 	and.w	r3, r3, #6
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	f063 030f 	orn	r3, r3, #15
 8005cf4:	b2da      	uxtb	r2, r3
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	4930      	ldr	r1, [pc, #192]	; (8005dc4 <I2C_MasterRequestRead+0x194>)
 8005d02:	68f8      	ldr	r0, [r7, #12]
 8005d04:	f000 f8b9 	bl	8005e7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d001      	beq.n	8005d12 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e054      	b.n	8005dbc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005d12:	897b      	ldrh	r3, [r7, #10]
 8005d14:	b2da      	uxtb	r2, r3
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	4929      	ldr	r1, [pc, #164]	; (8005dc8 <I2C_MasterRequestRead+0x198>)
 8005d22:	68f8      	ldr	r0, [r7, #12]
 8005d24:	f000 f8a9 	bl	8005e7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d001      	beq.n	8005d32 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e044      	b.n	8005dbc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d32:	2300      	movs	r3, #0
 8005d34:	613b      	str	r3, [r7, #16]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	695b      	ldr	r3, [r3, #20]
 8005d3c:	613b      	str	r3, [r7, #16]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	699b      	ldr	r3, [r3, #24]
 8005d44:	613b      	str	r3, [r7, #16]
 8005d46:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d56:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	9300      	str	r3, [sp, #0]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005d64:	68f8      	ldr	r0, [r7, #12]
 8005d66:	f000 f831 	bl	8005dcc <I2C_WaitOnFlagUntilTimeout>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d00d      	beq.n	8005d8c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d7e:	d103      	bne.n	8005d88 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d86:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005d88:	2303      	movs	r3, #3
 8005d8a:	e017      	b.n	8005dbc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005d8c:	897b      	ldrh	r3, [r7, #10]
 8005d8e:	11db      	asrs	r3, r3, #7
 8005d90:	b2db      	uxtb	r3, r3
 8005d92:	f003 0306 	and.w	r3, r3, #6
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	f063 030e 	orn	r3, r3, #14
 8005d9c:	b2da      	uxtb	r2, r3
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	4907      	ldr	r1, [pc, #28]	; (8005dc8 <I2C_MasterRequestRead+0x198>)
 8005daa:	68f8      	ldr	r0, [r7, #12]
 8005dac:	f000 f865 	bl	8005e7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d001      	beq.n	8005dba <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	e000      	b.n	8005dbc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005dba:	2300      	movs	r3, #0
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3718      	adds	r7, #24
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}
 8005dc4:	00010008 	.word	0x00010008
 8005dc8:	00010002 	.word	0x00010002

08005dcc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b084      	sub	sp, #16
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	60f8      	str	r0, [r7, #12]
 8005dd4:	60b9      	str	r1, [r7, #8]
 8005dd6:	603b      	str	r3, [r7, #0]
 8005dd8:	4613      	mov	r3, r2
 8005dda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ddc:	e025      	b.n	8005e2a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005de4:	d021      	beq.n	8005e2a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005de6:	f7fc fe31 	bl	8002a4c <HAL_GetTick>
 8005dea:	4602      	mov	r2, r0
 8005dec:	69bb      	ldr	r3, [r7, #24]
 8005dee:	1ad3      	subs	r3, r2, r3
 8005df0:	683a      	ldr	r2, [r7, #0]
 8005df2:	429a      	cmp	r2, r3
 8005df4:	d302      	bcc.n	8005dfc <I2C_WaitOnFlagUntilTimeout+0x30>
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d116      	bne.n	8005e2a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2220      	movs	r2, #32
 8005e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e16:	f043 0220 	orr.w	r2, r3, #32
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2200      	movs	r2, #0
 8005e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	e023      	b.n	8005e72 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	0c1b      	lsrs	r3, r3, #16
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d10d      	bne.n	8005e50 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	695b      	ldr	r3, [r3, #20]
 8005e3a:	43da      	mvns	r2, r3
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	4013      	ands	r3, r2
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	bf0c      	ite	eq
 8005e46:	2301      	moveq	r3, #1
 8005e48:	2300      	movne	r3, #0
 8005e4a:	b2db      	uxtb	r3, r3
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	e00c      	b.n	8005e6a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	699b      	ldr	r3, [r3, #24]
 8005e56:	43da      	mvns	r2, r3
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	4013      	ands	r3, r2
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	bf0c      	ite	eq
 8005e62:	2301      	moveq	r3, #1
 8005e64:	2300      	movne	r3, #0
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	461a      	mov	r2, r3
 8005e6a:	79fb      	ldrb	r3, [r7, #7]
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d0b6      	beq.n	8005dde <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e70:	2300      	movs	r3, #0
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3710      	adds	r7, #16
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}

08005e7a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005e7a:	b580      	push	{r7, lr}
 8005e7c:	b084      	sub	sp, #16
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	60f8      	str	r0, [r7, #12]
 8005e82:	60b9      	str	r1, [r7, #8]
 8005e84:	607a      	str	r2, [r7, #4]
 8005e86:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005e88:	e051      	b.n	8005f2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	695b      	ldr	r3, [r3, #20]
 8005e90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e98:	d123      	bne.n	8005ee2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ea8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005eb2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2220      	movs	r2, #32
 8005ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ece:	f043 0204 	orr.w	r2, r3, #4
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e046      	b.n	8005f70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ee8:	d021      	beq.n	8005f2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005eea:	f7fc fdaf 	bl	8002a4c <HAL_GetTick>
 8005eee:	4602      	mov	r2, r0
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	1ad3      	subs	r3, r2, r3
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d302      	bcc.n	8005f00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d116      	bne.n	8005f2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2200      	movs	r2, #0
 8005f04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2220      	movs	r2, #32
 8005f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2200      	movs	r2, #0
 8005f12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f1a:	f043 0220 	orr.w	r2, r3, #32
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2200      	movs	r2, #0
 8005f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e020      	b.n	8005f70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	0c1b      	lsrs	r3, r3, #16
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d10c      	bne.n	8005f52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	695b      	ldr	r3, [r3, #20]
 8005f3e:	43da      	mvns	r2, r3
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	4013      	ands	r3, r2
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	bf14      	ite	ne
 8005f4a:	2301      	movne	r3, #1
 8005f4c:	2300      	moveq	r3, #0
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	e00b      	b.n	8005f6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	699b      	ldr	r3, [r3, #24]
 8005f58:	43da      	mvns	r2, r3
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	4013      	ands	r3, r2
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	bf14      	ite	ne
 8005f64:	2301      	movne	r3, #1
 8005f66:	2300      	moveq	r3, #0
 8005f68:	b2db      	uxtb	r3, r3
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d18d      	bne.n	8005e8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005f6e:	2300      	movs	r3, #0
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3710      	adds	r7, #16
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}

08005f78 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b084      	sub	sp, #16
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	60b9      	str	r1, [r7, #8]
 8005f82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f84:	e02d      	b.n	8005fe2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005f86:	68f8      	ldr	r0, [r7, #12]
 8005f88:	f000 f8ce 	bl	8006128 <I2C_IsAcknowledgeFailed>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d001      	beq.n	8005f96 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	e02d      	b.n	8005ff2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f9c:	d021      	beq.n	8005fe2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f9e:	f7fc fd55 	bl	8002a4c <HAL_GetTick>
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	1ad3      	subs	r3, r2, r3
 8005fa8:	68ba      	ldr	r2, [r7, #8]
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d302      	bcc.n	8005fb4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d116      	bne.n	8005fe2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2220      	movs	r2, #32
 8005fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fce:	f043 0220 	orr.w	r2, r3, #32
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	e007      	b.n	8005ff2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	695b      	ldr	r3, [r3, #20]
 8005fe8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fec:	2b80      	cmp	r3, #128	; 0x80
 8005fee:	d1ca      	bne.n	8005f86 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005ff0:	2300      	movs	r3, #0
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3710      	adds	r7, #16
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}

08005ffa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ffa:	b580      	push	{r7, lr}
 8005ffc:	b084      	sub	sp, #16
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	60f8      	str	r0, [r7, #12]
 8006002:	60b9      	str	r1, [r7, #8]
 8006004:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006006:	e02d      	b.n	8006064 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006008:	68f8      	ldr	r0, [r7, #12]
 800600a:	f000 f88d 	bl	8006128 <I2C_IsAcknowledgeFailed>
 800600e:	4603      	mov	r3, r0
 8006010:	2b00      	cmp	r3, #0
 8006012:	d001      	beq.n	8006018 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006014:	2301      	movs	r3, #1
 8006016:	e02d      	b.n	8006074 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800601e:	d021      	beq.n	8006064 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006020:	f7fc fd14 	bl	8002a4c <HAL_GetTick>
 8006024:	4602      	mov	r2, r0
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	1ad3      	subs	r3, r2, r3
 800602a:	68ba      	ldr	r2, [r7, #8]
 800602c:	429a      	cmp	r2, r3
 800602e:	d302      	bcc.n	8006036 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d116      	bne.n	8006064 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2200      	movs	r2, #0
 800603a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2220      	movs	r2, #32
 8006040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2200      	movs	r2, #0
 8006048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006050:	f043 0220 	orr.w	r2, r3, #32
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2200      	movs	r2, #0
 800605c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006060:	2301      	movs	r3, #1
 8006062:	e007      	b.n	8006074 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	695b      	ldr	r3, [r3, #20]
 800606a:	f003 0304 	and.w	r3, r3, #4
 800606e:	2b04      	cmp	r3, #4
 8006070:	d1ca      	bne.n	8006008 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006072:	2300      	movs	r3, #0
}
 8006074:	4618      	mov	r0, r3
 8006076:	3710      	adds	r7, #16
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}

0800607c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b084      	sub	sp, #16
 8006080:	af00      	add	r7, sp, #0
 8006082:	60f8      	str	r0, [r7, #12]
 8006084:	60b9      	str	r1, [r7, #8]
 8006086:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006088:	e042      	b.n	8006110 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	695b      	ldr	r3, [r3, #20]
 8006090:	f003 0310 	and.w	r3, r3, #16
 8006094:	2b10      	cmp	r3, #16
 8006096:	d119      	bne.n	80060cc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f06f 0210 	mvn.w	r2, #16
 80060a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2200      	movs	r2, #0
 80060a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2220      	movs	r2, #32
 80060ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2200      	movs	r2, #0
 80060b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2200      	movs	r2, #0
 80060c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80060c8:	2301      	movs	r3, #1
 80060ca:	e029      	b.n	8006120 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060cc:	f7fc fcbe 	bl	8002a4c <HAL_GetTick>
 80060d0:	4602      	mov	r2, r0
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	1ad3      	subs	r3, r2, r3
 80060d6:	68ba      	ldr	r2, [r7, #8]
 80060d8:	429a      	cmp	r2, r3
 80060da:	d302      	bcc.n	80060e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d116      	bne.n	8006110 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2200      	movs	r2, #0
 80060e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2220      	movs	r2, #32
 80060ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2200      	movs	r2, #0
 80060f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060fc:	f043 0220 	orr.w	r2, r3, #32
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2200      	movs	r2, #0
 8006108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800610c:	2301      	movs	r3, #1
 800610e:	e007      	b.n	8006120 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	695b      	ldr	r3, [r3, #20]
 8006116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800611a:	2b40      	cmp	r3, #64	; 0x40
 800611c:	d1b5      	bne.n	800608a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800611e:	2300      	movs	r3, #0
}
 8006120:	4618      	mov	r0, r3
 8006122:	3710      	adds	r7, #16
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}

08006128 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006128:	b480      	push	{r7}
 800612a:	b083      	sub	sp, #12
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	695b      	ldr	r3, [r3, #20]
 8006136:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800613a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800613e:	d11b      	bne.n	8006178 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006148:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2200      	movs	r2, #0
 800614e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2220      	movs	r2, #32
 8006154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2200      	movs	r2, #0
 800615c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006164:	f043 0204 	orr.w	r2, r3, #4
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2200      	movs	r2, #0
 8006170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006174:	2301      	movs	r3, #1
 8006176:	e000      	b.n	800617a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006178:	2300      	movs	r3, #0
}
 800617a:	4618      	mov	r0, r3
 800617c:	370c      	adds	r7, #12
 800617e:	46bd      	mov	sp, r7
 8006180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006184:	4770      	bx	lr

08006186 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006186:	b480      	push	{r7}
 8006188:	b083      	sub	sp, #12
 800618a:	af00      	add	r7, sp, #0
 800618c:	6078      	str	r0, [r7, #4]
 800618e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006196:	b2db      	uxtb	r3, r3
 8006198:	2b20      	cmp	r3, #32
 800619a:	d129      	bne.n	80061f0 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2224      	movs	r2, #36	; 0x24
 80061a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	681a      	ldr	r2, [r3, #0]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f022 0201 	bic.w	r2, r2, #1
 80061b2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f022 0210 	bic.w	r2, r2, #16
 80061c2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	683a      	ldr	r2, [r7, #0]
 80061d0:	430a      	orrs	r2, r1
 80061d2:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f042 0201 	orr.w	r2, r2, #1
 80061e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2220      	movs	r2, #32
 80061e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80061ec:	2300      	movs	r3, #0
 80061ee:	e000      	b.n	80061f2 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80061f0:	2302      	movs	r3, #2
  }
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	370c      	adds	r7, #12
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr

080061fe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80061fe:	b480      	push	{r7}
 8006200:	b085      	sub	sp, #20
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
 8006206:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8006208:	2300      	movs	r3, #0
 800620a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006212:	b2db      	uxtb	r3, r3
 8006214:	2b20      	cmp	r3, #32
 8006216:	d12a      	bne.n	800626e <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2224      	movs	r2, #36	; 0x24
 800621c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f022 0201 	bic.w	r2, r2, #1
 800622e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006236:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8006238:	89fb      	ldrh	r3, [r7, #14]
 800623a:	f023 030f 	bic.w	r3, r3, #15
 800623e:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	b29a      	uxth	r2, r3
 8006244:	89fb      	ldrh	r3, [r7, #14]
 8006246:	4313      	orrs	r3, r2
 8006248:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	89fa      	ldrh	r2, [r7, #14]
 8006250:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f042 0201 	orr.w	r2, r2, #1
 8006260:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2220      	movs	r2, #32
 8006266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800626a:	2300      	movs	r3, #0
 800626c:	e000      	b.n	8006270 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800626e:	2302      	movs	r3, #2
  }
}
 8006270:	4618      	mov	r0, r3
 8006272:	3714      	adds	r7, #20
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr

0800627c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b086      	sub	sp, #24
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d101      	bne.n	800628e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	e267      	b.n	800675e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f003 0301 	and.w	r3, r3, #1
 8006296:	2b00      	cmp	r3, #0
 8006298:	d075      	beq.n	8006386 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800629a:	4b88      	ldr	r3, [pc, #544]	; (80064bc <HAL_RCC_OscConfig+0x240>)
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	f003 030c 	and.w	r3, r3, #12
 80062a2:	2b04      	cmp	r3, #4
 80062a4:	d00c      	beq.n	80062c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80062a6:	4b85      	ldr	r3, [pc, #532]	; (80064bc <HAL_RCC_OscConfig+0x240>)
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80062ae:	2b08      	cmp	r3, #8
 80062b0:	d112      	bne.n	80062d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80062b2:	4b82      	ldr	r3, [pc, #520]	; (80064bc <HAL_RCC_OscConfig+0x240>)
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062be:	d10b      	bne.n	80062d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062c0:	4b7e      	ldr	r3, [pc, #504]	; (80064bc <HAL_RCC_OscConfig+0x240>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d05b      	beq.n	8006384 <HAL_RCC_OscConfig+0x108>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d157      	bne.n	8006384 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80062d4:	2301      	movs	r3, #1
 80062d6:	e242      	b.n	800675e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062e0:	d106      	bne.n	80062f0 <HAL_RCC_OscConfig+0x74>
 80062e2:	4b76      	ldr	r3, [pc, #472]	; (80064bc <HAL_RCC_OscConfig+0x240>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a75      	ldr	r2, [pc, #468]	; (80064bc <HAL_RCC_OscConfig+0x240>)
 80062e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062ec:	6013      	str	r3, [r2, #0]
 80062ee:	e01d      	b.n	800632c <HAL_RCC_OscConfig+0xb0>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80062f8:	d10c      	bne.n	8006314 <HAL_RCC_OscConfig+0x98>
 80062fa:	4b70      	ldr	r3, [pc, #448]	; (80064bc <HAL_RCC_OscConfig+0x240>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a6f      	ldr	r2, [pc, #444]	; (80064bc <HAL_RCC_OscConfig+0x240>)
 8006300:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006304:	6013      	str	r3, [r2, #0]
 8006306:	4b6d      	ldr	r3, [pc, #436]	; (80064bc <HAL_RCC_OscConfig+0x240>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a6c      	ldr	r2, [pc, #432]	; (80064bc <HAL_RCC_OscConfig+0x240>)
 800630c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006310:	6013      	str	r3, [r2, #0]
 8006312:	e00b      	b.n	800632c <HAL_RCC_OscConfig+0xb0>
 8006314:	4b69      	ldr	r3, [pc, #420]	; (80064bc <HAL_RCC_OscConfig+0x240>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a68      	ldr	r2, [pc, #416]	; (80064bc <HAL_RCC_OscConfig+0x240>)
 800631a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800631e:	6013      	str	r3, [r2, #0]
 8006320:	4b66      	ldr	r3, [pc, #408]	; (80064bc <HAL_RCC_OscConfig+0x240>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a65      	ldr	r2, [pc, #404]	; (80064bc <HAL_RCC_OscConfig+0x240>)
 8006326:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800632a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d013      	beq.n	800635c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006334:	f7fc fb8a 	bl	8002a4c <HAL_GetTick>
 8006338:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800633a:	e008      	b.n	800634e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800633c:	f7fc fb86 	bl	8002a4c <HAL_GetTick>
 8006340:	4602      	mov	r2, r0
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	1ad3      	subs	r3, r2, r3
 8006346:	2b64      	cmp	r3, #100	; 0x64
 8006348:	d901      	bls.n	800634e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800634a:	2303      	movs	r3, #3
 800634c:	e207      	b.n	800675e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800634e:	4b5b      	ldr	r3, [pc, #364]	; (80064bc <HAL_RCC_OscConfig+0x240>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006356:	2b00      	cmp	r3, #0
 8006358:	d0f0      	beq.n	800633c <HAL_RCC_OscConfig+0xc0>
 800635a:	e014      	b.n	8006386 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800635c:	f7fc fb76 	bl	8002a4c <HAL_GetTick>
 8006360:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006362:	e008      	b.n	8006376 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006364:	f7fc fb72 	bl	8002a4c <HAL_GetTick>
 8006368:	4602      	mov	r2, r0
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	1ad3      	subs	r3, r2, r3
 800636e:	2b64      	cmp	r3, #100	; 0x64
 8006370:	d901      	bls.n	8006376 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006372:	2303      	movs	r3, #3
 8006374:	e1f3      	b.n	800675e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006376:	4b51      	ldr	r3, [pc, #324]	; (80064bc <HAL_RCC_OscConfig+0x240>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800637e:	2b00      	cmp	r3, #0
 8006380:	d1f0      	bne.n	8006364 <HAL_RCC_OscConfig+0xe8>
 8006382:	e000      	b.n	8006386 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006384:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f003 0302 	and.w	r3, r3, #2
 800638e:	2b00      	cmp	r3, #0
 8006390:	d063      	beq.n	800645a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006392:	4b4a      	ldr	r3, [pc, #296]	; (80064bc <HAL_RCC_OscConfig+0x240>)
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	f003 030c 	and.w	r3, r3, #12
 800639a:	2b00      	cmp	r3, #0
 800639c:	d00b      	beq.n	80063b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800639e:	4b47      	ldr	r3, [pc, #284]	; (80064bc <HAL_RCC_OscConfig+0x240>)
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80063a6:	2b08      	cmp	r3, #8
 80063a8:	d11c      	bne.n	80063e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80063aa:	4b44      	ldr	r3, [pc, #272]	; (80064bc <HAL_RCC_OscConfig+0x240>)
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d116      	bne.n	80063e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063b6:	4b41      	ldr	r3, [pc, #260]	; (80064bc <HAL_RCC_OscConfig+0x240>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f003 0302 	and.w	r3, r3, #2
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d005      	beq.n	80063ce <HAL_RCC_OscConfig+0x152>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	68db      	ldr	r3, [r3, #12]
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d001      	beq.n	80063ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	e1c7      	b.n	800675e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063ce:	4b3b      	ldr	r3, [pc, #236]	; (80064bc <HAL_RCC_OscConfig+0x240>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	691b      	ldr	r3, [r3, #16]
 80063da:	00db      	lsls	r3, r3, #3
 80063dc:	4937      	ldr	r1, [pc, #220]	; (80064bc <HAL_RCC_OscConfig+0x240>)
 80063de:	4313      	orrs	r3, r2
 80063e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063e2:	e03a      	b.n	800645a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	68db      	ldr	r3, [r3, #12]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d020      	beq.n	800642e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80063ec:	4b34      	ldr	r3, [pc, #208]	; (80064c0 <HAL_RCC_OscConfig+0x244>)
 80063ee:	2201      	movs	r2, #1
 80063f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063f2:	f7fc fb2b 	bl	8002a4c <HAL_GetTick>
 80063f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063f8:	e008      	b.n	800640c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80063fa:	f7fc fb27 	bl	8002a4c <HAL_GetTick>
 80063fe:	4602      	mov	r2, r0
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	1ad3      	subs	r3, r2, r3
 8006404:	2b02      	cmp	r3, #2
 8006406:	d901      	bls.n	800640c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006408:	2303      	movs	r3, #3
 800640a:	e1a8      	b.n	800675e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800640c:	4b2b      	ldr	r3, [pc, #172]	; (80064bc <HAL_RCC_OscConfig+0x240>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f003 0302 	and.w	r3, r3, #2
 8006414:	2b00      	cmp	r3, #0
 8006416:	d0f0      	beq.n	80063fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006418:	4b28      	ldr	r3, [pc, #160]	; (80064bc <HAL_RCC_OscConfig+0x240>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	691b      	ldr	r3, [r3, #16]
 8006424:	00db      	lsls	r3, r3, #3
 8006426:	4925      	ldr	r1, [pc, #148]	; (80064bc <HAL_RCC_OscConfig+0x240>)
 8006428:	4313      	orrs	r3, r2
 800642a:	600b      	str	r3, [r1, #0]
 800642c:	e015      	b.n	800645a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800642e:	4b24      	ldr	r3, [pc, #144]	; (80064c0 <HAL_RCC_OscConfig+0x244>)
 8006430:	2200      	movs	r2, #0
 8006432:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006434:	f7fc fb0a 	bl	8002a4c <HAL_GetTick>
 8006438:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800643a:	e008      	b.n	800644e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800643c:	f7fc fb06 	bl	8002a4c <HAL_GetTick>
 8006440:	4602      	mov	r2, r0
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	1ad3      	subs	r3, r2, r3
 8006446:	2b02      	cmp	r3, #2
 8006448:	d901      	bls.n	800644e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800644a:	2303      	movs	r3, #3
 800644c:	e187      	b.n	800675e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800644e:	4b1b      	ldr	r3, [pc, #108]	; (80064bc <HAL_RCC_OscConfig+0x240>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f003 0302 	and.w	r3, r3, #2
 8006456:	2b00      	cmp	r3, #0
 8006458:	d1f0      	bne.n	800643c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f003 0308 	and.w	r3, r3, #8
 8006462:	2b00      	cmp	r3, #0
 8006464:	d036      	beq.n	80064d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	695b      	ldr	r3, [r3, #20]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d016      	beq.n	800649c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800646e:	4b15      	ldr	r3, [pc, #84]	; (80064c4 <HAL_RCC_OscConfig+0x248>)
 8006470:	2201      	movs	r2, #1
 8006472:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006474:	f7fc faea 	bl	8002a4c <HAL_GetTick>
 8006478:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800647a:	e008      	b.n	800648e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800647c:	f7fc fae6 	bl	8002a4c <HAL_GetTick>
 8006480:	4602      	mov	r2, r0
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	1ad3      	subs	r3, r2, r3
 8006486:	2b02      	cmp	r3, #2
 8006488:	d901      	bls.n	800648e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800648a:	2303      	movs	r3, #3
 800648c:	e167      	b.n	800675e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800648e:	4b0b      	ldr	r3, [pc, #44]	; (80064bc <HAL_RCC_OscConfig+0x240>)
 8006490:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006492:	f003 0302 	and.w	r3, r3, #2
 8006496:	2b00      	cmp	r3, #0
 8006498:	d0f0      	beq.n	800647c <HAL_RCC_OscConfig+0x200>
 800649a:	e01b      	b.n	80064d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800649c:	4b09      	ldr	r3, [pc, #36]	; (80064c4 <HAL_RCC_OscConfig+0x248>)
 800649e:	2200      	movs	r2, #0
 80064a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064a2:	f7fc fad3 	bl	8002a4c <HAL_GetTick>
 80064a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064a8:	e00e      	b.n	80064c8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80064aa:	f7fc facf 	bl	8002a4c <HAL_GetTick>
 80064ae:	4602      	mov	r2, r0
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	1ad3      	subs	r3, r2, r3
 80064b4:	2b02      	cmp	r3, #2
 80064b6:	d907      	bls.n	80064c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80064b8:	2303      	movs	r3, #3
 80064ba:	e150      	b.n	800675e <HAL_RCC_OscConfig+0x4e2>
 80064bc:	40023800 	.word	0x40023800
 80064c0:	42470000 	.word	0x42470000
 80064c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064c8:	4b88      	ldr	r3, [pc, #544]	; (80066ec <HAL_RCC_OscConfig+0x470>)
 80064ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064cc:	f003 0302 	and.w	r3, r3, #2
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d1ea      	bne.n	80064aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f003 0304 	and.w	r3, r3, #4
 80064dc:	2b00      	cmp	r3, #0
 80064de:	f000 8097 	beq.w	8006610 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80064e2:	2300      	movs	r3, #0
 80064e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80064e6:	4b81      	ldr	r3, [pc, #516]	; (80066ec <HAL_RCC_OscConfig+0x470>)
 80064e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d10f      	bne.n	8006512 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80064f2:	2300      	movs	r3, #0
 80064f4:	60bb      	str	r3, [r7, #8]
 80064f6:	4b7d      	ldr	r3, [pc, #500]	; (80066ec <HAL_RCC_OscConfig+0x470>)
 80064f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064fa:	4a7c      	ldr	r2, [pc, #496]	; (80066ec <HAL_RCC_OscConfig+0x470>)
 80064fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006500:	6413      	str	r3, [r2, #64]	; 0x40
 8006502:	4b7a      	ldr	r3, [pc, #488]	; (80066ec <HAL_RCC_OscConfig+0x470>)
 8006504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800650a:	60bb      	str	r3, [r7, #8]
 800650c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800650e:	2301      	movs	r3, #1
 8006510:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006512:	4b77      	ldr	r3, [pc, #476]	; (80066f0 <HAL_RCC_OscConfig+0x474>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800651a:	2b00      	cmp	r3, #0
 800651c:	d118      	bne.n	8006550 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800651e:	4b74      	ldr	r3, [pc, #464]	; (80066f0 <HAL_RCC_OscConfig+0x474>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a73      	ldr	r2, [pc, #460]	; (80066f0 <HAL_RCC_OscConfig+0x474>)
 8006524:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006528:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800652a:	f7fc fa8f 	bl	8002a4c <HAL_GetTick>
 800652e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006530:	e008      	b.n	8006544 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006532:	f7fc fa8b 	bl	8002a4c <HAL_GetTick>
 8006536:	4602      	mov	r2, r0
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	1ad3      	subs	r3, r2, r3
 800653c:	2b02      	cmp	r3, #2
 800653e:	d901      	bls.n	8006544 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006540:	2303      	movs	r3, #3
 8006542:	e10c      	b.n	800675e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006544:	4b6a      	ldr	r3, [pc, #424]	; (80066f0 <HAL_RCC_OscConfig+0x474>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800654c:	2b00      	cmp	r3, #0
 800654e:	d0f0      	beq.n	8006532 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	2b01      	cmp	r3, #1
 8006556:	d106      	bne.n	8006566 <HAL_RCC_OscConfig+0x2ea>
 8006558:	4b64      	ldr	r3, [pc, #400]	; (80066ec <HAL_RCC_OscConfig+0x470>)
 800655a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800655c:	4a63      	ldr	r2, [pc, #396]	; (80066ec <HAL_RCC_OscConfig+0x470>)
 800655e:	f043 0301 	orr.w	r3, r3, #1
 8006562:	6713      	str	r3, [r2, #112]	; 0x70
 8006564:	e01c      	b.n	80065a0 <HAL_RCC_OscConfig+0x324>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	2b05      	cmp	r3, #5
 800656c:	d10c      	bne.n	8006588 <HAL_RCC_OscConfig+0x30c>
 800656e:	4b5f      	ldr	r3, [pc, #380]	; (80066ec <HAL_RCC_OscConfig+0x470>)
 8006570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006572:	4a5e      	ldr	r2, [pc, #376]	; (80066ec <HAL_RCC_OscConfig+0x470>)
 8006574:	f043 0304 	orr.w	r3, r3, #4
 8006578:	6713      	str	r3, [r2, #112]	; 0x70
 800657a:	4b5c      	ldr	r3, [pc, #368]	; (80066ec <HAL_RCC_OscConfig+0x470>)
 800657c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800657e:	4a5b      	ldr	r2, [pc, #364]	; (80066ec <HAL_RCC_OscConfig+0x470>)
 8006580:	f043 0301 	orr.w	r3, r3, #1
 8006584:	6713      	str	r3, [r2, #112]	; 0x70
 8006586:	e00b      	b.n	80065a0 <HAL_RCC_OscConfig+0x324>
 8006588:	4b58      	ldr	r3, [pc, #352]	; (80066ec <HAL_RCC_OscConfig+0x470>)
 800658a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800658c:	4a57      	ldr	r2, [pc, #348]	; (80066ec <HAL_RCC_OscConfig+0x470>)
 800658e:	f023 0301 	bic.w	r3, r3, #1
 8006592:	6713      	str	r3, [r2, #112]	; 0x70
 8006594:	4b55      	ldr	r3, [pc, #340]	; (80066ec <HAL_RCC_OscConfig+0x470>)
 8006596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006598:	4a54      	ldr	r2, [pc, #336]	; (80066ec <HAL_RCC_OscConfig+0x470>)
 800659a:	f023 0304 	bic.w	r3, r3, #4
 800659e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d015      	beq.n	80065d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065a8:	f7fc fa50 	bl	8002a4c <HAL_GetTick>
 80065ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065ae:	e00a      	b.n	80065c6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80065b0:	f7fc fa4c 	bl	8002a4c <HAL_GetTick>
 80065b4:	4602      	mov	r2, r0
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	1ad3      	subs	r3, r2, r3
 80065ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80065be:	4293      	cmp	r3, r2
 80065c0:	d901      	bls.n	80065c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80065c2:	2303      	movs	r3, #3
 80065c4:	e0cb      	b.n	800675e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065c6:	4b49      	ldr	r3, [pc, #292]	; (80066ec <HAL_RCC_OscConfig+0x470>)
 80065c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065ca:	f003 0302 	and.w	r3, r3, #2
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d0ee      	beq.n	80065b0 <HAL_RCC_OscConfig+0x334>
 80065d2:	e014      	b.n	80065fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065d4:	f7fc fa3a 	bl	8002a4c <HAL_GetTick>
 80065d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80065da:	e00a      	b.n	80065f2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80065dc:	f7fc fa36 	bl	8002a4c <HAL_GetTick>
 80065e0:	4602      	mov	r2, r0
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	1ad3      	subs	r3, r2, r3
 80065e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d901      	bls.n	80065f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80065ee:	2303      	movs	r3, #3
 80065f0:	e0b5      	b.n	800675e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80065f2:	4b3e      	ldr	r3, [pc, #248]	; (80066ec <HAL_RCC_OscConfig+0x470>)
 80065f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065f6:	f003 0302 	and.w	r3, r3, #2
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d1ee      	bne.n	80065dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80065fe:	7dfb      	ldrb	r3, [r7, #23]
 8006600:	2b01      	cmp	r3, #1
 8006602:	d105      	bne.n	8006610 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006604:	4b39      	ldr	r3, [pc, #228]	; (80066ec <HAL_RCC_OscConfig+0x470>)
 8006606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006608:	4a38      	ldr	r2, [pc, #224]	; (80066ec <HAL_RCC_OscConfig+0x470>)
 800660a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800660e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	699b      	ldr	r3, [r3, #24]
 8006614:	2b00      	cmp	r3, #0
 8006616:	f000 80a1 	beq.w	800675c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800661a:	4b34      	ldr	r3, [pc, #208]	; (80066ec <HAL_RCC_OscConfig+0x470>)
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	f003 030c 	and.w	r3, r3, #12
 8006622:	2b08      	cmp	r3, #8
 8006624:	d05c      	beq.n	80066e0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	699b      	ldr	r3, [r3, #24]
 800662a:	2b02      	cmp	r3, #2
 800662c:	d141      	bne.n	80066b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800662e:	4b31      	ldr	r3, [pc, #196]	; (80066f4 <HAL_RCC_OscConfig+0x478>)
 8006630:	2200      	movs	r2, #0
 8006632:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006634:	f7fc fa0a 	bl	8002a4c <HAL_GetTick>
 8006638:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800663a:	e008      	b.n	800664e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800663c:	f7fc fa06 	bl	8002a4c <HAL_GetTick>
 8006640:	4602      	mov	r2, r0
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	1ad3      	subs	r3, r2, r3
 8006646:	2b02      	cmp	r3, #2
 8006648:	d901      	bls.n	800664e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800664a:	2303      	movs	r3, #3
 800664c:	e087      	b.n	800675e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800664e:	4b27      	ldr	r3, [pc, #156]	; (80066ec <HAL_RCC_OscConfig+0x470>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006656:	2b00      	cmp	r3, #0
 8006658:	d1f0      	bne.n	800663c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	69da      	ldr	r2, [r3, #28]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6a1b      	ldr	r3, [r3, #32]
 8006662:	431a      	orrs	r2, r3
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006668:	019b      	lsls	r3, r3, #6
 800666a:	431a      	orrs	r2, r3
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006670:	085b      	lsrs	r3, r3, #1
 8006672:	3b01      	subs	r3, #1
 8006674:	041b      	lsls	r3, r3, #16
 8006676:	431a      	orrs	r2, r3
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800667c:	061b      	lsls	r3, r3, #24
 800667e:	491b      	ldr	r1, [pc, #108]	; (80066ec <HAL_RCC_OscConfig+0x470>)
 8006680:	4313      	orrs	r3, r2
 8006682:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006684:	4b1b      	ldr	r3, [pc, #108]	; (80066f4 <HAL_RCC_OscConfig+0x478>)
 8006686:	2201      	movs	r2, #1
 8006688:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800668a:	f7fc f9df 	bl	8002a4c <HAL_GetTick>
 800668e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006690:	e008      	b.n	80066a4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006692:	f7fc f9db 	bl	8002a4c <HAL_GetTick>
 8006696:	4602      	mov	r2, r0
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	1ad3      	subs	r3, r2, r3
 800669c:	2b02      	cmp	r3, #2
 800669e:	d901      	bls.n	80066a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80066a0:	2303      	movs	r3, #3
 80066a2:	e05c      	b.n	800675e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066a4:	4b11      	ldr	r3, [pc, #68]	; (80066ec <HAL_RCC_OscConfig+0x470>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d0f0      	beq.n	8006692 <HAL_RCC_OscConfig+0x416>
 80066b0:	e054      	b.n	800675c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066b2:	4b10      	ldr	r3, [pc, #64]	; (80066f4 <HAL_RCC_OscConfig+0x478>)
 80066b4:	2200      	movs	r2, #0
 80066b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066b8:	f7fc f9c8 	bl	8002a4c <HAL_GetTick>
 80066bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066be:	e008      	b.n	80066d2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066c0:	f7fc f9c4 	bl	8002a4c <HAL_GetTick>
 80066c4:	4602      	mov	r2, r0
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	1ad3      	subs	r3, r2, r3
 80066ca:	2b02      	cmp	r3, #2
 80066cc:	d901      	bls.n	80066d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80066ce:	2303      	movs	r3, #3
 80066d0:	e045      	b.n	800675e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066d2:	4b06      	ldr	r3, [pc, #24]	; (80066ec <HAL_RCC_OscConfig+0x470>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d1f0      	bne.n	80066c0 <HAL_RCC_OscConfig+0x444>
 80066de:	e03d      	b.n	800675c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	699b      	ldr	r3, [r3, #24]
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d107      	bne.n	80066f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80066e8:	2301      	movs	r3, #1
 80066ea:	e038      	b.n	800675e <HAL_RCC_OscConfig+0x4e2>
 80066ec:	40023800 	.word	0x40023800
 80066f0:	40007000 	.word	0x40007000
 80066f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80066f8:	4b1b      	ldr	r3, [pc, #108]	; (8006768 <HAL_RCC_OscConfig+0x4ec>)
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	699b      	ldr	r3, [r3, #24]
 8006702:	2b01      	cmp	r3, #1
 8006704:	d028      	beq.n	8006758 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006710:	429a      	cmp	r2, r3
 8006712:	d121      	bne.n	8006758 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800671e:	429a      	cmp	r2, r3
 8006720:	d11a      	bne.n	8006758 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006722:	68fa      	ldr	r2, [r7, #12]
 8006724:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006728:	4013      	ands	r3, r2
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800672e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006730:	4293      	cmp	r3, r2
 8006732:	d111      	bne.n	8006758 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800673e:	085b      	lsrs	r3, r3, #1
 8006740:	3b01      	subs	r3, #1
 8006742:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006744:	429a      	cmp	r2, r3
 8006746:	d107      	bne.n	8006758 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006752:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006754:	429a      	cmp	r2, r3
 8006756:	d001      	beq.n	800675c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006758:	2301      	movs	r3, #1
 800675a:	e000      	b.n	800675e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800675c:	2300      	movs	r3, #0
}
 800675e:	4618      	mov	r0, r3
 8006760:	3718      	adds	r7, #24
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}
 8006766:	bf00      	nop
 8006768:	40023800 	.word	0x40023800

0800676c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b084      	sub	sp, #16
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d101      	bne.n	8006780 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	e0cc      	b.n	800691a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006780:	4b68      	ldr	r3, [pc, #416]	; (8006924 <HAL_RCC_ClockConfig+0x1b8>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f003 030f 	and.w	r3, r3, #15
 8006788:	683a      	ldr	r2, [r7, #0]
 800678a:	429a      	cmp	r2, r3
 800678c:	d90c      	bls.n	80067a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800678e:	4b65      	ldr	r3, [pc, #404]	; (8006924 <HAL_RCC_ClockConfig+0x1b8>)
 8006790:	683a      	ldr	r2, [r7, #0]
 8006792:	b2d2      	uxtb	r2, r2
 8006794:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006796:	4b63      	ldr	r3, [pc, #396]	; (8006924 <HAL_RCC_ClockConfig+0x1b8>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f003 030f 	and.w	r3, r3, #15
 800679e:	683a      	ldr	r2, [r7, #0]
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d001      	beq.n	80067a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80067a4:	2301      	movs	r3, #1
 80067a6:	e0b8      	b.n	800691a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f003 0302 	and.w	r3, r3, #2
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d020      	beq.n	80067f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f003 0304 	and.w	r3, r3, #4
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d005      	beq.n	80067cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80067c0:	4b59      	ldr	r3, [pc, #356]	; (8006928 <HAL_RCC_ClockConfig+0x1bc>)
 80067c2:	689b      	ldr	r3, [r3, #8]
 80067c4:	4a58      	ldr	r2, [pc, #352]	; (8006928 <HAL_RCC_ClockConfig+0x1bc>)
 80067c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80067ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f003 0308 	and.w	r3, r3, #8
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d005      	beq.n	80067e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80067d8:	4b53      	ldr	r3, [pc, #332]	; (8006928 <HAL_RCC_ClockConfig+0x1bc>)
 80067da:	689b      	ldr	r3, [r3, #8]
 80067dc:	4a52      	ldr	r2, [pc, #328]	; (8006928 <HAL_RCC_ClockConfig+0x1bc>)
 80067de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80067e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067e4:	4b50      	ldr	r3, [pc, #320]	; (8006928 <HAL_RCC_ClockConfig+0x1bc>)
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	494d      	ldr	r1, [pc, #308]	; (8006928 <HAL_RCC_ClockConfig+0x1bc>)
 80067f2:	4313      	orrs	r3, r2
 80067f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f003 0301 	and.w	r3, r3, #1
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d044      	beq.n	800688c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	2b01      	cmp	r3, #1
 8006808:	d107      	bne.n	800681a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800680a:	4b47      	ldr	r3, [pc, #284]	; (8006928 <HAL_RCC_ClockConfig+0x1bc>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006812:	2b00      	cmp	r3, #0
 8006814:	d119      	bne.n	800684a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006816:	2301      	movs	r3, #1
 8006818:	e07f      	b.n	800691a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	2b02      	cmp	r3, #2
 8006820:	d003      	beq.n	800682a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006826:	2b03      	cmp	r3, #3
 8006828:	d107      	bne.n	800683a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800682a:	4b3f      	ldr	r3, [pc, #252]	; (8006928 <HAL_RCC_ClockConfig+0x1bc>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006832:	2b00      	cmp	r3, #0
 8006834:	d109      	bne.n	800684a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006836:	2301      	movs	r3, #1
 8006838:	e06f      	b.n	800691a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800683a:	4b3b      	ldr	r3, [pc, #236]	; (8006928 <HAL_RCC_ClockConfig+0x1bc>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f003 0302 	and.w	r3, r3, #2
 8006842:	2b00      	cmp	r3, #0
 8006844:	d101      	bne.n	800684a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	e067      	b.n	800691a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800684a:	4b37      	ldr	r3, [pc, #220]	; (8006928 <HAL_RCC_ClockConfig+0x1bc>)
 800684c:	689b      	ldr	r3, [r3, #8]
 800684e:	f023 0203 	bic.w	r2, r3, #3
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	4934      	ldr	r1, [pc, #208]	; (8006928 <HAL_RCC_ClockConfig+0x1bc>)
 8006858:	4313      	orrs	r3, r2
 800685a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800685c:	f7fc f8f6 	bl	8002a4c <HAL_GetTick>
 8006860:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006862:	e00a      	b.n	800687a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006864:	f7fc f8f2 	bl	8002a4c <HAL_GetTick>
 8006868:	4602      	mov	r2, r0
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	1ad3      	subs	r3, r2, r3
 800686e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006872:	4293      	cmp	r3, r2
 8006874:	d901      	bls.n	800687a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006876:	2303      	movs	r3, #3
 8006878:	e04f      	b.n	800691a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800687a:	4b2b      	ldr	r3, [pc, #172]	; (8006928 <HAL_RCC_ClockConfig+0x1bc>)
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	f003 020c 	and.w	r2, r3, #12
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	009b      	lsls	r3, r3, #2
 8006888:	429a      	cmp	r2, r3
 800688a:	d1eb      	bne.n	8006864 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800688c:	4b25      	ldr	r3, [pc, #148]	; (8006924 <HAL_RCC_ClockConfig+0x1b8>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f003 030f 	and.w	r3, r3, #15
 8006894:	683a      	ldr	r2, [r7, #0]
 8006896:	429a      	cmp	r2, r3
 8006898:	d20c      	bcs.n	80068b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800689a:	4b22      	ldr	r3, [pc, #136]	; (8006924 <HAL_RCC_ClockConfig+0x1b8>)
 800689c:	683a      	ldr	r2, [r7, #0]
 800689e:	b2d2      	uxtb	r2, r2
 80068a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80068a2:	4b20      	ldr	r3, [pc, #128]	; (8006924 <HAL_RCC_ClockConfig+0x1b8>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f003 030f 	and.w	r3, r3, #15
 80068aa:	683a      	ldr	r2, [r7, #0]
 80068ac:	429a      	cmp	r2, r3
 80068ae:	d001      	beq.n	80068b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80068b0:	2301      	movs	r3, #1
 80068b2:	e032      	b.n	800691a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f003 0304 	and.w	r3, r3, #4
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d008      	beq.n	80068d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80068c0:	4b19      	ldr	r3, [pc, #100]	; (8006928 <HAL_RCC_ClockConfig+0x1bc>)
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	68db      	ldr	r3, [r3, #12]
 80068cc:	4916      	ldr	r1, [pc, #88]	; (8006928 <HAL_RCC_ClockConfig+0x1bc>)
 80068ce:	4313      	orrs	r3, r2
 80068d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f003 0308 	and.w	r3, r3, #8
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d009      	beq.n	80068f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80068de:	4b12      	ldr	r3, [pc, #72]	; (8006928 <HAL_RCC_ClockConfig+0x1bc>)
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	691b      	ldr	r3, [r3, #16]
 80068ea:	00db      	lsls	r3, r3, #3
 80068ec:	490e      	ldr	r1, [pc, #56]	; (8006928 <HAL_RCC_ClockConfig+0x1bc>)
 80068ee:	4313      	orrs	r3, r2
 80068f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80068f2:	f000 f821 	bl	8006938 <HAL_RCC_GetSysClockFreq>
 80068f6:	4602      	mov	r2, r0
 80068f8:	4b0b      	ldr	r3, [pc, #44]	; (8006928 <HAL_RCC_ClockConfig+0x1bc>)
 80068fa:	689b      	ldr	r3, [r3, #8]
 80068fc:	091b      	lsrs	r3, r3, #4
 80068fe:	f003 030f 	and.w	r3, r3, #15
 8006902:	490a      	ldr	r1, [pc, #40]	; (800692c <HAL_RCC_ClockConfig+0x1c0>)
 8006904:	5ccb      	ldrb	r3, [r1, r3]
 8006906:	fa22 f303 	lsr.w	r3, r2, r3
 800690a:	4a09      	ldr	r2, [pc, #36]	; (8006930 <HAL_RCC_ClockConfig+0x1c4>)
 800690c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800690e:	4b09      	ldr	r3, [pc, #36]	; (8006934 <HAL_RCC_ClockConfig+0x1c8>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4618      	mov	r0, r3
 8006914:	f7fc f856 	bl	80029c4 <HAL_InitTick>

  return HAL_OK;
 8006918:	2300      	movs	r3, #0
}
 800691a:	4618      	mov	r0, r3
 800691c:	3710      	adds	r7, #16
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
 8006922:	bf00      	nop
 8006924:	40023c00 	.word	0x40023c00
 8006928:	40023800 	.word	0x40023800
 800692c:	0800f498 	.word	0x0800f498
 8006930:	200000c8 	.word	0x200000c8
 8006934:	200000cc 	.word	0x200000cc

08006938 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006938:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800693c:	b094      	sub	sp, #80	; 0x50
 800693e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006940:	2300      	movs	r3, #0
 8006942:	647b      	str	r3, [r7, #68]	; 0x44
 8006944:	2300      	movs	r3, #0
 8006946:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006948:	2300      	movs	r3, #0
 800694a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800694c:	2300      	movs	r3, #0
 800694e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006950:	4b79      	ldr	r3, [pc, #484]	; (8006b38 <HAL_RCC_GetSysClockFreq+0x200>)
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	f003 030c 	and.w	r3, r3, #12
 8006958:	2b08      	cmp	r3, #8
 800695a:	d00d      	beq.n	8006978 <HAL_RCC_GetSysClockFreq+0x40>
 800695c:	2b08      	cmp	r3, #8
 800695e:	f200 80e1 	bhi.w	8006b24 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006962:	2b00      	cmp	r3, #0
 8006964:	d002      	beq.n	800696c <HAL_RCC_GetSysClockFreq+0x34>
 8006966:	2b04      	cmp	r3, #4
 8006968:	d003      	beq.n	8006972 <HAL_RCC_GetSysClockFreq+0x3a>
 800696a:	e0db      	b.n	8006b24 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800696c:	4b73      	ldr	r3, [pc, #460]	; (8006b3c <HAL_RCC_GetSysClockFreq+0x204>)
 800696e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006970:	e0db      	b.n	8006b2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006972:	4b73      	ldr	r3, [pc, #460]	; (8006b40 <HAL_RCC_GetSysClockFreq+0x208>)
 8006974:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006976:	e0d8      	b.n	8006b2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006978:	4b6f      	ldr	r3, [pc, #444]	; (8006b38 <HAL_RCC_GetSysClockFreq+0x200>)
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006980:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006982:	4b6d      	ldr	r3, [pc, #436]	; (8006b38 <HAL_RCC_GetSysClockFreq+0x200>)
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800698a:	2b00      	cmp	r3, #0
 800698c:	d063      	beq.n	8006a56 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800698e:	4b6a      	ldr	r3, [pc, #424]	; (8006b38 <HAL_RCC_GetSysClockFreq+0x200>)
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	099b      	lsrs	r3, r3, #6
 8006994:	2200      	movs	r2, #0
 8006996:	63bb      	str	r3, [r7, #56]	; 0x38
 8006998:	63fa      	str	r2, [r7, #60]	; 0x3c
 800699a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800699c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069a0:	633b      	str	r3, [r7, #48]	; 0x30
 80069a2:	2300      	movs	r3, #0
 80069a4:	637b      	str	r3, [r7, #52]	; 0x34
 80069a6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80069aa:	4622      	mov	r2, r4
 80069ac:	462b      	mov	r3, r5
 80069ae:	f04f 0000 	mov.w	r0, #0
 80069b2:	f04f 0100 	mov.w	r1, #0
 80069b6:	0159      	lsls	r1, r3, #5
 80069b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80069bc:	0150      	lsls	r0, r2, #5
 80069be:	4602      	mov	r2, r0
 80069c0:	460b      	mov	r3, r1
 80069c2:	4621      	mov	r1, r4
 80069c4:	1a51      	subs	r1, r2, r1
 80069c6:	6139      	str	r1, [r7, #16]
 80069c8:	4629      	mov	r1, r5
 80069ca:	eb63 0301 	sbc.w	r3, r3, r1
 80069ce:	617b      	str	r3, [r7, #20]
 80069d0:	f04f 0200 	mov.w	r2, #0
 80069d4:	f04f 0300 	mov.w	r3, #0
 80069d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80069dc:	4659      	mov	r1, fp
 80069de:	018b      	lsls	r3, r1, #6
 80069e0:	4651      	mov	r1, sl
 80069e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80069e6:	4651      	mov	r1, sl
 80069e8:	018a      	lsls	r2, r1, #6
 80069ea:	4651      	mov	r1, sl
 80069ec:	ebb2 0801 	subs.w	r8, r2, r1
 80069f0:	4659      	mov	r1, fp
 80069f2:	eb63 0901 	sbc.w	r9, r3, r1
 80069f6:	f04f 0200 	mov.w	r2, #0
 80069fa:	f04f 0300 	mov.w	r3, #0
 80069fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006a02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006a06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006a0a:	4690      	mov	r8, r2
 8006a0c:	4699      	mov	r9, r3
 8006a0e:	4623      	mov	r3, r4
 8006a10:	eb18 0303 	adds.w	r3, r8, r3
 8006a14:	60bb      	str	r3, [r7, #8]
 8006a16:	462b      	mov	r3, r5
 8006a18:	eb49 0303 	adc.w	r3, r9, r3
 8006a1c:	60fb      	str	r3, [r7, #12]
 8006a1e:	f04f 0200 	mov.w	r2, #0
 8006a22:	f04f 0300 	mov.w	r3, #0
 8006a26:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006a2a:	4629      	mov	r1, r5
 8006a2c:	024b      	lsls	r3, r1, #9
 8006a2e:	4621      	mov	r1, r4
 8006a30:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006a34:	4621      	mov	r1, r4
 8006a36:	024a      	lsls	r2, r1, #9
 8006a38:	4610      	mov	r0, r2
 8006a3a:	4619      	mov	r1, r3
 8006a3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a3e:	2200      	movs	r2, #0
 8006a40:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a42:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a44:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006a48:	f7f9 fc22 	bl	8000290 <__aeabi_uldivmod>
 8006a4c:	4602      	mov	r2, r0
 8006a4e:	460b      	mov	r3, r1
 8006a50:	4613      	mov	r3, r2
 8006a52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a54:	e058      	b.n	8006b08 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a56:	4b38      	ldr	r3, [pc, #224]	; (8006b38 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	099b      	lsrs	r3, r3, #6
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	4618      	mov	r0, r3
 8006a60:	4611      	mov	r1, r2
 8006a62:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006a66:	623b      	str	r3, [r7, #32]
 8006a68:	2300      	movs	r3, #0
 8006a6a:	627b      	str	r3, [r7, #36]	; 0x24
 8006a6c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006a70:	4642      	mov	r2, r8
 8006a72:	464b      	mov	r3, r9
 8006a74:	f04f 0000 	mov.w	r0, #0
 8006a78:	f04f 0100 	mov.w	r1, #0
 8006a7c:	0159      	lsls	r1, r3, #5
 8006a7e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006a82:	0150      	lsls	r0, r2, #5
 8006a84:	4602      	mov	r2, r0
 8006a86:	460b      	mov	r3, r1
 8006a88:	4641      	mov	r1, r8
 8006a8a:	ebb2 0a01 	subs.w	sl, r2, r1
 8006a8e:	4649      	mov	r1, r9
 8006a90:	eb63 0b01 	sbc.w	fp, r3, r1
 8006a94:	f04f 0200 	mov.w	r2, #0
 8006a98:	f04f 0300 	mov.w	r3, #0
 8006a9c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006aa0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006aa4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006aa8:	ebb2 040a 	subs.w	r4, r2, sl
 8006aac:	eb63 050b 	sbc.w	r5, r3, fp
 8006ab0:	f04f 0200 	mov.w	r2, #0
 8006ab4:	f04f 0300 	mov.w	r3, #0
 8006ab8:	00eb      	lsls	r3, r5, #3
 8006aba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006abe:	00e2      	lsls	r2, r4, #3
 8006ac0:	4614      	mov	r4, r2
 8006ac2:	461d      	mov	r5, r3
 8006ac4:	4643      	mov	r3, r8
 8006ac6:	18e3      	adds	r3, r4, r3
 8006ac8:	603b      	str	r3, [r7, #0]
 8006aca:	464b      	mov	r3, r9
 8006acc:	eb45 0303 	adc.w	r3, r5, r3
 8006ad0:	607b      	str	r3, [r7, #4]
 8006ad2:	f04f 0200 	mov.w	r2, #0
 8006ad6:	f04f 0300 	mov.w	r3, #0
 8006ada:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006ade:	4629      	mov	r1, r5
 8006ae0:	028b      	lsls	r3, r1, #10
 8006ae2:	4621      	mov	r1, r4
 8006ae4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006ae8:	4621      	mov	r1, r4
 8006aea:	028a      	lsls	r2, r1, #10
 8006aec:	4610      	mov	r0, r2
 8006aee:	4619      	mov	r1, r3
 8006af0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006af2:	2200      	movs	r2, #0
 8006af4:	61bb      	str	r3, [r7, #24]
 8006af6:	61fa      	str	r2, [r7, #28]
 8006af8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006afc:	f7f9 fbc8 	bl	8000290 <__aeabi_uldivmod>
 8006b00:	4602      	mov	r2, r0
 8006b02:	460b      	mov	r3, r1
 8006b04:	4613      	mov	r3, r2
 8006b06:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006b08:	4b0b      	ldr	r3, [pc, #44]	; (8006b38 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	0c1b      	lsrs	r3, r3, #16
 8006b0e:	f003 0303 	and.w	r3, r3, #3
 8006b12:	3301      	adds	r3, #1
 8006b14:	005b      	lsls	r3, r3, #1
 8006b16:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006b18:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006b1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b20:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006b22:	e002      	b.n	8006b2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006b24:	4b05      	ldr	r3, [pc, #20]	; (8006b3c <HAL_RCC_GetSysClockFreq+0x204>)
 8006b26:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006b28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006b2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3750      	adds	r7, #80	; 0x50
 8006b30:	46bd      	mov	sp, r7
 8006b32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b36:	bf00      	nop
 8006b38:	40023800 	.word	0x40023800
 8006b3c:	00f42400 	.word	0x00f42400
 8006b40:	007a1200 	.word	0x007a1200

08006b44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b44:	b480      	push	{r7}
 8006b46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b48:	4b03      	ldr	r3, [pc, #12]	; (8006b58 <HAL_RCC_GetHCLKFreq+0x14>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b54:	4770      	bx	lr
 8006b56:	bf00      	nop
 8006b58:	200000c8 	.word	0x200000c8

08006b5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006b60:	f7ff fff0 	bl	8006b44 <HAL_RCC_GetHCLKFreq>
 8006b64:	4602      	mov	r2, r0
 8006b66:	4b05      	ldr	r3, [pc, #20]	; (8006b7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	0a9b      	lsrs	r3, r3, #10
 8006b6c:	f003 0307 	and.w	r3, r3, #7
 8006b70:	4903      	ldr	r1, [pc, #12]	; (8006b80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b72:	5ccb      	ldrb	r3, [r1, r3]
 8006b74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	bd80      	pop	{r7, pc}
 8006b7c:	40023800 	.word	0x40023800
 8006b80:	0800f4a8 	.word	0x0800f4a8

08006b84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006b88:	f7ff ffdc 	bl	8006b44 <HAL_RCC_GetHCLKFreq>
 8006b8c:	4602      	mov	r2, r0
 8006b8e:	4b05      	ldr	r3, [pc, #20]	; (8006ba4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006b90:	689b      	ldr	r3, [r3, #8]
 8006b92:	0b5b      	lsrs	r3, r3, #13
 8006b94:	f003 0307 	and.w	r3, r3, #7
 8006b98:	4903      	ldr	r1, [pc, #12]	; (8006ba8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b9a:	5ccb      	ldrb	r3, [r1, r3]
 8006b9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	bd80      	pop	{r7, pc}
 8006ba4:	40023800 	.word	0x40023800
 8006ba8:	0800f4a8 	.word	0x0800f4a8

08006bac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b082      	sub	sp, #8
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d101      	bne.n	8006bbe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	e07b      	b.n	8006cb6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d108      	bne.n	8006bd8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006bce:	d009      	beq.n	8006be4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	61da      	str	r2, [r3, #28]
 8006bd6:	e005      	b.n	8006be4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2200      	movs	r2, #0
 8006be2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2200      	movs	r2, #0
 8006be8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006bf0:	b2db      	uxtb	r3, r3
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d106      	bne.n	8006c04 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f7fb fc20 	bl	8002444 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2202      	movs	r2, #2
 8006c08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	681a      	ldr	r2, [r3, #0]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c1a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	689b      	ldr	r3, [r3, #8]
 8006c28:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006c2c:	431a      	orrs	r2, r3
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	68db      	ldr	r3, [r3, #12]
 8006c32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c36:	431a      	orrs	r2, r3
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	691b      	ldr	r3, [r3, #16]
 8006c3c:	f003 0302 	and.w	r3, r3, #2
 8006c40:	431a      	orrs	r2, r3
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	695b      	ldr	r3, [r3, #20]
 8006c46:	f003 0301 	and.w	r3, r3, #1
 8006c4a:	431a      	orrs	r2, r3
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	699b      	ldr	r3, [r3, #24]
 8006c50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c54:	431a      	orrs	r2, r3
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	69db      	ldr	r3, [r3, #28]
 8006c5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006c5e:	431a      	orrs	r2, r3
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6a1b      	ldr	r3, [r3, #32]
 8006c64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c68:	ea42 0103 	orr.w	r1, r2, r3
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c70:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	430a      	orrs	r2, r1
 8006c7a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	699b      	ldr	r3, [r3, #24]
 8006c80:	0c1b      	lsrs	r3, r3, #16
 8006c82:	f003 0104 	and.w	r1, r3, #4
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c8a:	f003 0210 	and.w	r2, r3, #16
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	430a      	orrs	r2, r1
 8006c94:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	69da      	ldr	r2, [r3, #28]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ca4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2201      	movs	r2, #1
 8006cb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006cb4:	2300      	movs	r3, #0
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3708      	adds	r7, #8
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}

08006cbe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006cbe:	b580      	push	{r7, lr}
 8006cc0:	b088      	sub	sp, #32
 8006cc2:	af00      	add	r7, sp, #0
 8006cc4:	60f8      	str	r0, [r7, #12]
 8006cc6:	60b9      	str	r1, [r7, #8]
 8006cc8:	603b      	str	r3, [r7, #0]
 8006cca:	4613      	mov	r3, r2
 8006ccc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d101      	bne.n	8006ce0 <HAL_SPI_Transmit+0x22>
 8006cdc:	2302      	movs	r3, #2
 8006cde:	e126      	b.n	8006f2e <HAL_SPI_Transmit+0x270>
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ce8:	f7fb feb0 	bl	8002a4c <HAL_GetTick>
 8006cec:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006cee:	88fb      	ldrh	r3, [r7, #6]
 8006cf0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006cf8:	b2db      	uxtb	r3, r3
 8006cfa:	2b01      	cmp	r3, #1
 8006cfc:	d002      	beq.n	8006d04 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006cfe:	2302      	movs	r3, #2
 8006d00:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006d02:	e10b      	b.n	8006f1c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d002      	beq.n	8006d10 <HAL_SPI_Transmit+0x52>
 8006d0a:	88fb      	ldrh	r3, [r7, #6]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d102      	bne.n	8006d16 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006d10:	2301      	movs	r3, #1
 8006d12:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006d14:	e102      	b.n	8006f1c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2203      	movs	r2, #3
 8006d1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2200      	movs	r2, #0
 8006d22:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	68ba      	ldr	r2, [r7, #8]
 8006d28:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	88fa      	ldrh	r2, [r7, #6]
 8006d2e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	88fa      	ldrh	r2, [r7, #6]
 8006d34:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2200      	movs	r2, #0
 8006d46:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2200      	movs	r2, #0
 8006d52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d5c:	d10f      	bne.n	8006d7e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	681a      	ldr	r2, [r3, #0]
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d6c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d7c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d88:	2b40      	cmp	r3, #64	; 0x40
 8006d8a:	d007      	beq.n	8006d9c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	681a      	ldr	r2, [r3, #0]
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d9a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	68db      	ldr	r3, [r3, #12]
 8006da0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006da4:	d14b      	bne.n	8006e3e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d002      	beq.n	8006db4 <HAL_SPI_Transmit+0xf6>
 8006dae:	8afb      	ldrh	r3, [r7, #22]
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d13e      	bne.n	8006e32 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006db8:	881a      	ldrh	r2, [r3, #0]
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dc4:	1c9a      	adds	r2, r3, #2
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	3b01      	subs	r3, #1
 8006dd2:	b29a      	uxth	r2, r3
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006dd8:	e02b      	b.n	8006e32 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	f003 0302 	and.w	r3, r3, #2
 8006de4:	2b02      	cmp	r3, #2
 8006de6:	d112      	bne.n	8006e0e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dec:	881a      	ldrh	r2, [r3, #0]
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006df8:	1c9a      	adds	r2, r3, #2
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e02:	b29b      	uxth	r3, r3
 8006e04:	3b01      	subs	r3, #1
 8006e06:	b29a      	uxth	r2, r3
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	86da      	strh	r2, [r3, #54]	; 0x36
 8006e0c:	e011      	b.n	8006e32 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e0e:	f7fb fe1d 	bl	8002a4c <HAL_GetTick>
 8006e12:	4602      	mov	r2, r0
 8006e14:	69bb      	ldr	r3, [r7, #24]
 8006e16:	1ad3      	subs	r3, r2, r3
 8006e18:	683a      	ldr	r2, [r7, #0]
 8006e1a:	429a      	cmp	r2, r3
 8006e1c:	d803      	bhi.n	8006e26 <HAL_SPI_Transmit+0x168>
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e24:	d102      	bne.n	8006e2c <HAL_SPI_Transmit+0x16e>
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d102      	bne.n	8006e32 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006e2c:	2303      	movs	r3, #3
 8006e2e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006e30:	e074      	b.n	8006f1c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e36:	b29b      	uxth	r3, r3
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d1ce      	bne.n	8006dda <HAL_SPI_Transmit+0x11c>
 8006e3c:	e04c      	b.n	8006ed8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d002      	beq.n	8006e4c <HAL_SPI_Transmit+0x18e>
 8006e46:	8afb      	ldrh	r3, [r7, #22]
 8006e48:	2b01      	cmp	r3, #1
 8006e4a:	d140      	bne.n	8006ece <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	330c      	adds	r3, #12
 8006e56:	7812      	ldrb	r2, [r2, #0]
 8006e58:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e5e:	1c5a      	adds	r2, r3, #1
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	3b01      	subs	r3, #1
 8006e6c:	b29a      	uxth	r2, r3
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006e72:	e02c      	b.n	8006ece <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	689b      	ldr	r3, [r3, #8]
 8006e7a:	f003 0302 	and.w	r3, r3, #2
 8006e7e:	2b02      	cmp	r3, #2
 8006e80:	d113      	bne.n	8006eaa <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	330c      	adds	r3, #12
 8006e8c:	7812      	ldrb	r2, [r2, #0]
 8006e8e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e94:	1c5a      	adds	r2, r3, #1
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	3b01      	subs	r3, #1
 8006ea2:	b29a      	uxth	r2, r3
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	86da      	strh	r2, [r3, #54]	; 0x36
 8006ea8:	e011      	b.n	8006ece <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006eaa:	f7fb fdcf 	bl	8002a4c <HAL_GetTick>
 8006eae:	4602      	mov	r2, r0
 8006eb0:	69bb      	ldr	r3, [r7, #24]
 8006eb2:	1ad3      	subs	r3, r2, r3
 8006eb4:	683a      	ldr	r2, [r7, #0]
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	d803      	bhi.n	8006ec2 <HAL_SPI_Transmit+0x204>
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ec0:	d102      	bne.n	8006ec8 <HAL_SPI_Transmit+0x20a>
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d102      	bne.n	8006ece <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006ec8:	2303      	movs	r3, #3
 8006eca:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006ecc:	e026      	b.n	8006f1c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d1cd      	bne.n	8006e74 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006ed8:	69ba      	ldr	r2, [r7, #24]
 8006eda:	6839      	ldr	r1, [r7, #0]
 8006edc:	68f8      	ldr	r0, [r7, #12]
 8006ede:	f000 fbcb 	bl	8007678 <SPI_EndRxTxTransaction>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d002      	beq.n	8006eee <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	2220      	movs	r2, #32
 8006eec:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	689b      	ldr	r3, [r3, #8]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d10a      	bne.n	8006f0c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	613b      	str	r3, [r7, #16]
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	68db      	ldr	r3, [r3, #12]
 8006f00:	613b      	str	r3, [r7, #16]
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	689b      	ldr	r3, [r3, #8]
 8006f08:	613b      	str	r3, [r7, #16]
 8006f0a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d002      	beq.n	8006f1a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006f14:	2301      	movs	r3, #1
 8006f16:	77fb      	strb	r3, [r7, #31]
 8006f18:	e000      	b.n	8006f1c <HAL_SPI_Transmit+0x25e>
  }

error:
 8006f1a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	2201      	movs	r2, #1
 8006f20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	2200      	movs	r2, #0
 8006f28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006f2c:	7ffb      	ldrb	r3, [r7, #31]
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	3720      	adds	r7, #32
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}

08006f36 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f36:	b580      	push	{r7, lr}
 8006f38:	b088      	sub	sp, #32
 8006f3a:	af02      	add	r7, sp, #8
 8006f3c:	60f8      	str	r0, [r7, #12]
 8006f3e:	60b9      	str	r1, [r7, #8]
 8006f40:	603b      	str	r3, [r7, #0]
 8006f42:	4613      	mov	r3, r2
 8006f44:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006f46:	2300      	movs	r3, #0
 8006f48:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f52:	d112      	bne.n	8006f7a <HAL_SPI_Receive+0x44>
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d10e      	bne.n	8006f7a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2204      	movs	r2, #4
 8006f60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006f64:	88fa      	ldrh	r2, [r7, #6]
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	9300      	str	r3, [sp, #0]
 8006f6a:	4613      	mov	r3, r2
 8006f6c:	68ba      	ldr	r2, [r7, #8]
 8006f6e:	68b9      	ldr	r1, [r7, #8]
 8006f70:	68f8      	ldr	r0, [r7, #12]
 8006f72:	f000 f8f1 	bl	8007158 <HAL_SPI_TransmitReceive>
 8006f76:	4603      	mov	r3, r0
 8006f78:	e0ea      	b.n	8007150 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d101      	bne.n	8006f88 <HAL_SPI_Receive+0x52>
 8006f84:	2302      	movs	r3, #2
 8006f86:	e0e3      	b.n	8007150 <HAL_SPI_Receive+0x21a>
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006f90:	f7fb fd5c 	bl	8002a4c <HAL_GetTick>
 8006f94:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f9c:	b2db      	uxtb	r3, r3
 8006f9e:	2b01      	cmp	r3, #1
 8006fa0:	d002      	beq.n	8006fa8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006fa2:	2302      	movs	r3, #2
 8006fa4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006fa6:	e0ca      	b.n	800713e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d002      	beq.n	8006fb4 <HAL_SPI_Receive+0x7e>
 8006fae:	88fb      	ldrh	r3, [r7, #6]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d102      	bne.n	8006fba <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006fb8:	e0c1      	b.n	800713e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2204      	movs	r2, #4
 8006fbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	68ba      	ldr	r2, [r7, #8]
 8006fcc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	88fa      	ldrh	r2, [r7, #6]
 8006fd2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	88fa      	ldrh	r2, [r7, #6]
 8006fd8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007000:	d10f      	bne.n	8007022 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	681a      	ldr	r2, [r3, #0]
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007010:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	681a      	ldr	r2, [r3, #0]
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007020:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800702c:	2b40      	cmp	r3, #64	; 0x40
 800702e:	d007      	beq.n	8007040 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	681a      	ldr	r2, [r3, #0]
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800703e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	68db      	ldr	r3, [r3, #12]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d162      	bne.n	800710e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007048:	e02e      	b.n	80070a8 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	f003 0301 	and.w	r3, r3, #1
 8007054:	2b01      	cmp	r3, #1
 8007056:	d115      	bne.n	8007084 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f103 020c 	add.w	r2, r3, #12
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007064:	7812      	ldrb	r2, [r2, #0]
 8007066:	b2d2      	uxtb	r2, r2
 8007068:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800706e:	1c5a      	adds	r2, r3, #1
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007078:	b29b      	uxth	r3, r3
 800707a:	3b01      	subs	r3, #1
 800707c:	b29a      	uxth	r2, r3
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007082:	e011      	b.n	80070a8 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007084:	f7fb fce2 	bl	8002a4c <HAL_GetTick>
 8007088:	4602      	mov	r2, r0
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	1ad3      	subs	r3, r2, r3
 800708e:	683a      	ldr	r2, [r7, #0]
 8007090:	429a      	cmp	r2, r3
 8007092:	d803      	bhi.n	800709c <HAL_SPI_Receive+0x166>
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800709a:	d102      	bne.n	80070a2 <HAL_SPI_Receive+0x16c>
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d102      	bne.n	80070a8 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80070a2:	2303      	movs	r3, #3
 80070a4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80070a6:	e04a      	b.n	800713e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070ac:	b29b      	uxth	r3, r3
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d1cb      	bne.n	800704a <HAL_SPI_Receive+0x114>
 80070b2:	e031      	b.n	8007118 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	689b      	ldr	r3, [r3, #8]
 80070ba:	f003 0301 	and.w	r3, r3, #1
 80070be:	2b01      	cmp	r3, #1
 80070c0:	d113      	bne.n	80070ea <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	68da      	ldr	r2, [r3, #12]
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070cc:	b292      	uxth	r2, r2
 80070ce:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070d4:	1c9a      	adds	r2, r3, #2
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070de:	b29b      	uxth	r3, r3
 80070e0:	3b01      	subs	r3, #1
 80070e2:	b29a      	uxth	r2, r3
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80070e8:	e011      	b.n	800710e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80070ea:	f7fb fcaf 	bl	8002a4c <HAL_GetTick>
 80070ee:	4602      	mov	r2, r0
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	1ad3      	subs	r3, r2, r3
 80070f4:	683a      	ldr	r2, [r7, #0]
 80070f6:	429a      	cmp	r2, r3
 80070f8:	d803      	bhi.n	8007102 <HAL_SPI_Receive+0x1cc>
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007100:	d102      	bne.n	8007108 <HAL_SPI_Receive+0x1d2>
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d102      	bne.n	800710e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8007108:	2303      	movs	r3, #3
 800710a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800710c:	e017      	b.n	800713e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007112:	b29b      	uxth	r3, r3
 8007114:	2b00      	cmp	r3, #0
 8007116:	d1cd      	bne.n	80070b4 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007118:	693a      	ldr	r2, [r7, #16]
 800711a:	6839      	ldr	r1, [r7, #0]
 800711c:	68f8      	ldr	r0, [r7, #12]
 800711e:	f000 fa45 	bl	80075ac <SPI_EndRxTransaction>
 8007122:	4603      	mov	r3, r0
 8007124:	2b00      	cmp	r3, #0
 8007126:	d002      	beq.n	800712e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2220      	movs	r2, #32
 800712c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007132:	2b00      	cmp	r3, #0
 8007134:	d002      	beq.n	800713c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8007136:	2301      	movs	r3, #1
 8007138:	75fb      	strb	r3, [r7, #23]
 800713a:	e000      	b.n	800713e <HAL_SPI_Receive+0x208>
  }

error :
 800713c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2201      	movs	r2, #1
 8007142:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2200      	movs	r2, #0
 800714a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800714e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007150:	4618      	mov	r0, r3
 8007152:	3718      	adds	r7, #24
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}

08007158 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b08c      	sub	sp, #48	; 0x30
 800715c:	af00      	add	r7, sp, #0
 800715e:	60f8      	str	r0, [r7, #12]
 8007160:	60b9      	str	r1, [r7, #8]
 8007162:	607a      	str	r2, [r7, #4]
 8007164:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007166:	2301      	movs	r3, #1
 8007168:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800716a:	2300      	movs	r3, #0
 800716c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007176:	2b01      	cmp	r3, #1
 8007178:	d101      	bne.n	800717e <HAL_SPI_TransmitReceive+0x26>
 800717a:	2302      	movs	r3, #2
 800717c:	e18a      	b.n	8007494 <HAL_SPI_TransmitReceive+0x33c>
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2201      	movs	r2, #1
 8007182:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007186:	f7fb fc61 	bl	8002a4c <HAL_GetTick>
 800718a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007192:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800719c:	887b      	ldrh	r3, [r7, #2]
 800719e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80071a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d00f      	beq.n	80071c8 <HAL_SPI_TransmitReceive+0x70>
 80071a8:	69fb      	ldr	r3, [r7, #28]
 80071aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80071ae:	d107      	bne.n	80071c0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	689b      	ldr	r3, [r3, #8]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d103      	bne.n	80071c0 <HAL_SPI_TransmitReceive+0x68>
 80071b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80071bc:	2b04      	cmp	r3, #4
 80071be:	d003      	beq.n	80071c8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80071c0:	2302      	movs	r3, #2
 80071c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80071c6:	e15b      	b.n	8007480 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d005      	beq.n	80071da <HAL_SPI_TransmitReceive+0x82>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d002      	beq.n	80071da <HAL_SPI_TransmitReceive+0x82>
 80071d4:	887b      	ldrh	r3, [r7, #2]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d103      	bne.n	80071e2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80071da:	2301      	movs	r3, #1
 80071dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80071e0:	e14e      	b.n	8007480 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80071e8:	b2db      	uxtb	r3, r3
 80071ea:	2b04      	cmp	r3, #4
 80071ec:	d003      	beq.n	80071f6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2205      	movs	r2, #5
 80071f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2200      	movs	r2, #0
 80071fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	687a      	ldr	r2, [r7, #4]
 8007200:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	887a      	ldrh	r2, [r7, #2]
 8007206:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	887a      	ldrh	r2, [r7, #2]
 800720c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	68ba      	ldr	r2, [r7, #8]
 8007212:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	887a      	ldrh	r2, [r7, #2]
 8007218:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	887a      	ldrh	r2, [r7, #2]
 800721e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2200      	movs	r2, #0
 8007224:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	2200      	movs	r2, #0
 800722a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007236:	2b40      	cmp	r3, #64	; 0x40
 8007238:	d007      	beq.n	800724a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	681a      	ldr	r2, [r3, #0]
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007248:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	68db      	ldr	r3, [r3, #12]
 800724e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007252:	d178      	bne.n	8007346 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d002      	beq.n	8007262 <HAL_SPI_TransmitReceive+0x10a>
 800725c:	8b7b      	ldrh	r3, [r7, #26]
 800725e:	2b01      	cmp	r3, #1
 8007260:	d166      	bne.n	8007330 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007266:	881a      	ldrh	r2, [r3, #0]
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007272:	1c9a      	adds	r2, r3, #2
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800727c:	b29b      	uxth	r3, r3
 800727e:	3b01      	subs	r3, #1
 8007280:	b29a      	uxth	r2, r3
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007286:	e053      	b.n	8007330 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	689b      	ldr	r3, [r3, #8]
 800728e:	f003 0302 	and.w	r3, r3, #2
 8007292:	2b02      	cmp	r3, #2
 8007294:	d11b      	bne.n	80072ce <HAL_SPI_TransmitReceive+0x176>
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800729a:	b29b      	uxth	r3, r3
 800729c:	2b00      	cmp	r3, #0
 800729e:	d016      	beq.n	80072ce <HAL_SPI_TransmitReceive+0x176>
 80072a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072a2:	2b01      	cmp	r3, #1
 80072a4:	d113      	bne.n	80072ce <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072aa:	881a      	ldrh	r2, [r3, #0]
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072b6:	1c9a      	adds	r2, r3, #2
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072c0:	b29b      	uxth	r3, r3
 80072c2:	3b01      	subs	r3, #1
 80072c4:	b29a      	uxth	r2, r3
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80072ca:	2300      	movs	r3, #0
 80072cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	689b      	ldr	r3, [r3, #8]
 80072d4:	f003 0301 	and.w	r3, r3, #1
 80072d8:	2b01      	cmp	r3, #1
 80072da:	d119      	bne.n	8007310 <HAL_SPI_TransmitReceive+0x1b8>
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072e0:	b29b      	uxth	r3, r3
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d014      	beq.n	8007310 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	68da      	ldr	r2, [r3, #12]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072f0:	b292      	uxth	r2, r2
 80072f2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072f8:	1c9a      	adds	r2, r3, #2
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007302:	b29b      	uxth	r3, r3
 8007304:	3b01      	subs	r3, #1
 8007306:	b29a      	uxth	r2, r3
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800730c:	2301      	movs	r3, #1
 800730e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007310:	f7fb fb9c 	bl	8002a4c <HAL_GetTick>
 8007314:	4602      	mov	r2, r0
 8007316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007318:	1ad3      	subs	r3, r2, r3
 800731a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800731c:	429a      	cmp	r2, r3
 800731e:	d807      	bhi.n	8007330 <HAL_SPI_TransmitReceive+0x1d8>
 8007320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007322:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007326:	d003      	beq.n	8007330 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007328:	2303      	movs	r3, #3
 800732a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800732e:	e0a7      	b.n	8007480 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007334:	b29b      	uxth	r3, r3
 8007336:	2b00      	cmp	r3, #0
 8007338:	d1a6      	bne.n	8007288 <HAL_SPI_TransmitReceive+0x130>
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800733e:	b29b      	uxth	r3, r3
 8007340:	2b00      	cmp	r3, #0
 8007342:	d1a1      	bne.n	8007288 <HAL_SPI_TransmitReceive+0x130>
 8007344:	e07c      	b.n	8007440 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d002      	beq.n	8007354 <HAL_SPI_TransmitReceive+0x1fc>
 800734e:	8b7b      	ldrh	r3, [r7, #26]
 8007350:	2b01      	cmp	r3, #1
 8007352:	d16b      	bne.n	800742c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	330c      	adds	r3, #12
 800735e:	7812      	ldrb	r2, [r2, #0]
 8007360:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007366:	1c5a      	adds	r2, r3, #1
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007370:	b29b      	uxth	r3, r3
 8007372:	3b01      	subs	r3, #1
 8007374:	b29a      	uxth	r2, r3
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800737a:	e057      	b.n	800742c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	689b      	ldr	r3, [r3, #8]
 8007382:	f003 0302 	and.w	r3, r3, #2
 8007386:	2b02      	cmp	r3, #2
 8007388:	d11c      	bne.n	80073c4 <HAL_SPI_TransmitReceive+0x26c>
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800738e:	b29b      	uxth	r3, r3
 8007390:	2b00      	cmp	r3, #0
 8007392:	d017      	beq.n	80073c4 <HAL_SPI_TransmitReceive+0x26c>
 8007394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007396:	2b01      	cmp	r3, #1
 8007398:	d114      	bne.n	80073c4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	330c      	adds	r3, #12
 80073a4:	7812      	ldrb	r2, [r2, #0]
 80073a6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ac:	1c5a      	adds	r2, r3, #1
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	3b01      	subs	r3, #1
 80073ba:	b29a      	uxth	r2, r3
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80073c0:	2300      	movs	r3, #0
 80073c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	689b      	ldr	r3, [r3, #8]
 80073ca:	f003 0301 	and.w	r3, r3, #1
 80073ce:	2b01      	cmp	r3, #1
 80073d0:	d119      	bne.n	8007406 <HAL_SPI_TransmitReceive+0x2ae>
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d014      	beq.n	8007406 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	68da      	ldr	r2, [r3, #12]
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073e6:	b2d2      	uxtb	r2, r2
 80073e8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ee:	1c5a      	adds	r2, r3, #1
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073f8:	b29b      	uxth	r3, r3
 80073fa:	3b01      	subs	r3, #1
 80073fc:	b29a      	uxth	r2, r3
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007402:	2301      	movs	r3, #1
 8007404:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007406:	f7fb fb21 	bl	8002a4c <HAL_GetTick>
 800740a:	4602      	mov	r2, r0
 800740c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800740e:	1ad3      	subs	r3, r2, r3
 8007410:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007412:	429a      	cmp	r2, r3
 8007414:	d803      	bhi.n	800741e <HAL_SPI_TransmitReceive+0x2c6>
 8007416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007418:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800741c:	d102      	bne.n	8007424 <HAL_SPI_TransmitReceive+0x2cc>
 800741e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007420:	2b00      	cmp	r3, #0
 8007422:	d103      	bne.n	800742c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007424:	2303      	movs	r3, #3
 8007426:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800742a:	e029      	b.n	8007480 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007430:	b29b      	uxth	r3, r3
 8007432:	2b00      	cmp	r3, #0
 8007434:	d1a2      	bne.n	800737c <HAL_SPI_TransmitReceive+0x224>
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800743a:	b29b      	uxth	r3, r3
 800743c:	2b00      	cmp	r3, #0
 800743e:	d19d      	bne.n	800737c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007440:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007442:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007444:	68f8      	ldr	r0, [r7, #12]
 8007446:	f000 f917 	bl	8007678 <SPI_EndRxTxTransaction>
 800744a:	4603      	mov	r3, r0
 800744c:	2b00      	cmp	r3, #0
 800744e:	d006      	beq.n	800745e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007450:	2301      	movs	r3, #1
 8007452:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2220      	movs	r2, #32
 800745a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800745c:	e010      	b.n	8007480 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	689b      	ldr	r3, [r3, #8]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d10b      	bne.n	800747e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007466:	2300      	movs	r3, #0
 8007468:	617b      	str	r3, [r7, #20]
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	68db      	ldr	r3, [r3, #12]
 8007470:	617b      	str	r3, [r7, #20]
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	617b      	str	r3, [r7, #20]
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	e000      	b.n	8007480 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800747e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2201      	movs	r2, #1
 8007484:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	2200      	movs	r2, #0
 800748c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007490:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007494:	4618      	mov	r0, r3
 8007496:	3730      	adds	r7, #48	; 0x30
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}

0800749c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b088      	sub	sp, #32
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	60f8      	str	r0, [r7, #12]
 80074a4:	60b9      	str	r1, [r7, #8]
 80074a6:	603b      	str	r3, [r7, #0]
 80074a8:	4613      	mov	r3, r2
 80074aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80074ac:	f7fb face 	bl	8002a4c <HAL_GetTick>
 80074b0:	4602      	mov	r2, r0
 80074b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b4:	1a9b      	subs	r3, r3, r2
 80074b6:	683a      	ldr	r2, [r7, #0]
 80074b8:	4413      	add	r3, r2
 80074ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80074bc:	f7fb fac6 	bl	8002a4c <HAL_GetTick>
 80074c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80074c2:	4b39      	ldr	r3, [pc, #228]	; (80075a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	015b      	lsls	r3, r3, #5
 80074c8:	0d1b      	lsrs	r3, r3, #20
 80074ca:	69fa      	ldr	r2, [r7, #28]
 80074cc:	fb02 f303 	mul.w	r3, r2, r3
 80074d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80074d2:	e054      	b.n	800757e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074da:	d050      	beq.n	800757e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80074dc:	f7fb fab6 	bl	8002a4c <HAL_GetTick>
 80074e0:	4602      	mov	r2, r0
 80074e2:	69bb      	ldr	r3, [r7, #24]
 80074e4:	1ad3      	subs	r3, r2, r3
 80074e6:	69fa      	ldr	r2, [r7, #28]
 80074e8:	429a      	cmp	r2, r3
 80074ea:	d902      	bls.n	80074f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80074ec:	69fb      	ldr	r3, [r7, #28]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d13d      	bne.n	800756e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	685a      	ldr	r2, [r3, #4]
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007500:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800750a:	d111      	bne.n	8007530 <SPI_WaitFlagStateUntilTimeout+0x94>
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	689b      	ldr	r3, [r3, #8]
 8007510:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007514:	d004      	beq.n	8007520 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	689b      	ldr	r3, [r3, #8]
 800751a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800751e:	d107      	bne.n	8007530 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	681a      	ldr	r2, [r3, #0]
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800752e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007534:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007538:	d10f      	bne.n	800755a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	681a      	ldr	r2, [r3, #0]
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007548:	601a      	str	r2, [r3, #0]
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	681a      	ldr	r2, [r3, #0]
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007558:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2201      	movs	r2, #1
 800755e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	2200      	movs	r2, #0
 8007566:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800756a:	2303      	movs	r3, #3
 800756c:	e017      	b.n	800759e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d101      	bne.n	8007578 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007574:	2300      	movs	r3, #0
 8007576:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	3b01      	subs	r3, #1
 800757c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	689a      	ldr	r2, [r3, #8]
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	4013      	ands	r3, r2
 8007588:	68ba      	ldr	r2, [r7, #8]
 800758a:	429a      	cmp	r2, r3
 800758c:	bf0c      	ite	eq
 800758e:	2301      	moveq	r3, #1
 8007590:	2300      	movne	r3, #0
 8007592:	b2db      	uxtb	r3, r3
 8007594:	461a      	mov	r2, r3
 8007596:	79fb      	ldrb	r3, [r7, #7]
 8007598:	429a      	cmp	r2, r3
 800759a:	d19b      	bne.n	80074d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800759c:	2300      	movs	r3, #0
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3720      	adds	r7, #32
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}
 80075a6:	bf00      	nop
 80075a8:	200000c8 	.word	0x200000c8

080075ac <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b086      	sub	sp, #24
 80075b0:	af02      	add	r7, sp, #8
 80075b2:	60f8      	str	r0, [r7, #12]
 80075b4:	60b9      	str	r1, [r7, #8]
 80075b6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	685b      	ldr	r3, [r3, #4]
 80075bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80075c0:	d111      	bne.n	80075e6 <SPI_EndRxTransaction+0x3a>
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	689b      	ldr	r3, [r3, #8]
 80075c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075ca:	d004      	beq.n	80075d6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	689b      	ldr	r3, [r3, #8]
 80075d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075d4:	d107      	bne.n	80075e6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	681a      	ldr	r2, [r3, #0]
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075e4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80075ee:	d12a      	bne.n	8007646 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	689b      	ldr	r3, [r3, #8]
 80075f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075f8:	d012      	beq.n	8007620 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	9300      	str	r3, [sp, #0]
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	2200      	movs	r2, #0
 8007602:	2180      	movs	r1, #128	; 0x80
 8007604:	68f8      	ldr	r0, [r7, #12]
 8007606:	f7ff ff49 	bl	800749c <SPI_WaitFlagStateUntilTimeout>
 800760a:	4603      	mov	r3, r0
 800760c:	2b00      	cmp	r3, #0
 800760e:	d02d      	beq.n	800766c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007614:	f043 0220 	orr.w	r2, r3, #32
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800761c:	2303      	movs	r3, #3
 800761e:	e026      	b.n	800766e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	9300      	str	r3, [sp, #0]
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	2200      	movs	r2, #0
 8007628:	2101      	movs	r1, #1
 800762a:	68f8      	ldr	r0, [r7, #12]
 800762c:	f7ff ff36 	bl	800749c <SPI_WaitFlagStateUntilTimeout>
 8007630:	4603      	mov	r3, r0
 8007632:	2b00      	cmp	r3, #0
 8007634:	d01a      	beq.n	800766c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800763a:	f043 0220 	orr.w	r2, r3, #32
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007642:	2303      	movs	r3, #3
 8007644:	e013      	b.n	800766e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	9300      	str	r3, [sp, #0]
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	2200      	movs	r2, #0
 800764e:	2101      	movs	r1, #1
 8007650:	68f8      	ldr	r0, [r7, #12]
 8007652:	f7ff ff23 	bl	800749c <SPI_WaitFlagStateUntilTimeout>
 8007656:	4603      	mov	r3, r0
 8007658:	2b00      	cmp	r3, #0
 800765a:	d007      	beq.n	800766c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007660:	f043 0220 	orr.w	r2, r3, #32
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007668:	2303      	movs	r3, #3
 800766a:	e000      	b.n	800766e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800766c:	2300      	movs	r3, #0
}
 800766e:	4618      	mov	r0, r3
 8007670:	3710      	adds	r7, #16
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}
	...

08007678 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b088      	sub	sp, #32
 800767c:	af02      	add	r7, sp, #8
 800767e:	60f8      	str	r0, [r7, #12]
 8007680:	60b9      	str	r1, [r7, #8]
 8007682:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007684:	4b1b      	ldr	r3, [pc, #108]	; (80076f4 <SPI_EndRxTxTransaction+0x7c>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a1b      	ldr	r2, [pc, #108]	; (80076f8 <SPI_EndRxTxTransaction+0x80>)
 800768a:	fba2 2303 	umull	r2, r3, r2, r3
 800768e:	0d5b      	lsrs	r3, r3, #21
 8007690:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007694:	fb02 f303 	mul.w	r3, r2, r3
 8007698:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80076a2:	d112      	bne.n	80076ca <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	9300      	str	r3, [sp, #0]
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	2200      	movs	r2, #0
 80076ac:	2180      	movs	r1, #128	; 0x80
 80076ae:	68f8      	ldr	r0, [r7, #12]
 80076b0:	f7ff fef4 	bl	800749c <SPI_WaitFlagStateUntilTimeout>
 80076b4:	4603      	mov	r3, r0
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d016      	beq.n	80076e8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076be:	f043 0220 	orr.w	r2, r3, #32
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80076c6:	2303      	movs	r3, #3
 80076c8:	e00f      	b.n	80076ea <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d00a      	beq.n	80076e6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	3b01      	subs	r3, #1
 80076d4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	689b      	ldr	r3, [r3, #8]
 80076dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076e0:	2b80      	cmp	r3, #128	; 0x80
 80076e2:	d0f2      	beq.n	80076ca <SPI_EndRxTxTransaction+0x52>
 80076e4:	e000      	b.n	80076e8 <SPI_EndRxTxTransaction+0x70>
        break;
 80076e6:	bf00      	nop
  }

  return HAL_OK;
 80076e8:	2300      	movs	r3, #0
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3718      	adds	r7, #24
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}
 80076f2:	bf00      	nop
 80076f4:	200000c8 	.word	0x200000c8
 80076f8:	165e9f81 	.word	0x165e9f81

080076fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b082      	sub	sp, #8
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d101      	bne.n	800770e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800770a:	2301      	movs	r3, #1
 800770c:	e041      	b.n	8007792 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007714:	b2db      	uxtb	r3, r3
 8007716:	2b00      	cmp	r3, #0
 8007718:	d106      	bne.n	8007728 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2200      	movs	r2, #0
 800771e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f7fa ff2e 	bl	8002584 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2202      	movs	r2, #2
 800772c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681a      	ldr	r2, [r3, #0]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	3304      	adds	r3, #4
 8007738:	4619      	mov	r1, r3
 800773a:	4610      	mov	r0, r2
 800773c:	f000 fc12 	bl	8007f64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2201      	movs	r2, #1
 8007744:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2201      	movs	r2, #1
 800774c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2201      	movs	r2, #1
 8007754:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2201      	movs	r2, #1
 800775c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2201      	movs	r2, #1
 8007764:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2201      	movs	r2, #1
 800776c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2201      	movs	r2, #1
 8007774:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2201      	movs	r2, #1
 800777c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2201      	movs	r2, #1
 8007784:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2201      	movs	r2, #1
 800778c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007790:	2300      	movs	r3, #0
}
 8007792:	4618      	mov	r0, r3
 8007794:	3708      	adds	r7, #8
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}

0800779a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800779a:	b580      	push	{r7, lr}
 800779c:	b082      	sub	sp, #8
 800779e:	af00      	add	r7, sp, #0
 80077a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d101      	bne.n	80077ac <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80077a8:	2301      	movs	r3, #1
 80077aa:	e041      	b.n	8007830 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077b2:	b2db      	uxtb	r3, r3
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d106      	bne.n	80077c6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2200      	movs	r2, #0
 80077bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f000 f839 	bl	8007838 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2202      	movs	r2, #2
 80077ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681a      	ldr	r2, [r3, #0]
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	3304      	adds	r3, #4
 80077d6:	4619      	mov	r1, r3
 80077d8:	4610      	mov	r0, r2
 80077da:	f000 fbc3 	bl	8007f64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2201      	movs	r2, #1
 80077e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2201      	movs	r2, #1
 80077ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2201      	movs	r2, #1
 80077f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2201      	movs	r2, #1
 80077fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2201      	movs	r2, #1
 8007802:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2201      	movs	r2, #1
 800780a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2201      	movs	r2, #1
 8007812:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2201      	movs	r2, #1
 800781a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2201      	movs	r2, #1
 8007822:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2201      	movs	r2, #1
 800782a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800782e:	2300      	movs	r3, #0
}
 8007830:	4618      	mov	r0, r3
 8007832:	3708      	adds	r7, #8
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}

08007838 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007838:	b480      	push	{r7}
 800783a:	b083      	sub	sp, #12
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007840:	bf00      	nop
 8007842:	370c      	adds	r7, #12
 8007844:	46bd      	mov	sp, r7
 8007846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784a:	4770      	bx	lr

0800784c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b084      	sub	sp, #16
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
 8007854:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007856:	2300      	movs	r3, #0
 8007858:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	2b0c      	cmp	r3, #12
 800785e:	d855      	bhi.n	800790c <HAL_TIM_PWM_Stop_DMA+0xc0>
 8007860:	a201      	add	r2, pc, #4	; (adr r2, 8007868 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8007862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007866:	bf00      	nop
 8007868:	0800789d 	.word	0x0800789d
 800786c:	0800790d 	.word	0x0800790d
 8007870:	0800790d 	.word	0x0800790d
 8007874:	0800790d 	.word	0x0800790d
 8007878:	080078b9 	.word	0x080078b9
 800787c:	0800790d 	.word	0x0800790d
 8007880:	0800790d 	.word	0x0800790d
 8007884:	0800790d 	.word	0x0800790d
 8007888:	080078d5 	.word	0x080078d5
 800788c:	0800790d 	.word	0x0800790d
 8007890:	0800790d 	.word	0x0800790d
 8007894:	0800790d 	.word	0x0800790d
 8007898:	080078f1 	.word	0x080078f1
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	68da      	ldr	r2, [r3, #12]
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80078aa:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b0:	4618      	mov	r0, r3
 80078b2:	f7fb fb47 	bl	8002f44 <HAL_DMA_Abort_IT>
      break;
 80078b6:	e02c      	b.n	8007912 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	68da      	ldr	r2, [r3, #12]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078c6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078cc:	4618      	mov	r0, r3
 80078ce:	f7fb fb39 	bl	8002f44 <HAL_DMA_Abort_IT>
      break;
 80078d2:	e01e      	b.n	8007912 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	68da      	ldr	r2, [r3, #12]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80078e2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078e8:	4618      	mov	r0, r3
 80078ea:	f7fb fb2b 	bl	8002f44 <HAL_DMA_Abort_IT>
      break;
 80078ee:	e010      	b.n	8007912 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	68da      	ldr	r2, [r3, #12]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80078fe:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007904:	4618      	mov	r0, r3
 8007906:	f7fb fb1d 	bl	8002f44 <HAL_DMA_Abort_IT>
      break;
 800790a:	e002      	b.n	8007912 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 800790c:	2301      	movs	r3, #1
 800790e:	73fb      	strb	r3, [r7, #15]
      break;
 8007910:	bf00      	nop
  }

  if (status == HAL_OK)
 8007912:	7bfb      	ldrb	r3, [r7, #15]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d161      	bne.n	80079dc <HAL_TIM_PWM_Stop_DMA+0x190>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	2200      	movs	r2, #0
 800791e:	6839      	ldr	r1, [r7, #0]
 8007920:	4618      	mov	r0, r3
 8007922:	f000 fe09 	bl	8008538 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4a2f      	ldr	r2, [pc, #188]	; (80079e8 <HAL_TIM_PWM_Stop_DMA+0x19c>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d004      	beq.n	800793a <HAL_TIM_PWM_Stop_DMA+0xee>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a2d      	ldr	r2, [pc, #180]	; (80079ec <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d101      	bne.n	800793e <HAL_TIM_PWM_Stop_DMA+0xf2>
 800793a:	2301      	movs	r3, #1
 800793c:	e000      	b.n	8007940 <HAL_TIM_PWM_Stop_DMA+0xf4>
 800793e:	2300      	movs	r3, #0
 8007940:	2b00      	cmp	r3, #0
 8007942:	d017      	beq.n	8007974 <HAL_TIM_PWM_Stop_DMA+0x128>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	6a1a      	ldr	r2, [r3, #32]
 800794a:	f241 1311 	movw	r3, #4369	; 0x1111
 800794e:	4013      	ands	r3, r2
 8007950:	2b00      	cmp	r3, #0
 8007952:	d10f      	bne.n	8007974 <HAL_TIM_PWM_Stop_DMA+0x128>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	6a1a      	ldr	r2, [r3, #32]
 800795a:	f240 4344 	movw	r3, #1092	; 0x444
 800795e:	4013      	ands	r3, r2
 8007960:	2b00      	cmp	r3, #0
 8007962:	d107      	bne.n	8007974 <HAL_TIM_PWM_Stop_DMA+0x128>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007972:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	6a1a      	ldr	r2, [r3, #32]
 800797a:	f241 1311 	movw	r3, #4369	; 0x1111
 800797e:	4013      	ands	r3, r2
 8007980:	2b00      	cmp	r3, #0
 8007982:	d10f      	bne.n	80079a4 <HAL_TIM_PWM_Stop_DMA+0x158>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	6a1a      	ldr	r2, [r3, #32]
 800798a:	f240 4344 	movw	r3, #1092	; 0x444
 800798e:	4013      	ands	r3, r2
 8007990:	2b00      	cmp	r3, #0
 8007992:	d107      	bne.n	80079a4 <HAL_TIM_PWM_Stop_DMA+0x158>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	681a      	ldr	r2, [r3, #0]
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f022 0201 	bic.w	r2, r2, #1
 80079a2:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d104      	bne.n	80079b4 <HAL_TIM_PWM_Stop_DMA+0x168>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2201      	movs	r2, #1
 80079ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80079b2:	e013      	b.n	80079dc <HAL_TIM_PWM_Stop_DMA+0x190>
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	2b04      	cmp	r3, #4
 80079b8:	d104      	bne.n	80079c4 <HAL_TIM_PWM_Stop_DMA+0x178>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2201      	movs	r2, #1
 80079be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80079c2:	e00b      	b.n	80079dc <HAL_TIM_PWM_Stop_DMA+0x190>
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	2b08      	cmp	r3, #8
 80079c8:	d104      	bne.n	80079d4 <HAL_TIM_PWM_Stop_DMA+0x188>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2201      	movs	r2, #1
 80079ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80079d2:	e003      	b.n	80079dc <HAL_TIM_PWM_Stop_DMA+0x190>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2201      	movs	r2, #1
 80079d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 80079dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3710      	adds	r7, #16
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}
 80079e6:	bf00      	nop
 80079e8:	40010000 	.word	0x40010000
 80079ec:	40010400 	.word	0x40010400

080079f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b082      	sub	sp, #8
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	691b      	ldr	r3, [r3, #16]
 80079fe:	f003 0302 	and.w	r3, r3, #2
 8007a02:	2b02      	cmp	r3, #2
 8007a04:	d122      	bne.n	8007a4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	68db      	ldr	r3, [r3, #12]
 8007a0c:	f003 0302 	and.w	r3, r3, #2
 8007a10:	2b02      	cmp	r3, #2
 8007a12:	d11b      	bne.n	8007a4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f06f 0202 	mvn.w	r2, #2
 8007a1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2201      	movs	r2, #1
 8007a22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	699b      	ldr	r3, [r3, #24]
 8007a2a:	f003 0303 	and.w	r3, r3, #3
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d003      	beq.n	8007a3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f000 fa81 	bl	8007f3a <HAL_TIM_IC_CaptureCallback>
 8007a38:	e005      	b.n	8007a46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 fa73 	bl	8007f26 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f7fa fb73 	bl	800212c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	691b      	ldr	r3, [r3, #16]
 8007a52:	f003 0304 	and.w	r3, r3, #4
 8007a56:	2b04      	cmp	r3, #4
 8007a58:	d122      	bne.n	8007aa0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	68db      	ldr	r3, [r3, #12]
 8007a60:	f003 0304 	and.w	r3, r3, #4
 8007a64:	2b04      	cmp	r3, #4
 8007a66:	d11b      	bne.n	8007aa0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f06f 0204 	mvn.w	r2, #4
 8007a70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2202      	movs	r2, #2
 8007a76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	699b      	ldr	r3, [r3, #24]
 8007a7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d003      	beq.n	8007a8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f000 fa57 	bl	8007f3a <HAL_TIM_IC_CaptureCallback>
 8007a8c:	e005      	b.n	8007a9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 fa49 	bl	8007f26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f7fa fb49 	bl	800212c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	691b      	ldr	r3, [r3, #16]
 8007aa6:	f003 0308 	and.w	r3, r3, #8
 8007aaa:	2b08      	cmp	r3, #8
 8007aac:	d122      	bne.n	8007af4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	68db      	ldr	r3, [r3, #12]
 8007ab4:	f003 0308 	and.w	r3, r3, #8
 8007ab8:	2b08      	cmp	r3, #8
 8007aba:	d11b      	bne.n	8007af4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f06f 0208 	mvn.w	r2, #8
 8007ac4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2204      	movs	r2, #4
 8007aca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	69db      	ldr	r3, [r3, #28]
 8007ad2:	f003 0303 	and.w	r3, r3, #3
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d003      	beq.n	8007ae2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f000 fa2d 	bl	8007f3a <HAL_TIM_IC_CaptureCallback>
 8007ae0:	e005      	b.n	8007aee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 fa1f 	bl	8007f26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f7fa fb1f 	bl	800212c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2200      	movs	r2, #0
 8007af2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	691b      	ldr	r3, [r3, #16]
 8007afa:	f003 0310 	and.w	r3, r3, #16
 8007afe:	2b10      	cmp	r3, #16
 8007b00:	d122      	bne.n	8007b48 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	68db      	ldr	r3, [r3, #12]
 8007b08:	f003 0310 	and.w	r3, r3, #16
 8007b0c:	2b10      	cmp	r3, #16
 8007b0e:	d11b      	bne.n	8007b48 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f06f 0210 	mvn.w	r2, #16
 8007b18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2208      	movs	r2, #8
 8007b1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	69db      	ldr	r3, [r3, #28]
 8007b26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d003      	beq.n	8007b36 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 fa03 	bl	8007f3a <HAL_TIM_IC_CaptureCallback>
 8007b34:	e005      	b.n	8007b42 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f000 f9f5 	bl	8007f26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f7fa faf5 	bl	800212c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2200      	movs	r2, #0
 8007b46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	691b      	ldr	r3, [r3, #16]
 8007b4e:	f003 0301 	and.w	r3, r3, #1
 8007b52:	2b01      	cmp	r3, #1
 8007b54:	d10e      	bne.n	8007b74 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	68db      	ldr	r3, [r3, #12]
 8007b5c:	f003 0301 	and.w	r3, r3, #1
 8007b60:	2b01      	cmp	r3, #1
 8007b62:	d107      	bne.n	8007b74 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f06f 0201 	mvn.w	r2, #1
 8007b6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f000 f9cf 	bl	8007f12 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	691b      	ldr	r3, [r3, #16]
 8007b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b7e:	2b80      	cmp	r3, #128	; 0x80
 8007b80:	d10e      	bne.n	8007ba0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	68db      	ldr	r3, [r3, #12]
 8007b88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b8c:	2b80      	cmp	r3, #128	; 0x80
 8007b8e:	d107      	bne.n	8007ba0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007b98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f000 fd78 	bl	8008690 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	691b      	ldr	r3, [r3, #16]
 8007ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007baa:	2b40      	cmp	r3, #64	; 0x40
 8007bac:	d10e      	bne.n	8007bcc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	68db      	ldr	r3, [r3, #12]
 8007bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bb8:	2b40      	cmp	r3, #64	; 0x40
 8007bba:	d107      	bne.n	8007bcc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007bc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 f9c1 	bl	8007f4e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	691b      	ldr	r3, [r3, #16]
 8007bd2:	f003 0320 	and.w	r3, r3, #32
 8007bd6:	2b20      	cmp	r3, #32
 8007bd8:	d10e      	bne.n	8007bf8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	68db      	ldr	r3, [r3, #12]
 8007be0:	f003 0320 	and.w	r3, r3, #32
 8007be4:	2b20      	cmp	r3, #32
 8007be6:	d107      	bne.n	8007bf8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f06f 0220 	mvn.w	r2, #32
 8007bf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f000 fd42 	bl	800867c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007bf8:	bf00      	nop
 8007bfa:	3708      	adds	r7, #8
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}

08007c00 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b086      	sub	sp, #24
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	60f8      	str	r0, [r7, #12]
 8007c08:	60b9      	str	r1, [r7, #8]
 8007c0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c16:	2b01      	cmp	r3, #1
 8007c18:	d101      	bne.n	8007c1e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007c1a:	2302      	movs	r3, #2
 8007c1c:	e0ae      	b.n	8007d7c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2201      	movs	r2, #1
 8007c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2b0c      	cmp	r3, #12
 8007c2a:	f200 809f 	bhi.w	8007d6c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007c2e:	a201      	add	r2, pc, #4	; (adr r2, 8007c34 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c34:	08007c69 	.word	0x08007c69
 8007c38:	08007d6d 	.word	0x08007d6d
 8007c3c:	08007d6d 	.word	0x08007d6d
 8007c40:	08007d6d 	.word	0x08007d6d
 8007c44:	08007ca9 	.word	0x08007ca9
 8007c48:	08007d6d 	.word	0x08007d6d
 8007c4c:	08007d6d 	.word	0x08007d6d
 8007c50:	08007d6d 	.word	0x08007d6d
 8007c54:	08007ceb 	.word	0x08007ceb
 8007c58:	08007d6d 	.word	0x08007d6d
 8007c5c:	08007d6d 	.word	0x08007d6d
 8007c60:	08007d6d 	.word	0x08007d6d
 8007c64:	08007d2b 	.word	0x08007d2b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	68b9      	ldr	r1, [r7, #8]
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f000 fa18 	bl	80080a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	699a      	ldr	r2, [r3, #24]
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f042 0208 	orr.w	r2, r2, #8
 8007c82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	699a      	ldr	r2, [r3, #24]
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f022 0204 	bic.w	r2, r2, #4
 8007c92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	6999      	ldr	r1, [r3, #24]
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	691a      	ldr	r2, [r3, #16]
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	430a      	orrs	r2, r1
 8007ca4:	619a      	str	r2, [r3, #24]
      break;
 8007ca6:	e064      	b.n	8007d72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	68b9      	ldr	r1, [r7, #8]
 8007cae:	4618      	mov	r0, r3
 8007cb0:	f000 fa68 	bl	8008184 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	699a      	ldr	r2, [r3, #24]
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007cc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	699a      	ldr	r2, [r3, #24]
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007cd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	6999      	ldr	r1, [r3, #24]
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	691b      	ldr	r3, [r3, #16]
 8007cde:	021a      	lsls	r2, r3, #8
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	430a      	orrs	r2, r1
 8007ce6:	619a      	str	r2, [r3, #24]
      break;
 8007ce8:	e043      	b.n	8007d72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	68b9      	ldr	r1, [r7, #8]
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f000 fabd 	bl	8008270 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	69da      	ldr	r2, [r3, #28]
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f042 0208 	orr.w	r2, r2, #8
 8007d04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	69da      	ldr	r2, [r3, #28]
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f022 0204 	bic.w	r2, r2, #4
 8007d14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	69d9      	ldr	r1, [r3, #28]
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	691a      	ldr	r2, [r3, #16]
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	430a      	orrs	r2, r1
 8007d26:	61da      	str	r2, [r3, #28]
      break;
 8007d28:	e023      	b.n	8007d72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	68b9      	ldr	r1, [r7, #8]
 8007d30:	4618      	mov	r0, r3
 8007d32:	f000 fb11 	bl	8008358 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	69da      	ldr	r2, [r3, #28]
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	69da      	ldr	r2, [r3, #28]
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	69d9      	ldr	r1, [r3, #28]
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	691b      	ldr	r3, [r3, #16]
 8007d60:	021a      	lsls	r2, r3, #8
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	430a      	orrs	r2, r1
 8007d68:	61da      	str	r2, [r3, #28]
      break;
 8007d6a:	e002      	b.n	8007d72 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	75fb      	strb	r3, [r7, #23]
      break;
 8007d70:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	2200      	movs	r2, #0
 8007d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007d7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3718      	adds	r7, #24
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}

08007d84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b084      	sub	sp, #16
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
 8007d8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d98:	2b01      	cmp	r3, #1
 8007d9a:	d101      	bne.n	8007da0 <HAL_TIM_ConfigClockSource+0x1c>
 8007d9c:	2302      	movs	r3, #2
 8007d9e:	e0b4      	b.n	8007f0a <HAL_TIM_ConfigClockSource+0x186>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2201      	movs	r2, #1
 8007da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2202      	movs	r2, #2
 8007dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	689b      	ldr	r3, [r3, #8]
 8007db6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007dbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007dc6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	68ba      	ldr	r2, [r7, #8]
 8007dce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007dd8:	d03e      	beq.n	8007e58 <HAL_TIM_ConfigClockSource+0xd4>
 8007dda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007dde:	f200 8087 	bhi.w	8007ef0 <HAL_TIM_ConfigClockSource+0x16c>
 8007de2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007de6:	f000 8086 	beq.w	8007ef6 <HAL_TIM_ConfigClockSource+0x172>
 8007dea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dee:	d87f      	bhi.n	8007ef0 <HAL_TIM_ConfigClockSource+0x16c>
 8007df0:	2b70      	cmp	r3, #112	; 0x70
 8007df2:	d01a      	beq.n	8007e2a <HAL_TIM_ConfigClockSource+0xa6>
 8007df4:	2b70      	cmp	r3, #112	; 0x70
 8007df6:	d87b      	bhi.n	8007ef0 <HAL_TIM_ConfigClockSource+0x16c>
 8007df8:	2b60      	cmp	r3, #96	; 0x60
 8007dfa:	d050      	beq.n	8007e9e <HAL_TIM_ConfigClockSource+0x11a>
 8007dfc:	2b60      	cmp	r3, #96	; 0x60
 8007dfe:	d877      	bhi.n	8007ef0 <HAL_TIM_ConfigClockSource+0x16c>
 8007e00:	2b50      	cmp	r3, #80	; 0x50
 8007e02:	d03c      	beq.n	8007e7e <HAL_TIM_ConfigClockSource+0xfa>
 8007e04:	2b50      	cmp	r3, #80	; 0x50
 8007e06:	d873      	bhi.n	8007ef0 <HAL_TIM_ConfigClockSource+0x16c>
 8007e08:	2b40      	cmp	r3, #64	; 0x40
 8007e0a:	d058      	beq.n	8007ebe <HAL_TIM_ConfigClockSource+0x13a>
 8007e0c:	2b40      	cmp	r3, #64	; 0x40
 8007e0e:	d86f      	bhi.n	8007ef0 <HAL_TIM_ConfigClockSource+0x16c>
 8007e10:	2b30      	cmp	r3, #48	; 0x30
 8007e12:	d064      	beq.n	8007ede <HAL_TIM_ConfigClockSource+0x15a>
 8007e14:	2b30      	cmp	r3, #48	; 0x30
 8007e16:	d86b      	bhi.n	8007ef0 <HAL_TIM_ConfigClockSource+0x16c>
 8007e18:	2b20      	cmp	r3, #32
 8007e1a:	d060      	beq.n	8007ede <HAL_TIM_ConfigClockSource+0x15a>
 8007e1c:	2b20      	cmp	r3, #32
 8007e1e:	d867      	bhi.n	8007ef0 <HAL_TIM_ConfigClockSource+0x16c>
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d05c      	beq.n	8007ede <HAL_TIM_ConfigClockSource+0x15a>
 8007e24:	2b10      	cmp	r3, #16
 8007e26:	d05a      	beq.n	8007ede <HAL_TIM_ConfigClockSource+0x15a>
 8007e28:	e062      	b.n	8007ef0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6818      	ldr	r0, [r3, #0]
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	6899      	ldr	r1, [r3, #8]
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	685a      	ldr	r2, [r3, #4]
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	68db      	ldr	r3, [r3, #12]
 8007e3a:	f000 fb5d 	bl	80084f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	689b      	ldr	r3, [r3, #8]
 8007e44:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007e4c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	68ba      	ldr	r2, [r7, #8]
 8007e54:	609a      	str	r2, [r3, #8]
      break;
 8007e56:	e04f      	b.n	8007ef8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6818      	ldr	r0, [r3, #0]
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	6899      	ldr	r1, [r3, #8]
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	685a      	ldr	r2, [r3, #4]
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	68db      	ldr	r3, [r3, #12]
 8007e68:	f000 fb46 	bl	80084f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	689a      	ldr	r2, [r3, #8]
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007e7a:	609a      	str	r2, [r3, #8]
      break;
 8007e7c:	e03c      	b.n	8007ef8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6818      	ldr	r0, [r3, #0]
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	6859      	ldr	r1, [r3, #4]
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	68db      	ldr	r3, [r3, #12]
 8007e8a:	461a      	mov	r2, r3
 8007e8c:	f000 faba 	bl	8008404 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	2150      	movs	r1, #80	; 0x50
 8007e96:	4618      	mov	r0, r3
 8007e98:	f000 fb13 	bl	80084c2 <TIM_ITRx_SetConfig>
      break;
 8007e9c:	e02c      	b.n	8007ef8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6818      	ldr	r0, [r3, #0]
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	6859      	ldr	r1, [r3, #4]
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	68db      	ldr	r3, [r3, #12]
 8007eaa:	461a      	mov	r2, r3
 8007eac:	f000 fad9 	bl	8008462 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	2160      	movs	r1, #96	; 0x60
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f000 fb03 	bl	80084c2 <TIM_ITRx_SetConfig>
      break;
 8007ebc:	e01c      	b.n	8007ef8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6818      	ldr	r0, [r3, #0]
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	6859      	ldr	r1, [r3, #4]
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	68db      	ldr	r3, [r3, #12]
 8007eca:	461a      	mov	r2, r3
 8007ecc:	f000 fa9a 	bl	8008404 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	2140      	movs	r1, #64	; 0x40
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f000 faf3 	bl	80084c2 <TIM_ITRx_SetConfig>
      break;
 8007edc:	e00c      	b.n	8007ef8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681a      	ldr	r2, [r3, #0]
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4619      	mov	r1, r3
 8007ee8:	4610      	mov	r0, r2
 8007eea:	f000 faea 	bl	80084c2 <TIM_ITRx_SetConfig>
      break;
 8007eee:	e003      	b.n	8007ef8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	73fb      	strb	r3, [r7, #15]
      break;
 8007ef4:	e000      	b.n	8007ef8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007ef6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2201      	movs	r2, #1
 8007efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2200      	movs	r2, #0
 8007f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	3710      	adds	r7, #16
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}

08007f12 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007f12:	b480      	push	{r7}
 8007f14:	b083      	sub	sp, #12
 8007f16:	af00      	add	r7, sp, #0
 8007f18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007f1a:	bf00      	nop
 8007f1c:	370c      	adds	r7, #12
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f24:	4770      	bx	lr

08007f26 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007f26:	b480      	push	{r7}
 8007f28:	b083      	sub	sp, #12
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007f2e:	bf00      	nop
 8007f30:	370c      	adds	r7, #12
 8007f32:	46bd      	mov	sp, r7
 8007f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f38:	4770      	bx	lr

08007f3a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007f3a:	b480      	push	{r7}
 8007f3c:	b083      	sub	sp, #12
 8007f3e:	af00      	add	r7, sp, #0
 8007f40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007f42:	bf00      	nop
 8007f44:	370c      	adds	r7, #12
 8007f46:	46bd      	mov	sp, r7
 8007f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4c:	4770      	bx	lr

08007f4e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007f4e:	b480      	push	{r7}
 8007f50:	b083      	sub	sp, #12
 8007f52:	af00      	add	r7, sp, #0
 8007f54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007f56:	bf00      	nop
 8007f58:	370c      	adds	r7, #12
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f60:	4770      	bx	lr
	...

08007f64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007f64:	b480      	push	{r7}
 8007f66:	b085      	sub	sp, #20
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
 8007f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	4a40      	ldr	r2, [pc, #256]	; (8008078 <TIM_Base_SetConfig+0x114>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d013      	beq.n	8007fa4 <TIM_Base_SetConfig+0x40>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f82:	d00f      	beq.n	8007fa4 <TIM_Base_SetConfig+0x40>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	4a3d      	ldr	r2, [pc, #244]	; (800807c <TIM_Base_SetConfig+0x118>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d00b      	beq.n	8007fa4 <TIM_Base_SetConfig+0x40>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	4a3c      	ldr	r2, [pc, #240]	; (8008080 <TIM_Base_SetConfig+0x11c>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d007      	beq.n	8007fa4 <TIM_Base_SetConfig+0x40>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	4a3b      	ldr	r2, [pc, #236]	; (8008084 <TIM_Base_SetConfig+0x120>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d003      	beq.n	8007fa4 <TIM_Base_SetConfig+0x40>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	4a3a      	ldr	r2, [pc, #232]	; (8008088 <TIM_Base_SetConfig+0x124>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d108      	bne.n	8007fb6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007faa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	68fa      	ldr	r2, [r7, #12]
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	4a2f      	ldr	r2, [pc, #188]	; (8008078 <TIM_Base_SetConfig+0x114>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d02b      	beq.n	8008016 <TIM_Base_SetConfig+0xb2>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fc4:	d027      	beq.n	8008016 <TIM_Base_SetConfig+0xb2>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	4a2c      	ldr	r2, [pc, #176]	; (800807c <TIM_Base_SetConfig+0x118>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d023      	beq.n	8008016 <TIM_Base_SetConfig+0xb2>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	4a2b      	ldr	r2, [pc, #172]	; (8008080 <TIM_Base_SetConfig+0x11c>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d01f      	beq.n	8008016 <TIM_Base_SetConfig+0xb2>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	4a2a      	ldr	r2, [pc, #168]	; (8008084 <TIM_Base_SetConfig+0x120>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d01b      	beq.n	8008016 <TIM_Base_SetConfig+0xb2>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	4a29      	ldr	r2, [pc, #164]	; (8008088 <TIM_Base_SetConfig+0x124>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d017      	beq.n	8008016 <TIM_Base_SetConfig+0xb2>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	4a28      	ldr	r2, [pc, #160]	; (800808c <TIM_Base_SetConfig+0x128>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d013      	beq.n	8008016 <TIM_Base_SetConfig+0xb2>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	4a27      	ldr	r2, [pc, #156]	; (8008090 <TIM_Base_SetConfig+0x12c>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d00f      	beq.n	8008016 <TIM_Base_SetConfig+0xb2>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	4a26      	ldr	r2, [pc, #152]	; (8008094 <TIM_Base_SetConfig+0x130>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d00b      	beq.n	8008016 <TIM_Base_SetConfig+0xb2>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	4a25      	ldr	r2, [pc, #148]	; (8008098 <TIM_Base_SetConfig+0x134>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d007      	beq.n	8008016 <TIM_Base_SetConfig+0xb2>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	4a24      	ldr	r2, [pc, #144]	; (800809c <TIM_Base_SetConfig+0x138>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d003      	beq.n	8008016 <TIM_Base_SetConfig+0xb2>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	4a23      	ldr	r2, [pc, #140]	; (80080a0 <TIM_Base_SetConfig+0x13c>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d108      	bne.n	8008028 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800801c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	68db      	ldr	r3, [r3, #12]
 8008022:	68fa      	ldr	r2, [r7, #12]
 8008024:	4313      	orrs	r3, r2
 8008026:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	695b      	ldr	r3, [r3, #20]
 8008032:	4313      	orrs	r3, r2
 8008034:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	68fa      	ldr	r2, [r7, #12]
 800803a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	689a      	ldr	r2, [r3, #8]
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	681a      	ldr	r2, [r3, #0]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	4a0a      	ldr	r2, [pc, #40]	; (8008078 <TIM_Base_SetConfig+0x114>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d003      	beq.n	800805c <TIM_Base_SetConfig+0xf8>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	4a0c      	ldr	r2, [pc, #48]	; (8008088 <TIM_Base_SetConfig+0x124>)
 8008058:	4293      	cmp	r3, r2
 800805a:	d103      	bne.n	8008064 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	691a      	ldr	r2, [r3, #16]
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2201      	movs	r2, #1
 8008068:	615a      	str	r2, [r3, #20]
}
 800806a:	bf00      	nop
 800806c:	3714      	adds	r7, #20
 800806e:	46bd      	mov	sp, r7
 8008070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008074:	4770      	bx	lr
 8008076:	bf00      	nop
 8008078:	40010000 	.word	0x40010000
 800807c:	40000400 	.word	0x40000400
 8008080:	40000800 	.word	0x40000800
 8008084:	40000c00 	.word	0x40000c00
 8008088:	40010400 	.word	0x40010400
 800808c:	40014000 	.word	0x40014000
 8008090:	40014400 	.word	0x40014400
 8008094:	40014800 	.word	0x40014800
 8008098:	40001800 	.word	0x40001800
 800809c:	40001c00 	.word	0x40001c00
 80080a0:	40002000 	.word	0x40002000

080080a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80080a4:	b480      	push	{r7}
 80080a6:	b087      	sub	sp, #28
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6a1b      	ldr	r3, [r3, #32]
 80080b2:	f023 0201 	bic.w	r2, r3, #1
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6a1b      	ldr	r3, [r3, #32]
 80080be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	685b      	ldr	r3, [r3, #4]
 80080c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	699b      	ldr	r3, [r3, #24]
 80080ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	f023 0303 	bic.w	r3, r3, #3
 80080da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	68fa      	ldr	r2, [r7, #12]
 80080e2:	4313      	orrs	r3, r2
 80080e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80080e6:	697b      	ldr	r3, [r7, #20]
 80080e8:	f023 0302 	bic.w	r3, r3, #2
 80080ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	689b      	ldr	r3, [r3, #8]
 80080f2:	697a      	ldr	r2, [r7, #20]
 80080f4:	4313      	orrs	r3, r2
 80080f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	4a20      	ldr	r2, [pc, #128]	; (800817c <TIM_OC1_SetConfig+0xd8>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d003      	beq.n	8008108 <TIM_OC1_SetConfig+0x64>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	4a1f      	ldr	r2, [pc, #124]	; (8008180 <TIM_OC1_SetConfig+0xdc>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d10c      	bne.n	8008122 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	f023 0308 	bic.w	r3, r3, #8
 800810e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	68db      	ldr	r3, [r3, #12]
 8008114:	697a      	ldr	r2, [r7, #20]
 8008116:	4313      	orrs	r3, r2
 8008118:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800811a:	697b      	ldr	r3, [r7, #20]
 800811c:	f023 0304 	bic.w	r3, r3, #4
 8008120:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	4a15      	ldr	r2, [pc, #84]	; (800817c <TIM_OC1_SetConfig+0xd8>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d003      	beq.n	8008132 <TIM_OC1_SetConfig+0x8e>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	4a14      	ldr	r2, [pc, #80]	; (8008180 <TIM_OC1_SetConfig+0xdc>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d111      	bne.n	8008156 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008138:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800813a:	693b      	ldr	r3, [r7, #16]
 800813c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008140:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	695b      	ldr	r3, [r3, #20]
 8008146:	693a      	ldr	r2, [r7, #16]
 8008148:	4313      	orrs	r3, r2
 800814a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	699b      	ldr	r3, [r3, #24]
 8008150:	693a      	ldr	r2, [r7, #16]
 8008152:	4313      	orrs	r3, r2
 8008154:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	693a      	ldr	r2, [r7, #16]
 800815a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	68fa      	ldr	r2, [r7, #12]
 8008160:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	685a      	ldr	r2, [r3, #4]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	697a      	ldr	r2, [r7, #20]
 800816e:	621a      	str	r2, [r3, #32]
}
 8008170:	bf00      	nop
 8008172:	371c      	adds	r7, #28
 8008174:	46bd      	mov	sp, r7
 8008176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817a:	4770      	bx	lr
 800817c:	40010000 	.word	0x40010000
 8008180:	40010400 	.word	0x40010400

08008184 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008184:	b480      	push	{r7}
 8008186:	b087      	sub	sp, #28
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6a1b      	ldr	r3, [r3, #32]
 8008192:	f023 0210 	bic.w	r2, r3, #16
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6a1b      	ldr	r3, [r3, #32]
 800819e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	699b      	ldr	r3, [r3, #24]
 80081aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	021b      	lsls	r3, r3, #8
 80081c2:	68fa      	ldr	r2, [r7, #12]
 80081c4:	4313      	orrs	r3, r2
 80081c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80081c8:	697b      	ldr	r3, [r7, #20]
 80081ca:	f023 0320 	bic.w	r3, r3, #32
 80081ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	689b      	ldr	r3, [r3, #8]
 80081d4:	011b      	lsls	r3, r3, #4
 80081d6:	697a      	ldr	r2, [r7, #20]
 80081d8:	4313      	orrs	r3, r2
 80081da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	4a22      	ldr	r2, [pc, #136]	; (8008268 <TIM_OC2_SetConfig+0xe4>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d003      	beq.n	80081ec <TIM_OC2_SetConfig+0x68>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	4a21      	ldr	r2, [pc, #132]	; (800826c <TIM_OC2_SetConfig+0xe8>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d10d      	bne.n	8008208 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80081f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	68db      	ldr	r3, [r3, #12]
 80081f8:	011b      	lsls	r3, r3, #4
 80081fa:	697a      	ldr	r2, [r7, #20]
 80081fc:	4313      	orrs	r3, r2
 80081fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008200:	697b      	ldr	r3, [r7, #20]
 8008202:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008206:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	4a17      	ldr	r2, [pc, #92]	; (8008268 <TIM_OC2_SetConfig+0xe4>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d003      	beq.n	8008218 <TIM_OC2_SetConfig+0x94>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	4a16      	ldr	r2, [pc, #88]	; (800826c <TIM_OC2_SetConfig+0xe8>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d113      	bne.n	8008240 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800821e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008220:	693b      	ldr	r3, [r7, #16]
 8008222:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008226:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	695b      	ldr	r3, [r3, #20]
 800822c:	009b      	lsls	r3, r3, #2
 800822e:	693a      	ldr	r2, [r7, #16]
 8008230:	4313      	orrs	r3, r2
 8008232:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	699b      	ldr	r3, [r3, #24]
 8008238:	009b      	lsls	r3, r3, #2
 800823a:	693a      	ldr	r2, [r7, #16]
 800823c:	4313      	orrs	r3, r2
 800823e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	693a      	ldr	r2, [r7, #16]
 8008244:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	68fa      	ldr	r2, [r7, #12]
 800824a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	685a      	ldr	r2, [r3, #4]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	697a      	ldr	r2, [r7, #20]
 8008258:	621a      	str	r2, [r3, #32]
}
 800825a:	bf00      	nop
 800825c:	371c      	adds	r7, #28
 800825e:	46bd      	mov	sp, r7
 8008260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008264:	4770      	bx	lr
 8008266:	bf00      	nop
 8008268:	40010000 	.word	0x40010000
 800826c:	40010400 	.word	0x40010400

08008270 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008270:	b480      	push	{r7}
 8008272:	b087      	sub	sp, #28
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6a1b      	ldr	r3, [r3, #32]
 800827e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6a1b      	ldr	r3, [r3, #32]
 800828a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	685b      	ldr	r3, [r3, #4]
 8008290:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	69db      	ldr	r3, [r3, #28]
 8008296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800829e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	f023 0303 	bic.w	r3, r3, #3
 80082a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	68fa      	ldr	r2, [r7, #12]
 80082ae:	4313      	orrs	r3, r2
 80082b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80082b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	689b      	ldr	r3, [r3, #8]
 80082be:	021b      	lsls	r3, r3, #8
 80082c0:	697a      	ldr	r2, [r7, #20]
 80082c2:	4313      	orrs	r3, r2
 80082c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	4a21      	ldr	r2, [pc, #132]	; (8008350 <TIM_OC3_SetConfig+0xe0>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d003      	beq.n	80082d6 <TIM_OC3_SetConfig+0x66>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	4a20      	ldr	r2, [pc, #128]	; (8008354 <TIM_OC3_SetConfig+0xe4>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d10d      	bne.n	80082f2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80082dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	68db      	ldr	r3, [r3, #12]
 80082e2:	021b      	lsls	r3, r3, #8
 80082e4:	697a      	ldr	r2, [r7, #20]
 80082e6:	4313      	orrs	r3, r2
 80082e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80082f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	4a16      	ldr	r2, [pc, #88]	; (8008350 <TIM_OC3_SetConfig+0xe0>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d003      	beq.n	8008302 <TIM_OC3_SetConfig+0x92>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	4a15      	ldr	r2, [pc, #84]	; (8008354 <TIM_OC3_SetConfig+0xe4>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d113      	bne.n	800832a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008302:	693b      	ldr	r3, [r7, #16]
 8008304:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008308:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800830a:	693b      	ldr	r3, [r7, #16]
 800830c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008310:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	695b      	ldr	r3, [r3, #20]
 8008316:	011b      	lsls	r3, r3, #4
 8008318:	693a      	ldr	r2, [r7, #16]
 800831a:	4313      	orrs	r3, r2
 800831c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	699b      	ldr	r3, [r3, #24]
 8008322:	011b      	lsls	r3, r3, #4
 8008324:	693a      	ldr	r2, [r7, #16]
 8008326:	4313      	orrs	r3, r2
 8008328:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	693a      	ldr	r2, [r7, #16]
 800832e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	68fa      	ldr	r2, [r7, #12]
 8008334:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	685a      	ldr	r2, [r3, #4]
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	697a      	ldr	r2, [r7, #20]
 8008342:	621a      	str	r2, [r3, #32]
}
 8008344:	bf00      	nop
 8008346:	371c      	adds	r7, #28
 8008348:	46bd      	mov	sp, r7
 800834a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834e:	4770      	bx	lr
 8008350:	40010000 	.word	0x40010000
 8008354:	40010400 	.word	0x40010400

08008358 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008358:	b480      	push	{r7}
 800835a:	b087      	sub	sp, #28
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
 8008360:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6a1b      	ldr	r3, [r3, #32]
 8008366:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6a1b      	ldr	r3, [r3, #32]
 8008372:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	685b      	ldr	r3, [r3, #4]
 8008378:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	69db      	ldr	r3, [r3, #28]
 800837e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008386:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800838e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	021b      	lsls	r3, r3, #8
 8008396:	68fa      	ldr	r2, [r7, #12]
 8008398:	4313      	orrs	r3, r2
 800839a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800839c:	693b      	ldr	r3, [r7, #16]
 800839e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80083a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	689b      	ldr	r3, [r3, #8]
 80083a8:	031b      	lsls	r3, r3, #12
 80083aa:	693a      	ldr	r2, [r7, #16]
 80083ac:	4313      	orrs	r3, r2
 80083ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	4a12      	ldr	r2, [pc, #72]	; (80083fc <TIM_OC4_SetConfig+0xa4>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d003      	beq.n	80083c0 <TIM_OC4_SetConfig+0x68>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	4a11      	ldr	r2, [pc, #68]	; (8008400 <TIM_OC4_SetConfig+0xa8>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d109      	bne.n	80083d4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80083c0:	697b      	ldr	r3, [r7, #20]
 80083c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80083c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	695b      	ldr	r3, [r3, #20]
 80083cc:	019b      	lsls	r3, r3, #6
 80083ce:	697a      	ldr	r2, [r7, #20]
 80083d0:	4313      	orrs	r3, r2
 80083d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	697a      	ldr	r2, [r7, #20]
 80083d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	68fa      	ldr	r2, [r7, #12]
 80083de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	685a      	ldr	r2, [r3, #4]
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	693a      	ldr	r2, [r7, #16]
 80083ec:	621a      	str	r2, [r3, #32]
}
 80083ee:	bf00      	nop
 80083f0:	371c      	adds	r7, #28
 80083f2:	46bd      	mov	sp, r7
 80083f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f8:	4770      	bx	lr
 80083fa:	bf00      	nop
 80083fc:	40010000 	.word	0x40010000
 8008400:	40010400 	.word	0x40010400

08008404 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008404:	b480      	push	{r7}
 8008406:	b087      	sub	sp, #28
 8008408:	af00      	add	r7, sp, #0
 800840a:	60f8      	str	r0, [r7, #12]
 800840c:	60b9      	str	r1, [r7, #8]
 800840e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	6a1b      	ldr	r3, [r3, #32]
 8008414:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	6a1b      	ldr	r3, [r3, #32]
 800841a:	f023 0201 	bic.w	r2, r3, #1
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	699b      	ldr	r3, [r3, #24]
 8008426:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800842e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	011b      	lsls	r3, r3, #4
 8008434:	693a      	ldr	r2, [r7, #16]
 8008436:	4313      	orrs	r3, r2
 8008438:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	f023 030a 	bic.w	r3, r3, #10
 8008440:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008442:	697a      	ldr	r2, [r7, #20]
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	4313      	orrs	r3, r2
 8008448:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	693a      	ldr	r2, [r7, #16]
 800844e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	697a      	ldr	r2, [r7, #20]
 8008454:	621a      	str	r2, [r3, #32]
}
 8008456:	bf00      	nop
 8008458:	371c      	adds	r7, #28
 800845a:	46bd      	mov	sp, r7
 800845c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008460:	4770      	bx	lr

08008462 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008462:	b480      	push	{r7}
 8008464:	b087      	sub	sp, #28
 8008466:	af00      	add	r7, sp, #0
 8008468:	60f8      	str	r0, [r7, #12]
 800846a:	60b9      	str	r1, [r7, #8]
 800846c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	6a1b      	ldr	r3, [r3, #32]
 8008472:	f023 0210 	bic.w	r2, r3, #16
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	699b      	ldr	r3, [r3, #24]
 800847e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	6a1b      	ldr	r3, [r3, #32]
 8008484:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800848c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	031b      	lsls	r3, r3, #12
 8008492:	697a      	ldr	r2, [r7, #20]
 8008494:	4313      	orrs	r3, r2
 8008496:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800849e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	011b      	lsls	r3, r3, #4
 80084a4:	693a      	ldr	r2, [r7, #16]
 80084a6:	4313      	orrs	r3, r2
 80084a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	697a      	ldr	r2, [r7, #20]
 80084ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	693a      	ldr	r2, [r7, #16]
 80084b4:	621a      	str	r2, [r3, #32]
}
 80084b6:	bf00      	nop
 80084b8:	371c      	adds	r7, #28
 80084ba:	46bd      	mov	sp, r7
 80084bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c0:	4770      	bx	lr

080084c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80084c2:	b480      	push	{r7}
 80084c4:	b085      	sub	sp, #20
 80084c6:	af00      	add	r7, sp, #0
 80084c8:	6078      	str	r0, [r7, #4]
 80084ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	689b      	ldr	r3, [r3, #8]
 80084d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80084da:	683a      	ldr	r2, [r7, #0]
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	4313      	orrs	r3, r2
 80084e0:	f043 0307 	orr.w	r3, r3, #7
 80084e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	68fa      	ldr	r2, [r7, #12]
 80084ea:	609a      	str	r2, [r3, #8]
}
 80084ec:	bf00      	nop
 80084ee:	3714      	adds	r7, #20
 80084f0:	46bd      	mov	sp, r7
 80084f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f6:	4770      	bx	lr

080084f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b087      	sub	sp, #28
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	60f8      	str	r0, [r7, #12]
 8008500:	60b9      	str	r1, [r7, #8]
 8008502:	607a      	str	r2, [r7, #4]
 8008504:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	689b      	ldr	r3, [r3, #8]
 800850a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800850c:	697b      	ldr	r3, [r7, #20]
 800850e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008512:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	021a      	lsls	r2, r3, #8
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	431a      	orrs	r2, r3
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	4313      	orrs	r3, r2
 8008520:	697a      	ldr	r2, [r7, #20]
 8008522:	4313      	orrs	r3, r2
 8008524:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	697a      	ldr	r2, [r7, #20]
 800852a:	609a      	str	r2, [r3, #8]
}
 800852c:	bf00      	nop
 800852e:	371c      	adds	r7, #28
 8008530:	46bd      	mov	sp, r7
 8008532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008536:	4770      	bx	lr

08008538 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008538:	b480      	push	{r7}
 800853a:	b087      	sub	sp, #28
 800853c:	af00      	add	r7, sp, #0
 800853e:	60f8      	str	r0, [r7, #12]
 8008540:	60b9      	str	r1, [r7, #8]
 8008542:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	f003 031f 	and.w	r3, r3, #31
 800854a:	2201      	movs	r2, #1
 800854c:	fa02 f303 	lsl.w	r3, r2, r3
 8008550:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	6a1a      	ldr	r2, [r3, #32]
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	43db      	mvns	r3, r3
 800855a:	401a      	ands	r2, r3
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	6a1a      	ldr	r2, [r3, #32]
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	f003 031f 	and.w	r3, r3, #31
 800856a:	6879      	ldr	r1, [r7, #4]
 800856c:	fa01 f303 	lsl.w	r3, r1, r3
 8008570:	431a      	orrs	r2, r3
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	621a      	str	r2, [r3, #32]
}
 8008576:	bf00      	nop
 8008578:	371c      	adds	r7, #28
 800857a:	46bd      	mov	sp, r7
 800857c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008580:	4770      	bx	lr
	...

08008584 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008584:	b480      	push	{r7}
 8008586:	b085      	sub	sp, #20
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
 800858c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008594:	2b01      	cmp	r3, #1
 8008596:	d101      	bne.n	800859c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008598:	2302      	movs	r3, #2
 800859a:	e05a      	b.n	8008652 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2201      	movs	r2, #1
 80085a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2202      	movs	r2, #2
 80085a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	685b      	ldr	r3, [r3, #4]
 80085b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	689b      	ldr	r3, [r3, #8]
 80085ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	68fa      	ldr	r2, [r7, #12]
 80085ca:	4313      	orrs	r3, r2
 80085cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	68fa      	ldr	r2, [r7, #12]
 80085d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4a21      	ldr	r2, [pc, #132]	; (8008660 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d022      	beq.n	8008626 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085e8:	d01d      	beq.n	8008626 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	4a1d      	ldr	r2, [pc, #116]	; (8008664 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80085f0:	4293      	cmp	r3, r2
 80085f2:	d018      	beq.n	8008626 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	4a1b      	ldr	r2, [pc, #108]	; (8008668 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d013      	beq.n	8008626 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	4a1a      	ldr	r2, [pc, #104]	; (800866c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008604:	4293      	cmp	r3, r2
 8008606:	d00e      	beq.n	8008626 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4a18      	ldr	r2, [pc, #96]	; (8008670 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800860e:	4293      	cmp	r3, r2
 8008610:	d009      	beq.n	8008626 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	4a17      	ldr	r2, [pc, #92]	; (8008674 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008618:	4293      	cmp	r3, r2
 800861a:	d004      	beq.n	8008626 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4a15      	ldr	r2, [pc, #84]	; (8008678 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d10c      	bne.n	8008640 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800862c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	685b      	ldr	r3, [r3, #4]
 8008632:	68ba      	ldr	r2, [r7, #8]
 8008634:	4313      	orrs	r3, r2
 8008636:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	68ba      	ldr	r2, [r7, #8]
 800863e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2201      	movs	r2, #1
 8008644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2200      	movs	r2, #0
 800864c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008650:	2300      	movs	r3, #0
}
 8008652:	4618      	mov	r0, r3
 8008654:	3714      	adds	r7, #20
 8008656:	46bd      	mov	sp, r7
 8008658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865c:	4770      	bx	lr
 800865e:	bf00      	nop
 8008660:	40010000 	.word	0x40010000
 8008664:	40000400 	.word	0x40000400
 8008668:	40000800 	.word	0x40000800
 800866c:	40000c00 	.word	0x40000c00
 8008670:	40010400 	.word	0x40010400
 8008674:	40014000 	.word	0x40014000
 8008678:	40001800 	.word	0x40001800

0800867c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800867c:	b480      	push	{r7}
 800867e:	b083      	sub	sp, #12
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008684:	bf00      	nop
 8008686:	370c      	adds	r7, #12
 8008688:	46bd      	mov	sp, r7
 800868a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868e:	4770      	bx	lr

08008690 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008690:	b480      	push	{r7}
 8008692:	b083      	sub	sp, #12
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008698:	bf00      	nop
 800869a:	370c      	adds	r7, #12
 800869c:	46bd      	mov	sp, r7
 800869e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a2:	4770      	bx	lr

080086a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b082      	sub	sp, #8
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d101      	bne.n	80086b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80086b2:	2301      	movs	r3, #1
 80086b4:	e03f      	b.n	8008736 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086bc:	b2db      	uxtb	r3, r3
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d106      	bne.n	80086d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2200      	movs	r2, #0
 80086c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f7fa f800 	bl	80026d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2224      	movs	r2, #36	; 0x24
 80086d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	68da      	ldr	r2, [r3, #12]
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80086e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f000 fe81 	bl	80093f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	691a      	ldr	r2, [r3, #16]
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80086fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	695a      	ldr	r2, [r3, #20]
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800870c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	68da      	ldr	r2, [r3, #12]
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800871c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2200      	movs	r2, #0
 8008722:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2220      	movs	r2, #32
 8008728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2220      	movs	r2, #32
 8008730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008734:	2300      	movs	r3, #0
}
 8008736:	4618      	mov	r0, r3
 8008738:	3708      	adds	r7, #8
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}

0800873e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800873e:	b580      	push	{r7, lr}
 8008740:	b08a      	sub	sp, #40	; 0x28
 8008742:	af02      	add	r7, sp, #8
 8008744:	60f8      	str	r0, [r7, #12]
 8008746:	60b9      	str	r1, [r7, #8]
 8008748:	603b      	str	r3, [r7, #0]
 800874a:	4613      	mov	r3, r2
 800874c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800874e:	2300      	movs	r3, #0
 8008750:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008758:	b2db      	uxtb	r3, r3
 800875a:	2b20      	cmp	r3, #32
 800875c:	d17c      	bne.n	8008858 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d002      	beq.n	800876a <HAL_UART_Transmit+0x2c>
 8008764:	88fb      	ldrh	r3, [r7, #6]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d101      	bne.n	800876e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800876a:	2301      	movs	r3, #1
 800876c:	e075      	b.n	800885a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008774:	2b01      	cmp	r3, #1
 8008776:	d101      	bne.n	800877c <HAL_UART_Transmit+0x3e>
 8008778:	2302      	movs	r3, #2
 800877a:	e06e      	b.n	800885a <HAL_UART_Transmit+0x11c>
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	2201      	movs	r2, #1
 8008780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	2200      	movs	r2, #0
 8008788:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	2221      	movs	r2, #33	; 0x21
 800878e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008792:	f7fa f95b 	bl	8002a4c <HAL_GetTick>
 8008796:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	88fa      	ldrh	r2, [r7, #6]
 800879c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	88fa      	ldrh	r2, [r7, #6]
 80087a2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	689b      	ldr	r3, [r3, #8]
 80087a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087ac:	d108      	bne.n	80087c0 <HAL_UART_Transmit+0x82>
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	691b      	ldr	r3, [r3, #16]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d104      	bne.n	80087c0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80087b6:	2300      	movs	r3, #0
 80087b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	61bb      	str	r3, [r7, #24]
 80087be:	e003      	b.n	80087c8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80087c4:	2300      	movs	r3, #0
 80087c6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	2200      	movs	r2, #0
 80087cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80087d0:	e02a      	b.n	8008828 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	9300      	str	r3, [sp, #0]
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	2200      	movs	r2, #0
 80087da:	2180      	movs	r1, #128	; 0x80
 80087dc:	68f8      	ldr	r0, [r7, #12]
 80087de:	f000 fbc1 	bl	8008f64 <UART_WaitOnFlagUntilTimeout>
 80087e2:	4603      	mov	r3, r0
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d001      	beq.n	80087ec <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80087e8:	2303      	movs	r3, #3
 80087ea:	e036      	b.n	800885a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80087ec:	69fb      	ldr	r3, [r7, #28]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d10b      	bne.n	800880a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80087f2:	69bb      	ldr	r3, [r7, #24]
 80087f4:	881b      	ldrh	r3, [r3, #0]
 80087f6:	461a      	mov	r2, r3
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008800:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008802:	69bb      	ldr	r3, [r7, #24]
 8008804:	3302      	adds	r3, #2
 8008806:	61bb      	str	r3, [r7, #24]
 8008808:	e007      	b.n	800881a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800880a:	69fb      	ldr	r3, [r7, #28]
 800880c:	781a      	ldrb	r2, [r3, #0]
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008814:	69fb      	ldr	r3, [r7, #28]
 8008816:	3301      	adds	r3, #1
 8008818:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800881e:	b29b      	uxth	r3, r3
 8008820:	3b01      	subs	r3, #1
 8008822:	b29a      	uxth	r2, r3
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800882c:	b29b      	uxth	r3, r3
 800882e:	2b00      	cmp	r3, #0
 8008830:	d1cf      	bne.n	80087d2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	9300      	str	r3, [sp, #0]
 8008836:	697b      	ldr	r3, [r7, #20]
 8008838:	2200      	movs	r2, #0
 800883a:	2140      	movs	r1, #64	; 0x40
 800883c:	68f8      	ldr	r0, [r7, #12]
 800883e:	f000 fb91 	bl	8008f64 <UART_WaitOnFlagUntilTimeout>
 8008842:	4603      	mov	r3, r0
 8008844:	2b00      	cmp	r3, #0
 8008846:	d001      	beq.n	800884c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008848:	2303      	movs	r3, #3
 800884a:	e006      	b.n	800885a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	2220      	movs	r2, #32
 8008850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008854:	2300      	movs	r3, #0
 8008856:	e000      	b.n	800885a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008858:	2302      	movs	r3, #2
  }
}
 800885a:	4618      	mov	r0, r3
 800885c:	3720      	adds	r7, #32
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}

08008862 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008862:	b580      	push	{r7, lr}
 8008864:	b08a      	sub	sp, #40	; 0x28
 8008866:	af02      	add	r7, sp, #8
 8008868:	60f8      	str	r0, [r7, #12]
 800886a:	60b9      	str	r1, [r7, #8]
 800886c:	603b      	str	r3, [r7, #0]
 800886e:	4613      	mov	r3, r2
 8008870:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008872:	2300      	movs	r3, #0
 8008874:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800887c:	b2db      	uxtb	r3, r3
 800887e:	2b20      	cmp	r3, #32
 8008880:	f040 808c 	bne.w	800899c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d002      	beq.n	8008890 <HAL_UART_Receive+0x2e>
 800888a:	88fb      	ldrh	r3, [r7, #6]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d101      	bne.n	8008894 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8008890:	2301      	movs	r3, #1
 8008892:	e084      	b.n	800899e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800889a:	2b01      	cmp	r3, #1
 800889c:	d101      	bne.n	80088a2 <HAL_UART_Receive+0x40>
 800889e:	2302      	movs	r3, #2
 80088a0:	e07d      	b.n	800899e <HAL_UART_Receive+0x13c>
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	2201      	movs	r2, #1
 80088a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2200      	movs	r2, #0
 80088ae:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	2222      	movs	r2, #34	; 0x22
 80088b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	2200      	movs	r2, #0
 80088bc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80088be:	f7fa f8c5 	bl	8002a4c <HAL_GetTick>
 80088c2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	88fa      	ldrh	r2, [r7, #6]
 80088c8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	88fa      	ldrh	r2, [r7, #6]
 80088ce:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	689b      	ldr	r3, [r3, #8]
 80088d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088d8:	d108      	bne.n	80088ec <HAL_UART_Receive+0x8a>
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	691b      	ldr	r3, [r3, #16]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d104      	bne.n	80088ec <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80088e2:	2300      	movs	r3, #0
 80088e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	61bb      	str	r3, [r7, #24]
 80088ea:	e003      	b.n	80088f4 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80088f0:	2300      	movs	r3, #0
 80088f2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	2200      	movs	r2, #0
 80088f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80088fc:	e043      	b.n	8008986 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	9300      	str	r3, [sp, #0]
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	2200      	movs	r2, #0
 8008906:	2120      	movs	r1, #32
 8008908:	68f8      	ldr	r0, [r7, #12]
 800890a:	f000 fb2b 	bl	8008f64 <UART_WaitOnFlagUntilTimeout>
 800890e:	4603      	mov	r3, r0
 8008910:	2b00      	cmp	r3, #0
 8008912:	d001      	beq.n	8008918 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8008914:	2303      	movs	r3, #3
 8008916:	e042      	b.n	800899e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8008918:	69fb      	ldr	r3, [r7, #28]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d10c      	bne.n	8008938 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	685b      	ldr	r3, [r3, #4]
 8008924:	b29b      	uxth	r3, r3
 8008926:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800892a:	b29a      	uxth	r2, r3
 800892c:	69bb      	ldr	r3, [r7, #24]
 800892e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008930:	69bb      	ldr	r3, [r7, #24]
 8008932:	3302      	adds	r3, #2
 8008934:	61bb      	str	r3, [r7, #24]
 8008936:	e01f      	b.n	8008978 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	689b      	ldr	r3, [r3, #8]
 800893c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008940:	d007      	beq.n	8008952 <HAL_UART_Receive+0xf0>
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	689b      	ldr	r3, [r3, #8]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d10a      	bne.n	8008960 <HAL_UART_Receive+0xfe>
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	691b      	ldr	r3, [r3, #16]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d106      	bne.n	8008960 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	685b      	ldr	r3, [r3, #4]
 8008958:	b2da      	uxtb	r2, r3
 800895a:	69fb      	ldr	r3, [r7, #28]
 800895c:	701a      	strb	r2, [r3, #0]
 800895e:	e008      	b.n	8008972 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	685b      	ldr	r3, [r3, #4]
 8008966:	b2db      	uxtb	r3, r3
 8008968:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800896c:	b2da      	uxtb	r2, r3
 800896e:	69fb      	ldr	r3, [r7, #28]
 8008970:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8008972:	69fb      	ldr	r3, [r7, #28]
 8008974:	3301      	adds	r3, #1
 8008976:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800897c:	b29b      	uxth	r3, r3
 800897e:	3b01      	subs	r3, #1
 8008980:	b29a      	uxth	r2, r3
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800898a:	b29b      	uxth	r3, r3
 800898c:	2b00      	cmp	r3, #0
 800898e:	d1b6      	bne.n	80088fe <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	2220      	movs	r2, #32
 8008994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8008998:	2300      	movs	r3, #0
 800899a:	e000      	b.n	800899e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800899c:	2302      	movs	r3, #2
  }
}
 800899e:	4618      	mov	r0, r3
 80089a0:	3720      	adds	r7, #32
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}

080089a6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80089a6:	b580      	push	{r7, lr}
 80089a8:	b084      	sub	sp, #16
 80089aa:	af00      	add	r7, sp, #0
 80089ac:	60f8      	str	r0, [r7, #12]
 80089ae:	60b9      	str	r1, [r7, #8]
 80089b0:	4613      	mov	r3, r2
 80089b2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80089ba:	b2db      	uxtb	r3, r3
 80089bc:	2b20      	cmp	r3, #32
 80089be:	d11d      	bne.n	80089fc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d002      	beq.n	80089cc <HAL_UART_Receive_IT+0x26>
 80089c6:	88fb      	ldrh	r3, [r7, #6]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d101      	bne.n	80089d0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80089cc:	2301      	movs	r3, #1
 80089ce:	e016      	b.n	80089fe <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80089d6:	2b01      	cmp	r3, #1
 80089d8:	d101      	bne.n	80089de <HAL_UART_Receive_IT+0x38>
 80089da:	2302      	movs	r3, #2
 80089dc:	e00f      	b.n	80089fe <HAL_UART_Receive_IT+0x58>
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	2201      	movs	r2, #1
 80089e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	2200      	movs	r2, #0
 80089ea:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80089ec:	88fb      	ldrh	r3, [r7, #6]
 80089ee:	461a      	mov	r2, r3
 80089f0:	68b9      	ldr	r1, [r7, #8]
 80089f2:	68f8      	ldr	r0, [r7, #12]
 80089f4:	f000 fb24 	bl	8009040 <UART_Start_Receive_IT>
 80089f8:	4603      	mov	r3, r0
 80089fa:	e000      	b.n	80089fe <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80089fc:	2302      	movs	r3, #2
  }
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3710      	adds	r7, #16
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}
	...

08008a08 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b0ba      	sub	sp, #232	; 0xe8
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	68db      	ldr	r3, [r3, #12]
 8008a20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	695b      	ldr	r3, [r3, #20]
 8008a2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008a34:	2300      	movs	r3, #0
 8008a36:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008a3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a3e:	f003 030f 	and.w	r3, r3, #15
 8008a42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008a46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d10f      	bne.n	8008a6e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008a4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a52:	f003 0320 	and.w	r3, r3, #32
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d009      	beq.n	8008a6e <HAL_UART_IRQHandler+0x66>
 8008a5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a5e:	f003 0320 	and.w	r3, r3, #32
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d003      	beq.n	8008a6e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f000 fc07 	bl	800927a <UART_Receive_IT>
      return;
 8008a6c:	e256      	b.n	8008f1c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008a6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	f000 80de 	beq.w	8008c34 <HAL_UART_IRQHandler+0x22c>
 8008a78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a7c:	f003 0301 	and.w	r3, r3, #1
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d106      	bne.n	8008a92 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008a84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a88:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	f000 80d1 	beq.w	8008c34 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008a92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a96:	f003 0301 	and.w	r3, r3, #1
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d00b      	beq.n	8008ab6 <HAL_UART_IRQHandler+0xae>
 8008a9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d005      	beq.n	8008ab6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aae:	f043 0201 	orr.w	r2, r3, #1
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008ab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008aba:	f003 0304 	and.w	r3, r3, #4
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d00b      	beq.n	8008ada <HAL_UART_IRQHandler+0xd2>
 8008ac2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008ac6:	f003 0301 	and.w	r3, r3, #1
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d005      	beq.n	8008ada <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ad2:	f043 0202 	orr.w	r2, r3, #2
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008ada:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ade:	f003 0302 	and.w	r3, r3, #2
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d00b      	beq.n	8008afe <HAL_UART_IRQHandler+0xf6>
 8008ae6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008aea:	f003 0301 	and.w	r3, r3, #1
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d005      	beq.n	8008afe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008af6:	f043 0204 	orr.w	r2, r3, #4
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008afe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b02:	f003 0308 	and.w	r3, r3, #8
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d011      	beq.n	8008b2e <HAL_UART_IRQHandler+0x126>
 8008b0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b0e:	f003 0320 	and.w	r3, r3, #32
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d105      	bne.n	8008b22 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008b16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008b1a:	f003 0301 	and.w	r3, r3, #1
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d005      	beq.n	8008b2e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b26:	f043 0208 	orr.w	r2, r3, #8
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	f000 81ed 	beq.w	8008f12 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008b38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b3c:	f003 0320 	and.w	r3, r3, #32
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d008      	beq.n	8008b56 <HAL_UART_IRQHandler+0x14e>
 8008b44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b48:	f003 0320 	and.w	r3, r3, #32
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d002      	beq.n	8008b56 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f000 fb92 	bl	800927a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	695b      	ldr	r3, [r3, #20]
 8008b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b60:	2b40      	cmp	r3, #64	; 0x40
 8008b62:	bf0c      	ite	eq
 8008b64:	2301      	moveq	r3, #1
 8008b66:	2300      	movne	r3, #0
 8008b68:	b2db      	uxtb	r3, r3
 8008b6a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b72:	f003 0308 	and.w	r3, r3, #8
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d103      	bne.n	8008b82 <HAL_UART_IRQHandler+0x17a>
 8008b7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d04f      	beq.n	8008c22 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f000 fa9a 	bl	80090bc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	695b      	ldr	r3, [r3, #20]
 8008b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b92:	2b40      	cmp	r3, #64	; 0x40
 8008b94:	d141      	bne.n	8008c1a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	3314      	adds	r3, #20
 8008b9c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ba0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008ba4:	e853 3f00 	ldrex	r3, [r3]
 8008ba8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008bac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008bb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008bb4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	3314      	adds	r3, #20
 8008bbe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008bc2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008bc6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008bce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008bd2:	e841 2300 	strex	r3, r2, [r1]
 8008bd6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008bda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d1d9      	bne.n	8008b96 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d013      	beq.n	8008c12 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bee:	4a7d      	ldr	r2, [pc, #500]	; (8008de4 <HAL_UART_IRQHandler+0x3dc>)
 8008bf0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f7fa f9a4 	bl	8002f44 <HAL_DMA_Abort_IT>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d016      	beq.n	8008c30 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c08:	687a      	ldr	r2, [r7, #4]
 8008c0a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008c0c:	4610      	mov	r0, r2
 8008c0e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c10:	e00e      	b.n	8008c30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f000 f990 	bl	8008f38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c18:	e00a      	b.n	8008c30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f000 f98c 	bl	8008f38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c20:	e006      	b.n	8008c30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f000 f988 	bl	8008f38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008c2e:	e170      	b.n	8008f12 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c30:	bf00      	nop
    return;
 8008c32:	e16e      	b.n	8008f12 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c38:	2b01      	cmp	r3, #1
 8008c3a:	f040 814a 	bne.w	8008ed2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008c3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c42:	f003 0310 	and.w	r3, r3, #16
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	f000 8143 	beq.w	8008ed2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008c4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c50:	f003 0310 	and.w	r3, r3, #16
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	f000 813c 	beq.w	8008ed2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	60bb      	str	r3, [r7, #8]
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	60bb      	str	r3, [r7, #8]
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	685b      	ldr	r3, [r3, #4]
 8008c6c:	60bb      	str	r3, [r7, #8]
 8008c6e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	695b      	ldr	r3, [r3, #20]
 8008c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c7a:	2b40      	cmp	r3, #64	; 0x40
 8008c7c:	f040 80b4 	bne.w	8008de8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	685b      	ldr	r3, [r3, #4]
 8008c88:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008c8c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	f000 8140 	beq.w	8008f16 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008c9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	f080 8139 	bcs.w	8008f16 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008caa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cb0:	69db      	ldr	r3, [r3, #28]
 8008cb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008cb6:	f000 8088 	beq.w	8008dca <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	330c      	adds	r3, #12
 8008cc0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cc4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008cc8:	e853 3f00 	ldrex	r3, [r3]
 8008ccc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008cd0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008cd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008cd8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	330c      	adds	r3, #12
 8008ce2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008ce6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008cea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008cf2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008cf6:	e841 2300 	strex	r3, r2, [r1]
 8008cfa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008cfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d1d9      	bne.n	8008cba <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	3314      	adds	r3, #20
 8008d0c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d10:	e853 3f00 	ldrex	r3, [r3]
 8008d14:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008d16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008d18:	f023 0301 	bic.w	r3, r3, #1
 8008d1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	3314      	adds	r3, #20
 8008d26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008d2a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008d2e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d30:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008d32:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008d36:	e841 2300 	strex	r3, r2, [r1]
 8008d3a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008d3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d1e1      	bne.n	8008d06 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	3314      	adds	r3, #20
 8008d48:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008d4c:	e853 3f00 	ldrex	r3, [r3]
 8008d50:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008d52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	3314      	adds	r3, #20
 8008d62:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008d66:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008d68:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d6a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008d6c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008d6e:	e841 2300 	strex	r3, r2, [r1]
 8008d72:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008d74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d1e3      	bne.n	8008d42 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2220      	movs	r2, #32
 8008d7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2200      	movs	r2, #0
 8008d86:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	330c      	adds	r3, #12
 8008d8e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d92:	e853 3f00 	ldrex	r3, [r3]
 8008d96:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008d98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d9a:	f023 0310 	bic.w	r3, r3, #16
 8008d9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	330c      	adds	r3, #12
 8008da8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008dac:	65ba      	str	r2, [r7, #88]	; 0x58
 8008dae:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008db0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008db2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008db4:	e841 2300 	strex	r3, r2, [r1]
 8008db8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008dba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d1e3      	bne.n	8008d88 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	f7fa f84d 	bl	8002e64 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008dd2:	b29b      	uxth	r3, r3
 8008dd4:	1ad3      	subs	r3, r2, r3
 8008dd6:	b29b      	uxth	r3, r3
 8008dd8:	4619      	mov	r1, r3
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f000 f8b6 	bl	8008f4c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008de0:	e099      	b.n	8008f16 <HAL_UART_IRQHandler+0x50e>
 8008de2:	bf00      	nop
 8008de4:	08009183 	.word	0x08009183
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008df0:	b29b      	uxth	r3, r3
 8008df2:	1ad3      	subs	r3, r2, r3
 8008df4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008dfc:	b29b      	uxth	r3, r3
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	f000 808b 	beq.w	8008f1a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008e04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	f000 8086 	beq.w	8008f1a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	330c      	adds	r3, #12
 8008e14:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e18:	e853 3f00 	ldrex	r3, [r3]
 8008e1c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e20:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008e24:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	330c      	adds	r3, #12
 8008e2e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008e32:	647a      	str	r2, [r7, #68]	; 0x44
 8008e34:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e36:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008e38:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008e3a:	e841 2300 	strex	r3, r2, [r1]
 8008e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008e40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d1e3      	bne.n	8008e0e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	3314      	adds	r3, #20
 8008e4c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e50:	e853 3f00 	ldrex	r3, [r3]
 8008e54:	623b      	str	r3, [r7, #32]
   return(result);
 8008e56:	6a3b      	ldr	r3, [r7, #32]
 8008e58:	f023 0301 	bic.w	r3, r3, #1
 8008e5c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	3314      	adds	r3, #20
 8008e66:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008e6a:	633a      	str	r2, [r7, #48]	; 0x30
 8008e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008e70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e72:	e841 2300 	strex	r3, r2, [r1]
 8008e76:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d1e3      	bne.n	8008e46 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2220      	movs	r2, #32
 8008e82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2200      	movs	r2, #0
 8008e8a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	330c      	adds	r3, #12
 8008e92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	e853 3f00 	ldrex	r3, [r3]
 8008e9a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	f023 0310 	bic.w	r3, r3, #16
 8008ea2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	330c      	adds	r3, #12
 8008eac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008eb0:	61fa      	str	r2, [r7, #28]
 8008eb2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eb4:	69b9      	ldr	r1, [r7, #24]
 8008eb6:	69fa      	ldr	r2, [r7, #28]
 8008eb8:	e841 2300 	strex	r3, r2, [r1]
 8008ebc:	617b      	str	r3, [r7, #20]
   return(result);
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d1e3      	bne.n	8008e8c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008ec4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008ec8:	4619      	mov	r1, r3
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f000 f83e 	bl	8008f4c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008ed0:	e023      	b.n	8008f1a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008ed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d009      	beq.n	8008ef2 <HAL_UART_IRQHandler+0x4ea>
 8008ede:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d003      	beq.n	8008ef2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f000 f95d 	bl	80091aa <UART_Transmit_IT>
    return;
 8008ef0:	e014      	b.n	8008f1c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008ef2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d00e      	beq.n	8008f1c <HAL_UART_IRQHandler+0x514>
 8008efe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d008      	beq.n	8008f1c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f000 f99d 	bl	800924a <UART_EndTransmit_IT>
    return;
 8008f10:	e004      	b.n	8008f1c <HAL_UART_IRQHandler+0x514>
    return;
 8008f12:	bf00      	nop
 8008f14:	e002      	b.n	8008f1c <HAL_UART_IRQHandler+0x514>
      return;
 8008f16:	bf00      	nop
 8008f18:	e000      	b.n	8008f1c <HAL_UART_IRQHandler+0x514>
      return;
 8008f1a:	bf00      	nop
  }
}
 8008f1c:	37e8      	adds	r7, #232	; 0xe8
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}
 8008f22:	bf00      	nop

08008f24 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008f24:	b480      	push	{r7}
 8008f26:	b083      	sub	sp, #12
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008f2c:	bf00      	nop
 8008f2e:	370c      	adds	r7, #12
 8008f30:	46bd      	mov	sp, r7
 8008f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f36:	4770      	bx	lr

08008f38 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b083      	sub	sp, #12
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008f40:	bf00      	nop
 8008f42:	370c      	adds	r7, #12
 8008f44:	46bd      	mov	sp, r7
 8008f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4a:	4770      	bx	lr

08008f4c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b083      	sub	sp, #12
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
 8008f54:	460b      	mov	r3, r1
 8008f56:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008f58:	bf00      	nop
 8008f5a:	370c      	adds	r7, #12
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f62:	4770      	bx	lr

08008f64 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b090      	sub	sp, #64	; 0x40
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	60f8      	str	r0, [r7, #12]
 8008f6c:	60b9      	str	r1, [r7, #8]
 8008f6e:	603b      	str	r3, [r7, #0]
 8008f70:	4613      	mov	r3, r2
 8008f72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f74:	e050      	b.n	8009018 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f7c:	d04c      	beq.n	8009018 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008f7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d007      	beq.n	8008f94 <UART_WaitOnFlagUntilTimeout+0x30>
 8008f84:	f7f9 fd62 	bl	8002a4c <HAL_GetTick>
 8008f88:	4602      	mov	r2, r0
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	1ad3      	subs	r3, r2, r3
 8008f8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f90:	429a      	cmp	r2, r3
 8008f92:	d241      	bcs.n	8009018 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	330c      	adds	r3, #12
 8008f9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f9e:	e853 3f00 	ldrex	r3, [r3]
 8008fa2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fa6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008faa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	330c      	adds	r3, #12
 8008fb2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008fb4:	637a      	str	r2, [r7, #52]	; 0x34
 8008fb6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fb8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008fba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008fbc:	e841 2300 	strex	r3, r2, [r1]
 8008fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d1e5      	bne.n	8008f94 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	3314      	adds	r3, #20
 8008fce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fd0:	697b      	ldr	r3, [r7, #20]
 8008fd2:	e853 3f00 	ldrex	r3, [r3]
 8008fd6:	613b      	str	r3, [r7, #16]
   return(result);
 8008fd8:	693b      	ldr	r3, [r7, #16]
 8008fda:	f023 0301 	bic.w	r3, r3, #1
 8008fde:	63bb      	str	r3, [r7, #56]	; 0x38
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	3314      	adds	r3, #20
 8008fe6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008fe8:	623a      	str	r2, [r7, #32]
 8008fea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fec:	69f9      	ldr	r1, [r7, #28]
 8008fee:	6a3a      	ldr	r2, [r7, #32]
 8008ff0:	e841 2300 	strex	r3, r2, [r1]
 8008ff4:	61bb      	str	r3, [r7, #24]
   return(result);
 8008ff6:	69bb      	ldr	r3, [r7, #24]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d1e5      	bne.n	8008fc8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	2220      	movs	r2, #32
 8009000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	2220      	movs	r2, #32
 8009008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	2200      	movs	r2, #0
 8009010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009014:	2303      	movs	r3, #3
 8009016:	e00f      	b.n	8009038 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	681a      	ldr	r2, [r3, #0]
 800901e:	68bb      	ldr	r3, [r7, #8]
 8009020:	4013      	ands	r3, r2
 8009022:	68ba      	ldr	r2, [r7, #8]
 8009024:	429a      	cmp	r2, r3
 8009026:	bf0c      	ite	eq
 8009028:	2301      	moveq	r3, #1
 800902a:	2300      	movne	r3, #0
 800902c:	b2db      	uxtb	r3, r3
 800902e:	461a      	mov	r2, r3
 8009030:	79fb      	ldrb	r3, [r7, #7]
 8009032:	429a      	cmp	r2, r3
 8009034:	d09f      	beq.n	8008f76 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009036:	2300      	movs	r3, #0
}
 8009038:	4618      	mov	r0, r3
 800903a:	3740      	adds	r7, #64	; 0x40
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}

08009040 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009040:	b480      	push	{r7}
 8009042:	b085      	sub	sp, #20
 8009044:	af00      	add	r7, sp, #0
 8009046:	60f8      	str	r0, [r7, #12]
 8009048:	60b9      	str	r1, [r7, #8]
 800904a:	4613      	mov	r3, r2
 800904c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	68ba      	ldr	r2, [r7, #8]
 8009052:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	88fa      	ldrh	r2, [r7, #6]
 8009058:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	88fa      	ldrh	r2, [r7, #6]
 800905e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	2200      	movs	r2, #0
 8009064:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	2222      	movs	r2, #34	; 0x22
 800906a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	2200      	movs	r2, #0
 8009072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	691b      	ldr	r3, [r3, #16]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d007      	beq.n	800908e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	68da      	ldr	r2, [r3, #12]
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800908c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	695a      	ldr	r2, [r3, #20]
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f042 0201 	orr.w	r2, r2, #1
 800909c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	68da      	ldr	r2, [r3, #12]
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f042 0220 	orr.w	r2, r2, #32
 80090ac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80090ae:	2300      	movs	r3, #0
}
 80090b0:	4618      	mov	r0, r3
 80090b2:	3714      	adds	r7, #20
 80090b4:	46bd      	mov	sp, r7
 80090b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ba:	4770      	bx	lr

080090bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80090bc:	b480      	push	{r7}
 80090be:	b095      	sub	sp, #84	; 0x54
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	330c      	adds	r3, #12
 80090ca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090ce:	e853 3f00 	ldrex	r3, [r3]
 80090d2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80090d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80090da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	330c      	adds	r3, #12
 80090e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80090e4:	643a      	str	r2, [r7, #64]	; 0x40
 80090e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80090ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80090ec:	e841 2300 	strex	r3, r2, [r1]
 80090f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80090f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d1e5      	bne.n	80090c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	3314      	adds	r3, #20
 80090fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009100:	6a3b      	ldr	r3, [r7, #32]
 8009102:	e853 3f00 	ldrex	r3, [r3]
 8009106:	61fb      	str	r3, [r7, #28]
   return(result);
 8009108:	69fb      	ldr	r3, [r7, #28]
 800910a:	f023 0301 	bic.w	r3, r3, #1
 800910e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	3314      	adds	r3, #20
 8009116:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009118:	62fa      	str	r2, [r7, #44]	; 0x2c
 800911a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800911c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800911e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009120:	e841 2300 	strex	r3, r2, [r1]
 8009124:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009128:	2b00      	cmp	r3, #0
 800912a:	d1e5      	bne.n	80090f8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009130:	2b01      	cmp	r3, #1
 8009132:	d119      	bne.n	8009168 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	330c      	adds	r3, #12
 800913a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	e853 3f00 	ldrex	r3, [r3]
 8009142:	60bb      	str	r3, [r7, #8]
   return(result);
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	f023 0310 	bic.w	r3, r3, #16
 800914a:	647b      	str	r3, [r7, #68]	; 0x44
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	330c      	adds	r3, #12
 8009152:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009154:	61ba      	str	r2, [r7, #24]
 8009156:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009158:	6979      	ldr	r1, [r7, #20]
 800915a:	69ba      	ldr	r2, [r7, #24]
 800915c:	e841 2300 	strex	r3, r2, [r1]
 8009160:	613b      	str	r3, [r7, #16]
   return(result);
 8009162:	693b      	ldr	r3, [r7, #16]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d1e5      	bne.n	8009134 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2220      	movs	r2, #32
 800916c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2200      	movs	r2, #0
 8009174:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009176:	bf00      	nop
 8009178:	3754      	adds	r7, #84	; 0x54
 800917a:	46bd      	mov	sp, r7
 800917c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009180:	4770      	bx	lr

08009182 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009182:	b580      	push	{r7, lr}
 8009184:	b084      	sub	sp, #16
 8009186:	af00      	add	r7, sp, #0
 8009188:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800918e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	2200      	movs	r2, #0
 8009194:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	2200      	movs	r2, #0
 800919a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800919c:	68f8      	ldr	r0, [r7, #12]
 800919e:	f7ff fecb 	bl	8008f38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80091a2:	bf00      	nop
 80091a4:	3710      	adds	r7, #16
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}

080091aa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80091aa:	b480      	push	{r7}
 80091ac:	b085      	sub	sp, #20
 80091ae:	af00      	add	r7, sp, #0
 80091b0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091b8:	b2db      	uxtb	r3, r3
 80091ba:	2b21      	cmp	r3, #33	; 0x21
 80091bc:	d13e      	bne.n	800923c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	689b      	ldr	r3, [r3, #8]
 80091c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091c6:	d114      	bne.n	80091f2 <UART_Transmit_IT+0x48>
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	691b      	ldr	r3, [r3, #16]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d110      	bne.n	80091f2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6a1b      	ldr	r3, [r3, #32]
 80091d4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	881b      	ldrh	r3, [r3, #0]
 80091da:	461a      	mov	r2, r3
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80091e4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	6a1b      	ldr	r3, [r3, #32]
 80091ea:	1c9a      	adds	r2, r3, #2
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	621a      	str	r2, [r3, #32]
 80091f0:	e008      	b.n	8009204 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6a1b      	ldr	r3, [r3, #32]
 80091f6:	1c59      	adds	r1, r3, #1
 80091f8:	687a      	ldr	r2, [r7, #4]
 80091fa:	6211      	str	r1, [r2, #32]
 80091fc:	781a      	ldrb	r2, [r3, #0]
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009208:	b29b      	uxth	r3, r3
 800920a:	3b01      	subs	r3, #1
 800920c:	b29b      	uxth	r3, r3
 800920e:	687a      	ldr	r2, [r7, #4]
 8009210:	4619      	mov	r1, r3
 8009212:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009214:	2b00      	cmp	r3, #0
 8009216:	d10f      	bne.n	8009238 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	68da      	ldr	r2, [r3, #12]
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009226:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	68da      	ldr	r2, [r3, #12]
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009236:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009238:	2300      	movs	r3, #0
 800923a:	e000      	b.n	800923e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800923c:	2302      	movs	r3, #2
  }
}
 800923e:	4618      	mov	r0, r3
 8009240:	3714      	adds	r7, #20
 8009242:	46bd      	mov	sp, r7
 8009244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009248:	4770      	bx	lr

0800924a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800924a:	b580      	push	{r7, lr}
 800924c:	b082      	sub	sp, #8
 800924e:	af00      	add	r7, sp, #0
 8009250:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	68da      	ldr	r2, [r3, #12]
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009260:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2220      	movs	r2, #32
 8009266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f7ff fe5a 	bl	8008f24 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009270:	2300      	movs	r3, #0
}
 8009272:	4618      	mov	r0, r3
 8009274:	3708      	adds	r7, #8
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}

0800927a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800927a:	b580      	push	{r7, lr}
 800927c:	b08c      	sub	sp, #48	; 0x30
 800927e:	af00      	add	r7, sp, #0
 8009280:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009288:	b2db      	uxtb	r3, r3
 800928a:	2b22      	cmp	r3, #34	; 0x22
 800928c:	f040 80ab 	bne.w	80093e6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	689b      	ldr	r3, [r3, #8]
 8009294:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009298:	d117      	bne.n	80092ca <UART_Receive_IT+0x50>
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	691b      	ldr	r3, [r3, #16]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d113      	bne.n	80092ca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80092a2:	2300      	movs	r3, #0
 80092a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092aa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	685b      	ldr	r3, [r3, #4]
 80092b2:	b29b      	uxth	r3, r3
 80092b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092b8:	b29a      	uxth	r2, r3
 80092ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092bc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092c2:	1c9a      	adds	r2, r3, #2
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	629a      	str	r2, [r3, #40]	; 0x28
 80092c8:	e026      	b.n	8009318 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092ce:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80092d0:	2300      	movs	r3, #0
 80092d2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	689b      	ldr	r3, [r3, #8]
 80092d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092dc:	d007      	beq.n	80092ee <UART_Receive_IT+0x74>
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	689b      	ldr	r3, [r3, #8]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d10a      	bne.n	80092fc <UART_Receive_IT+0x82>
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	691b      	ldr	r3, [r3, #16]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d106      	bne.n	80092fc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	685b      	ldr	r3, [r3, #4]
 80092f4:	b2da      	uxtb	r2, r3
 80092f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092f8:	701a      	strb	r2, [r3, #0]
 80092fa:	e008      	b.n	800930e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	685b      	ldr	r3, [r3, #4]
 8009302:	b2db      	uxtb	r3, r3
 8009304:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009308:	b2da      	uxtb	r2, r3
 800930a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800930c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009312:	1c5a      	adds	r2, r3, #1
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800931c:	b29b      	uxth	r3, r3
 800931e:	3b01      	subs	r3, #1
 8009320:	b29b      	uxth	r3, r3
 8009322:	687a      	ldr	r2, [r7, #4]
 8009324:	4619      	mov	r1, r3
 8009326:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009328:	2b00      	cmp	r3, #0
 800932a:	d15a      	bne.n	80093e2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	68da      	ldr	r2, [r3, #12]
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	f022 0220 	bic.w	r2, r2, #32
 800933a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	68da      	ldr	r2, [r3, #12]
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800934a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	695a      	ldr	r2, [r3, #20]
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f022 0201 	bic.w	r2, r2, #1
 800935a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2220      	movs	r2, #32
 8009360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009368:	2b01      	cmp	r3, #1
 800936a:	d135      	bne.n	80093d8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2200      	movs	r2, #0
 8009370:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	330c      	adds	r3, #12
 8009378:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800937a:	697b      	ldr	r3, [r7, #20]
 800937c:	e853 3f00 	ldrex	r3, [r3]
 8009380:	613b      	str	r3, [r7, #16]
   return(result);
 8009382:	693b      	ldr	r3, [r7, #16]
 8009384:	f023 0310 	bic.w	r3, r3, #16
 8009388:	627b      	str	r3, [r7, #36]	; 0x24
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	330c      	adds	r3, #12
 8009390:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009392:	623a      	str	r2, [r7, #32]
 8009394:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009396:	69f9      	ldr	r1, [r7, #28]
 8009398:	6a3a      	ldr	r2, [r7, #32]
 800939a:	e841 2300 	strex	r3, r2, [r1]
 800939e:	61bb      	str	r3, [r7, #24]
   return(result);
 80093a0:	69bb      	ldr	r3, [r7, #24]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d1e5      	bne.n	8009372 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f003 0310 	and.w	r3, r3, #16
 80093b0:	2b10      	cmp	r3, #16
 80093b2:	d10a      	bne.n	80093ca <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80093b4:	2300      	movs	r3, #0
 80093b6:	60fb      	str	r3, [r7, #12]
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	60fb      	str	r3, [r7, #12]
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	685b      	ldr	r3, [r3, #4]
 80093c6:	60fb      	str	r3, [r7, #12]
 80093c8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80093ce:	4619      	mov	r1, r3
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f7ff fdbb 	bl	8008f4c <HAL_UARTEx_RxEventCallback>
 80093d6:	e002      	b.n	80093de <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f7f7 facb 	bl	8000974 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80093de:	2300      	movs	r3, #0
 80093e0:	e002      	b.n	80093e8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80093e2:	2300      	movs	r3, #0
 80093e4:	e000      	b.n	80093e8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80093e6:	2302      	movs	r3, #2
  }
}
 80093e8:	4618      	mov	r0, r3
 80093ea:	3730      	adds	r7, #48	; 0x30
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bd80      	pop	{r7, pc}

080093f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80093f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80093f4:	b0c0      	sub	sp, #256	; 0x100
 80093f6:	af00      	add	r7, sp, #0
 80093f8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80093fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	691b      	ldr	r3, [r3, #16]
 8009404:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800940c:	68d9      	ldr	r1, [r3, #12]
 800940e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009412:	681a      	ldr	r2, [r3, #0]
 8009414:	ea40 0301 	orr.w	r3, r0, r1
 8009418:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800941a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800941e:	689a      	ldr	r2, [r3, #8]
 8009420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009424:	691b      	ldr	r3, [r3, #16]
 8009426:	431a      	orrs	r2, r3
 8009428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800942c:	695b      	ldr	r3, [r3, #20]
 800942e:	431a      	orrs	r2, r3
 8009430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009434:	69db      	ldr	r3, [r3, #28]
 8009436:	4313      	orrs	r3, r2
 8009438:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800943c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	68db      	ldr	r3, [r3, #12]
 8009444:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009448:	f021 010c 	bic.w	r1, r1, #12
 800944c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009450:	681a      	ldr	r2, [r3, #0]
 8009452:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009456:	430b      	orrs	r3, r1
 8009458:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800945a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	695b      	ldr	r3, [r3, #20]
 8009462:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009466:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800946a:	6999      	ldr	r1, [r3, #24]
 800946c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009470:	681a      	ldr	r2, [r3, #0]
 8009472:	ea40 0301 	orr.w	r3, r0, r1
 8009476:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800947c:	681a      	ldr	r2, [r3, #0]
 800947e:	4b8f      	ldr	r3, [pc, #572]	; (80096bc <UART_SetConfig+0x2cc>)
 8009480:	429a      	cmp	r2, r3
 8009482:	d005      	beq.n	8009490 <UART_SetConfig+0xa0>
 8009484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009488:	681a      	ldr	r2, [r3, #0]
 800948a:	4b8d      	ldr	r3, [pc, #564]	; (80096c0 <UART_SetConfig+0x2d0>)
 800948c:	429a      	cmp	r2, r3
 800948e:	d104      	bne.n	800949a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009490:	f7fd fb78 	bl	8006b84 <HAL_RCC_GetPCLK2Freq>
 8009494:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009498:	e003      	b.n	80094a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800949a:	f7fd fb5f 	bl	8006b5c <HAL_RCC_GetPCLK1Freq>
 800949e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80094a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094a6:	69db      	ldr	r3, [r3, #28]
 80094a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094ac:	f040 810c 	bne.w	80096c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80094b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80094b4:	2200      	movs	r2, #0
 80094b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80094ba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80094be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80094c2:	4622      	mov	r2, r4
 80094c4:	462b      	mov	r3, r5
 80094c6:	1891      	adds	r1, r2, r2
 80094c8:	65b9      	str	r1, [r7, #88]	; 0x58
 80094ca:	415b      	adcs	r3, r3
 80094cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80094ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80094d2:	4621      	mov	r1, r4
 80094d4:	eb12 0801 	adds.w	r8, r2, r1
 80094d8:	4629      	mov	r1, r5
 80094da:	eb43 0901 	adc.w	r9, r3, r1
 80094de:	f04f 0200 	mov.w	r2, #0
 80094e2:	f04f 0300 	mov.w	r3, #0
 80094e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80094ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80094ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80094f2:	4690      	mov	r8, r2
 80094f4:	4699      	mov	r9, r3
 80094f6:	4623      	mov	r3, r4
 80094f8:	eb18 0303 	adds.w	r3, r8, r3
 80094fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009500:	462b      	mov	r3, r5
 8009502:	eb49 0303 	adc.w	r3, r9, r3
 8009506:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800950a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800950e:	685b      	ldr	r3, [r3, #4]
 8009510:	2200      	movs	r2, #0
 8009512:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009516:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800951a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800951e:	460b      	mov	r3, r1
 8009520:	18db      	adds	r3, r3, r3
 8009522:	653b      	str	r3, [r7, #80]	; 0x50
 8009524:	4613      	mov	r3, r2
 8009526:	eb42 0303 	adc.w	r3, r2, r3
 800952a:	657b      	str	r3, [r7, #84]	; 0x54
 800952c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009530:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009534:	f7f6 feac 	bl	8000290 <__aeabi_uldivmod>
 8009538:	4602      	mov	r2, r0
 800953a:	460b      	mov	r3, r1
 800953c:	4b61      	ldr	r3, [pc, #388]	; (80096c4 <UART_SetConfig+0x2d4>)
 800953e:	fba3 2302 	umull	r2, r3, r3, r2
 8009542:	095b      	lsrs	r3, r3, #5
 8009544:	011c      	lsls	r4, r3, #4
 8009546:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800954a:	2200      	movs	r2, #0
 800954c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009550:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009554:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009558:	4642      	mov	r2, r8
 800955a:	464b      	mov	r3, r9
 800955c:	1891      	adds	r1, r2, r2
 800955e:	64b9      	str	r1, [r7, #72]	; 0x48
 8009560:	415b      	adcs	r3, r3
 8009562:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009564:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009568:	4641      	mov	r1, r8
 800956a:	eb12 0a01 	adds.w	sl, r2, r1
 800956e:	4649      	mov	r1, r9
 8009570:	eb43 0b01 	adc.w	fp, r3, r1
 8009574:	f04f 0200 	mov.w	r2, #0
 8009578:	f04f 0300 	mov.w	r3, #0
 800957c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009580:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009584:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009588:	4692      	mov	sl, r2
 800958a:	469b      	mov	fp, r3
 800958c:	4643      	mov	r3, r8
 800958e:	eb1a 0303 	adds.w	r3, sl, r3
 8009592:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009596:	464b      	mov	r3, r9
 8009598:	eb4b 0303 	adc.w	r3, fp, r3
 800959c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80095a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095a4:	685b      	ldr	r3, [r3, #4]
 80095a6:	2200      	movs	r2, #0
 80095a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80095ac:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80095b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80095b4:	460b      	mov	r3, r1
 80095b6:	18db      	adds	r3, r3, r3
 80095b8:	643b      	str	r3, [r7, #64]	; 0x40
 80095ba:	4613      	mov	r3, r2
 80095bc:	eb42 0303 	adc.w	r3, r2, r3
 80095c0:	647b      	str	r3, [r7, #68]	; 0x44
 80095c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80095c6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80095ca:	f7f6 fe61 	bl	8000290 <__aeabi_uldivmod>
 80095ce:	4602      	mov	r2, r0
 80095d0:	460b      	mov	r3, r1
 80095d2:	4611      	mov	r1, r2
 80095d4:	4b3b      	ldr	r3, [pc, #236]	; (80096c4 <UART_SetConfig+0x2d4>)
 80095d6:	fba3 2301 	umull	r2, r3, r3, r1
 80095da:	095b      	lsrs	r3, r3, #5
 80095dc:	2264      	movs	r2, #100	; 0x64
 80095de:	fb02 f303 	mul.w	r3, r2, r3
 80095e2:	1acb      	subs	r3, r1, r3
 80095e4:	00db      	lsls	r3, r3, #3
 80095e6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80095ea:	4b36      	ldr	r3, [pc, #216]	; (80096c4 <UART_SetConfig+0x2d4>)
 80095ec:	fba3 2302 	umull	r2, r3, r3, r2
 80095f0:	095b      	lsrs	r3, r3, #5
 80095f2:	005b      	lsls	r3, r3, #1
 80095f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80095f8:	441c      	add	r4, r3
 80095fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80095fe:	2200      	movs	r2, #0
 8009600:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009604:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009608:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800960c:	4642      	mov	r2, r8
 800960e:	464b      	mov	r3, r9
 8009610:	1891      	adds	r1, r2, r2
 8009612:	63b9      	str	r1, [r7, #56]	; 0x38
 8009614:	415b      	adcs	r3, r3
 8009616:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009618:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800961c:	4641      	mov	r1, r8
 800961e:	1851      	adds	r1, r2, r1
 8009620:	6339      	str	r1, [r7, #48]	; 0x30
 8009622:	4649      	mov	r1, r9
 8009624:	414b      	adcs	r3, r1
 8009626:	637b      	str	r3, [r7, #52]	; 0x34
 8009628:	f04f 0200 	mov.w	r2, #0
 800962c:	f04f 0300 	mov.w	r3, #0
 8009630:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009634:	4659      	mov	r1, fp
 8009636:	00cb      	lsls	r3, r1, #3
 8009638:	4651      	mov	r1, sl
 800963a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800963e:	4651      	mov	r1, sl
 8009640:	00ca      	lsls	r2, r1, #3
 8009642:	4610      	mov	r0, r2
 8009644:	4619      	mov	r1, r3
 8009646:	4603      	mov	r3, r0
 8009648:	4642      	mov	r2, r8
 800964a:	189b      	adds	r3, r3, r2
 800964c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009650:	464b      	mov	r3, r9
 8009652:	460a      	mov	r2, r1
 8009654:	eb42 0303 	adc.w	r3, r2, r3
 8009658:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800965c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009660:	685b      	ldr	r3, [r3, #4]
 8009662:	2200      	movs	r2, #0
 8009664:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009668:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800966c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009670:	460b      	mov	r3, r1
 8009672:	18db      	adds	r3, r3, r3
 8009674:	62bb      	str	r3, [r7, #40]	; 0x28
 8009676:	4613      	mov	r3, r2
 8009678:	eb42 0303 	adc.w	r3, r2, r3
 800967c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800967e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009682:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009686:	f7f6 fe03 	bl	8000290 <__aeabi_uldivmod>
 800968a:	4602      	mov	r2, r0
 800968c:	460b      	mov	r3, r1
 800968e:	4b0d      	ldr	r3, [pc, #52]	; (80096c4 <UART_SetConfig+0x2d4>)
 8009690:	fba3 1302 	umull	r1, r3, r3, r2
 8009694:	095b      	lsrs	r3, r3, #5
 8009696:	2164      	movs	r1, #100	; 0x64
 8009698:	fb01 f303 	mul.w	r3, r1, r3
 800969c:	1ad3      	subs	r3, r2, r3
 800969e:	00db      	lsls	r3, r3, #3
 80096a0:	3332      	adds	r3, #50	; 0x32
 80096a2:	4a08      	ldr	r2, [pc, #32]	; (80096c4 <UART_SetConfig+0x2d4>)
 80096a4:	fba2 2303 	umull	r2, r3, r2, r3
 80096a8:	095b      	lsrs	r3, r3, #5
 80096aa:	f003 0207 	and.w	r2, r3, #7
 80096ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	4422      	add	r2, r4
 80096b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80096b8:	e105      	b.n	80098c6 <UART_SetConfig+0x4d6>
 80096ba:	bf00      	nop
 80096bc:	40011000 	.word	0x40011000
 80096c0:	40011400 	.word	0x40011400
 80096c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80096c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80096cc:	2200      	movs	r2, #0
 80096ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80096d2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80096d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80096da:	4642      	mov	r2, r8
 80096dc:	464b      	mov	r3, r9
 80096de:	1891      	adds	r1, r2, r2
 80096e0:	6239      	str	r1, [r7, #32]
 80096e2:	415b      	adcs	r3, r3
 80096e4:	627b      	str	r3, [r7, #36]	; 0x24
 80096e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80096ea:	4641      	mov	r1, r8
 80096ec:	1854      	adds	r4, r2, r1
 80096ee:	4649      	mov	r1, r9
 80096f0:	eb43 0501 	adc.w	r5, r3, r1
 80096f4:	f04f 0200 	mov.w	r2, #0
 80096f8:	f04f 0300 	mov.w	r3, #0
 80096fc:	00eb      	lsls	r3, r5, #3
 80096fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009702:	00e2      	lsls	r2, r4, #3
 8009704:	4614      	mov	r4, r2
 8009706:	461d      	mov	r5, r3
 8009708:	4643      	mov	r3, r8
 800970a:	18e3      	adds	r3, r4, r3
 800970c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009710:	464b      	mov	r3, r9
 8009712:	eb45 0303 	adc.w	r3, r5, r3
 8009716:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800971a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800971e:	685b      	ldr	r3, [r3, #4]
 8009720:	2200      	movs	r2, #0
 8009722:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009726:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800972a:	f04f 0200 	mov.w	r2, #0
 800972e:	f04f 0300 	mov.w	r3, #0
 8009732:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009736:	4629      	mov	r1, r5
 8009738:	008b      	lsls	r3, r1, #2
 800973a:	4621      	mov	r1, r4
 800973c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009740:	4621      	mov	r1, r4
 8009742:	008a      	lsls	r2, r1, #2
 8009744:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009748:	f7f6 fda2 	bl	8000290 <__aeabi_uldivmod>
 800974c:	4602      	mov	r2, r0
 800974e:	460b      	mov	r3, r1
 8009750:	4b60      	ldr	r3, [pc, #384]	; (80098d4 <UART_SetConfig+0x4e4>)
 8009752:	fba3 2302 	umull	r2, r3, r3, r2
 8009756:	095b      	lsrs	r3, r3, #5
 8009758:	011c      	lsls	r4, r3, #4
 800975a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800975e:	2200      	movs	r2, #0
 8009760:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009764:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009768:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800976c:	4642      	mov	r2, r8
 800976e:	464b      	mov	r3, r9
 8009770:	1891      	adds	r1, r2, r2
 8009772:	61b9      	str	r1, [r7, #24]
 8009774:	415b      	adcs	r3, r3
 8009776:	61fb      	str	r3, [r7, #28]
 8009778:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800977c:	4641      	mov	r1, r8
 800977e:	1851      	adds	r1, r2, r1
 8009780:	6139      	str	r1, [r7, #16]
 8009782:	4649      	mov	r1, r9
 8009784:	414b      	adcs	r3, r1
 8009786:	617b      	str	r3, [r7, #20]
 8009788:	f04f 0200 	mov.w	r2, #0
 800978c:	f04f 0300 	mov.w	r3, #0
 8009790:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009794:	4659      	mov	r1, fp
 8009796:	00cb      	lsls	r3, r1, #3
 8009798:	4651      	mov	r1, sl
 800979a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800979e:	4651      	mov	r1, sl
 80097a0:	00ca      	lsls	r2, r1, #3
 80097a2:	4610      	mov	r0, r2
 80097a4:	4619      	mov	r1, r3
 80097a6:	4603      	mov	r3, r0
 80097a8:	4642      	mov	r2, r8
 80097aa:	189b      	adds	r3, r3, r2
 80097ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80097b0:	464b      	mov	r3, r9
 80097b2:	460a      	mov	r2, r1
 80097b4:	eb42 0303 	adc.w	r3, r2, r3
 80097b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80097bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097c0:	685b      	ldr	r3, [r3, #4]
 80097c2:	2200      	movs	r2, #0
 80097c4:	67bb      	str	r3, [r7, #120]	; 0x78
 80097c6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80097c8:	f04f 0200 	mov.w	r2, #0
 80097cc:	f04f 0300 	mov.w	r3, #0
 80097d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80097d4:	4649      	mov	r1, r9
 80097d6:	008b      	lsls	r3, r1, #2
 80097d8:	4641      	mov	r1, r8
 80097da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80097de:	4641      	mov	r1, r8
 80097e0:	008a      	lsls	r2, r1, #2
 80097e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80097e6:	f7f6 fd53 	bl	8000290 <__aeabi_uldivmod>
 80097ea:	4602      	mov	r2, r0
 80097ec:	460b      	mov	r3, r1
 80097ee:	4b39      	ldr	r3, [pc, #228]	; (80098d4 <UART_SetConfig+0x4e4>)
 80097f0:	fba3 1302 	umull	r1, r3, r3, r2
 80097f4:	095b      	lsrs	r3, r3, #5
 80097f6:	2164      	movs	r1, #100	; 0x64
 80097f8:	fb01 f303 	mul.w	r3, r1, r3
 80097fc:	1ad3      	subs	r3, r2, r3
 80097fe:	011b      	lsls	r3, r3, #4
 8009800:	3332      	adds	r3, #50	; 0x32
 8009802:	4a34      	ldr	r2, [pc, #208]	; (80098d4 <UART_SetConfig+0x4e4>)
 8009804:	fba2 2303 	umull	r2, r3, r2, r3
 8009808:	095b      	lsrs	r3, r3, #5
 800980a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800980e:	441c      	add	r4, r3
 8009810:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009814:	2200      	movs	r2, #0
 8009816:	673b      	str	r3, [r7, #112]	; 0x70
 8009818:	677a      	str	r2, [r7, #116]	; 0x74
 800981a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800981e:	4642      	mov	r2, r8
 8009820:	464b      	mov	r3, r9
 8009822:	1891      	adds	r1, r2, r2
 8009824:	60b9      	str	r1, [r7, #8]
 8009826:	415b      	adcs	r3, r3
 8009828:	60fb      	str	r3, [r7, #12]
 800982a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800982e:	4641      	mov	r1, r8
 8009830:	1851      	adds	r1, r2, r1
 8009832:	6039      	str	r1, [r7, #0]
 8009834:	4649      	mov	r1, r9
 8009836:	414b      	adcs	r3, r1
 8009838:	607b      	str	r3, [r7, #4]
 800983a:	f04f 0200 	mov.w	r2, #0
 800983e:	f04f 0300 	mov.w	r3, #0
 8009842:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009846:	4659      	mov	r1, fp
 8009848:	00cb      	lsls	r3, r1, #3
 800984a:	4651      	mov	r1, sl
 800984c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009850:	4651      	mov	r1, sl
 8009852:	00ca      	lsls	r2, r1, #3
 8009854:	4610      	mov	r0, r2
 8009856:	4619      	mov	r1, r3
 8009858:	4603      	mov	r3, r0
 800985a:	4642      	mov	r2, r8
 800985c:	189b      	adds	r3, r3, r2
 800985e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009860:	464b      	mov	r3, r9
 8009862:	460a      	mov	r2, r1
 8009864:	eb42 0303 	adc.w	r3, r2, r3
 8009868:	66fb      	str	r3, [r7, #108]	; 0x6c
 800986a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800986e:	685b      	ldr	r3, [r3, #4]
 8009870:	2200      	movs	r2, #0
 8009872:	663b      	str	r3, [r7, #96]	; 0x60
 8009874:	667a      	str	r2, [r7, #100]	; 0x64
 8009876:	f04f 0200 	mov.w	r2, #0
 800987a:	f04f 0300 	mov.w	r3, #0
 800987e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009882:	4649      	mov	r1, r9
 8009884:	008b      	lsls	r3, r1, #2
 8009886:	4641      	mov	r1, r8
 8009888:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800988c:	4641      	mov	r1, r8
 800988e:	008a      	lsls	r2, r1, #2
 8009890:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009894:	f7f6 fcfc 	bl	8000290 <__aeabi_uldivmod>
 8009898:	4602      	mov	r2, r0
 800989a:	460b      	mov	r3, r1
 800989c:	4b0d      	ldr	r3, [pc, #52]	; (80098d4 <UART_SetConfig+0x4e4>)
 800989e:	fba3 1302 	umull	r1, r3, r3, r2
 80098a2:	095b      	lsrs	r3, r3, #5
 80098a4:	2164      	movs	r1, #100	; 0x64
 80098a6:	fb01 f303 	mul.w	r3, r1, r3
 80098aa:	1ad3      	subs	r3, r2, r3
 80098ac:	011b      	lsls	r3, r3, #4
 80098ae:	3332      	adds	r3, #50	; 0x32
 80098b0:	4a08      	ldr	r2, [pc, #32]	; (80098d4 <UART_SetConfig+0x4e4>)
 80098b2:	fba2 2303 	umull	r2, r3, r2, r3
 80098b6:	095b      	lsrs	r3, r3, #5
 80098b8:	f003 020f 	and.w	r2, r3, #15
 80098bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	4422      	add	r2, r4
 80098c4:	609a      	str	r2, [r3, #8]
}
 80098c6:	bf00      	nop
 80098c8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80098cc:	46bd      	mov	sp, r7
 80098ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80098d2:	bf00      	nop
 80098d4:	51eb851f 	.word	0x51eb851f

080098d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80098d8:	b084      	sub	sp, #16
 80098da:	b580      	push	{r7, lr}
 80098dc:	b084      	sub	sp, #16
 80098de:	af00      	add	r7, sp, #0
 80098e0:	6078      	str	r0, [r7, #4]
 80098e2:	f107 001c 	add.w	r0, r7, #28
 80098e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80098ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ec:	2b01      	cmp	r3, #1
 80098ee:	d122      	bne.n	8009936 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	68db      	ldr	r3, [r3, #12]
 8009900:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009904:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009908:	687a      	ldr	r2, [r7, #4]
 800990a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	68db      	ldr	r3, [r3, #12]
 8009910:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009918:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800991a:	2b01      	cmp	r3, #1
 800991c:	d105      	bne.n	800992a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	68db      	ldr	r3, [r3, #12]
 8009922:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f000 f9c0 	bl	8009cb0 <USB_CoreReset>
 8009930:	4603      	mov	r3, r0
 8009932:	73fb      	strb	r3, [r7, #15]
 8009934:	e01a      	b.n	800996c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	68db      	ldr	r3, [r3, #12]
 800993a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	f000 f9b4 	bl	8009cb0 <USB_CoreReset>
 8009948:	4603      	mov	r3, r0
 800994a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800994c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800994e:	2b00      	cmp	r3, #0
 8009950:	d106      	bne.n	8009960 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009956:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	639a      	str	r2, [r3, #56]	; 0x38
 800995e:	e005      	b.n	800996c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009964:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800996c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800996e:	2b01      	cmp	r3, #1
 8009970:	d10b      	bne.n	800998a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	689b      	ldr	r3, [r3, #8]
 8009976:	f043 0206 	orr.w	r2, r3, #6
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	689b      	ldr	r3, [r3, #8]
 8009982:	f043 0220 	orr.w	r2, r3, #32
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800998a:	7bfb      	ldrb	r3, [r7, #15]
}
 800998c:	4618      	mov	r0, r3
 800998e:	3710      	adds	r7, #16
 8009990:	46bd      	mov	sp, r7
 8009992:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009996:	b004      	add	sp, #16
 8009998:	4770      	bx	lr

0800999a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800999a:	b480      	push	{r7}
 800999c:	b083      	sub	sp, #12
 800999e:	af00      	add	r7, sp, #0
 80099a0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	689b      	ldr	r3, [r3, #8]
 80099a6:	f043 0201 	orr.w	r2, r3, #1
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80099ae:	2300      	movs	r3, #0
}
 80099b0:	4618      	mov	r0, r3
 80099b2:	370c      	adds	r7, #12
 80099b4:	46bd      	mov	sp, r7
 80099b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ba:	4770      	bx	lr

080099bc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80099bc:	b480      	push	{r7}
 80099be:	b083      	sub	sp, #12
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	689b      	ldr	r3, [r3, #8]
 80099c8:	f023 0201 	bic.w	r2, r3, #1
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80099d0:	2300      	movs	r3, #0
}
 80099d2:	4618      	mov	r0, r3
 80099d4:	370c      	adds	r7, #12
 80099d6:	46bd      	mov	sp, r7
 80099d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099dc:	4770      	bx	lr

080099de <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80099de:	b580      	push	{r7, lr}
 80099e0:	b084      	sub	sp, #16
 80099e2:	af00      	add	r7, sp, #0
 80099e4:	6078      	str	r0, [r7, #4]
 80099e6:	460b      	mov	r3, r1
 80099e8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80099ea:	2300      	movs	r3, #0
 80099ec:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	68db      	ldr	r3, [r3, #12]
 80099f2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80099fa:	78fb      	ldrb	r3, [r7, #3]
 80099fc:	2b01      	cmp	r3, #1
 80099fe:	d115      	bne.n	8009a2c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	68db      	ldr	r3, [r3, #12]
 8009a04:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009a0c:	2001      	movs	r0, #1
 8009a0e:	f7f9 f829 	bl	8002a64 <HAL_Delay>
      ms++;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	3301      	adds	r3, #1
 8009a16:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	f000 f93a 	bl	8009c92 <USB_GetMode>
 8009a1e:	4603      	mov	r3, r0
 8009a20:	2b01      	cmp	r3, #1
 8009a22:	d01e      	beq.n	8009a62 <USB_SetCurrentMode+0x84>
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	2b31      	cmp	r3, #49	; 0x31
 8009a28:	d9f0      	bls.n	8009a0c <USB_SetCurrentMode+0x2e>
 8009a2a:	e01a      	b.n	8009a62 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009a2c:	78fb      	ldrb	r3, [r7, #3]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d115      	bne.n	8009a5e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	68db      	ldr	r3, [r3, #12]
 8009a36:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009a3e:	2001      	movs	r0, #1
 8009a40:	f7f9 f810 	bl	8002a64 <HAL_Delay>
      ms++;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	3301      	adds	r3, #1
 8009a48:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f000 f921 	bl	8009c92 <USB_GetMode>
 8009a50:	4603      	mov	r3, r0
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d005      	beq.n	8009a62 <USB_SetCurrentMode+0x84>
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	2b31      	cmp	r3, #49	; 0x31
 8009a5a:	d9f0      	bls.n	8009a3e <USB_SetCurrentMode+0x60>
 8009a5c:	e001      	b.n	8009a62 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009a5e:	2301      	movs	r3, #1
 8009a60:	e005      	b.n	8009a6e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	2b32      	cmp	r3, #50	; 0x32
 8009a66:	d101      	bne.n	8009a6c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009a68:	2301      	movs	r3, #1
 8009a6a:	e000      	b.n	8009a6e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009a6c:	2300      	movs	r3, #0
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	3710      	adds	r7, #16
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}
	...

08009a78 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009a78:	b480      	push	{r7}
 8009a7a:	b085      	sub	sp, #20
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
 8009a80:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009a82:	2300      	movs	r3, #0
 8009a84:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	3301      	adds	r3, #1
 8009a8a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	4a13      	ldr	r2, [pc, #76]	; (8009adc <USB_FlushTxFifo+0x64>)
 8009a90:	4293      	cmp	r3, r2
 8009a92:	d901      	bls.n	8009a98 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009a94:	2303      	movs	r3, #3
 8009a96:	e01b      	b.n	8009ad0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	691b      	ldr	r3, [r3, #16]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	daf2      	bge.n	8009a86 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	019b      	lsls	r3, r3, #6
 8009aa8:	f043 0220 	orr.w	r2, r3, #32
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	3301      	adds	r3, #1
 8009ab4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	4a08      	ldr	r2, [pc, #32]	; (8009adc <USB_FlushTxFifo+0x64>)
 8009aba:	4293      	cmp	r3, r2
 8009abc:	d901      	bls.n	8009ac2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009abe:	2303      	movs	r3, #3
 8009ac0:	e006      	b.n	8009ad0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	691b      	ldr	r3, [r3, #16]
 8009ac6:	f003 0320 	and.w	r3, r3, #32
 8009aca:	2b20      	cmp	r3, #32
 8009acc:	d0f0      	beq.n	8009ab0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009ace:	2300      	movs	r3, #0
}
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	3714      	adds	r7, #20
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ada:	4770      	bx	lr
 8009adc:	00030d40 	.word	0x00030d40

08009ae0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009ae0:	b480      	push	{r7}
 8009ae2:	b085      	sub	sp, #20
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009ae8:	2300      	movs	r3, #0
 8009aea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	3301      	adds	r3, #1
 8009af0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	4a11      	ldr	r2, [pc, #68]	; (8009b3c <USB_FlushRxFifo+0x5c>)
 8009af6:	4293      	cmp	r3, r2
 8009af8:	d901      	bls.n	8009afe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009afa:	2303      	movs	r3, #3
 8009afc:	e018      	b.n	8009b30 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	691b      	ldr	r3, [r3, #16]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	daf2      	bge.n	8009aec <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009b06:	2300      	movs	r3, #0
 8009b08:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2210      	movs	r2, #16
 8009b0e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	3301      	adds	r3, #1
 8009b14:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	4a08      	ldr	r2, [pc, #32]	; (8009b3c <USB_FlushRxFifo+0x5c>)
 8009b1a:	4293      	cmp	r3, r2
 8009b1c:	d901      	bls.n	8009b22 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009b1e:	2303      	movs	r3, #3
 8009b20:	e006      	b.n	8009b30 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	691b      	ldr	r3, [r3, #16]
 8009b26:	f003 0310 	and.w	r3, r3, #16
 8009b2a:	2b10      	cmp	r3, #16
 8009b2c:	d0f0      	beq.n	8009b10 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009b2e:	2300      	movs	r3, #0
}
 8009b30:	4618      	mov	r0, r3
 8009b32:	3714      	adds	r7, #20
 8009b34:	46bd      	mov	sp, r7
 8009b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3a:	4770      	bx	lr
 8009b3c:	00030d40 	.word	0x00030d40

08009b40 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009b40:	b480      	push	{r7}
 8009b42:	b089      	sub	sp, #36	; 0x24
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	60f8      	str	r0, [r7, #12]
 8009b48:	60b9      	str	r1, [r7, #8]
 8009b4a:	4611      	mov	r1, r2
 8009b4c:	461a      	mov	r2, r3
 8009b4e:	460b      	mov	r3, r1
 8009b50:	71fb      	strb	r3, [r7, #7]
 8009b52:	4613      	mov	r3, r2
 8009b54:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009b5e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d123      	bne.n	8009bae <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009b66:	88bb      	ldrh	r3, [r7, #4]
 8009b68:	3303      	adds	r3, #3
 8009b6a:	089b      	lsrs	r3, r3, #2
 8009b6c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009b6e:	2300      	movs	r3, #0
 8009b70:	61bb      	str	r3, [r7, #24]
 8009b72:	e018      	b.n	8009ba6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009b74:	79fb      	ldrb	r3, [r7, #7]
 8009b76:	031a      	lsls	r2, r3, #12
 8009b78:	697b      	ldr	r3, [r7, #20]
 8009b7a:	4413      	add	r3, r2
 8009b7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b80:	461a      	mov	r2, r3
 8009b82:	69fb      	ldr	r3, [r7, #28]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009b88:	69fb      	ldr	r3, [r7, #28]
 8009b8a:	3301      	adds	r3, #1
 8009b8c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009b8e:	69fb      	ldr	r3, [r7, #28]
 8009b90:	3301      	adds	r3, #1
 8009b92:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009b94:	69fb      	ldr	r3, [r7, #28]
 8009b96:	3301      	adds	r3, #1
 8009b98:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009b9a:	69fb      	ldr	r3, [r7, #28]
 8009b9c:	3301      	adds	r3, #1
 8009b9e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009ba0:	69bb      	ldr	r3, [r7, #24]
 8009ba2:	3301      	adds	r3, #1
 8009ba4:	61bb      	str	r3, [r7, #24]
 8009ba6:	69ba      	ldr	r2, [r7, #24]
 8009ba8:	693b      	ldr	r3, [r7, #16]
 8009baa:	429a      	cmp	r2, r3
 8009bac:	d3e2      	bcc.n	8009b74 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009bae:	2300      	movs	r3, #0
}
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	3724      	adds	r7, #36	; 0x24
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bba:	4770      	bx	lr

08009bbc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009bbc:	b480      	push	{r7}
 8009bbe:	b08b      	sub	sp, #44	; 0x2c
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	60f8      	str	r0, [r7, #12]
 8009bc4:	60b9      	str	r1, [r7, #8]
 8009bc6:	4613      	mov	r3, r2
 8009bc8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009bd2:	88fb      	ldrh	r3, [r7, #6]
 8009bd4:	089b      	lsrs	r3, r3, #2
 8009bd6:	b29b      	uxth	r3, r3
 8009bd8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009bda:	88fb      	ldrh	r3, [r7, #6]
 8009bdc:	f003 0303 	and.w	r3, r3, #3
 8009be0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009be2:	2300      	movs	r3, #0
 8009be4:	623b      	str	r3, [r7, #32]
 8009be6:	e014      	b.n	8009c12 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009be8:	69bb      	ldr	r3, [r7, #24]
 8009bea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bee:	681a      	ldr	r2, [r3, #0]
 8009bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bf2:	601a      	str	r2, [r3, #0]
    pDest++;
 8009bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bf6:	3301      	adds	r3, #1
 8009bf8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bfc:	3301      	adds	r3, #1
 8009bfe:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c02:	3301      	adds	r3, #1
 8009c04:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c08:	3301      	adds	r3, #1
 8009c0a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009c0c:	6a3b      	ldr	r3, [r7, #32]
 8009c0e:	3301      	adds	r3, #1
 8009c10:	623b      	str	r3, [r7, #32]
 8009c12:	6a3a      	ldr	r2, [r7, #32]
 8009c14:	697b      	ldr	r3, [r7, #20]
 8009c16:	429a      	cmp	r2, r3
 8009c18:	d3e6      	bcc.n	8009be8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009c1a:	8bfb      	ldrh	r3, [r7, #30]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d01e      	beq.n	8009c5e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009c20:	2300      	movs	r3, #0
 8009c22:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009c24:	69bb      	ldr	r3, [r7, #24]
 8009c26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c2a:	461a      	mov	r2, r3
 8009c2c:	f107 0310 	add.w	r3, r7, #16
 8009c30:	6812      	ldr	r2, [r2, #0]
 8009c32:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009c34:	693a      	ldr	r2, [r7, #16]
 8009c36:	6a3b      	ldr	r3, [r7, #32]
 8009c38:	b2db      	uxtb	r3, r3
 8009c3a:	00db      	lsls	r3, r3, #3
 8009c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8009c40:	b2da      	uxtb	r2, r3
 8009c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c44:	701a      	strb	r2, [r3, #0]
      i++;
 8009c46:	6a3b      	ldr	r3, [r7, #32]
 8009c48:	3301      	adds	r3, #1
 8009c4a:	623b      	str	r3, [r7, #32]
      pDest++;
 8009c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c4e:	3301      	adds	r3, #1
 8009c50:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009c52:	8bfb      	ldrh	r3, [r7, #30]
 8009c54:	3b01      	subs	r3, #1
 8009c56:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009c58:	8bfb      	ldrh	r3, [r7, #30]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d1ea      	bne.n	8009c34 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009c60:	4618      	mov	r0, r3
 8009c62:	372c      	adds	r7, #44	; 0x2c
 8009c64:	46bd      	mov	sp, r7
 8009c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6a:	4770      	bx	lr

08009c6c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009c6c:	b480      	push	{r7}
 8009c6e:	b085      	sub	sp, #20
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	695b      	ldr	r3, [r3, #20]
 8009c78:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	699b      	ldr	r3, [r3, #24]
 8009c7e:	68fa      	ldr	r2, [r7, #12]
 8009c80:	4013      	ands	r3, r2
 8009c82:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009c84:	68fb      	ldr	r3, [r7, #12]
}
 8009c86:	4618      	mov	r0, r3
 8009c88:	3714      	adds	r7, #20
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c90:	4770      	bx	lr

08009c92 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009c92:	b480      	push	{r7}
 8009c94:	b083      	sub	sp, #12
 8009c96:	af00      	add	r7, sp, #0
 8009c98:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	695b      	ldr	r3, [r3, #20]
 8009c9e:	f003 0301 	and.w	r3, r3, #1
}
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	370c      	adds	r7, #12
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cac:	4770      	bx	lr
	...

08009cb0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	b085      	sub	sp, #20
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009cb8:	2300      	movs	r3, #0
 8009cba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	3301      	adds	r3, #1
 8009cc0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	4a13      	ldr	r2, [pc, #76]	; (8009d14 <USB_CoreReset+0x64>)
 8009cc6:	4293      	cmp	r3, r2
 8009cc8:	d901      	bls.n	8009cce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009cca:	2303      	movs	r3, #3
 8009ccc:	e01b      	b.n	8009d06 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	691b      	ldr	r3, [r3, #16]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	daf2      	bge.n	8009cbc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	691b      	ldr	r3, [r3, #16]
 8009cde:	f043 0201 	orr.w	r2, r3, #1
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	3301      	adds	r3, #1
 8009cea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	4a09      	ldr	r2, [pc, #36]	; (8009d14 <USB_CoreReset+0x64>)
 8009cf0:	4293      	cmp	r3, r2
 8009cf2:	d901      	bls.n	8009cf8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009cf4:	2303      	movs	r3, #3
 8009cf6:	e006      	b.n	8009d06 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	691b      	ldr	r3, [r3, #16]
 8009cfc:	f003 0301 	and.w	r3, r3, #1
 8009d00:	2b01      	cmp	r3, #1
 8009d02:	d0f0      	beq.n	8009ce6 <USB_CoreReset+0x36>

  return HAL_OK;
 8009d04:	2300      	movs	r3, #0
}
 8009d06:	4618      	mov	r0, r3
 8009d08:	3714      	adds	r7, #20
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d10:	4770      	bx	lr
 8009d12:	bf00      	nop
 8009d14:	00030d40 	.word	0x00030d40

08009d18 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009d18:	b084      	sub	sp, #16
 8009d1a:	b580      	push	{r7, lr}
 8009d1c:	b086      	sub	sp, #24
 8009d1e:	af00      	add	r7, sp, #0
 8009d20:	6078      	str	r0, [r7, #4]
 8009d22:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009d26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009d38:	461a      	mov	r2, r3
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d42:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d4e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d5a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d018      	beq.n	8009da0 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8009d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d70:	2b01      	cmp	r3, #1
 8009d72:	d10a      	bne.n	8009d8a <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	68fa      	ldr	r2, [r7, #12]
 8009d7e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009d82:	f043 0304 	orr.w	r3, r3, #4
 8009d86:	6013      	str	r3, [r2, #0]
 8009d88:	e014      	b.n	8009db4 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	68fa      	ldr	r2, [r7, #12]
 8009d94:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009d98:	f023 0304 	bic.w	r3, r3, #4
 8009d9c:	6013      	str	r3, [r2, #0]
 8009d9e:	e009      	b.n	8009db4 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	68fa      	ldr	r2, [r7, #12]
 8009daa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009dae:	f023 0304 	bic.w	r3, r3, #4
 8009db2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009db4:	2110      	movs	r1, #16
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	f7ff fe5e 	bl	8009a78 <USB_FlushTxFifo>
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d001      	beq.n	8009dc6 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8009dc2:	2301      	movs	r3, #1
 8009dc4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009dc6:	6878      	ldr	r0, [r7, #4]
 8009dc8:	f7ff fe8a 	bl	8009ae0 <USB_FlushRxFifo>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d001      	beq.n	8009dd6 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8009dd2:	2301      	movs	r3, #1
 8009dd4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	613b      	str	r3, [r7, #16]
 8009dda:	e015      	b.n	8009e08 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8009ddc:	693b      	ldr	r3, [r7, #16]
 8009dde:	015a      	lsls	r2, r3, #5
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	4413      	add	r3, r2
 8009de4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009de8:	461a      	mov	r2, r3
 8009dea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009dee:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8009df0:	693b      	ldr	r3, [r7, #16]
 8009df2:	015a      	lsls	r2, r3, #5
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	4413      	add	r3, r2
 8009df8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009dfc:	461a      	mov	r2, r3
 8009dfe:	2300      	movs	r3, #0
 8009e00:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8009e02:	693b      	ldr	r3, [r7, #16]
 8009e04:	3301      	adds	r3, #1
 8009e06:	613b      	str	r3, [r7, #16]
 8009e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e0a:	693a      	ldr	r2, [r7, #16]
 8009e0c:	429a      	cmp	r2, r3
 8009e0e:	d3e5      	bcc.n	8009ddc <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2200      	movs	r2, #0
 8009e14:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009e1c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d00b      	beq.n	8009e42 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009e30:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	4a13      	ldr	r2, [pc, #76]	; (8009e84 <USB_HostInit+0x16c>)
 8009e36:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	4a13      	ldr	r2, [pc, #76]	; (8009e88 <USB_HostInit+0x170>)
 8009e3c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8009e40:	e009      	b.n	8009e56 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2280      	movs	r2, #128	; 0x80
 8009e46:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	4a10      	ldr	r2, [pc, #64]	; (8009e8c <USB_HostInit+0x174>)
 8009e4c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	4a0f      	ldr	r2, [pc, #60]	; (8009e90 <USB_HostInit+0x178>)
 8009e52:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d105      	bne.n	8009e68 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	699b      	ldr	r3, [r3, #24]
 8009e60:	f043 0210 	orr.w	r2, r3, #16
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	699a      	ldr	r2, [r3, #24]
 8009e6c:	4b09      	ldr	r3, [pc, #36]	; (8009e94 <USB_HostInit+0x17c>)
 8009e6e:	4313      	orrs	r3, r2
 8009e70:	687a      	ldr	r2, [r7, #4]
 8009e72:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8009e74:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e76:	4618      	mov	r0, r3
 8009e78:	3718      	adds	r7, #24
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009e80:	b004      	add	sp, #16
 8009e82:	4770      	bx	lr
 8009e84:	01000200 	.word	0x01000200
 8009e88:	00e00300 	.word	0x00e00300
 8009e8c:	00600080 	.word	0x00600080
 8009e90:	004000e0 	.word	0x004000e0
 8009e94:	a3200008 	.word	0xa3200008

08009e98 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8009e98:	b480      	push	{r7}
 8009e9a:	b085      	sub	sp, #20
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
 8009ea0:	460b      	mov	r3, r1
 8009ea2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	68fa      	ldr	r2, [r7, #12]
 8009eb2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009eb6:	f023 0303 	bic.w	r3, r3, #3
 8009eba:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009ec2:	681a      	ldr	r2, [r3, #0]
 8009ec4:	78fb      	ldrb	r3, [r7, #3]
 8009ec6:	f003 0303 	and.w	r3, r3, #3
 8009eca:	68f9      	ldr	r1, [r7, #12]
 8009ecc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009ed0:	4313      	orrs	r3, r2
 8009ed2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8009ed4:	78fb      	ldrb	r3, [r7, #3]
 8009ed6:	2b01      	cmp	r3, #1
 8009ed8:	d107      	bne.n	8009eea <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009ee0:	461a      	mov	r2, r3
 8009ee2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8009ee6:	6053      	str	r3, [r2, #4]
 8009ee8:	e009      	b.n	8009efe <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8009eea:	78fb      	ldrb	r3, [r7, #3]
 8009eec:	2b02      	cmp	r3, #2
 8009eee:	d106      	bne.n	8009efe <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009ef6:	461a      	mov	r2, r3
 8009ef8:	f241 7370 	movw	r3, #6000	; 0x1770
 8009efc:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8009efe:	2300      	movs	r3, #0
}
 8009f00:	4618      	mov	r0, r3
 8009f02:	3714      	adds	r7, #20
 8009f04:	46bd      	mov	sp, r7
 8009f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0a:	4770      	bx	lr

08009f0c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b084      	sub	sp, #16
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8009f18:	2300      	movs	r3, #0
 8009f1a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009f26:	68bb      	ldr	r3, [r7, #8]
 8009f28:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009f2c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8009f2e:	68bb      	ldr	r3, [r7, #8]
 8009f30:	68fa      	ldr	r2, [r7, #12]
 8009f32:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009f36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f3a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8009f3c:	2064      	movs	r0, #100	; 0x64
 8009f3e:	f7f8 fd91 	bl	8002a64 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8009f42:	68bb      	ldr	r3, [r7, #8]
 8009f44:	68fa      	ldr	r2, [r7, #12]
 8009f46:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009f4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009f4e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8009f50:	200a      	movs	r0, #10
 8009f52:	f7f8 fd87 	bl	8002a64 <HAL_Delay>

  return HAL_OK;
 8009f56:	2300      	movs	r3, #0
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	3710      	adds	r7, #16
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd80      	pop	{r7, pc}

08009f60 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8009f60:	b480      	push	{r7}
 8009f62:	b085      	sub	sp, #20
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
 8009f68:	460b      	mov	r3, r1
 8009f6a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009f70:	2300      	movs	r3, #0
 8009f72:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009f7e:	68bb      	ldr	r3, [r7, #8]
 8009f80:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009f84:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8009f86:	68bb      	ldr	r3, [r7, #8]
 8009f88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d109      	bne.n	8009fa4 <USB_DriveVbus+0x44>
 8009f90:	78fb      	ldrb	r3, [r7, #3]
 8009f92:	2b01      	cmp	r3, #1
 8009f94:	d106      	bne.n	8009fa4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8009f96:	68bb      	ldr	r3, [r7, #8]
 8009f98:	68fa      	ldr	r2, [r7, #12]
 8009f9a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009f9e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009fa2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009faa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009fae:	d109      	bne.n	8009fc4 <USB_DriveVbus+0x64>
 8009fb0:	78fb      	ldrb	r3, [r7, #3]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d106      	bne.n	8009fc4 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	68fa      	ldr	r2, [r7, #12]
 8009fba:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009fbe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009fc2:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8009fc4:	2300      	movs	r3, #0
}
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	3714      	adds	r7, #20
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd0:	4770      	bx	lr

08009fd2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009fd2:	b480      	push	{r7}
 8009fd4:	b085      	sub	sp, #20
 8009fd6:	af00      	add	r7, sp, #0
 8009fd8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009fde:	2300      	movs	r3, #0
 8009fe0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	0c5b      	lsrs	r3, r3, #17
 8009ff0:	f003 0303 	and.w	r3, r3, #3
}
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	3714      	adds	r7, #20
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffe:	4770      	bx	lr

0800a000 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800a000:	b480      	push	{r7}
 800a002:	b085      	sub	sp, #20
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a012:	689b      	ldr	r3, [r3, #8]
 800a014:	b29b      	uxth	r3, r3
}
 800a016:	4618      	mov	r0, r3
 800a018:	3714      	adds	r7, #20
 800a01a:	46bd      	mov	sp, r7
 800a01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a020:	4770      	bx	lr
	...

0800a024 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b088      	sub	sp, #32
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
 800a02c:	4608      	mov	r0, r1
 800a02e:	4611      	mov	r1, r2
 800a030:	461a      	mov	r2, r3
 800a032:	4603      	mov	r3, r0
 800a034:	70fb      	strb	r3, [r7, #3]
 800a036:	460b      	mov	r3, r1
 800a038:	70bb      	strb	r3, [r7, #2]
 800a03a:	4613      	mov	r3, r2
 800a03c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800a03e:	2300      	movs	r3, #0
 800a040:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800a046:	78fb      	ldrb	r3, [r7, #3]
 800a048:	015a      	lsls	r2, r3, #5
 800a04a:	693b      	ldr	r3, [r7, #16]
 800a04c:	4413      	add	r3, r2
 800a04e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a052:	461a      	mov	r2, r3
 800a054:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a058:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800a05a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a05e:	2b03      	cmp	r3, #3
 800a060:	d87e      	bhi.n	800a160 <USB_HC_Init+0x13c>
 800a062:	a201      	add	r2, pc, #4	; (adr r2, 800a068 <USB_HC_Init+0x44>)
 800a064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a068:	0800a079 	.word	0x0800a079
 800a06c:	0800a123 	.word	0x0800a123
 800a070:	0800a079 	.word	0x0800a079
 800a074:	0800a0e5 	.word	0x0800a0e5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a078:	78fb      	ldrb	r3, [r7, #3]
 800a07a:	015a      	lsls	r2, r3, #5
 800a07c:	693b      	ldr	r3, [r7, #16]
 800a07e:	4413      	add	r3, r2
 800a080:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a084:	461a      	mov	r2, r3
 800a086:	f240 439d 	movw	r3, #1181	; 0x49d
 800a08a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800a08c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a090:	2b00      	cmp	r3, #0
 800a092:	da10      	bge.n	800a0b6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800a094:	78fb      	ldrb	r3, [r7, #3]
 800a096:	015a      	lsls	r2, r3, #5
 800a098:	693b      	ldr	r3, [r7, #16]
 800a09a:	4413      	add	r3, r2
 800a09c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0a0:	68db      	ldr	r3, [r3, #12]
 800a0a2:	78fa      	ldrb	r2, [r7, #3]
 800a0a4:	0151      	lsls	r1, r2, #5
 800a0a6:	693a      	ldr	r2, [r7, #16]
 800a0a8:	440a      	add	r2, r1
 800a0aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a0ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a0b2:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800a0b4:	e057      	b.n	800a166 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d051      	beq.n	800a166 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800a0c2:	78fb      	ldrb	r3, [r7, #3]
 800a0c4:	015a      	lsls	r2, r3, #5
 800a0c6:	693b      	ldr	r3, [r7, #16]
 800a0c8:	4413      	add	r3, r2
 800a0ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0ce:	68db      	ldr	r3, [r3, #12]
 800a0d0:	78fa      	ldrb	r2, [r7, #3]
 800a0d2:	0151      	lsls	r1, r2, #5
 800a0d4:	693a      	ldr	r2, [r7, #16]
 800a0d6:	440a      	add	r2, r1
 800a0d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a0dc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800a0e0:	60d3      	str	r3, [r2, #12]
      break;
 800a0e2:	e040      	b.n	800a166 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a0e4:	78fb      	ldrb	r3, [r7, #3]
 800a0e6:	015a      	lsls	r2, r3, #5
 800a0e8:	693b      	ldr	r3, [r7, #16]
 800a0ea:	4413      	add	r3, r2
 800a0ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0f0:	461a      	mov	r2, r3
 800a0f2:	f240 639d 	movw	r3, #1693	; 0x69d
 800a0f6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800a0f8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	da34      	bge.n	800a16a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800a100:	78fb      	ldrb	r3, [r7, #3]
 800a102:	015a      	lsls	r2, r3, #5
 800a104:	693b      	ldr	r3, [r7, #16]
 800a106:	4413      	add	r3, r2
 800a108:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a10c:	68db      	ldr	r3, [r3, #12]
 800a10e:	78fa      	ldrb	r2, [r7, #3]
 800a110:	0151      	lsls	r1, r2, #5
 800a112:	693a      	ldr	r2, [r7, #16]
 800a114:	440a      	add	r2, r1
 800a116:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a11a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a11e:	60d3      	str	r3, [r2, #12]
      }

      break;
 800a120:	e023      	b.n	800a16a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a122:	78fb      	ldrb	r3, [r7, #3]
 800a124:	015a      	lsls	r2, r3, #5
 800a126:	693b      	ldr	r3, [r7, #16]
 800a128:	4413      	add	r3, r2
 800a12a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a12e:	461a      	mov	r2, r3
 800a130:	f240 2325 	movw	r3, #549	; 0x225
 800a134:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800a136:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	da17      	bge.n	800a16e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800a13e:	78fb      	ldrb	r3, [r7, #3]
 800a140:	015a      	lsls	r2, r3, #5
 800a142:	693b      	ldr	r3, [r7, #16]
 800a144:	4413      	add	r3, r2
 800a146:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a14a:	68db      	ldr	r3, [r3, #12]
 800a14c:	78fa      	ldrb	r2, [r7, #3]
 800a14e:	0151      	lsls	r1, r2, #5
 800a150:	693a      	ldr	r2, [r7, #16]
 800a152:	440a      	add	r2, r1
 800a154:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a158:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800a15c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800a15e:	e006      	b.n	800a16e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800a160:	2301      	movs	r3, #1
 800a162:	77fb      	strb	r3, [r7, #31]
      break;
 800a164:	e004      	b.n	800a170 <USB_HC_Init+0x14c>
      break;
 800a166:	bf00      	nop
 800a168:	e002      	b.n	800a170 <USB_HC_Init+0x14c>
      break;
 800a16a:	bf00      	nop
 800a16c:	e000      	b.n	800a170 <USB_HC_Init+0x14c>
      break;
 800a16e:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800a170:	78fb      	ldrb	r3, [r7, #3]
 800a172:	015a      	lsls	r2, r3, #5
 800a174:	693b      	ldr	r3, [r7, #16]
 800a176:	4413      	add	r3, r2
 800a178:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a17c:	68db      	ldr	r3, [r3, #12]
 800a17e:	78fa      	ldrb	r2, [r7, #3]
 800a180:	0151      	lsls	r1, r2, #5
 800a182:	693a      	ldr	r2, [r7, #16]
 800a184:	440a      	add	r2, r1
 800a186:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a18a:	f043 0302 	orr.w	r3, r3, #2
 800a18e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800a190:	693b      	ldr	r3, [r7, #16]
 800a192:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a196:	699a      	ldr	r2, [r3, #24]
 800a198:	78fb      	ldrb	r3, [r7, #3]
 800a19a:	f003 030f 	and.w	r3, r3, #15
 800a19e:	2101      	movs	r1, #1
 800a1a0:	fa01 f303 	lsl.w	r3, r1, r3
 800a1a4:	6939      	ldr	r1, [r7, #16]
 800a1a6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a1aa:	4313      	orrs	r3, r2
 800a1ac:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	699b      	ldr	r3, [r3, #24]
 800a1b2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800a1ba:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	da03      	bge.n	800a1ca <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800a1c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a1c6:	61bb      	str	r3, [r7, #24]
 800a1c8:	e001      	b.n	800a1ce <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	f7ff feff 	bl	8009fd2 <USB_GetHostSpeed>
 800a1d4:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800a1d6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a1da:	2b02      	cmp	r3, #2
 800a1dc:	d106      	bne.n	800a1ec <USB_HC_Init+0x1c8>
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	2b02      	cmp	r3, #2
 800a1e2:	d003      	beq.n	800a1ec <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800a1e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a1e8:	617b      	str	r3, [r7, #20]
 800a1ea:	e001      	b.n	800a1f0 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a1f0:	787b      	ldrb	r3, [r7, #1]
 800a1f2:	059b      	lsls	r3, r3, #22
 800a1f4:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a1f8:	78bb      	ldrb	r3, [r7, #2]
 800a1fa:	02db      	lsls	r3, r3, #11
 800a1fc:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a200:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a202:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a206:	049b      	lsls	r3, r3, #18
 800a208:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a20c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a20e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a210:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a214:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a216:	69bb      	ldr	r3, [r7, #24]
 800a218:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a21a:	78fb      	ldrb	r3, [r7, #3]
 800a21c:	0159      	lsls	r1, r3, #5
 800a21e:	693b      	ldr	r3, [r7, #16]
 800a220:	440b      	add	r3, r1
 800a222:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a226:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a228:	697b      	ldr	r3, [r7, #20]
 800a22a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a22c:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800a22e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a232:	2b03      	cmp	r3, #3
 800a234:	d003      	beq.n	800a23e <USB_HC_Init+0x21a>
 800a236:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a23a:	2b01      	cmp	r3, #1
 800a23c:	d10f      	bne.n	800a25e <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800a23e:	78fb      	ldrb	r3, [r7, #3]
 800a240:	015a      	lsls	r2, r3, #5
 800a242:	693b      	ldr	r3, [r7, #16]
 800a244:	4413      	add	r3, r2
 800a246:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	78fa      	ldrb	r2, [r7, #3]
 800a24e:	0151      	lsls	r1, r2, #5
 800a250:	693a      	ldr	r2, [r7, #16]
 800a252:	440a      	add	r2, r1
 800a254:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a258:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a25c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800a25e:	7ffb      	ldrb	r3, [r7, #31]
}
 800a260:	4618      	mov	r0, r3
 800a262:	3720      	adds	r7, #32
 800a264:	46bd      	mov	sp, r7
 800a266:	bd80      	pop	{r7, pc}

0800a268 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b08c      	sub	sp, #48	; 0x30
 800a26c:	af02      	add	r7, sp, #8
 800a26e:	60f8      	str	r0, [r7, #12]
 800a270:	60b9      	str	r1, [r7, #8]
 800a272:	4613      	mov	r3, r2
 800a274:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800a27a:	68bb      	ldr	r3, [r7, #8]
 800a27c:	785b      	ldrb	r3, [r3, #1]
 800a27e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800a280:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a284:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a28a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d02d      	beq.n	800a2ee <USB_HC_StartXfer+0x86>
 800a292:	68bb      	ldr	r3, [r7, #8]
 800a294:	791b      	ldrb	r3, [r3, #4]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d129      	bne.n	800a2ee <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800a29a:	79fb      	ldrb	r3, [r7, #7]
 800a29c:	2b01      	cmp	r3, #1
 800a29e:	d117      	bne.n	800a2d0 <USB_HC_StartXfer+0x68>
 800a2a0:	68bb      	ldr	r3, [r7, #8]
 800a2a2:	79db      	ldrb	r3, [r3, #7]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d003      	beq.n	800a2b0 <USB_HC_StartXfer+0x48>
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	79db      	ldrb	r3, [r3, #7]
 800a2ac:	2b02      	cmp	r3, #2
 800a2ae:	d10f      	bne.n	800a2d0 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800a2b0:	69fb      	ldr	r3, [r7, #28]
 800a2b2:	015a      	lsls	r2, r3, #5
 800a2b4:	6a3b      	ldr	r3, [r7, #32]
 800a2b6:	4413      	add	r3, r2
 800a2b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a2bc:	68db      	ldr	r3, [r3, #12]
 800a2be:	69fa      	ldr	r2, [r7, #28]
 800a2c0:	0151      	lsls	r1, r2, #5
 800a2c2:	6a3a      	ldr	r2, [r7, #32]
 800a2c4:	440a      	add	r2, r1
 800a2c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a2ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2ce:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800a2d0:	79fb      	ldrb	r3, [r7, #7]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d10b      	bne.n	800a2ee <USB_HC_StartXfer+0x86>
 800a2d6:	68bb      	ldr	r3, [r7, #8]
 800a2d8:	795b      	ldrb	r3, [r3, #5]
 800a2da:	2b01      	cmp	r3, #1
 800a2dc:	d107      	bne.n	800a2ee <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800a2de:	68bb      	ldr	r3, [r7, #8]
 800a2e0:	785b      	ldrb	r3, [r3, #1]
 800a2e2:	4619      	mov	r1, r3
 800a2e4:	68f8      	ldr	r0, [r7, #12]
 800a2e6:	f000 fa0f 	bl	800a708 <USB_DoPing>
      return HAL_OK;
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	e0f8      	b.n	800a4e0 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800a2ee:	68bb      	ldr	r3, [r7, #8]
 800a2f0:	695b      	ldr	r3, [r3, #20]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d018      	beq.n	800a328 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800a2f6:	68bb      	ldr	r3, [r7, #8]
 800a2f8:	695b      	ldr	r3, [r3, #20]
 800a2fa:	68ba      	ldr	r2, [r7, #8]
 800a2fc:	8912      	ldrh	r2, [r2, #8]
 800a2fe:	4413      	add	r3, r2
 800a300:	3b01      	subs	r3, #1
 800a302:	68ba      	ldr	r2, [r7, #8]
 800a304:	8912      	ldrh	r2, [r2, #8]
 800a306:	fbb3 f3f2 	udiv	r3, r3, r2
 800a30a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800a30c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a30e:	8b7b      	ldrh	r3, [r7, #26]
 800a310:	429a      	cmp	r2, r3
 800a312:	d90b      	bls.n	800a32c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800a314:	8b7b      	ldrh	r3, [r7, #26]
 800a316:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a318:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a31a:	68ba      	ldr	r2, [r7, #8]
 800a31c:	8912      	ldrh	r2, [r2, #8]
 800a31e:	fb03 f202 	mul.w	r2, r3, r2
 800a322:	68bb      	ldr	r3, [r7, #8]
 800a324:	611a      	str	r2, [r3, #16]
 800a326:	e001      	b.n	800a32c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800a328:	2301      	movs	r3, #1
 800a32a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	78db      	ldrb	r3, [r3, #3]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d007      	beq.n	800a344 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a334:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a336:	68ba      	ldr	r2, [r7, #8]
 800a338:	8912      	ldrh	r2, [r2, #8]
 800a33a:	fb03 f202 	mul.w	r2, r3, r2
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	611a      	str	r2, [r3, #16]
 800a342:	e003      	b.n	800a34c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	695a      	ldr	r2, [r3, #20]
 800a348:	68bb      	ldr	r3, [r7, #8]
 800a34a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a34c:	68bb      	ldr	r3, [r7, #8]
 800a34e:	691b      	ldr	r3, [r3, #16]
 800a350:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a354:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a356:	04d9      	lsls	r1, r3, #19
 800a358:	4b63      	ldr	r3, [pc, #396]	; (800a4e8 <USB_HC_StartXfer+0x280>)
 800a35a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a35c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800a35e:	68bb      	ldr	r3, [r7, #8]
 800a360:	7a9b      	ldrb	r3, [r3, #10]
 800a362:	075b      	lsls	r3, r3, #29
 800a364:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a368:	69f9      	ldr	r1, [r7, #28]
 800a36a:	0148      	lsls	r0, r1, #5
 800a36c:	6a39      	ldr	r1, [r7, #32]
 800a36e:	4401      	add	r1, r0
 800a370:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a374:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a376:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800a378:	79fb      	ldrb	r3, [r7, #7]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d009      	beq.n	800a392 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800a37e:	68bb      	ldr	r3, [r7, #8]
 800a380:	68d9      	ldr	r1, [r3, #12]
 800a382:	69fb      	ldr	r3, [r7, #28]
 800a384:	015a      	lsls	r2, r3, #5
 800a386:	6a3b      	ldr	r3, [r7, #32]
 800a388:	4413      	add	r3, r2
 800a38a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a38e:	460a      	mov	r2, r1
 800a390:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800a392:	6a3b      	ldr	r3, [r7, #32]
 800a394:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a398:	689b      	ldr	r3, [r3, #8]
 800a39a:	f003 0301 	and.w	r3, r3, #1
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	bf0c      	ite	eq
 800a3a2:	2301      	moveq	r3, #1
 800a3a4:	2300      	movne	r3, #0
 800a3a6:	b2db      	uxtb	r3, r3
 800a3a8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800a3aa:	69fb      	ldr	r3, [r7, #28]
 800a3ac:	015a      	lsls	r2, r3, #5
 800a3ae:	6a3b      	ldr	r3, [r7, #32]
 800a3b0:	4413      	add	r3, r2
 800a3b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	69fa      	ldr	r2, [r7, #28]
 800a3ba:	0151      	lsls	r1, r2, #5
 800a3bc:	6a3a      	ldr	r2, [r7, #32]
 800a3be:	440a      	add	r2, r1
 800a3c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a3c4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a3c8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800a3ca:	69fb      	ldr	r3, [r7, #28]
 800a3cc:	015a      	lsls	r2, r3, #5
 800a3ce:	6a3b      	ldr	r3, [r7, #32]
 800a3d0:	4413      	add	r3, r2
 800a3d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a3d6:	681a      	ldr	r2, [r3, #0]
 800a3d8:	7e7b      	ldrb	r3, [r7, #25]
 800a3da:	075b      	lsls	r3, r3, #29
 800a3dc:	69f9      	ldr	r1, [r7, #28]
 800a3de:	0148      	lsls	r0, r1, #5
 800a3e0:	6a39      	ldr	r1, [r7, #32]
 800a3e2:	4401      	add	r1, r0
 800a3e4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800a3e8:	4313      	orrs	r3, r2
 800a3ea:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800a3ec:	69fb      	ldr	r3, [r7, #28]
 800a3ee:	015a      	lsls	r2, r3, #5
 800a3f0:	6a3b      	ldr	r3, [r7, #32]
 800a3f2:	4413      	add	r3, r2
 800a3f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a3fc:	693b      	ldr	r3, [r7, #16]
 800a3fe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a402:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800a404:	68bb      	ldr	r3, [r7, #8]
 800a406:	78db      	ldrb	r3, [r3, #3]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d004      	beq.n	800a416 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800a40c:	693b      	ldr	r3, [r7, #16]
 800a40e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a412:	613b      	str	r3, [r7, #16]
 800a414:	e003      	b.n	800a41e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800a416:	693b      	ldr	r3, [r7, #16]
 800a418:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a41c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a41e:	693b      	ldr	r3, [r7, #16]
 800a420:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a424:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800a426:	69fb      	ldr	r3, [r7, #28]
 800a428:	015a      	lsls	r2, r3, #5
 800a42a:	6a3b      	ldr	r3, [r7, #32]
 800a42c:	4413      	add	r3, r2
 800a42e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a432:	461a      	mov	r2, r3
 800a434:	693b      	ldr	r3, [r7, #16]
 800a436:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800a438:	79fb      	ldrb	r3, [r7, #7]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d001      	beq.n	800a442 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800a43e:	2300      	movs	r3, #0
 800a440:	e04e      	b.n	800a4e0 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800a442:	68bb      	ldr	r3, [r7, #8]
 800a444:	78db      	ldrb	r3, [r3, #3]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d149      	bne.n	800a4de <USB_HC_StartXfer+0x276>
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	695b      	ldr	r3, [r3, #20]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d045      	beq.n	800a4de <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800a452:	68bb      	ldr	r3, [r7, #8]
 800a454:	79db      	ldrb	r3, [r3, #7]
 800a456:	2b03      	cmp	r3, #3
 800a458:	d830      	bhi.n	800a4bc <USB_HC_StartXfer+0x254>
 800a45a:	a201      	add	r2, pc, #4	; (adr r2, 800a460 <USB_HC_StartXfer+0x1f8>)
 800a45c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a460:	0800a471 	.word	0x0800a471
 800a464:	0800a495 	.word	0x0800a495
 800a468:	0800a471 	.word	0x0800a471
 800a46c:	0800a495 	.word	0x0800a495
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800a470:	68bb      	ldr	r3, [r7, #8]
 800a472:	695b      	ldr	r3, [r3, #20]
 800a474:	3303      	adds	r3, #3
 800a476:	089b      	lsrs	r3, r3, #2
 800a478:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800a47a:	8afa      	ldrh	r2, [r7, #22]
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a480:	b29b      	uxth	r3, r3
 800a482:	429a      	cmp	r2, r3
 800a484:	d91c      	bls.n	800a4c0 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	699b      	ldr	r3, [r3, #24]
 800a48a:	f043 0220 	orr.w	r2, r3, #32
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	619a      	str	r2, [r3, #24]
        }
        break;
 800a492:	e015      	b.n	800a4c0 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800a494:	68bb      	ldr	r3, [r7, #8]
 800a496:	695b      	ldr	r3, [r3, #20]
 800a498:	3303      	adds	r3, #3
 800a49a:	089b      	lsrs	r3, r3, #2
 800a49c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800a49e:	8afa      	ldrh	r2, [r7, #22]
 800a4a0:	6a3b      	ldr	r3, [r7, #32]
 800a4a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a4a6:	691b      	ldr	r3, [r3, #16]
 800a4a8:	b29b      	uxth	r3, r3
 800a4aa:	429a      	cmp	r2, r3
 800a4ac:	d90a      	bls.n	800a4c4 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	699b      	ldr	r3, [r3, #24]
 800a4b2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	619a      	str	r2, [r3, #24]
        }
        break;
 800a4ba:	e003      	b.n	800a4c4 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800a4bc:	bf00      	nop
 800a4be:	e002      	b.n	800a4c6 <USB_HC_StartXfer+0x25e>
        break;
 800a4c0:	bf00      	nop
 800a4c2:	e000      	b.n	800a4c6 <USB_HC_StartXfer+0x25e>
        break;
 800a4c4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800a4c6:	68bb      	ldr	r3, [r7, #8]
 800a4c8:	68d9      	ldr	r1, [r3, #12]
 800a4ca:	68bb      	ldr	r3, [r7, #8]
 800a4cc:	785a      	ldrb	r2, [r3, #1]
 800a4ce:	68bb      	ldr	r3, [r7, #8]
 800a4d0:	695b      	ldr	r3, [r3, #20]
 800a4d2:	b29b      	uxth	r3, r3
 800a4d4:	2000      	movs	r0, #0
 800a4d6:	9000      	str	r0, [sp, #0]
 800a4d8:	68f8      	ldr	r0, [r7, #12]
 800a4da:	f7ff fb31 	bl	8009b40 <USB_WritePacket>
  }

  return HAL_OK;
 800a4de:	2300      	movs	r3, #0
}
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	3728      	adds	r7, #40	; 0x28
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	bd80      	pop	{r7, pc}
 800a4e8:	1ff80000 	.word	0x1ff80000

0800a4ec <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a4ec:	b480      	push	{r7}
 800a4ee:	b085      	sub	sp, #20
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a4fe:	695b      	ldr	r3, [r3, #20]
 800a500:	b29b      	uxth	r3, r3
}
 800a502:	4618      	mov	r0, r3
 800a504:	3714      	adds	r7, #20
 800a506:	46bd      	mov	sp, r7
 800a508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50c:	4770      	bx	lr

0800a50e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800a50e:	b480      	push	{r7}
 800a510:	b089      	sub	sp, #36	; 0x24
 800a512:	af00      	add	r7, sp, #0
 800a514:	6078      	str	r0, [r7, #4]
 800a516:	460b      	mov	r3, r1
 800a518:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800a51e:	78fb      	ldrb	r3, [r7, #3]
 800a520:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800a522:	2300      	movs	r3, #0
 800a524:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800a526:	69bb      	ldr	r3, [r7, #24]
 800a528:	015a      	lsls	r2, r3, #5
 800a52a:	69fb      	ldr	r3, [r7, #28]
 800a52c:	4413      	add	r3, r2
 800a52e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	0c9b      	lsrs	r3, r3, #18
 800a536:	f003 0303 	and.w	r3, r3, #3
 800a53a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800a53c:	69bb      	ldr	r3, [r7, #24]
 800a53e:	015a      	lsls	r2, r3, #5
 800a540:	69fb      	ldr	r3, [r7, #28]
 800a542:	4413      	add	r3, r2
 800a544:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	0fdb      	lsrs	r3, r3, #31
 800a54c:	f003 0301 	and.w	r3, r3, #1
 800a550:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	689b      	ldr	r3, [r3, #8]
 800a556:	f003 0320 	and.w	r3, r3, #32
 800a55a:	2b20      	cmp	r3, #32
 800a55c:	d104      	bne.n	800a568 <USB_HC_Halt+0x5a>
 800a55e:	693b      	ldr	r3, [r7, #16]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d101      	bne.n	800a568 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800a564:	2300      	movs	r3, #0
 800a566:	e0c8      	b.n	800a6fa <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800a568:	697b      	ldr	r3, [r7, #20]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d002      	beq.n	800a574 <USB_HC_Halt+0x66>
 800a56e:	697b      	ldr	r3, [r7, #20]
 800a570:	2b02      	cmp	r3, #2
 800a572:	d163      	bne.n	800a63c <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a574:	69bb      	ldr	r3, [r7, #24]
 800a576:	015a      	lsls	r2, r3, #5
 800a578:	69fb      	ldr	r3, [r7, #28]
 800a57a:	4413      	add	r3, r2
 800a57c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	69ba      	ldr	r2, [r7, #24]
 800a584:	0151      	lsls	r1, r2, #5
 800a586:	69fa      	ldr	r2, [r7, #28]
 800a588:	440a      	add	r2, r1
 800a58a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a58e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a592:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	689b      	ldr	r3, [r3, #8]
 800a598:	f003 0320 	and.w	r3, r3, #32
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	f040 80ab 	bne.w	800a6f8 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5a6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d133      	bne.n	800a616 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a5ae:	69bb      	ldr	r3, [r7, #24]
 800a5b0:	015a      	lsls	r2, r3, #5
 800a5b2:	69fb      	ldr	r3, [r7, #28]
 800a5b4:	4413      	add	r3, r2
 800a5b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	69ba      	ldr	r2, [r7, #24]
 800a5be:	0151      	lsls	r1, r2, #5
 800a5c0:	69fa      	ldr	r2, [r7, #28]
 800a5c2:	440a      	add	r2, r1
 800a5c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a5c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a5cc:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a5ce:	69bb      	ldr	r3, [r7, #24]
 800a5d0:	015a      	lsls	r2, r3, #5
 800a5d2:	69fb      	ldr	r3, [r7, #28]
 800a5d4:	4413      	add	r3, r2
 800a5d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	69ba      	ldr	r2, [r7, #24]
 800a5de:	0151      	lsls	r1, r2, #5
 800a5e0:	69fa      	ldr	r2, [r7, #28]
 800a5e2:	440a      	add	r2, r1
 800a5e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a5e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a5ec:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	3301      	adds	r3, #1
 800a5f2:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a5fa:	d81d      	bhi.n	800a638 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a5fc:	69bb      	ldr	r3, [r7, #24]
 800a5fe:	015a      	lsls	r2, r3, #5
 800a600:	69fb      	ldr	r3, [r7, #28]
 800a602:	4413      	add	r3, r2
 800a604:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a60e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a612:	d0ec      	beq.n	800a5ee <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a614:	e070      	b.n	800a6f8 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a616:	69bb      	ldr	r3, [r7, #24]
 800a618:	015a      	lsls	r2, r3, #5
 800a61a:	69fb      	ldr	r3, [r7, #28]
 800a61c:	4413      	add	r3, r2
 800a61e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	69ba      	ldr	r2, [r7, #24]
 800a626:	0151      	lsls	r1, r2, #5
 800a628:	69fa      	ldr	r2, [r7, #28]
 800a62a:	440a      	add	r2, r1
 800a62c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a630:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a634:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a636:	e05f      	b.n	800a6f8 <USB_HC_Halt+0x1ea>
            break;
 800a638:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a63a:	e05d      	b.n	800a6f8 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a63c:	69bb      	ldr	r3, [r7, #24]
 800a63e:	015a      	lsls	r2, r3, #5
 800a640:	69fb      	ldr	r3, [r7, #28]
 800a642:	4413      	add	r3, r2
 800a644:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	69ba      	ldr	r2, [r7, #24]
 800a64c:	0151      	lsls	r1, r2, #5
 800a64e:	69fa      	ldr	r2, [r7, #28]
 800a650:	440a      	add	r2, r1
 800a652:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a656:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a65a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800a65c:	69fb      	ldr	r3, [r7, #28]
 800a65e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a662:	691b      	ldr	r3, [r3, #16]
 800a664:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d133      	bne.n	800a6d4 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a66c:	69bb      	ldr	r3, [r7, #24]
 800a66e:	015a      	lsls	r2, r3, #5
 800a670:	69fb      	ldr	r3, [r7, #28]
 800a672:	4413      	add	r3, r2
 800a674:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	69ba      	ldr	r2, [r7, #24]
 800a67c:	0151      	lsls	r1, r2, #5
 800a67e:	69fa      	ldr	r2, [r7, #28]
 800a680:	440a      	add	r2, r1
 800a682:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a686:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a68a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a68c:	69bb      	ldr	r3, [r7, #24]
 800a68e:	015a      	lsls	r2, r3, #5
 800a690:	69fb      	ldr	r3, [r7, #28]
 800a692:	4413      	add	r3, r2
 800a694:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	69ba      	ldr	r2, [r7, #24]
 800a69c:	0151      	lsls	r1, r2, #5
 800a69e:	69fa      	ldr	r2, [r7, #28]
 800a6a0:	440a      	add	r2, r1
 800a6a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a6a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a6aa:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	3301      	adds	r3, #1
 800a6b0:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a6b8:	d81d      	bhi.n	800a6f6 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a6ba:	69bb      	ldr	r3, [r7, #24]
 800a6bc:	015a      	lsls	r2, r3, #5
 800a6be:	69fb      	ldr	r3, [r7, #28]
 800a6c0:	4413      	add	r3, r2
 800a6c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a6cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a6d0:	d0ec      	beq.n	800a6ac <USB_HC_Halt+0x19e>
 800a6d2:	e011      	b.n	800a6f8 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a6d4:	69bb      	ldr	r3, [r7, #24]
 800a6d6:	015a      	lsls	r2, r3, #5
 800a6d8:	69fb      	ldr	r3, [r7, #28]
 800a6da:	4413      	add	r3, r2
 800a6dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	69ba      	ldr	r2, [r7, #24]
 800a6e4:	0151      	lsls	r1, r2, #5
 800a6e6:	69fa      	ldr	r2, [r7, #28]
 800a6e8:	440a      	add	r2, r1
 800a6ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a6ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a6f2:	6013      	str	r3, [r2, #0]
 800a6f4:	e000      	b.n	800a6f8 <USB_HC_Halt+0x1ea>
          break;
 800a6f6:	bf00      	nop
    }
  }

  return HAL_OK;
 800a6f8:	2300      	movs	r3, #0
}
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	3724      	adds	r7, #36	; 0x24
 800a6fe:	46bd      	mov	sp, r7
 800a700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a704:	4770      	bx	lr
	...

0800a708 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800a708:	b480      	push	{r7}
 800a70a:	b087      	sub	sp, #28
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
 800a710:	460b      	mov	r3, r1
 800a712:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800a718:	78fb      	ldrb	r3, [r7, #3]
 800a71a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800a71c:	2301      	movs	r3, #1
 800a71e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	04da      	lsls	r2, r3, #19
 800a724:	4b15      	ldr	r3, [pc, #84]	; (800a77c <USB_DoPing+0x74>)
 800a726:	4013      	ands	r3, r2
 800a728:	693a      	ldr	r2, [r7, #16]
 800a72a:	0151      	lsls	r1, r2, #5
 800a72c:	697a      	ldr	r2, [r7, #20]
 800a72e:	440a      	add	r2, r1
 800a730:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a734:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a738:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800a73a:	693b      	ldr	r3, [r7, #16]
 800a73c:	015a      	lsls	r2, r3, #5
 800a73e:	697b      	ldr	r3, [r7, #20]
 800a740:	4413      	add	r3, r2
 800a742:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a74a:	68bb      	ldr	r3, [r7, #8]
 800a74c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a750:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a752:	68bb      	ldr	r3, [r7, #8]
 800a754:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a758:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800a75a:	693b      	ldr	r3, [r7, #16]
 800a75c:	015a      	lsls	r2, r3, #5
 800a75e:	697b      	ldr	r3, [r7, #20]
 800a760:	4413      	add	r3, r2
 800a762:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a766:	461a      	mov	r2, r3
 800a768:	68bb      	ldr	r3, [r7, #8]
 800a76a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800a76c:	2300      	movs	r3, #0
}
 800a76e:	4618      	mov	r0, r3
 800a770:	371c      	adds	r7, #28
 800a772:	46bd      	mov	sp, r7
 800a774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a778:	4770      	bx	lr
 800a77a:	bf00      	nop
 800a77c:	1ff80000 	.word	0x1ff80000

0800a780 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b088      	sub	sp, #32
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800a788:	2300      	movs	r3, #0
 800a78a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800a790:	2300      	movs	r3, #0
 800a792:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800a794:	6878      	ldr	r0, [r7, #4]
 800a796:	f7ff f911 	bl	80099bc <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a79a:	2110      	movs	r1, #16
 800a79c:	6878      	ldr	r0, [r7, #4]
 800a79e:	f7ff f96b 	bl	8009a78 <USB_FlushTxFifo>
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d001      	beq.n	800a7ac <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800a7a8:	2301      	movs	r3, #1
 800a7aa:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a7ac:	6878      	ldr	r0, [r7, #4]
 800a7ae:	f7ff f997 	bl	8009ae0 <USB_FlushRxFifo>
 800a7b2:	4603      	mov	r3, r0
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d001      	beq.n	800a7bc <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800a7b8:	2301      	movs	r3, #1
 800a7ba:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800a7bc:	2300      	movs	r3, #0
 800a7be:	61bb      	str	r3, [r7, #24]
 800a7c0:	e01f      	b.n	800a802 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800a7c2:	69bb      	ldr	r3, [r7, #24]
 800a7c4:	015a      	lsls	r2, r3, #5
 800a7c6:	697b      	ldr	r3, [r7, #20]
 800a7c8:	4413      	add	r3, r2
 800a7ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800a7d2:	693b      	ldr	r3, [r7, #16]
 800a7d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a7d8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800a7da:	693b      	ldr	r3, [r7, #16]
 800a7dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a7e0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a7e2:	693b      	ldr	r3, [r7, #16]
 800a7e4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a7e8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800a7ea:	69bb      	ldr	r3, [r7, #24]
 800a7ec:	015a      	lsls	r2, r3, #5
 800a7ee:	697b      	ldr	r3, [r7, #20]
 800a7f0:	4413      	add	r3, r2
 800a7f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7f6:	461a      	mov	r2, r3
 800a7f8:	693b      	ldr	r3, [r7, #16]
 800a7fa:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800a7fc:	69bb      	ldr	r3, [r7, #24]
 800a7fe:	3301      	adds	r3, #1
 800a800:	61bb      	str	r3, [r7, #24]
 800a802:	69bb      	ldr	r3, [r7, #24]
 800a804:	2b0f      	cmp	r3, #15
 800a806:	d9dc      	bls.n	800a7c2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800a808:	2300      	movs	r3, #0
 800a80a:	61bb      	str	r3, [r7, #24]
 800a80c:	e034      	b.n	800a878 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800a80e:	69bb      	ldr	r3, [r7, #24]
 800a810:	015a      	lsls	r2, r3, #5
 800a812:	697b      	ldr	r3, [r7, #20]
 800a814:	4413      	add	r3, r2
 800a816:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800a81e:	693b      	ldr	r3, [r7, #16]
 800a820:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a824:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800a826:	693b      	ldr	r3, [r7, #16]
 800a828:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a82c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a82e:	693b      	ldr	r3, [r7, #16]
 800a830:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a834:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800a836:	69bb      	ldr	r3, [r7, #24]
 800a838:	015a      	lsls	r2, r3, #5
 800a83a:	697b      	ldr	r3, [r7, #20]
 800a83c:	4413      	add	r3, r2
 800a83e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a842:	461a      	mov	r2, r3
 800a844:	693b      	ldr	r3, [r7, #16]
 800a846:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	3301      	adds	r3, #1
 800a84c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a854:	d80c      	bhi.n	800a870 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a856:	69bb      	ldr	r3, [r7, #24]
 800a858:	015a      	lsls	r2, r3, #5
 800a85a:	697b      	ldr	r3, [r7, #20]
 800a85c:	4413      	add	r3, r2
 800a85e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a868:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a86c:	d0ec      	beq.n	800a848 <USB_StopHost+0xc8>
 800a86e:	e000      	b.n	800a872 <USB_StopHost+0xf2>
        break;
 800a870:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800a872:	69bb      	ldr	r3, [r7, #24]
 800a874:	3301      	adds	r3, #1
 800a876:	61bb      	str	r3, [r7, #24]
 800a878:	69bb      	ldr	r3, [r7, #24]
 800a87a:	2b0f      	cmp	r3, #15
 800a87c:	d9c7      	bls.n	800a80e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800a87e:	697b      	ldr	r3, [r7, #20]
 800a880:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a884:	461a      	mov	r2, r3
 800a886:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a88a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a892:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800a894:	6878      	ldr	r0, [r7, #4]
 800a896:	f7ff f880 	bl	800999a <USB_EnableGlobalInt>

  return ret;
 800a89a:	7ffb      	ldrb	r3, [r7, #31]
}
 800a89c:	4618      	mov	r0, r3
 800a89e:	3720      	adds	r7, #32
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	bd80      	pop	{r7, pc}

0800a8a4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 800a8a8:	4904      	ldr	r1, [pc, #16]	; (800a8bc <MX_FATFS_Init+0x18>)
 800a8aa:	4805      	ldr	r0, [pc, #20]	; (800a8c0 <MX_FATFS_Init+0x1c>)
 800a8ac:	f003 f95e 	bl	800db6c <FATFS_LinkDriver>
 800a8b0:	4603      	mov	r3, r0
 800a8b2:	461a      	mov	r2, r3
 800a8b4:	4b03      	ldr	r3, [pc, #12]	; (800a8c4 <MX_FATFS_Init+0x20>)
 800a8b6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a8b8:	bf00      	nop
 800a8ba:	bd80      	pop	{r7, pc}
 800a8bc:	20003518 	.word	0x20003518
 800a8c0:	0800f4b8 	.word	0x0800f4b8
 800a8c4:	20003514 	.word	0x20003514

0800a8c8 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 800a8c8:	b480      	push	{r7}
 800a8ca:	b083      	sub	sp, #12
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 800a8d2:	2300      	movs	r3, #0
}
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	370c      	adds	r7, #12
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8de:	4770      	bx	lr

0800a8e0 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b084      	sub	sp, #16
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 800a8ea:	2301      	movs	r3, #1
 800a8ec:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 800a8ee:	79fb      	ldrb	r3, [r7, #7]
 800a8f0:	4619      	mov	r1, r3
 800a8f2:	4808      	ldr	r0, [pc, #32]	; (800a914 <USBH_status+0x34>)
 800a8f4:	f000 fe32 	bl	800b55c <USBH_MSC_UnitIsReady>
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d002      	beq.n	800a904 <USBH_status+0x24>
  {
    res = RES_OK;
 800a8fe:	2300      	movs	r3, #0
 800a900:	73fb      	strb	r3, [r7, #15]
 800a902:	e001      	b.n	800a908 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 800a904:	2301      	movs	r3, #1
 800a906:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800a908:	7bfb      	ldrb	r3, [r7, #15]
}
 800a90a:	4618      	mov	r0, r3
 800a90c:	3710      	adds	r7, #16
 800a90e:	46bd      	mov	sp, r7
 800a910:	bd80      	pop	{r7, pc}
 800a912:	bf00      	nop
 800a914:	20003528 	.word	0x20003528

0800a918 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b094      	sub	sp, #80	; 0x50
 800a91c:	af02      	add	r7, sp, #8
 800a91e:	60b9      	str	r1, [r7, #8]
 800a920:	607a      	str	r2, [r7, #4]
 800a922:	603b      	str	r3, [r7, #0]
 800a924:	4603      	mov	r3, r0
 800a926:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a928:	2301      	movs	r3, #1
 800a92a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 800a92e:	7bf9      	ldrb	r1, [r7, #15]
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	9300      	str	r3, [sp, #0]
 800a934:	68bb      	ldr	r3, [r7, #8]
 800a936:	687a      	ldr	r2, [r7, #4]
 800a938:	4813      	ldr	r0, [pc, #76]	; (800a988 <USBH_read+0x70>)
 800a93a:	f000 fe59 	bl	800b5f0 <USBH_MSC_Read>
 800a93e:	4603      	mov	r3, r0
 800a940:	2b00      	cmp	r3, #0
 800a942:	d103      	bne.n	800a94c <USBH_read+0x34>
  {
    res = RES_OK;
 800a944:	2300      	movs	r3, #0
 800a946:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a94a:	e017      	b.n	800a97c <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800a94c:	f107 0210 	add.w	r2, r7, #16
 800a950:	7bfb      	ldrb	r3, [r7, #15]
 800a952:	4619      	mov	r1, r3
 800a954:	480c      	ldr	r0, [pc, #48]	; (800a988 <USBH_read+0x70>)
 800a956:	f000 fe27 	bl	800b5a8 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800a95a:	7f7b      	ldrb	r3, [r7, #29]
 800a95c:	2b3a      	cmp	r3, #58	; 0x3a
 800a95e:	d005      	beq.n	800a96c <USBH_read+0x54>
 800a960:	2b3a      	cmp	r3, #58	; 0x3a
 800a962:	dc07      	bgt.n	800a974 <USBH_read+0x5c>
 800a964:	2b04      	cmp	r3, #4
 800a966:	d001      	beq.n	800a96c <USBH_read+0x54>
 800a968:	2b28      	cmp	r3, #40	; 0x28
 800a96a:	d103      	bne.n	800a974 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 800a96c:	2303      	movs	r3, #3
 800a96e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800a972:	e003      	b.n	800a97c <USBH_read+0x64>

    default:
      res = RES_ERROR;
 800a974:	2301      	movs	r3, #1
 800a976:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800a97a:	bf00      	nop
    }
  }

  return res;
 800a97c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800a980:	4618      	mov	r0, r3
 800a982:	3748      	adds	r7, #72	; 0x48
 800a984:	46bd      	mov	sp, r7
 800a986:	bd80      	pop	{r7, pc}
 800a988:	20003528 	.word	0x20003528

0800a98c <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b094      	sub	sp, #80	; 0x50
 800a990:	af02      	add	r7, sp, #8
 800a992:	60b9      	str	r1, [r7, #8]
 800a994:	607a      	str	r2, [r7, #4]
 800a996:	603b      	str	r3, [r7, #0]
 800a998:	4603      	mov	r3, r0
 800a99a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a99c:	2301      	movs	r3, #1
 800a99e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 800a9a2:	7bf9      	ldrb	r1, [r7, #15]
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	9300      	str	r3, [sp, #0]
 800a9a8:	68bb      	ldr	r3, [r7, #8]
 800a9aa:	687a      	ldr	r2, [r7, #4]
 800a9ac:	4817      	ldr	r0, [pc, #92]	; (800aa0c <USBH_write+0x80>)
 800a9ae:	f000 fe88 	bl	800b6c2 <USBH_MSC_Write>
 800a9b2:	4603      	mov	r3, r0
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d103      	bne.n	800a9c0 <USBH_write+0x34>
  {
    res = RES_OK;
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a9be:	e01f      	b.n	800aa00 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800a9c0:	f107 0210 	add.w	r2, r7, #16
 800a9c4:	7bfb      	ldrb	r3, [r7, #15]
 800a9c6:	4619      	mov	r1, r3
 800a9c8:	4810      	ldr	r0, [pc, #64]	; (800aa0c <USBH_write+0x80>)
 800a9ca:	f000 fded 	bl	800b5a8 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800a9ce:	7f7b      	ldrb	r3, [r7, #29]
 800a9d0:	2b3a      	cmp	r3, #58	; 0x3a
 800a9d2:	d00d      	beq.n	800a9f0 <USBH_write+0x64>
 800a9d4:	2b3a      	cmp	r3, #58	; 0x3a
 800a9d6:	dc0f      	bgt.n	800a9f8 <USBH_write+0x6c>
 800a9d8:	2b28      	cmp	r3, #40	; 0x28
 800a9da:	d009      	beq.n	800a9f0 <USBH_write+0x64>
 800a9dc:	2b28      	cmp	r3, #40	; 0x28
 800a9de:	dc0b      	bgt.n	800a9f8 <USBH_write+0x6c>
 800a9e0:	2b04      	cmp	r3, #4
 800a9e2:	d005      	beq.n	800a9f0 <USBH_write+0x64>
 800a9e4:	2b27      	cmp	r3, #39	; 0x27
 800a9e6:	d107      	bne.n	800a9f8 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 800a9e8:	2302      	movs	r3, #2
 800a9ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800a9ee:	e007      	b.n	800aa00 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 800a9f0:	2303      	movs	r3, #3
 800a9f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800a9f6:	e003      	b.n	800aa00 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 800a9f8:	2301      	movs	r3, #1
 800a9fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800a9fe:	bf00      	nop
    }
  }

  return res;
 800aa00:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800aa04:	4618      	mov	r0, r3
 800aa06:	3748      	adds	r7, #72	; 0x48
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	bd80      	pop	{r7, pc}
 800aa0c:	20003528 	.word	0x20003528

0800aa10 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b090      	sub	sp, #64	; 0x40
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	4603      	mov	r3, r0
 800aa18:	603a      	str	r2, [r7, #0]
 800aa1a:	71fb      	strb	r3, [r7, #7]
 800aa1c:	460b      	mov	r3, r1
 800aa1e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800aa20:	2301      	movs	r3, #1
 800aa22:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 800aa26:	79bb      	ldrb	r3, [r7, #6]
 800aa28:	2b03      	cmp	r3, #3
 800aa2a:	d852      	bhi.n	800aad2 <USBH_ioctl+0xc2>
 800aa2c:	a201      	add	r2, pc, #4	; (adr r2, 800aa34 <USBH_ioctl+0x24>)
 800aa2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa32:	bf00      	nop
 800aa34:	0800aa45 	.word	0x0800aa45
 800aa38:	0800aa4d 	.word	0x0800aa4d
 800aa3c:	0800aa77 	.word	0x0800aa77
 800aa40:	0800aaa3 	.word	0x0800aaa3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 800aa44:	2300      	movs	r3, #0
 800aa46:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800aa4a:	e045      	b.n	800aad8 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800aa4c:	f107 0208 	add.w	r2, r7, #8
 800aa50:	79fb      	ldrb	r3, [r7, #7]
 800aa52:	4619      	mov	r1, r3
 800aa54:	4823      	ldr	r0, [pc, #140]	; (800aae4 <USBH_ioctl+0xd4>)
 800aa56:	f000 fda7 	bl	800b5a8 <USBH_MSC_GetLUNInfo>
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d106      	bne.n	800aa6e <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 800aa60:	68fa      	ldr	r2, [r7, #12]
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800aa66:	2300      	movs	r3, #0
 800aa68:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800aa6c:	e034      	b.n	800aad8 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800aa6e:	2301      	movs	r3, #1
 800aa70:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800aa74:	e030      	b.n	800aad8 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800aa76:	f107 0208 	add.w	r2, r7, #8
 800aa7a:	79fb      	ldrb	r3, [r7, #7]
 800aa7c:	4619      	mov	r1, r3
 800aa7e:	4819      	ldr	r0, [pc, #100]	; (800aae4 <USBH_ioctl+0xd4>)
 800aa80:	f000 fd92 	bl	800b5a8 <USBH_MSC_GetLUNInfo>
 800aa84:	4603      	mov	r3, r0
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d107      	bne.n	800aa9a <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 800aa8a:	8a3b      	ldrh	r3, [r7, #16]
 800aa8c:	461a      	mov	r2, r3
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800aa92:	2300      	movs	r3, #0
 800aa94:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800aa98:	e01e      	b.n	800aad8 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800aa9a:	2301      	movs	r3, #1
 800aa9c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800aaa0:	e01a      	b.n	800aad8 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800aaa2:	f107 0208 	add.w	r2, r7, #8
 800aaa6:	79fb      	ldrb	r3, [r7, #7]
 800aaa8:	4619      	mov	r1, r3
 800aaaa:	480e      	ldr	r0, [pc, #56]	; (800aae4 <USBH_ioctl+0xd4>)
 800aaac:	f000 fd7c 	bl	800b5a8 <USBH_MSC_GetLUNInfo>
 800aab0:	4603      	mov	r3, r0
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d109      	bne.n	800aaca <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 800aab6:	8a3b      	ldrh	r3, [r7, #16]
 800aab8:	0a5b      	lsrs	r3, r3, #9
 800aaba:	b29b      	uxth	r3, r3
 800aabc:	461a      	mov	r2, r3
 800aabe:	683b      	ldr	r3, [r7, #0]
 800aac0:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800aac2:	2300      	movs	r3, #0
 800aac4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800aac8:	e006      	b.n	800aad8 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800aaca:	2301      	movs	r3, #1
 800aacc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800aad0:	e002      	b.n	800aad8 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 800aad2:	2304      	movs	r3, #4
 800aad4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 800aad8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800aadc:	4618      	mov	r0, r3
 800aade:	3740      	adds	r7, #64	; 0x40
 800aae0:	46bd      	mov	sp, r7
 800aae2:	bd80      	pop	{r7, pc}
 800aae4:	20003528 	.word	0x20003528

0800aae8 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800aae8:	b590      	push	{r4, r7, lr}
 800aaea:	b089      	sub	sp, #36	; 0x24
 800aaec:	af04      	add	r7, sp, #16
 800aaee:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aaf6:	7919      	ldrb	r1, [r3, #4]
 800aaf8:	2350      	movs	r3, #80	; 0x50
 800aafa:	2206      	movs	r2, #6
 800aafc:	6878      	ldr	r0, [r7, #4]
 800aafe:	f001 fc6b 	bl	800c3d8 <USBH_FindInterface>
 800ab02:	4603      	mov	r3, r0
 800ab04:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 800ab06:	7bfb      	ldrb	r3, [r7, #15]
 800ab08:	2bff      	cmp	r3, #255	; 0xff
 800ab0a:	d002      	beq.n	800ab12 <USBH_MSC_InterfaceInit+0x2a>
 800ab0c:	7bfb      	ldrb	r3, [r7, #15]
 800ab0e:	2b01      	cmp	r3, #1
 800ab10:	d901      	bls.n	800ab16 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800ab12:	2302      	movs	r3, #2
 800ab14:	e106      	b.n	800ad24 <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 800ab16:	7bfb      	ldrb	r3, [r7, #15]
 800ab18:	4619      	mov	r1, r3
 800ab1a:	6878      	ldr	r0, [r7, #4]
 800ab1c:	f001 fc40 	bl	800c3a0 <USBH_SelectInterface>
 800ab20:	4603      	mov	r3, r0
 800ab22:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800ab24:	7bbb      	ldrb	r3, [r7, #14]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d001      	beq.n	800ab2e <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 800ab2a:	2302      	movs	r3, #2
 800ab2c:	e0fa      	b.n	800ad24 <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800ab34:	f44f 7080 	mov.w	r0, #256	; 0x100
 800ab38:	f003 fb90 	bl	800e25c <malloc>
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ab46:	69db      	ldr	r3, [r3, #28]
 800ab48:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 800ab4a:	68bb      	ldr	r3, [r7, #8]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d101      	bne.n	800ab54 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 800ab50:	2302      	movs	r3, #2
 800ab52:	e0e7      	b.n	800ad24 <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 800ab54:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ab58:	2100      	movs	r1, #0
 800ab5a:	68b8      	ldr	r0, [r7, #8]
 800ab5c:	f003 fb9c 	bl	800e298 <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800ab60:	7bfb      	ldrb	r3, [r7, #15]
 800ab62:	687a      	ldr	r2, [r7, #4]
 800ab64:	211a      	movs	r1, #26
 800ab66:	fb01 f303 	mul.w	r3, r1, r3
 800ab6a:	4413      	add	r3, r2
 800ab6c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800ab70:	781b      	ldrb	r3, [r3, #0]
 800ab72:	b25b      	sxtb	r3, r3
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	da16      	bge.n	800aba6 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800ab78:	7bfb      	ldrb	r3, [r7, #15]
 800ab7a:	687a      	ldr	r2, [r7, #4]
 800ab7c:	211a      	movs	r1, #26
 800ab7e:	fb01 f303 	mul.w	r3, r1, r3
 800ab82:	4413      	add	r3, r2
 800ab84:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800ab88:	781a      	ldrb	r2, [r3, #0]
 800ab8a:	68bb      	ldr	r3, [r7, #8]
 800ab8c:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800ab8e:	7bfb      	ldrb	r3, [r7, #15]
 800ab90:	687a      	ldr	r2, [r7, #4]
 800ab92:	211a      	movs	r1, #26
 800ab94:	fb01 f303 	mul.w	r3, r1, r3
 800ab98:	4413      	add	r3, r2
 800ab9a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800ab9e:	881a      	ldrh	r2, [r3, #0]
 800aba0:	68bb      	ldr	r3, [r7, #8]
 800aba2:	815a      	strh	r2, [r3, #10]
 800aba4:	e015      	b.n	800abd2 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800aba6:	7bfb      	ldrb	r3, [r7, #15]
 800aba8:	687a      	ldr	r2, [r7, #4]
 800abaa:	211a      	movs	r1, #26
 800abac:	fb01 f303 	mul.w	r3, r1, r3
 800abb0:	4413      	add	r3, r2
 800abb2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800abb6:	781a      	ldrb	r2, [r3, #0]
 800abb8:	68bb      	ldr	r3, [r7, #8]
 800abba:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800abbc:	7bfb      	ldrb	r3, [r7, #15]
 800abbe:	687a      	ldr	r2, [r7, #4]
 800abc0:	211a      	movs	r1, #26
 800abc2:	fb01 f303 	mul.w	r3, r1, r3
 800abc6:	4413      	add	r3, r2
 800abc8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800abcc:	881a      	ldrh	r2, [r3, #0]
 800abce:	68bb      	ldr	r3, [r7, #8]
 800abd0:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800abd2:	7bfb      	ldrb	r3, [r7, #15]
 800abd4:	687a      	ldr	r2, [r7, #4]
 800abd6:	211a      	movs	r1, #26
 800abd8:	fb01 f303 	mul.w	r3, r1, r3
 800abdc:	4413      	add	r3, r2
 800abde:	f203 3356 	addw	r3, r3, #854	; 0x356
 800abe2:	781b      	ldrb	r3, [r3, #0]
 800abe4:	b25b      	sxtb	r3, r3
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	da16      	bge.n	800ac18 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800abea:	7bfb      	ldrb	r3, [r7, #15]
 800abec:	687a      	ldr	r2, [r7, #4]
 800abee:	211a      	movs	r1, #26
 800abf0:	fb01 f303 	mul.w	r3, r1, r3
 800abf4:	4413      	add	r3, r2
 800abf6:	f203 3356 	addw	r3, r3, #854	; 0x356
 800abfa:	781a      	ldrb	r2, [r3, #0]
 800abfc:	68bb      	ldr	r3, [r7, #8]
 800abfe:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800ac00:	7bfb      	ldrb	r3, [r7, #15]
 800ac02:	687a      	ldr	r2, [r7, #4]
 800ac04:	211a      	movs	r1, #26
 800ac06:	fb01 f303 	mul.w	r3, r1, r3
 800ac0a:	4413      	add	r3, r2
 800ac0c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800ac10:	881a      	ldrh	r2, [r3, #0]
 800ac12:	68bb      	ldr	r3, [r7, #8]
 800ac14:	815a      	strh	r2, [r3, #10]
 800ac16:	e015      	b.n	800ac44 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800ac18:	7bfb      	ldrb	r3, [r7, #15]
 800ac1a:	687a      	ldr	r2, [r7, #4]
 800ac1c:	211a      	movs	r1, #26
 800ac1e:	fb01 f303 	mul.w	r3, r1, r3
 800ac22:	4413      	add	r3, r2
 800ac24:	f203 3356 	addw	r3, r3, #854	; 0x356
 800ac28:	781a      	ldrb	r2, [r3, #0]
 800ac2a:	68bb      	ldr	r3, [r7, #8]
 800ac2c:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800ac2e:	7bfb      	ldrb	r3, [r7, #15]
 800ac30:	687a      	ldr	r2, [r7, #4]
 800ac32:	211a      	movs	r1, #26
 800ac34:	fb01 f303 	mul.w	r3, r1, r3
 800ac38:	4413      	add	r3, r2
 800ac3a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800ac3e:	881a      	ldrh	r2, [r3, #0]
 800ac40:	68bb      	ldr	r3, [r7, #8]
 800ac42:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 800ac44:	68bb      	ldr	r3, [r7, #8]
 800ac46:	2200      	movs	r2, #0
 800ac48:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 800ac50:	68bb      	ldr	r3, [r7, #8]
 800ac52:	2200      	movs	r2, #0
 800ac54:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	799b      	ldrb	r3, [r3, #6]
 800ac5a:	4619      	mov	r1, r3
 800ac5c:	6878      	ldr	r0, [r7, #4]
 800ac5e:	f002 fed6 	bl	800da0e <USBH_AllocPipe>
 800ac62:	4603      	mov	r3, r0
 800ac64:	461a      	mov	r2, r3
 800ac66:	68bb      	ldr	r3, [r7, #8]
 800ac68:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800ac6a:	68bb      	ldr	r3, [r7, #8]
 800ac6c:	79db      	ldrb	r3, [r3, #7]
 800ac6e:	4619      	mov	r1, r3
 800ac70:	6878      	ldr	r0, [r7, #4]
 800ac72:	f002 fecc 	bl	800da0e <USBH_AllocPipe>
 800ac76:	4603      	mov	r3, r0
 800ac78:	461a      	mov	r2, r3
 800ac7a:	68bb      	ldr	r3, [r7, #8]
 800ac7c:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 800ac7e:	6878      	ldr	r0, [r7, #4]
 800ac80:	f000 fdc4 	bl	800b80c <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 800ac84:	68bb      	ldr	r3, [r7, #8]
 800ac86:	799b      	ldrb	r3, [r3, #6]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d01e      	beq.n	800acca <USBH_MSC_InterfaceInit+0x1e2>
 800ac8c:	68bb      	ldr	r3, [r7, #8]
 800ac8e:	891b      	ldrh	r3, [r3, #8]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d01a      	beq.n	800acca <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 800ac94:	68bb      	ldr	r3, [r7, #8]
 800ac96:	7959      	ldrb	r1, [r3, #5]
 800ac98:	68bb      	ldr	r3, [r7, #8]
 800ac9a:	7998      	ldrb	r0, [r3, #6]
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800aca8:	68ba      	ldr	r2, [r7, #8]
 800acaa:	8912      	ldrh	r2, [r2, #8]
 800acac:	9202      	str	r2, [sp, #8]
 800acae:	2202      	movs	r2, #2
 800acb0:	9201      	str	r2, [sp, #4]
 800acb2:	9300      	str	r3, [sp, #0]
 800acb4:	4623      	mov	r3, r4
 800acb6:	4602      	mov	r2, r0
 800acb8:	6878      	ldr	r0, [r7, #4]
 800acba:	f002 fe79 	bl	800d9b0 <USBH_OpenPipe>
 800acbe:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 800acc0:	68bb      	ldr	r3, [r7, #8]
 800acc2:	79db      	ldrb	r3, [r3, #7]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d02c      	beq.n	800ad22 <USBH_MSC_InterfaceInit+0x23a>
 800acc8:	e001      	b.n	800acce <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
 800acca:	2303      	movs	r3, #3
 800accc:	e02a      	b.n	800ad24 <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 800acce:	68bb      	ldr	r3, [r7, #8]
 800acd0:	895b      	ldrh	r3, [r3, #10]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d025      	beq.n	800ad22 <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 800acd6:	68bb      	ldr	r3, [r7, #8]
 800acd8:	7919      	ldrb	r1, [r3, #4]
 800acda:	68bb      	ldr	r3, [r7, #8]
 800acdc:	79d8      	ldrb	r0, [r3, #7]
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800acea:	68ba      	ldr	r2, [r7, #8]
 800acec:	8952      	ldrh	r2, [r2, #10]
 800acee:	9202      	str	r2, [sp, #8]
 800acf0:	2202      	movs	r2, #2
 800acf2:	9201      	str	r2, [sp, #4]
 800acf4:	9300      	str	r3, [sp, #0]
 800acf6:	4623      	mov	r3, r4
 800acf8:	4602      	mov	r2, r0
 800acfa:	6878      	ldr	r0, [r7, #4]
 800acfc:	f002 fe58 	bl	800d9b0 <USBH_OpenPipe>
 800ad00:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800ad02:	68bb      	ldr	r3, [r7, #8]
 800ad04:	791b      	ldrb	r3, [r3, #4]
 800ad06:	2200      	movs	r2, #0
 800ad08:	4619      	mov	r1, r3
 800ad0a:	6878      	ldr	r0, [r7, #4]
 800ad0c:	f003 f9c8 	bl	800e0a0 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 800ad10:	68bb      	ldr	r3, [r7, #8]
 800ad12:	795b      	ldrb	r3, [r3, #5]
 800ad14:	2200      	movs	r2, #0
 800ad16:	4619      	mov	r1, r3
 800ad18:	6878      	ldr	r0, [r7, #4]
 800ad1a:	f003 f9c1 	bl	800e0a0 <USBH_LL_SetToggle>

  return USBH_OK;
 800ad1e:	2300      	movs	r3, #0
 800ad20:	e000      	b.n	800ad24 <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
 800ad22:	2303      	movs	r3, #3
}
 800ad24:	4618      	mov	r0, r3
 800ad26:	3714      	adds	r7, #20
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	bd90      	pop	{r4, r7, pc}

0800ad2c <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b084      	sub	sp, #16
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ad3a:	69db      	ldr	r3, [r3, #28]
 800ad3c:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	795b      	ldrb	r3, [r3, #5]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d00e      	beq.n	800ad64 <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	795b      	ldrb	r3, [r3, #5]
 800ad4a:	4619      	mov	r1, r3
 800ad4c:	6878      	ldr	r0, [r7, #4]
 800ad4e:	f002 fe4e 	bl	800d9ee <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	795b      	ldrb	r3, [r3, #5]
 800ad56:	4619      	mov	r1, r3
 800ad58:	6878      	ldr	r0, [r7, #4]
 800ad5a:	f002 fe79 	bl	800da50 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	2200      	movs	r2, #0
 800ad62:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	791b      	ldrb	r3, [r3, #4]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d00e      	beq.n	800ad8a <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	791b      	ldrb	r3, [r3, #4]
 800ad70:	4619      	mov	r1, r3
 800ad72:	6878      	ldr	r0, [r7, #4]
 800ad74:	f002 fe3b 	bl	800d9ee <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	791b      	ldrb	r3, [r3, #4]
 800ad7c:	4619      	mov	r1, r3
 800ad7e:	6878      	ldr	r0, [r7, #4]
 800ad80:	f002 fe66 	bl	800da50 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	2200      	movs	r2, #0
 800ad88:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ad90:	69db      	ldr	r3, [r3, #28]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d00b      	beq.n	800adae <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ad9c:	69db      	ldr	r3, [r3, #28]
 800ad9e:	4618      	mov	r0, r3
 800ada0:	f003 fa64 	bl	800e26c <free>
    phost->pActiveClass->pData = 0U;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800adaa:	2200      	movs	r2, #0
 800adac:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800adae:	2300      	movs	r3, #0
}
 800adb0:	4618      	mov	r0, r3
 800adb2:	3710      	adds	r7, #16
 800adb4:	46bd      	mov	sp, r7
 800adb6:	bd80      	pop	{r7, pc}

0800adb8 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b084      	sub	sp, #16
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800adc6:	69db      	ldr	r3, [r3, #28]
 800adc8:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 800adca:	2301      	movs	r3, #1
 800adcc:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 800adce:	68bb      	ldr	r3, [r7, #8]
 800add0:	7b9b      	ldrb	r3, [r3, #14]
 800add2:	2b03      	cmp	r3, #3
 800add4:	d041      	beq.n	800ae5a <USBH_MSC_ClassRequest+0xa2>
 800add6:	2b03      	cmp	r3, #3
 800add8:	dc4b      	bgt.n	800ae72 <USBH_MSC_ClassRequest+0xba>
 800adda:	2b00      	cmp	r3, #0
 800addc:	d001      	beq.n	800ade2 <USBH_MSC_ClassRequest+0x2a>
 800adde:	2b02      	cmp	r3, #2
 800ade0:	d147      	bne.n	800ae72 <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 800ade2:	68bb      	ldr	r3, [r7, #8]
 800ade4:	4619      	mov	r1, r3
 800ade6:	6878      	ldr	r0, [r7, #4]
 800ade8:	f000 fcf1 	bl	800b7ce <USBH_MSC_BOT_REQ_GetMaxLUN>
 800adec:	4603      	mov	r3, r0
 800adee:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 800adf0:	7bfb      	ldrb	r3, [r7, #15]
 800adf2:	2b03      	cmp	r3, #3
 800adf4:	d104      	bne.n	800ae00 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 800adf6:	68bb      	ldr	r3, [r7, #8]
 800adf8:	2200      	movs	r2, #0
 800adfa:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 800adfc:	2300      	movs	r3, #0
 800adfe:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 800ae00:	7bfb      	ldrb	r3, [r7, #15]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d137      	bne.n	800ae76 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 800ae06:	68bb      	ldr	r3, [r7, #8]
 800ae08:	781b      	ldrb	r3, [r3, #0]
 800ae0a:	2b02      	cmp	r3, #2
 800ae0c:	d804      	bhi.n	800ae18 <USBH_MSC_ClassRequest+0x60>
 800ae0e:	68bb      	ldr	r3, [r7, #8]
 800ae10:	781b      	ldrb	r3, [r3, #0]
 800ae12:	3301      	adds	r3, #1
 800ae14:	b2da      	uxtb	r2, r3
 800ae16:	e000      	b.n	800ae1a <USBH_MSC_ClassRequest+0x62>
 800ae18:	2202      	movs	r2, #2
 800ae1a:	68bb      	ldr	r3, [r7, #8]
 800ae1c:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800ae1e:	2300      	movs	r3, #0
 800ae20:	73bb      	strb	r3, [r7, #14]
 800ae22:	e014      	b.n	800ae4e <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800ae24:	7bbb      	ldrb	r3, [r7, #14]
 800ae26:	68ba      	ldr	r2, [r7, #8]
 800ae28:	2134      	movs	r1, #52	; 0x34
 800ae2a:	fb01 f303 	mul.w	r3, r1, r3
 800ae2e:	4413      	add	r3, r2
 800ae30:	3392      	adds	r3, #146	; 0x92
 800ae32:	2202      	movs	r2, #2
 800ae34:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 800ae36:	7bbb      	ldrb	r3, [r7, #14]
 800ae38:	68ba      	ldr	r2, [r7, #8]
 800ae3a:	2134      	movs	r1, #52	; 0x34
 800ae3c:	fb01 f303 	mul.w	r3, r1, r3
 800ae40:	4413      	add	r3, r2
 800ae42:	33c1      	adds	r3, #193	; 0xc1
 800ae44:	2200      	movs	r2, #0
 800ae46:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800ae48:	7bbb      	ldrb	r3, [r7, #14]
 800ae4a:	3301      	adds	r3, #1
 800ae4c:	73bb      	strb	r3, [r7, #14]
 800ae4e:	68bb      	ldr	r3, [r7, #8]
 800ae50:	781b      	ldrb	r3, [r3, #0]
 800ae52:	7bba      	ldrb	r2, [r7, #14]
 800ae54:	429a      	cmp	r2, r3
 800ae56:	d3e5      	bcc.n	800ae24 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 800ae58:	e00d      	b.n	800ae76 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 800ae5a:	2100      	movs	r1, #0
 800ae5c:	6878      	ldr	r0, [r7, #4]
 800ae5e:	f002 f888 	bl	800cf72 <USBH_ClrFeature>
 800ae62:	4603      	mov	r3, r0
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d108      	bne.n	800ae7a <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 800ae68:	68bb      	ldr	r3, [r7, #8]
 800ae6a:	7bda      	ldrb	r2, [r3, #15]
 800ae6c:	68bb      	ldr	r3, [r7, #8]
 800ae6e:	739a      	strb	r2, [r3, #14]
      }
      break;
 800ae70:	e003      	b.n	800ae7a <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 800ae72:	bf00      	nop
 800ae74:	e002      	b.n	800ae7c <USBH_MSC_ClassRequest+0xc4>
      break;
 800ae76:	bf00      	nop
 800ae78:	e000      	b.n	800ae7c <USBH_MSC_ClassRequest+0xc4>
      break;
 800ae7a:	bf00      	nop
  }

  return status;
 800ae7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae7e:	4618      	mov	r0, r3
 800ae80:	3710      	adds	r7, #16
 800ae82:	46bd      	mov	sp, r7
 800ae84:	bd80      	pop	{r7, pc}
	...

0800ae88 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b086      	sub	sp, #24
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ae96:	69db      	ldr	r3, [r3, #28]
 800ae98:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800ae9a:	2301      	movs	r3, #1
 800ae9c:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800ae9e:	2301      	movs	r3, #1
 800aea0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 800aea2:	2301      	movs	r3, #1
 800aea4:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 800aea6:	693b      	ldr	r3, [r7, #16]
 800aea8:	7b1b      	ldrb	r3, [r3, #12]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d003      	beq.n	800aeb6 <USBH_MSC_Process+0x2e>
 800aeae:	2b01      	cmp	r3, #1
 800aeb0:	f000 8271 	beq.w	800b396 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 800aeb4:	e272      	b.n	800b39c <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 800aeb6:	693b      	ldr	r3, [r7, #16]
 800aeb8:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 800aebc:	693b      	ldr	r3, [r7, #16]
 800aebe:	781b      	ldrb	r3, [r3, #0]
 800aec0:	b29b      	uxth	r3, r3
 800aec2:	429a      	cmp	r2, r3
 800aec4:	f080 824f 	bcs.w	800b366 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800aec8:	693b      	ldr	r3, [r7, #16]
 800aeca:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800aece:	4619      	mov	r1, r3
 800aed0:	693a      	ldr	r2, [r7, #16]
 800aed2:	2334      	movs	r3, #52	; 0x34
 800aed4:	fb01 f303 	mul.w	r3, r1, r3
 800aed8:	4413      	add	r3, r2
 800aeda:	3391      	adds	r3, #145	; 0x91
 800aedc:	2201      	movs	r2, #1
 800aede:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 800aee0:	693b      	ldr	r3, [r7, #16]
 800aee2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800aee6:	4619      	mov	r1, r3
 800aee8:	693a      	ldr	r2, [r7, #16]
 800aeea:	2334      	movs	r3, #52	; 0x34
 800aeec:	fb01 f303 	mul.w	r3, r1, r3
 800aef0:	4413      	add	r3, r2
 800aef2:	3390      	adds	r3, #144	; 0x90
 800aef4:	781b      	ldrb	r3, [r3, #0]
 800aef6:	2b08      	cmp	r3, #8
 800aef8:	f200 8243 	bhi.w	800b382 <USBH_MSC_Process+0x4fa>
 800aefc:	a201      	add	r2, pc, #4	; (adr r2, 800af04 <USBH_MSC_Process+0x7c>)
 800aefe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af02:	bf00      	nop
 800af04:	0800af29 	.word	0x0800af29
 800af08:	0800b383 	.word	0x0800b383
 800af0c:	0800aff1 	.word	0x0800aff1
 800af10:	0800b175 	.word	0x0800b175
 800af14:	0800af4f 	.word	0x0800af4f
 800af18:	0800b241 	.word	0x0800b241
 800af1c:	0800b383 	.word	0x0800b383
 800af20:	0800b383 	.word	0x0800b383
 800af24:	0800b355 	.word	0x0800b355
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 800af28:	693b      	ldr	r3, [r7, #16]
 800af2a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800af2e:	4619      	mov	r1, r3
 800af30:	693a      	ldr	r2, [r7, #16]
 800af32:	2334      	movs	r3, #52	; 0x34
 800af34:	fb01 f303 	mul.w	r3, r1, r3
 800af38:	4413      	add	r3, r2
 800af3a:	3390      	adds	r3, #144	; 0x90
 800af3c:	2204      	movs	r2, #4
 800af3e:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800af46:	693b      	ldr	r3, [r7, #16]
 800af48:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 800af4c:	e222      	b.n	800b394 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800af4e:	693b      	ldr	r3, [r7, #16]
 800af50:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800af54:	b2d9      	uxtb	r1, r3
 800af56:	693b      	ldr	r3, [r7, #16]
 800af58:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800af5c:	461a      	mov	r2, r3
 800af5e:	2334      	movs	r3, #52	; 0x34
 800af60:	fb02 f303 	mul.w	r3, r2, r3
 800af64:	3398      	adds	r3, #152	; 0x98
 800af66:	693a      	ldr	r2, [r7, #16]
 800af68:	4413      	add	r3, r2
 800af6a:	3307      	adds	r3, #7
 800af6c:	461a      	mov	r2, r3
 800af6e:	6878      	ldr	r0, [r7, #4]
 800af70:	f000 ff6a 	bl	800be48 <USBH_MSC_SCSI_Inquiry>
 800af74:	4603      	mov	r3, r0
 800af76:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800af78:	7bfb      	ldrb	r3, [r7, #15]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d10b      	bne.n	800af96 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800af7e:	693b      	ldr	r3, [r7, #16]
 800af80:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800af84:	4619      	mov	r1, r3
 800af86:	693a      	ldr	r2, [r7, #16]
 800af88:	2334      	movs	r3, #52	; 0x34
 800af8a:	fb01 f303 	mul.w	r3, r1, r3
 800af8e:	4413      	add	r3, r2
 800af90:	3390      	adds	r3, #144	; 0x90
 800af92:	2202      	movs	r2, #2
 800af94:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 800af96:	7bfb      	ldrb	r3, [r7, #15]
 800af98:	2b02      	cmp	r3, #2
 800af9a:	d10c      	bne.n	800afb6 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800af9c:	693b      	ldr	r3, [r7, #16]
 800af9e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800afa2:	4619      	mov	r1, r3
 800afa4:	693a      	ldr	r2, [r7, #16]
 800afa6:	2334      	movs	r3, #52	; 0x34
 800afa8:	fb01 f303 	mul.w	r3, r1, r3
 800afac:	4413      	add	r3, r2
 800afae:	3390      	adds	r3, #144	; 0x90
 800afb0:	2205      	movs	r2, #5
 800afb2:	701a      	strb	r2, [r3, #0]
            break;
 800afb4:	e1e7      	b.n	800b386 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800afb6:	7bfb      	ldrb	r3, [r7, #15]
 800afb8:	2b04      	cmp	r3, #4
 800afba:	f040 81e4 	bne.w	800b386 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800afbe:	693b      	ldr	r3, [r7, #16]
 800afc0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800afc4:	4619      	mov	r1, r3
 800afc6:	693a      	ldr	r2, [r7, #16]
 800afc8:	2334      	movs	r3, #52	; 0x34
 800afca:	fb01 f303 	mul.w	r3, r1, r3
 800afce:	4413      	add	r3, r2
 800afd0:	3390      	adds	r3, #144	; 0x90
 800afd2:	2201      	movs	r2, #1
 800afd4:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800afd6:	693b      	ldr	r3, [r7, #16]
 800afd8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800afdc:	4619      	mov	r1, r3
 800afde:	693a      	ldr	r2, [r7, #16]
 800afe0:	2334      	movs	r3, #52	; 0x34
 800afe2:	fb01 f303 	mul.w	r3, r1, r3
 800afe6:	4413      	add	r3, r2
 800afe8:	3391      	adds	r3, #145	; 0x91
 800afea:	2202      	movs	r2, #2
 800afec:	701a      	strb	r2, [r3, #0]
            break;
 800afee:	e1ca      	b.n	800b386 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 800aff0:	693b      	ldr	r3, [r7, #16]
 800aff2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800aff6:	b2db      	uxtb	r3, r3
 800aff8:	4619      	mov	r1, r3
 800affa:	6878      	ldr	r0, [r7, #4]
 800affc:	f000 fe66 	bl	800bccc <USBH_MSC_SCSI_TestUnitReady>
 800b000:	4603      	mov	r3, r0
 800b002:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 800b004:	7bbb      	ldrb	r3, [r7, #14]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d149      	bne.n	800b09e <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800b00a:	693b      	ldr	r3, [r7, #16]
 800b00c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b010:	4619      	mov	r1, r3
 800b012:	693a      	ldr	r2, [r7, #16]
 800b014:	2334      	movs	r3, #52	; 0x34
 800b016:	fb01 f303 	mul.w	r3, r1, r3
 800b01a:	4413      	add	r3, r2
 800b01c:	3392      	adds	r3, #146	; 0x92
 800b01e:	781b      	ldrb	r3, [r3, #0]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d00c      	beq.n	800b03e <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800b024:	693b      	ldr	r3, [r7, #16]
 800b026:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b02a:	4619      	mov	r1, r3
 800b02c:	693a      	ldr	r2, [r7, #16]
 800b02e:	2334      	movs	r3, #52	; 0x34
 800b030:	fb01 f303 	mul.w	r3, r1, r3
 800b034:	4413      	add	r3, r2
 800b036:	33c1      	adds	r3, #193	; 0xc1
 800b038:	2201      	movs	r2, #1
 800b03a:	701a      	strb	r2, [r3, #0]
 800b03c:	e00b      	b.n	800b056 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800b03e:	693b      	ldr	r3, [r7, #16]
 800b040:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b044:	4619      	mov	r1, r3
 800b046:	693a      	ldr	r2, [r7, #16]
 800b048:	2334      	movs	r3, #52	; 0x34
 800b04a:	fb01 f303 	mul.w	r3, r1, r3
 800b04e:	4413      	add	r3, r2
 800b050:	33c1      	adds	r3, #193	; 0xc1
 800b052:	2200      	movs	r2, #0
 800b054:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800b056:	693b      	ldr	r3, [r7, #16]
 800b058:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b05c:	4619      	mov	r1, r3
 800b05e:	693a      	ldr	r2, [r7, #16]
 800b060:	2334      	movs	r3, #52	; 0x34
 800b062:	fb01 f303 	mul.w	r3, r1, r3
 800b066:	4413      	add	r3, r2
 800b068:	3390      	adds	r3, #144	; 0x90
 800b06a:	2203      	movs	r2, #3
 800b06c:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800b06e:	693b      	ldr	r3, [r7, #16]
 800b070:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b074:	4619      	mov	r1, r3
 800b076:	693a      	ldr	r2, [r7, #16]
 800b078:	2334      	movs	r3, #52	; 0x34
 800b07a:	fb01 f303 	mul.w	r3, r1, r3
 800b07e:	4413      	add	r3, r2
 800b080:	3391      	adds	r3, #145	; 0x91
 800b082:	2200      	movs	r2, #0
 800b084:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800b086:	693b      	ldr	r3, [r7, #16]
 800b088:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b08c:	4619      	mov	r1, r3
 800b08e:	693a      	ldr	r2, [r7, #16]
 800b090:	2334      	movs	r3, #52	; 0x34
 800b092:	fb01 f303 	mul.w	r3, r1, r3
 800b096:	4413      	add	r3, r2
 800b098:	3392      	adds	r3, #146	; 0x92
 800b09a:	2200      	movs	r2, #0
 800b09c:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 800b09e:	7bbb      	ldrb	r3, [r7, #14]
 800b0a0:	2b02      	cmp	r3, #2
 800b0a2:	d14a      	bne.n	800b13a <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 800b0a4:	693b      	ldr	r3, [r7, #16]
 800b0a6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b0aa:	4619      	mov	r1, r3
 800b0ac:	693a      	ldr	r2, [r7, #16]
 800b0ae:	2334      	movs	r3, #52	; 0x34
 800b0b0:	fb01 f303 	mul.w	r3, r1, r3
 800b0b4:	4413      	add	r3, r2
 800b0b6:	3392      	adds	r3, #146	; 0x92
 800b0b8:	781b      	ldrb	r3, [r3, #0]
 800b0ba:	2b02      	cmp	r3, #2
 800b0bc:	d00c      	beq.n	800b0d8 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800b0be:	693b      	ldr	r3, [r7, #16]
 800b0c0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b0c4:	4619      	mov	r1, r3
 800b0c6:	693a      	ldr	r2, [r7, #16]
 800b0c8:	2334      	movs	r3, #52	; 0x34
 800b0ca:	fb01 f303 	mul.w	r3, r1, r3
 800b0ce:	4413      	add	r3, r2
 800b0d0:	33c1      	adds	r3, #193	; 0xc1
 800b0d2:	2201      	movs	r2, #1
 800b0d4:	701a      	strb	r2, [r3, #0]
 800b0d6:	e00b      	b.n	800b0f0 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800b0d8:	693b      	ldr	r3, [r7, #16]
 800b0da:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b0de:	4619      	mov	r1, r3
 800b0e0:	693a      	ldr	r2, [r7, #16]
 800b0e2:	2334      	movs	r3, #52	; 0x34
 800b0e4:	fb01 f303 	mul.w	r3, r1, r3
 800b0e8:	4413      	add	r3, r2
 800b0ea:	33c1      	adds	r3, #193	; 0xc1
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800b0f0:	693b      	ldr	r3, [r7, #16]
 800b0f2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b0f6:	4619      	mov	r1, r3
 800b0f8:	693a      	ldr	r2, [r7, #16]
 800b0fa:	2334      	movs	r3, #52	; 0x34
 800b0fc:	fb01 f303 	mul.w	r3, r1, r3
 800b100:	4413      	add	r3, r2
 800b102:	3390      	adds	r3, #144	; 0x90
 800b104:	2205      	movs	r2, #5
 800b106:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800b108:	693b      	ldr	r3, [r7, #16]
 800b10a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b10e:	4619      	mov	r1, r3
 800b110:	693a      	ldr	r2, [r7, #16]
 800b112:	2334      	movs	r3, #52	; 0x34
 800b114:	fb01 f303 	mul.w	r3, r1, r3
 800b118:	4413      	add	r3, r2
 800b11a:	3391      	adds	r3, #145	; 0x91
 800b11c:	2201      	movs	r2, #1
 800b11e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 800b120:	693b      	ldr	r3, [r7, #16]
 800b122:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b126:	4619      	mov	r1, r3
 800b128:	693a      	ldr	r2, [r7, #16]
 800b12a:	2334      	movs	r3, #52	; 0x34
 800b12c:	fb01 f303 	mul.w	r3, r1, r3
 800b130:	4413      	add	r3, r2
 800b132:	3392      	adds	r3, #146	; 0x92
 800b134:	2202      	movs	r2, #2
 800b136:	701a      	strb	r2, [r3, #0]
            break;
 800b138:	e127      	b.n	800b38a <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800b13a:	7bbb      	ldrb	r3, [r7, #14]
 800b13c:	2b04      	cmp	r3, #4
 800b13e:	f040 8124 	bne.w	800b38a <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b142:	693b      	ldr	r3, [r7, #16]
 800b144:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b148:	4619      	mov	r1, r3
 800b14a:	693a      	ldr	r2, [r7, #16]
 800b14c:	2334      	movs	r3, #52	; 0x34
 800b14e:	fb01 f303 	mul.w	r3, r1, r3
 800b152:	4413      	add	r3, r2
 800b154:	3390      	adds	r3, #144	; 0x90
 800b156:	2201      	movs	r2, #1
 800b158:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800b15a:	693b      	ldr	r3, [r7, #16]
 800b15c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b160:	4619      	mov	r1, r3
 800b162:	693a      	ldr	r2, [r7, #16]
 800b164:	2334      	movs	r3, #52	; 0x34
 800b166:	fb01 f303 	mul.w	r3, r1, r3
 800b16a:	4413      	add	r3, r2
 800b16c:	3391      	adds	r3, #145	; 0x91
 800b16e:	2202      	movs	r2, #2
 800b170:	701a      	strb	r2, [r3, #0]
            break;
 800b172:	e10a      	b.n	800b38a <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 800b174:	693b      	ldr	r3, [r7, #16]
 800b176:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b17a:	b2d9      	uxtb	r1, r3
 800b17c:	693b      	ldr	r3, [r7, #16]
 800b17e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b182:	461a      	mov	r2, r3
 800b184:	2334      	movs	r3, #52	; 0x34
 800b186:	fb02 f303 	mul.w	r3, r2, r3
 800b18a:	3390      	adds	r3, #144	; 0x90
 800b18c:	693a      	ldr	r2, [r7, #16]
 800b18e:	4413      	add	r3, r2
 800b190:	3304      	adds	r3, #4
 800b192:	461a      	mov	r2, r3
 800b194:	6878      	ldr	r0, [r7, #4]
 800b196:	f000 fddc 	bl	800bd52 <USBH_MSC_SCSI_ReadCapacity>
 800b19a:	4603      	mov	r3, r0
 800b19c:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800b19e:	7bfb      	ldrb	r3, [r7, #15]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d120      	bne.n	800b1e6 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b1a4:	693b      	ldr	r3, [r7, #16]
 800b1a6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b1aa:	4619      	mov	r1, r3
 800b1ac:	693a      	ldr	r2, [r7, #16]
 800b1ae:	2334      	movs	r3, #52	; 0x34
 800b1b0:	fb01 f303 	mul.w	r3, r1, r3
 800b1b4:	4413      	add	r3, r2
 800b1b6:	3390      	adds	r3, #144	; 0x90
 800b1b8:	2201      	movs	r2, #1
 800b1ba:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800b1bc:	693b      	ldr	r3, [r7, #16]
 800b1be:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b1c2:	4619      	mov	r1, r3
 800b1c4:	693a      	ldr	r2, [r7, #16]
 800b1c6:	2334      	movs	r3, #52	; 0x34
 800b1c8:	fb01 f303 	mul.w	r3, r1, r3
 800b1cc:	4413      	add	r3, r2
 800b1ce:	3391      	adds	r3, #145	; 0x91
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800b1d4:	693b      	ldr	r3, [r7, #16]
 800b1d6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b1da:	3301      	adds	r3, #1
 800b1dc:	b29a      	uxth	r2, r3
 800b1de:	693b      	ldr	r3, [r7, #16]
 800b1e0:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800b1e4:	e0d3      	b.n	800b38e <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 800b1e6:	7bfb      	ldrb	r3, [r7, #15]
 800b1e8:	2b02      	cmp	r3, #2
 800b1ea:	d10c      	bne.n	800b206 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800b1ec:	693b      	ldr	r3, [r7, #16]
 800b1ee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b1f2:	4619      	mov	r1, r3
 800b1f4:	693a      	ldr	r2, [r7, #16]
 800b1f6:	2334      	movs	r3, #52	; 0x34
 800b1f8:	fb01 f303 	mul.w	r3, r1, r3
 800b1fc:	4413      	add	r3, r2
 800b1fe:	3390      	adds	r3, #144	; 0x90
 800b200:	2205      	movs	r2, #5
 800b202:	701a      	strb	r2, [r3, #0]
            break;
 800b204:	e0c3      	b.n	800b38e <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b206:	7bfb      	ldrb	r3, [r7, #15]
 800b208:	2b04      	cmp	r3, #4
 800b20a:	f040 80c0 	bne.w	800b38e <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b20e:	693b      	ldr	r3, [r7, #16]
 800b210:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b214:	4619      	mov	r1, r3
 800b216:	693a      	ldr	r2, [r7, #16]
 800b218:	2334      	movs	r3, #52	; 0x34
 800b21a:	fb01 f303 	mul.w	r3, r1, r3
 800b21e:	4413      	add	r3, r2
 800b220:	3390      	adds	r3, #144	; 0x90
 800b222:	2201      	movs	r2, #1
 800b224:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800b226:	693b      	ldr	r3, [r7, #16]
 800b228:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b22c:	4619      	mov	r1, r3
 800b22e:	693a      	ldr	r2, [r7, #16]
 800b230:	2334      	movs	r3, #52	; 0x34
 800b232:	fb01 f303 	mul.w	r3, r1, r3
 800b236:	4413      	add	r3, r2
 800b238:	3391      	adds	r3, #145	; 0x91
 800b23a:	2202      	movs	r2, #2
 800b23c:	701a      	strb	r2, [r3, #0]
            break;
 800b23e:	e0a6      	b.n	800b38e <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800b240:	693b      	ldr	r3, [r7, #16]
 800b242:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b246:	b2d9      	uxtb	r1, r3
 800b248:	693b      	ldr	r3, [r7, #16]
 800b24a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b24e:	461a      	mov	r2, r3
 800b250:	2334      	movs	r3, #52	; 0x34
 800b252:	fb02 f303 	mul.w	r3, r2, r3
 800b256:	3398      	adds	r3, #152	; 0x98
 800b258:	693a      	ldr	r2, [r7, #16]
 800b25a:	4413      	add	r3, r2
 800b25c:	3304      	adds	r3, #4
 800b25e:	461a      	mov	r2, r3
 800b260:	6878      	ldr	r0, [r7, #4]
 800b262:	f000 fe96 	bl	800bf92 <USBH_MSC_SCSI_RequestSense>
 800b266:	4603      	mov	r3, r0
 800b268:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800b26a:	7bfb      	ldrb	r3, [r7, #15]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d145      	bne.n	800b2fc <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800b270:	693b      	ldr	r3, [r7, #16]
 800b272:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b276:	4619      	mov	r1, r3
 800b278:	693a      	ldr	r2, [r7, #16]
 800b27a:	2334      	movs	r3, #52	; 0x34
 800b27c:	fb01 f303 	mul.w	r3, r1, r3
 800b280:	4413      	add	r3, r2
 800b282:	339c      	adds	r3, #156	; 0x9c
 800b284:	781b      	ldrb	r3, [r3, #0]
 800b286:	2b06      	cmp	r3, #6
 800b288:	d00c      	beq.n	800b2a4 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 800b28a:	693b      	ldr	r3, [r7, #16]
 800b28c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b290:	4619      	mov	r1, r3
 800b292:	693a      	ldr	r2, [r7, #16]
 800b294:	2334      	movs	r3, #52	; 0x34
 800b296:	fb01 f303 	mul.w	r3, r1, r3
 800b29a:	4413      	add	r3, r2
 800b29c:	339c      	adds	r3, #156	; 0x9c
 800b29e:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800b2a0:	2b02      	cmp	r3, #2
 800b2a2:	d117      	bne.n	800b2d4 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800b2aa:	693b      	ldr	r3, [r7, #16]
 800b2ac:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800b2b0:	1ad3      	subs	r3, r2, r3
 800b2b2:	f242 720f 	movw	r2, #9999	; 0x270f
 800b2b6:	4293      	cmp	r3, r2
 800b2b8:	d80c      	bhi.n	800b2d4 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800b2ba:	693b      	ldr	r3, [r7, #16]
 800b2bc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b2c0:	4619      	mov	r1, r3
 800b2c2:	693a      	ldr	r2, [r7, #16]
 800b2c4:	2334      	movs	r3, #52	; 0x34
 800b2c6:	fb01 f303 	mul.w	r3, r1, r3
 800b2ca:	4413      	add	r3, r2
 800b2cc:	3390      	adds	r3, #144	; 0x90
 800b2ce:	2202      	movs	r2, #2
 800b2d0:	701a      	strb	r2, [r3, #0]
                  break;
 800b2d2:	e05f      	b.n	800b394 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b2d4:	693b      	ldr	r3, [r7, #16]
 800b2d6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b2da:	4619      	mov	r1, r3
 800b2dc:	693a      	ldr	r2, [r7, #16]
 800b2de:	2334      	movs	r3, #52	; 0x34
 800b2e0:	fb01 f303 	mul.w	r3, r1, r3
 800b2e4:	4413      	add	r3, r2
 800b2e6:	3390      	adds	r3, #144	; 0x90
 800b2e8:	2201      	movs	r2, #1
 800b2ea:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800b2ec:	693b      	ldr	r3, [r7, #16]
 800b2ee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b2f2:	3301      	adds	r3, #1
 800b2f4:	b29a      	uxth	r2, r3
 800b2f6:	693b      	ldr	r3, [r7, #16]
 800b2f8:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 800b2fc:	7bfb      	ldrb	r3, [r7, #15]
 800b2fe:	2b02      	cmp	r3, #2
 800b300:	d10c      	bne.n	800b31c <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800b302:	693b      	ldr	r3, [r7, #16]
 800b304:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b308:	4619      	mov	r1, r3
 800b30a:	693a      	ldr	r2, [r7, #16]
 800b30c:	2334      	movs	r3, #52	; 0x34
 800b30e:	fb01 f303 	mul.w	r3, r1, r3
 800b312:	4413      	add	r3, r2
 800b314:	3390      	adds	r3, #144	; 0x90
 800b316:	2208      	movs	r2, #8
 800b318:	701a      	strb	r2, [r3, #0]
            break;
 800b31a:	e03a      	b.n	800b392 <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b31c:	7bfb      	ldrb	r3, [r7, #15]
 800b31e:	2b04      	cmp	r3, #4
 800b320:	d137      	bne.n	800b392 <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b322:	693b      	ldr	r3, [r7, #16]
 800b324:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b328:	4619      	mov	r1, r3
 800b32a:	693a      	ldr	r2, [r7, #16]
 800b32c:	2334      	movs	r3, #52	; 0x34
 800b32e:	fb01 f303 	mul.w	r3, r1, r3
 800b332:	4413      	add	r3, r2
 800b334:	3390      	adds	r3, #144	; 0x90
 800b336:	2201      	movs	r2, #1
 800b338:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800b33a:	693b      	ldr	r3, [r7, #16]
 800b33c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b340:	4619      	mov	r1, r3
 800b342:	693a      	ldr	r2, [r7, #16]
 800b344:	2334      	movs	r3, #52	; 0x34
 800b346:	fb01 f303 	mul.w	r3, r1, r3
 800b34a:	4413      	add	r3, r2
 800b34c:	3391      	adds	r3, #145	; 0x91
 800b34e:	2202      	movs	r2, #2
 800b350:	701a      	strb	r2, [r3, #0]
            break;
 800b352:	e01e      	b.n	800b392 <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 800b354:	693b      	ldr	r3, [r7, #16]
 800b356:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b35a:	3301      	adds	r3, #1
 800b35c:	b29a      	uxth	r2, r3
 800b35e:	693b      	ldr	r3, [r7, #16]
 800b360:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800b364:	e016      	b.n	800b394 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 800b366:	693b      	ldr	r3, [r7, #16]
 800b368:	2200      	movs	r2, #0
 800b36a:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 800b36e:	693b      	ldr	r3, [r7, #16]
 800b370:	2201      	movs	r2, #1
 800b372:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b37a:	2102      	movs	r1, #2
 800b37c:	6878      	ldr	r0, [r7, #4]
 800b37e:	4798      	blx	r3
      break;
 800b380:	e00c      	b.n	800b39c <USBH_MSC_Process+0x514>
            break;
 800b382:	bf00      	nop
 800b384:	e00a      	b.n	800b39c <USBH_MSC_Process+0x514>
            break;
 800b386:	bf00      	nop
 800b388:	e008      	b.n	800b39c <USBH_MSC_Process+0x514>
            break;
 800b38a:	bf00      	nop
 800b38c:	e006      	b.n	800b39c <USBH_MSC_Process+0x514>
            break;
 800b38e:	bf00      	nop
 800b390:	e004      	b.n	800b39c <USBH_MSC_Process+0x514>
            break;
 800b392:	bf00      	nop
      break;
 800b394:	e002      	b.n	800b39c <USBH_MSC_Process+0x514>
      error = USBH_OK;
 800b396:	2300      	movs	r3, #0
 800b398:	75fb      	strb	r3, [r7, #23]
      break;
 800b39a:	bf00      	nop
  }
  return error;
 800b39c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b39e:	4618      	mov	r0, r3
 800b3a0:	3718      	adds	r7, #24
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	bd80      	pop	{r7, pc}
 800b3a6:	bf00      	nop

0800b3a8 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800b3a8:	b480      	push	{r7}
 800b3aa:	b083      	sub	sp, #12
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800b3b0:	2300      	movs	r3, #0
}
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	370c      	adds	r7, #12
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3bc:	4770      	bx	lr

0800b3be <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800b3be:	b580      	push	{r7, lr}
 800b3c0:	b088      	sub	sp, #32
 800b3c2:	af02      	add	r7, sp, #8
 800b3c4:	6078      	str	r0, [r7, #4]
 800b3c6:	460b      	mov	r3, r1
 800b3c8:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b3d0:	69db      	ldr	r3, [r3, #28]
 800b3d2:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 800b3d4:	2301      	movs	r3, #1
 800b3d6:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 800b3d8:	2301      	movs	r3, #1
 800b3da:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 800b3dc:	78fb      	ldrb	r3, [r7, #3]
 800b3de:	693a      	ldr	r2, [r7, #16]
 800b3e0:	2134      	movs	r1, #52	; 0x34
 800b3e2:	fb01 f303 	mul.w	r3, r1, r3
 800b3e6:	4413      	add	r3, r2
 800b3e8:	3390      	adds	r3, #144	; 0x90
 800b3ea:	781b      	ldrb	r3, [r3, #0]
 800b3ec:	2b07      	cmp	r3, #7
 800b3ee:	d03c      	beq.n	800b46a <USBH_MSC_RdWrProcess+0xac>
 800b3f0:	2b07      	cmp	r3, #7
 800b3f2:	f300 80a7 	bgt.w	800b544 <USBH_MSC_RdWrProcess+0x186>
 800b3f6:	2b05      	cmp	r3, #5
 800b3f8:	d06c      	beq.n	800b4d4 <USBH_MSC_RdWrProcess+0x116>
 800b3fa:	2b06      	cmp	r3, #6
 800b3fc:	f040 80a2 	bne.w	800b544 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800b400:	78f9      	ldrb	r1, [r7, #3]
 800b402:	2300      	movs	r3, #0
 800b404:	9300      	str	r3, [sp, #0]
 800b406:	2300      	movs	r3, #0
 800b408:	2200      	movs	r2, #0
 800b40a:	6878      	ldr	r0, [r7, #4]
 800b40c:	f000 fea5 	bl	800c15a <USBH_MSC_SCSI_Read>
 800b410:	4603      	mov	r3, r0
 800b412:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800b414:	7bfb      	ldrb	r3, [r7, #15]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d10b      	bne.n	800b432 <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800b41a:	78fb      	ldrb	r3, [r7, #3]
 800b41c:	693a      	ldr	r2, [r7, #16]
 800b41e:	2134      	movs	r1, #52	; 0x34
 800b420:	fb01 f303 	mul.w	r3, r1, r3
 800b424:	4413      	add	r3, r2
 800b426:	3390      	adds	r3, #144	; 0x90
 800b428:	2201      	movs	r2, #1
 800b42a:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800b42c:	2300      	movs	r3, #0
 800b42e:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b430:	e08a      	b.n	800b548 <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 800b432:	7bfb      	ldrb	r3, [r7, #15]
 800b434:	2b02      	cmp	r3, #2
 800b436:	d109      	bne.n	800b44c <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800b438:	78fb      	ldrb	r3, [r7, #3]
 800b43a:	693a      	ldr	r2, [r7, #16]
 800b43c:	2134      	movs	r1, #52	; 0x34
 800b43e:	fb01 f303 	mul.w	r3, r1, r3
 800b442:	4413      	add	r3, r2
 800b444:	3390      	adds	r3, #144	; 0x90
 800b446:	2205      	movs	r2, #5
 800b448:	701a      	strb	r2, [r3, #0]
      break;
 800b44a:	e07d      	b.n	800b548 <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b44c:	7bfb      	ldrb	r3, [r7, #15]
 800b44e:	2b04      	cmp	r3, #4
 800b450:	d17a      	bne.n	800b548 <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800b452:	78fb      	ldrb	r3, [r7, #3]
 800b454:	693a      	ldr	r2, [r7, #16]
 800b456:	2134      	movs	r1, #52	; 0x34
 800b458:	fb01 f303 	mul.w	r3, r1, r3
 800b45c:	4413      	add	r3, r2
 800b45e:	3390      	adds	r3, #144	; 0x90
 800b460:	2208      	movs	r2, #8
 800b462:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800b464:	2302      	movs	r3, #2
 800b466:	75fb      	strb	r3, [r7, #23]
      break;
 800b468:	e06e      	b.n	800b548 <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800b46a:	78f9      	ldrb	r1, [r7, #3]
 800b46c:	2300      	movs	r3, #0
 800b46e:	9300      	str	r3, [sp, #0]
 800b470:	2300      	movs	r3, #0
 800b472:	2200      	movs	r2, #0
 800b474:	6878      	ldr	r0, [r7, #4]
 800b476:	f000 fe05 	bl	800c084 <USBH_MSC_SCSI_Write>
 800b47a:	4603      	mov	r3, r0
 800b47c:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800b47e:	7bfb      	ldrb	r3, [r7, #15]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d10b      	bne.n	800b49c <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800b484:	78fb      	ldrb	r3, [r7, #3]
 800b486:	693a      	ldr	r2, [r7, #16]
 800b488:	2134      	movs	r1, #52	; 0x34
 800b48a:	fb01 f303 	mul.w	r3, r1, r3
 800b48e:	4413      	add	r3, r2
 800b490:	3390      	adds	r3, #144	; 0x90
 800b492:	2201      	movs	r2, #1
 800b494:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800b496:	2300      	movs	r3, #0
 800b498:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b49a:	e057      	b.n	800b54c <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 800b49c:	7bfb      	ldrb	r3, [r7, #15]
 800b49e:	2b02      	cmp	r3, #2
 800b4a0:	d109      	bne.n	800b4b6 <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800b4a2:	78fb      	ldrb	r3, [r7, #3]
 800b4a4:	693a      	ldr	r2, [r7, #16]
 800b4a6:	2134      	movs	r1, #52	; 0x34
 800b4a8:	fb01 f303 	mul.w	r3, r1, r3
 800b4ac:	4413      	add	r3, r2
 800b4ae:	3390      	adds	r3, #144	; 0x90
 800b4b0:	2205      	movs	r2, #5
 800b4b2:	701a      	strb	r2, [r3, #0]
      break;
 800b4b4:	e04a      	b.n	800b54c <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b4b6:	7bfb      	ldrb	r3, [r7, #15]
 800b4b8:	2b04      	cmp	r3, #4
 800b4ba:	d147      	bne.n	800b54c <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800b4bc:	78fb      	ldrb	r3, [r7, #3]
 800b4be:	693a      	ldr	r2, [r7, #16]
 800b4c0:	2134      	movs	r1, #52	; 0x34
 800b4c2:	fb01 f303 	mul.w	r3, r1, r3
 800b4c6:	4413      	add	r3, r2
 800b4c8:	3390      	adds	r3, #144	; 0x90
 800b4ca:	2208      	movs	r2, #8
 800b4cc:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800b4ce:	2302      	movs	r3, #2
 800b4d0:	75fb      	strb	r3, [r7, #23]
      break;
 800b4d2:	e03b      	b.n	800b54c <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800b4d4:	78fb      	ldrb	r3, [r7, #3]
 800b4d6:	2234      	movs	r2, #52	; 0x34
 800b4d8:	fb02 f303 	mul.w	r3, r2, r3
 800b4dc:	3398      	adds	r3, #152	; 0x98
 800b4de:	693a      	ldr	r2, [r7, #16]
 800b4e0:	4413      	add	r3, r2
 800b4e2:	1d1a      	adds	r2, r3, #4
 800b4e4:	78fb      	ldrb	r3, [r7, #3]
 800b4e6:	4619      	mov	r1, r3
 800b4e8:	6878      	ldr	r0, [r7, #4]
 800b4ea:	f000 fd52 	bl	800bf92 <USBH_MSC_SCSI_RequestSense>
 800b4ee:	4603      	mov	r3, r0
 800b4f0:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800b4f2:	7bfb      	ldrb	r3, [r7, #15]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d113      	bne.n	800b520 <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800b4f8:	78fb      	ldrb	r3, [r7, #3]
 800b4fa:	693a      	ldr	r2, [r7, #16]
 800b4fc:	2134      	movs	r1, #52	; 0x34
 800b4fe:	fb01 f303 	mul.w	r3, r1, r3
 800b502:	4413      	add	r3, r2
 800b504:	3390      	adds	r3, #144	; 0x90
 800b506:	2201      	movs	r2, #1
 800b508:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 800b50a:	78fb      	ldrb	r3, [r7, #3]
 800b50c:	693a      	ldr	r2, [r7, #16]
 800b50e:	2134      	movs	r1, #52	; 0x34
 800b510:	fb01 f303 	mul.w	r3, r1, r3
 800b514:	4413      	add	r3, r2
 800b516:	3391      	adds	r3, #145	; 0x91
 800b518:	2202      	movs	r2, #2
 800b51a:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 800b51c:	2302      	movs	r3, #2
 800b51e:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 800b520:	7bfb      	ldrb	r3, [r7, #15]
 800b522:	2b02      	cmp	r3, #2
 800b524:	d014      	beq.n	800b550 <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b526:	7bfb      	ldrb	r3, [r7, #15]
 800b528:	2b04      	cmp	r3, #4
 800b52a:	d111      	bne.n	800b550 <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800b52c:	78fb      	ldrb	r3, [r7, #3]
 800b52e:	693a      	ldr	r2, [r7, #16]
 800b530:	2134      	movs	r1, #52	; 0x34
 800b532:	fb01 f303 	mul.w	r3, r1, r3
 800b536:	4413      	add	r3, r2
 800b538:	3390      	adds	r3, #144	; 0x90
 800b53a:	2208      	movs	r2, #8
 800b53c:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800b53e:	2302      	movs	r3, #2
 800b540:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b542:	e005      	b.n	800b550 <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 800b544:	bf00      	nop
 800b546:	e004      	b.n	800b552 <USBH_MSC_RdWrProcess+0x194>
      break;
 800b548:	bf00      	nop
 800b54a:	e002      	b.n	800b552 <USBH_MSC_RdWrProcess+0x194>
      break;
 800b54c:	bf00      	nop
 800b54e:	e000      	b.n	800b552 <USBH_MSC_RdWrProcess+0x194>
      break;
 800b550:	bf00      	nop

  }
  return error;
 800b552:	7dfb      	ldrb	r3, [r7, #23]
}
 800b554:	4618      	mov	r0, r3
 800b556:	3718      	adds	r7, #24
 800b558:	46bd      	mov	sp, r7
 800b55a:	bd80      	pop	{r7, pc}

0800b55c <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800b55c:	b480      	push	{r7}
 800b55e:	b085      	sub	sp, #20
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
 800b564:	460b      	mov	r3, r1
 800b566:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b56e:	69db      	ldr	r3, [r3, #28]
 800b570:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	781b      	ldrb	r3, [r3, #0]
 800b576:	b2db      	uxtb	r3, r3
 800b578:	2b0b      	cmp	r3, #11
 800b57a:	d10c      	bne.n	800b596 <USBH_MSC_UnitIsReady+0x3a>
 800b57c:	78fb      	ldrb	r3, [r7, #3]
 800b57e:	68ba      	ldr	r2, [r7, #8]
 800b580:	2134      	movs	r1, #52	; 0x34
 800b582:	fb01 f303 	mul.w	r3, r1, r3
 800b586:	4413      	add	r3, r2
 800b588:	3391      	adds	r3, #145	; 0x91
 800b58a:	781b      	ldrb	r3, [r3, #0]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d102      	bne.n	800b596 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 800b590:	2301      	movs	r3, #1
 800b592:	73fb      	strb	r3, [r7, #15]
 800b594:	e001      	b.n	800b59a <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 800b596:	2300      	movs	r3, #0
 800b598:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800b59a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b59c:	4618      	mov	r0, r3
 800b59e:	3714      	adds	r7, #20
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a6:	4770      	bx	lr

0800b5a8 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b086      	sub	sp, #24
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	60f8      	str	r0, [r7, #12]
 800b5b0:	460b      	mov	r3, r1
 800b5b2:	607a      	str	r2, [r7, #4]
 800b5b4:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b5bc:	69db      	ldr	r3, [r3, #28]
 800b5be:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	781b      	ldrb	r3, [r3, #0]
 800b5c4:	b2db      	uxtb	r3, r3
 800b5c6:	2b0b      	cmp	r3, #11
 800b5c8:	d10d      	bne.n	800b5e6 <USBH_MSC_GetLUNInfo+0x3e>
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800b5ca:	7afb      	ldrb	r3, [r7, #11]
 800b5cc:	2234      	movs	r2, #52	; 0x34
 800b5ce:	fb02 f303 	mul.w	r3, r2, r3
 800b5d2:	3390      	adds	r3, #144	; 0x90
 800b5d4:	697a      	ldr	r2, [r7, #20]
 800b5d6:	4413      	add	r3, r2
 800b5d8:	2234      	movs	r2, #52	; 0x34
 800b5da:	4619      	mov	r1, r3
 800b5dc:	6878      	ldr	r0, [r7, #4]
 800b5de:	f002 fe4d 	bl	800e27c <memcpy>
    return USBH_OK;
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	e000      	b.n	800b5e8 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 800b5e6:	2302      	movs	r3, #2
  }
}
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	3718      	adds	r7, #24
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	bd80      	pop	{r7, pc}

0800b5f0 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b088      	sub	sp, #32
 800b5f4:	af02      	add	r7, sp, #8
 800b5f6:	60f8      	str	r0, [r7, #12]
 800b5f8:	607a      	str	r2, [r7, #4]
 800b5fa:	603b      	str	r3, [r7, #0]
 800b5fc:	460b      	mov	r3, r1
 800b5fe:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b606:	69db      	ldr	r3, [r3, #28]
 800b608:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b610:	b2db      	uxtb	r3, r3
 800b612:	2b00      	cmp	r3, #0
 800b614:	d00e      	beq.n	800b634 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	781b      	ldrb	r3, [r3, #0]
 800b61a:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800b61c:	2b0b      	cmp	r3, #11
 800b61e:	d109      	bne.n	800b634 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800b620:	7afb      	ldrb	r3, [r7, #11]
 800b622:	697a      	ldr	r2, [r7, #20]
 800b624:	2134      	movs	r1, #52	; 0x34
 800b626:	fb01 f303 	mul.w	r3, r1, r3
 800b62a:	4413      	add	r3, r2
 800b62c:	3390      	adds	r3, #144	; 0x90
 800b62e:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800b630:	2b01      	cmp	r3, #1
 800b632:	d001      	beq.n	800b638 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 800b634:	2302      	movs	r3, #2
 800b636:	e040      	b.n	800b6ba <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 800b638:	697b      	ldr	r3, [r7, #20]
 800b63a:	2206      	movs	r2, #6
 800b63c:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800b63e:	7afb      	ldrb	r3, [r7, #11]
 800b640:	697a      	ldr	r2, [r7, #20]
 800b642:	2134      	movs	r1, #52	; 0x34
 800b644:	fb01 f303 	mul.w	r3, r1, r3
 800b648:	4413      	add	r3, r2
 800b64a:	3390      	adds	r3, #144	; 0x90
 800b64c:	2206      	movs	r2, #6
 800b64e:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800b650:	7afb      	ldrb	r3, [r7, #11]
 800b652:	b29a      	uxth	r2, r3
 800b654:	697b      	ldr	r3, [r7, #20]
 800b656:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800b65a:	7af9      	ldrb	r1, [r7, #11]
 800b65c:	6a3b      	ldr	r3, [r7, #32]
 800b65e:	9300      	str	r3, [sp, #0]
 800b660:	683b      	ldr	r3, [r7, #0]
 800b662:	687a      	ldr	r2, [r7, #4]
 800b664:	68f8      	ldr	r0, [r7, #12]
 800b666:	f000 fd78 	bl	800c15a <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b670:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800b672:	e016      	b.n	800b6a2 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800b67a:	693b      	ldr	r3, [r7, #16]
 800b67c:	1ad2      	subs	r2, r2, r3
 800b67e:	6a3b      	ldr	r3, [r7, #32]
 800b680:	f242 7110 	movw	r1, #10000	; 0x2710
 800b684:	fb01 f303 	mul.w	r3, r1, r3
 800b688:	429a      	cmp	r2, r3
 800b68a:	d805      	bhi.n	800b698 <USBH_MSC_Read+0xa8>
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b692:	b2db      	uxtb	r3, r3
 800b694:	2b00      	cmp	r3, #0
 800b696:	d104      	bne.n	800b6a2 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800b698:	697b      	ldr	r3, [r7, #20]
 800b69a:	2201      	movs	r2, #1
 800b69c:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800b69e:	2302      	movs	r3, #2
 800b6a0:	e00b      	b.n	800b6ba <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800b6a2:	7afb      	ldrb	r3, [r7, #11]
 800b6a4:	4619      	mov	r1, r3
 800b6a6:	68f8      	ldr	r0, [r7, #12]
 800b6a8:	f7ff fe89 	bl	800b3be <USBH_MSC_RdWrProcess>
 800b6ac:	4603      	mov	r3, r0
 800b6ae:	2b01      	cmp	r3, #1
 800b6b0:	d0e0      	beq.n	800b674 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800b6b2:	697b      	ldr	r3, [r7, #20]
 800b6b4:	2201      	movs	r2, #1
 800b6b6:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 800b6b8:	2300      	movs	r3, #0
}
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	3718      	adds	r7, #24
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	bd80      	pop	{r7, pc}

0800b6c2 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800b6c2:	b580      	push	{r7, lr}
 800b6c4:	b088      	sub	sp, #32
 800b6c6:	af02      	add	r7, sp, #8
 800b6c8:	60f8      	str	r0, [r7, #12]
 800b6ca:	607a      	str	r2, [r7, #4]
 800b6cc:	603b      	str	r3, [r7, #0]
 800b6ce:	460b      	mov	r3, r1
 800b6d0:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b6d8:	69db      	ldr	r3, [r3, #28]
 800b6da:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b6e2:	b2db      	uxtb	r3, r3
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d00e      	beq.n	800b706 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	781b      	ldrb	r3, [r3, #0]
 800b6ec:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800b6ee:	2b0b      	cmp	r3, #11
 800b6f0:	d109      	bne.n	800b706 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800b6f2:	7afb      	ldrb	r3, [r7, #11]
 800b6f4:	697a      	ldr	r2, [r7, #20]
 800b6f6:	2134      	movs	r1, #52	; 0x34
 800b6f8:	fb01 f303 	mul.w	r3, r1, r3
 800b6fc:	4413      	add	r3, r2
 800b6fe:	3390      	adds	r3, #144	; 0x90
 800b700:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800b702:	2b01      	cmp	r3, #1
 800b704:	d001      	beq.n	800b70a <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 800b706:	2302      	movs	r3, #2
 800b708:	e040      	b.n	800b78c <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 800b70a:	697b      	ldr	r3, [r7, #20]
 800b70c:	2207      	movs	r2, #7
 800b70e:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800b710:	7afb      	ldrb	r3, [r7, #11]
 800b712:	697a      	ldr	r2, [r7, #20]
 800b714:	2134      	movs	r1, #52	; 0x34
 800b716:	fb01 f303 	mul.w	r3, r1, r3
 800b71a:	4413      	add	r3, r2
 800b71c:	3390      	adds	r3, #144	; 0x90
 800b71e:	2207      	movs	r2, #7
 800b720:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800b722:	7afb      	ldrb	r3, [r7, #11]
 800b724:	b29a      	uxth	r2, r3
 800b726:	697b      	ldr	r3, [r7, #20]
 800b728:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800b72c:	7af9      	ldrb	r1, [r7, #11]
 800b72e:	6a3b      	ldr	r3, [r7, #32]
 800b730:	9300      	str	r3, [sp, #0]
 800b732:	683b      	ldr	r3, [r7, #0]
 800b734:	687a      	ldr	r2, [r7, #4]
 800b736:	68f8      	ldr	r0, [r7, #12]
 800b738:	f000 fca4 	bl	800c084 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b742:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800b744:	e016      	b.n	800b774 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800b74c:	693b      	ldr	r3, [r7, #16]
 800b74e:	1ad2      	subs	r2, r2, r3
 800b750:	6a3b      	ldr	r3, [r7, #32]
 800b752:	f242 7110 	movw	r1, #10000	; 0x2710
 800b756:	fb01 f303 	mul.w	r3, r1, r3
 800b75a:	429a      	cmp	r2, r3
 800b75c:	d805      	bhi.n	800b76a <USBH_MSC_Write+0xa8>
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b764:	b2db      	uxtb	r3, r3
 800b766:	2b00      	cmp	r3, #0
 800b768:	d104      	bne.n	800b774 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800b76a:	697b      	ldr	r3, [r7, #20]
 800b76c:	2201      	movs	r2, #1
 800b76e:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800b770:	2302      	movs	r3, #2
 800b772:	e00b      	b.n	800b78c <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800b774:	7afb      	ldrb	r3, [r7, #11]
 800b776:	4619      	mov	r1, r3
 800b778:	68f8      	ldr	r0, [r7, #12]
 800b77a:	f7ff fe20 	bl	800b3be <USBH_MSC_RdWrProcess>
 800b77e:	4603      	mov	r3, r0
 800b780:	2b01      	cmp	r3, #1
 800b782:	d0e0      	beq.n	800b746 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800b784:	697b      	ldr	r3, [r7, #20]
 800b786:	2201      	movs	r2, #1
 800b788:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 800b78a:	2300      	movs	r3, #0
}
 800b78c:	4618      	mov	r0, r3
 800b78e:	3718      	adds	r7, #24
 800b790:	46bd      	mov	sp, r7
 800b792:	bd80      	pop	{r7, pc}

0800b794 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b082      	sub	sp, #8
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	2221      	movs	r2, #33	; 0x21
 800b7a0:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	22ff      	movs	r2, #255	; 0xff
 800b7a6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	2200      	movs	r2, #0
 800b7b2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	2100      	movs	r1, #0
 800b7be:	6878      	ldr	r0, [r7, #4]
 800b7c0:	f001 fea4 	bl	800d50c <USBH_CtlReq>
 800b7c4:	4603      	mov	r3, r0
}
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	3708      	adds	r7, #8
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	bd80      	pop	{r7, pc}

0800b7ce <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800b7ce:	b580      	push	{r7, lr}
 800b7d0:	b082      	sub	sp, #8
 800b7d2:	af00      	add	r7, sp, #0
 800b7d4:	6078      	str	r0, [r7, #4]
 800b7d6:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	22a1      	movs	r2, #161	; 0xa1
 800b7dc:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	22fe      	movs	r2, #254	; 0xfe
 800b7e2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2201      	movs	r2, #1
 800b7f4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800b7f6:	2201      	movs	r2, #1
 800b7f8:	6839      	ldr	r1, [r7, #0]
 800b7fa:	6878      	ldr	r0, [r7, #4]
 800b7fc:	f001 fe86 	bl	800d50c <USBH_CtlReq>
 800b800:	4603      	mov	r3, r0
}
 800b802:	4618      	mov	r0, r3
 800b804:	3708      	adds	r7, #8
 800b806:	46bd      	mov	sp, r7
 800b808:	bd80      	pop	{r7, pc}
	...

0800b80c <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 800b80c:	b480      	push	{r7}
 800b80e:	b085      	sub	sp, #20
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b81a:	69db      	ldr	r3, [r3, #28]
 800b81c:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	4a09      	ldr	r2, [pc, #36]	; (800b848 <USBH_MSC_BOT_Init+0x3c>)
 800b822:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	4a09      	ldr	r2, [pc, #36]	; (800b84c <USBH_MSC_BOT_Init+0x40>)
 800b828:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	2201      	movs	r2, #1
 800b82e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	2201      	movs	r2, #1
 800b836:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 800b83a:	2300      	movs	r3, #0
}
 800b83c:	4618      	mov	r0, r3
 800b83e:	3714      	adds	r7, #20
 800b840:	46bd      	mov	sp, r7
 800b842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b846:	4770      	bx	lr
 800b848:	43425355 	.word	0x43425355
 800b84c:	20304050 	.word	0x20304050

0800b850 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800b850:	b580      	push	{r7, lr}
 800b852:	b088      	sub	sp, #32
 800b854:	af02      	add	r7, sp, #8
 800b856:	6078      	str	r0, [r7, #4]
 800b858:	460b      	mov	r3, r1
 800b85a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800b85c:	2301      	movs	r3, #1
 800b85e:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800b860:	2301      	movs	r3, #1
 800b862:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800b864:	2301      	movs	r3, #1
 800b866:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b868:	2300      	movs	r3, #0
 800b86a:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b872:	69db      	ldr	r3, [r3, #28]
 800b874:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800b876:	2300      	movs	r3, #0
 800b878:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800b87a:	693b      	ldr	r3, [r7, #16]
 800b87c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b880:	3b01      	subs	r3, #1
 800b882:	2b0a      	cmp	r3, #10
 800b884:	f200 819e 	bhi.w	800bbc4 <USBH_MSC_BOT_Process+0x374>
 800b888:	a201      	add	r2, pc, #4	; (adr r2, 800b890 <USBH_MSC_BOT_Process+0x40>)
 800b88a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b88e:	bf00      	nop
 800b890:	0800b8bd 	.word	0x0800b8bd
 800b894:	0800b8e5 	.word	0x0800b8e5
 800b898:	0800b94f 	.word	0x0800b94f
 800b89c:	0800b96d 	.word	0x0800b96d
 800b8a0:	0800b9f1 	.word	0x0800b9f1
 800b8a4:	0800ba13 	.word	0x0800ba13
 800b8a8:	0800baab 	.word	0x0800baab
 800b8ac:	0800bac7 	.word	0x0800bac7
 800b8b0:	0800bb19 	.word	0x0800bb19
 800b8b4:	0800bb49 	.word	0x0800bb49
 800b8b8:	0800bbab 	.word	0x0800bbab
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800b8bc:	693b      	ldr	r3, [r7, #16]
 800b8be:	78fa      	ldrb	r2, [r7, #3]
 800b8c0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800b8c4:	693b      	ldr	r3, [r7, #16]
 800b8c6:	2202      	movs	r2, #2
 800b8c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800b8cc:	693b      	ldr	r3, [r7, #16]
 800b8ce:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800b8d2:	693b      	ldr	r3, [r7, #16]
 800b8d4:	795b      	ldrb	r3, [r3, #5]
 800b8d6:	2201      	movs	r2, #1
 800b8d8:	9200      	str	r2, [sp, #0]
 800b8da:	221f      	movs	r2, #31
 800b8dc:	6878      	ldr	r0, [r7, #4]
 800b8de:	f002 f824 	bl	800d92a <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800b8e2:	e17e      	b.n	800bbe2 <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800b8e4:	693b      	ldr	r3, [r7, #16]
 800b8e6:	795b      	ldrb	r3, [r3, #5]
 800b8e8:	4619      	mov	r1, r3
 800b8ea:	6878      	ldr	r0, [r7, #4]
 800b8ec:	f002 fbae 	bl	800e04c <USBH_LL_GetURBState>
 800b8f0:	4603      	mov	r3, r0
 800b8f2:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800b8f4:	7d3b      	ldrb	r3, [r7, #20]
 800b8f6:	2b01      	cmp	r3, #1
 800b8f8:	d118      	bne.n	800b92c <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800b8fa:	693b      	ldr	r3, [r7, #16]
 800b8fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d00f      	beq.n	800b922 <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800b902:	693b      	ldr	r3, [r7, #16]
 800b904:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800b908:	b25b      	sxtb	r3, r3
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	da04      	bge.n	800b918 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800b90e:	693b      	ldr	r3, [r7, #16]
 800b910:	2203      	movs	r2, #3
 800b912:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b916:	e157      	b.n	800bbc8 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800b918:	693b      	ldr	r3, [r7, #16]
 800b91a:	2205      	movs	r2, #5
 800b91c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b920:	e152      	b.n	800bbc8 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800b922:	693b      	ldr	r3, [r7, #16]
 800b924:	2207      	movs	r2, #7
 800b926:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b92a:	e14d      	b.n	800bbc8 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b92c:	7d3b      	ldrb	r3, [r7, #20]
 800b92e:	2b02      	cmp	r3, #2
 800b930:	d104      	bne.n	800b93c <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b932:	693b      	ldr	r3, [r7, #16]
 800b934:	2201      	movs	r2, #1
 800b936:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b93a:	e145      	b.n	800bbc8 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 800b93c:	7d3b      	ldrb	r3, [r7, #20]
 800b93e:	2b05      	cmp	r3, #5
 800b940:	f040 8142 	bne.w	800bbc8 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800b944:	693b      	ldr	r3, [r7, #16]
 800b946:	220a      	movs	r2, #10
 800b948:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b94c:	e13c      	b.n	800bbc8 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800b94e:	693b      	ldr	r3, [r7, #16]
 800b950:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800b954:	693b      	ldr	r3, [r7, #16]
 800b956:	895a      	ldrh	r2, [r3, #10]
 800b958:	693b      	ldr	r3, [r7, #16]
 800b95a:	791b      	ldrb	r3, [r3, #4]
 800b95c:	6878      	ldr	r0, [r7, #4]
 800b95e:	f002 f809 	bl	800d974 <USBH_BulkReceiveData>
                                 MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800b962:	693b      	ldr	r3, [r7, #16]
 800b964:	2204      	movs	r2, #4
 800b966:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 800b96a:	e13a      	b.n	800bbe2 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800b96c:	693b      	ldr	r3, [r7, #16]
 800b96e:	791b      	ldrb	r3, [r3, #4]
 800b970:	4619      	mov	r1, r3
 800b972:	6878      	ldr	r0, [r7, #4]
 800b974:	f002 fb6a 	bl	800e04c <USBH_LL_GetURBState>
 800b978:	4603      	mov	r3, r0
 800b97a:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800b97c:	7d3b      	ldrb	r3, [r7, #20]
 800b97e:	2b01      	cmp	r3, #1
 800b980:	d12d      	bne.n	800b9de <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800b982:	693b      	ldr	r3, [r7, #16]
 800b984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b986:	693a      	ldr	r2, [r7, #16]
 800b988:	8952      	ldrh	r2, [r2, #10]
 800b98a:	4293      	cmp	r3, r2
 800b98c:	d910      	bls.n	800b9b0 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800b98e:	693b      	ldr	r3, [r7, #16]
 800b990:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b994:	693a      	ldr	r2, [r7, #16]
 800b996:	8952      	ldrh	r2, [r2, #10]
 800b998:	441a      	add	r2, r3
 800b99a:	693b      	ldr	r3, [r7, #16]
 800b99c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800b9a0:	693b      	ldr	r3, [r7, #16]
 800b9a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b9a4:	693a      	ldr	r2, [r7, #16]
 800b9a6:	8952      	ldrh	r2, [r2, #10]
 800b9a8:	1a9a      	subs	r2, r3, r2
 800b9aa:	693b      	ldr	r3, [r7, #16]
 800b9ac:	65da      	str	r2, [r3, #92]	; 0x5c
 800b9ae:	e002      	b.n	800b9b6 <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800b9b0:	693b      	ldr	r3, [r7, #16]
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800b9b6:	693b      	ldr	r3, [r7, #16]
 800b9b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d00a      	beq.n	800b9d4 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800b9be:	693b      	ldr	r3, [r7, #16]
 800b9c0:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800b9c4:	693b      	ldr	r3, [r7, #16]
 800b9c6:	895a      	ldrh	r2, [r3, #10]
 800b9c8:	693b      	ldr	r3, [r7, #16]
 800b9ca:	791b      	ldrb	r3, [r3, #4]
 800b9cc:	6878      	ldr	r0, [r7, #4]
 800b9ce:	f001 ffd1 	bl	800d974 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800b9d2:	e0fb      	b.n	800bbcc <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800b9d4:	693b      	ldr	r3, [r7, #16]
 800b9d6:	2207      	movs	r2, #7
 800b9d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b9dc:	e0f6      	b.n	800bbcc <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 800b9de:	7d3b      	ldrb	r3, [r7, #20]
 800b9e0:	2b05      	cmp	r3, #5
 800b9e2:	f040 80f3 	bne.w	800bbcc <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800b9e6:	693b      	ldr	r3, [r7, #16]
 800b9e8:	2209      	movs	r2, #9
 800b9ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b9ee:	e0ed      	b.n	800bbcc <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800b9f0:	693b      	ldr	r3, [r7, #16]
 800b9f2:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800b9f6:	693b      	ldr	r3, [r7, #16]
 800b9f8:	891a      	ldrh	r2, [r3, #8]
 800b9fa:	693b      	ldr	r3, [r7, #16]
 800b9fc:	795b      	ldrb	r3, [r3, #5]
 800b9fe:	2001      	movs	r0, #1
 800ba00:	9000      	str	r0, [sp, #0]
 800ba02:	6878      	ldr	r0, [r7, #4]
 800ba04:	f001 ff91 	bl	800d92a <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800ba08:	693b      	ldr	r3, [r7, #16]
 800ba0a:	2206      	movs	r2, #6
 800ba0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800ba10:	e0e7      	b.n	800bbe2 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800ba12:	693b      	ldr	r3, [r7, #16]
 800ba14:	795b      	ldrb	r3, [r3, #5]
 800ba16:	4619      	mov	r1, r3
 800ba18:	6878      	ldr	r0, [r7, #4]
 800ba1a:	f002 fb17 	bl	800e04c <USBH_LL_GetURBState>
 800ba1e:	4603      	mov	r3, r0
 800ba20:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800ba22:	7d3b      	ldrb	r3, [r7, #20]
 800ba24:	2b01      	cmp	r3, #1
 800ba26:	d12f      	bne.n	800ba88 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800ba28:	693b      	ldr	r3, [r7, #16]
 800ba2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ba2c:	693a      	ldr	r2, [r7, #16]
 800ba2e:	8912      	ldrh	r2, [r2, #8]
 800ba30:	4293      	cmp	r3, r2
 800ba32:	d910      	bls.n	800ba56 <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800ba34:	693b      	ldr	r3, [r7, #16]
 800ba36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ba3a:	693a      	ldr	r2, [r7, #16]
 800ba3c:	8912      	ldrh	r2, [r2, #8]
 800ba3e:	441a      	add	r2, r3
 800ba40:	693b      	ldr	r3, [r7, #16]
 800ba42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800ba46:	693b      	ldr	r3, [r7, #16]
 800ba48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ba4a:	693a      	ldr	r2, [r7, #16]
 800ba4c:	8912      	ldrh	r2, [r2, #8]
 800ba4e:	1a9a      	subs	r2, r3, r2
 800ba50:	693b      	ldr	r3, [r7, #16]
 800ba52:	65da      	str	r2, [r3, #92]	; 0x5c
 800ba54:	e002      	b.n	800ba5c <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800ba56:	693b      	ldr	r3, [r7, #16]
 800ba58:	2200      	movs	r2, #0
 800ba5a:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800ba5c:	693b      	ldr	r3, [r7, #16]
 800ba5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d00c      	beq.n	800ba7e <USBH_MSC_BOT_Process+0x22e>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800ba64:	693b      	ldr	r3, [r7, #16]
 800ba66:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800ba6a:	693b      	ldr	r3, [r7, #16]
 800ba6c:	891a      	ldrh	r2, [r3, #8]
 800ba6e:	693b      	ldr	r3, [r7, #16]
 800ba70:	795b      	ldrb	r3, [r3, #5]
 800ba72:	2001      	movs	r0, #1
 800ba74:	9000      	str	r0, [sp, #0]
 800ba76:	6878      	ldr	r0, [r7, #4]
 800ba78:	f001 ff57 	bl	800d92a <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 800ba7c:	e0a8      	b.n	800bbd0 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800ba7e:	693b      	ldr	r3, [r7, #16]
 800ba80:	2207      	movs	r2, #7
 800ba82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800ba86:	e0a3      	b.n	800bbd0 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ba88:	7d3b      	ldrb	r3, [r7, #20]
 800ba8a:	2b02      	cmp	r3, #2
 800ba8c:	d104      	bne.n	800ba98 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800ba8e:	693b      	ldr	r3, [r7, #16]
 800ba90:	2205      	movs	r2, #5
 800ba92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800ba96:	e09b      	b.n	800bbd0 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 800ba98:	7d3b      	ldrb	r3, [r7, #20]
 800ba9a:	2b05      	cmp	r3, #5
 800ba9c:	f040 8098 	bne.w	800bbd0 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800baa0:	693b      	ldr	r3, [r7, #16]
 800baa2:	220a      	movs	r2, #10
 800baa4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800baa8:	e092      	b.n	800bbd0 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800baaa:	693b      	ldr	r3, [r7, #16]
 800baac:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800bab0:	693b      	ldr	r3, [r7, #16]
 800bab2:	791b      	ldrb	r3, [r3, #4]
 800bab4:	220d      	movs	r2, #13
 800bab6:	6878      	ldr	r0, [r7, #4]
 800bab8:	f001 ff5c 	bl	800d974 <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800babc:	693b      	ldr	r3, [r7, #16]
 800babe:	2208      	movs	r2, #8
 800bac0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800bac4:	e08d      	b.n	800bbe2 <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800bac6:	693b      	ldr	r3, [r7, #16]
 800bac8:	791b      	ldrb	r3, [r3, #4]
 800baca:	4619      	mov	r1, r3
 800bacc:	6878      	ldr	r0, [r7, #4]
 800bace:	f002 fabd 	bl	800e04c <USBH_LL_GetURBState>
 800bad2:	4603      	mov	r3, r0
 800bad4:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800bad6:	7d3b      	ldrb	r3, [r7, #20]
 800bad8:	2b01      	cmp	r3, #1
 800bada:	d115      	bne.n	800bb08 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800badc:	693b      	ldr	r3, [r7, #16]
 800bade:	2201      	movs	r2, #1
 800bae0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800bae4:	693b      	ldr	r3, [r7, #16]
 800bae6:	2201      	movs	r2, #1
 800bae8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 800baec:	6878      	ldr	r0, [r7, #4]
 800baee:	f000 f8a9 	bl	800bc44 <USBH_MSC_DecodeCSW>
 800baf2:	4603      	mov	r3, r0
 800baf4:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800baf6:	7d7b      	ldrb	r3, [r7, #21]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d102      	bne.n	800bb02 <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 800bafc:	2300      	movs	r3, #0
 800bafe:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 800bb00:	e068      	b.n	800bbd4 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 800bb02:	2302      	movs	r3, #2
 800bb04:	75fb      	strb	r3, [r7, #23]
      break;
 800bb06:	e065      	b.n	800bbd4 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 800bb08:	7d3b      	ldrb	r3, [r7, #20]
 800bb0a:	2b05      	cmp	r3, #5
 800bb0c:	d162      	bne.n	800bbd4 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800bb0e:	693b      	ldr	r3, [r7, #16]
 800bb10:	2209      	movs	r2, #9
 800bb12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800bb16:	e05d      	b.n	800bbd4 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800bb18:	78fb      	ldrb	r3, [r7, #3]
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	4619      	mov	r1, r3
 800bb1e:	6878      	ldr	r0, [r7, #4]
 800bb20:	f000 f864 	bl	800bbec <USBH_MSC_BOT_Abort>
 800bb24:	4603      	mov	r3, r0
 800bb26:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800bb28:	7dbb      	ldrb	r3, [r7, #22]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d104      	bne.n	800bb38 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800bb2e:	693b      	ldr	r3, [r7, #16]
 800bb30:	2207      	movs	r2, #7
 800bb32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800bb36:	e04f      	b.n	800bbd8 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 800bb38:	7dbb      	ldrb	r3, [r7, #22]
 800bb3a:	2b04      	cmp	r3, #4
 800bb3c:	d14c      	bne.n	800bbd8 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800bb3e:	693b      	ldr	r3, [r7, #16]
 800bb40:	220b      	movs	r2, #11
 800bb42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800bb46:	e047      	b.n	800bbd8 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800bb48:	78fb      	ldrb	r3, [r7, #3]
 800bb4a:	2201      	movs	r2, #1
 800bb4c:	4619      	mov	r1, r3
 800bb4e:	6878      	ldr	r0, [r7, #4]
 800bb50:	f000 f84c 	bl	800bbec <USBH_MSC_BOT_Abort>
 800bb54:	4603      	mov	r3, r0
 800bb56:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800bb58:	7dbb      	ldrb	r3, [r7, #22]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d11d      	bne.n	800bb9a <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800bb5e:	693b      	ldr	r3, [r7, #16]
 800bb60:	795b      	ldrb	r3, [r3, #5]
 800bb62:	4619      	mov	r1, r3
 800bb64:	6878      	ldr	r0, [r7, #4]
 800bb66:	f002 facb 	bl	800e100 <USBH_LL_GetToggle>
 800bb6a:	4603      	mov	r3, r0
 800bb6c:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800bb6e:	693b      	ldr	r3, [r7, #16]
 800bb70:	7959      	ldrb	r1, [r3, #5]
 800bb72:	7bfb      	ldrb	r3, [r7, #15]
 800bb74:	f1c3 0301 	rsb	r3, r3, #1
 800bb78:	b2db      	uxtb	r3, r3
 800bb7a:	461a      	mov	r2, r3
 800bb7c:	6878      	ldr	r0, [r7, #4]
 800bb7e:	f002 fa8f 	bl	800e0a0 <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800bb82:	693b      	ldr	r3, [r7, #16]
 800bb84:	791b      	ldrb	r3, [r3, #4]
 800bb86:	2200      	movs	r2, #0
 800bb88:	4619      	mov	r1, r3
 800bb8a:	6878      	ldr	r0, [r7, #4]
 800bb8c:	f002 fa88 	bl	800e0a0 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800bb90:	693b      	ldr	r3, [r7, #16]
 800bb92:	2209      	movs	r2, #9
 800bb94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800bb98:	e020      	b.n	800bbdc <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 800bb9a:	7dbb      	ldrb	r3, [r7, #22]
 800bb9c:	2b04      	cmp	r3, #4
 800bb9e:	d11d      	bne.n	800bbdc <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800bba0:	693b      	ldr	r3, [r7, #16]
 800bba2:	220b      	movs	r2, #11
 800bba4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800bba8:	e018      	b.n	800bbdc <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800bbaa:	6878      	ldr	r0, [r7, #4]
 800bbac:	f7ff fdf2 	bl	800b794 <USBH_MSC_BOT_REQ_Reset>
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800bbb4:	7dfb      	ldrb	r3, [r7, #23]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d112      	bne.n	800bbe0 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800bbba:	693b      	ldr	r3, [r7, #16]
 800bbbc:	2201      	movs	r2, #1
 800bbbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 800bbc2:	e00d      	b.n	800bbe0 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 800bbc4:	bf00      	nop
 800bbc6:	e00c      	b.n	800bbe2 <USBH_MSC_BOT_Process+0x392>
      break;
 800bbc8:	bf00      	nop
 800bbca:	e00a      	b.n	800bbe2 <USBH_MSC_BOT_Process+0x392>
      break;
 800bbcc:	bf00      	nop
 800bbce:	e008      	b.n	800bbe2 <USBH_MSC_BOT_Process+0x392>
      break;
 800bbd0:	bf00      	nop
 800bbd2:	e006      	b.n	800bbe2 <USBH_MSC_BOT_Process+0x392>
      break;
 800bbd4:	bf00      	nop
 800bbd6:	e004      	b.n	800bbe2 <USBH_MSC_BOT_Process+0x392>
      break;
 800bbd8:	bf00      	nop
 800bbda:	e002      	b.n	800bbe2 <USBH_MSC_BOT_Process+0x392>
      break;
 800bbdc:	bf00      	nop
 800bbde:	e000      	b.n	800bbe2 <USBH_MSC_BOT_Process+0x392>
      break;
 800bbe0:	bf00      	nop
  }
  return status;
 800bbe2:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	3718      	adds	r7, #24
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	bd80      	pop	{r7, pc}

0800bbec <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800bbec:	b580      	push	{r7, lr}
 800bbee:	b084      	sub	sp, #16
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	6078      	str	r0, [r7, #4]
 800bbf4:	460b      	mov	r3, r1
 800bbf6:	70fb      	strb	r3, [r7, #3]
 800bbf8:	4613      	mov	r3, r2
 800bbfa:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800bbfc:	2302      	movs	r3, #2
 800bbfe:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bc06:	69db      	ldr	r3, [r3, #28]
 800bc08:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800bc0a:	78bb      	ldrb	r3, [r7, #2]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d002      	beq.n	800bc16 <USBH_MSC_BOT_Abort+0x2a>
 800bc10:	2b01      	cmp	r3, #1
 800bc12:	d009      	beq.n	800bc28 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800bc14:	e011      	b.n	800bc3a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800bc16:	68bb      	ldr	r3, [r7, #8]
 800bc18:	79db      	ldrb	r3, [r3, #7]
 800bc1a:	4619      	mov	r1, r3
 800bc1c:	6878      	ldr	r0, [r7, #4]
 800bc1e:	f001 f9a8 	bl	800cf72 <USBH_ClrFeature>
 800bc22:	4603      	mov	r3, r0
 800bc24:	73fb      	strb	r3, [r7, #15]
      break;
 800bc26:	e008      	b.n	800bc3a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800bc28:	68bb      	ldr	r3, [r7, #8]
 800bc2a:	799b      	ldrb	r3, [r3, #6]
 800bc2c:	4619      	mov	r1, r3
 800bc2e:	6878      	ldr	r0, [r7, #4]
 800bc30:	f001 f99f 	bl	800cf72 <USBH_ClrFeature>
 800bc34:	4603      	mov	r3, r0
 800bc36:	73fb      	strb	r3, [r7, #15]
      break;
 800bc38:	bf00      	nop
  }
  return status;
 800bc3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	3710      	adds	r7, #16
 800bc40:	46bd      	mov	sp, r7
 800bc42:	bd80      	pop	{r7, pc}

0800bc44 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b084      	sub	sp, #16
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bc52:	69db      	ldr	r3, [r3, #28]
 800bc54:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800bc56:	2301      	movs	r3, #1
 800bc58:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800bc5a:	68bb      	ldr	r3, [r7, #8]
 800bc5c:	791b      	ldrb	r3, [r3, #4]
 800bc5e:	4619      	mov	r1, r3
 800bc60:	6878      	ldr	r0, [r7, #4]
 800bc62:	f002 f961 	bl	800df28 <USBH_LL_GetLastXferSize>
 800bc66:	4603      	mov	r3, r0
 800bc68:	2b0d      	cmp	r3, #13
 800bc6a:	d002      	beq.n	800bc72 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800bc6c:	2302      	movs	r3, #2
 800bc6e:	73fb      	strb	r3, [r7, #15]
 800bc70:	e024      	b.n	800bcbc <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800bc72:	68bb      	ldr	r3, [r7, #8]
 800bc74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bc76:	4a14      	ldr	r2, [pc, #80]	; (800bcc8 <USBH_MSC_DecodeCSW+0x84>)
 800bc78:	4293      	cmp	r3, r2
 800bc7a:	d11d      	bne.n	800bcb8 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800bc7c:	68bb      	ldr	r3, [r7, #8]
 800bc7e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800bc80:	68bb      	ldr	r3, [r7, #8]
 800bc82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc84:	429a      	cmp	r2, r3
 800bc86:	d119      	bne.n	800bcbc <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800bc88:	68bb      	ldr	r3, [r7, #8]
 800bc8a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d102      	bne.n	800bc98 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800bc92:	2300      	movs	r3, #0
 800bc94:	73fb      	strb	r3, [r7, #15]
 800bc96:	e011      	b.n	800bcbc <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800bc98:	68bb      	ldr	r3, [r7, #8]
 800bc9a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800bc9e:	2b01      	cmp	r3, #1
 800bca0:	d102      	bne.n	800bca8 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800bca2:	2301      	movs	r3, #1
 800bca4:	73fb      	strb	r3, [r7, #15]
 800bca6:	e009      	b.n	800bcbc <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800bca8:	68bb      	ldr	r3, [r7, #8]
 800bcaa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800bcae:	2b02      	cmp	r3, #2
 800bcb0:	d104      	bne.n	800bcbc <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800bcb2:	2302      	movs	r3, #2
 800bcb4:	73fb      	strb	r3, [r7, #15]
 800bcb6:	e001      	b.n	800bcbc <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800bcb8:	2302      	movs	r3, #2
 800bcba:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800bcbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	3710      	adds	r7, #16
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	bd80      	pop	{r7, pc}
 800bcc6:	bf00      	nop
 800bcc8:	53425355 	.word	0x53425355

0800bccc <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800bccc:	b580      	push	{r7, lr}
 800bcce:	b084      	sub	sp, #16
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	6078      	str	r0, [r7, #4]
 800bcd4:	460b      	mov	r3, r1
 800bcd6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800bcd8:	2302      	movs	r3, #2
 800bcda:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bce2:	69db      	ldr	r3, [r3, #28]
 800bce4:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800bce6:	68bb      	ldr	r3, [r7, #8]
 800bce8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800bcec:	2b01      	cmp	r3, #1
 800bcee:	d002      	beq.n	800bcf6 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800bcf0:	2b02      	cmp	r3, #2
 800bcf2:	d021      	beq.n	800bd38 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800bcf4:	e028      	b.n	800bd48 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800bcf6:	68bb      	ldr	r3, [r7, #8]
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800bcfc:	68bb      	ldr	r3, [r7, #8]
 800bcfe:	2200      	movs	r2, #0
 800bd00:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800bd04:	68bb      	ldr	r3, [r7, #8]
 800bd06:	220a      	movs	r2, #10
 800bd08:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800bd0c:	68bb      	ldr	r3, [r7, #8]
 800bd0e:	3363      	adds	r3, #99	; 0x63
 800bd10:	2210      	movs	r2, #16
 800bd12:	2100      	movs	r1, #0
 800bd14:	4618      	mov	r0, r3
 800bd16:	f002 fabf 	bl	800e298 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800bd1a:	68bb      	ldr	r3, [r7, #8]
 800bd1c:	2200      	movs	r2, #0
 800bd1e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800bd22:	68bb      	ldr	r3, [r7, #8]
 800bd24:	2201      	movs	r2, #1
 800bd26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800bd2a:	68bb      	ldr	r3, [r7, #8]
 800bd2c:	2202      	movs	r2, #2
 800bd2e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800bd32:	2301      	movs	r3, #1
 800bd34:	73fb      	strb	r3, [r7, #15]
      break;
 800bd36:	e007      	b.n	800bd48 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800bd38:	78fb      	ldrb	r3, [r7, #3]
 800bd3a:	4619      	mov	r1, r3
 800bd3c:	6878      	ldr	r0, [r7, #4]
 800bd3e:	f7ff fd87 	bl	800b850 <USBH_MSC_BOT_Process>
 800bd42:	4603      	mov	r3, r0
 800bd44:	73fb      	strb	r3, [r7, #15]
      break;
 800bd46:	bf00      	nop
  }

  return error;
 800bd48:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	3710      	adds	r7, #16
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	bd80      	pop	{r7, pc}

0800bd52 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800bd52:	b580      	push	{r7, lr}
 800bd54:	b086      	sub	sp, #24
 800bd56:	af00      	add	r7, sp, #0
 800bd58:	60f8      	str	r0, [r7, #12]
 800bd5a:	460b      	mov	r3, r1
 800bd5c:	607a      	str	r2, [r7, #4]
 800bd5e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 800bd60:	2301      	movs	r3, #1
 800bd62:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bd6a:	69db      	ldr	r3, [r3, #28]
 800bd6c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800bd6e:	693b      	ldr	r3, [r7, #16]
 800bd70:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800bd74:	2b01      	cmp	r3, #1
 800bd76:	d002      	beq.n	800bd7e <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800bd78:	2b02      	cmp	r3, #2
 800bd7a:	d027      	beq.n	800bdcc <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800bd7c:	e05f      	b.n	800be3e <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800bd7e:	693b      	ldr	r3, [r7, #16]
 800bd80:	2208      	movs	r2, #8
 800bd82:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800bd84:	693b      	ldr	r3, [r7, #16]
 800bd86:	2280      	movs	r2, #128	; 0x80
 800bd88:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800bd8c:	693b      	ldr	r3, [r7, #16]
 800bd8e:	220a      	movs	r2, #10
 800bd90:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800bd94:	693b      	ldr	r3, [r7, #16]
 800bd96:	3363      	adds	r3, #99	; 0x63
 800bd98:	2210      	movs	r2, #16
 800bd9a:	2100      	movs	r1, #0
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	f002 fa7b 	bl	800e298 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800bda2:	693b      	ldr	r3, [r7, #16]
 800bda4:	2225      	movs	r2, #37	; 0x25
 800bda6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800bdaa:	693b      	ldr	r3, [r7, #16]
 800bdac:	2201      	movs	r2, #1
 800bdae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800bdb2:	693b      	ldr	r3, [r7, #16]
 800bdb4:	2202      	movs	r2, #2
 800bdb6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800bdba:	693b      	ldr	r3, [r7, #16]
 800bdbc:	f103 0210 	add.w	r2, r3, #16
 800bdc0:	693b      	ldr	r3, [r7, #16]
 800bdc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800bdc6:	2301      	movs	r3, #1
 800bdc8:	75fb      	strb	r3, [r7, #23]
      break;
 800bdca:	e038      	b.n	800be3e <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 800bdcc:	7afb      	ldrb	r3, [r7, #11]
 800bdce:	4619      	mov	r1, r3
 800bdd0:	68f8      	ldr	r0, [r7, #12]
 800bdd2:	f7ff fd3d 	bl	800b850 <USBH_MSC_BOT_Process>
 800bdd6:	4603      	mov	r3, r0
 800bdd8:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800bdda:	7dfb      	ldrb	r3, [r7, #23]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d12d      	bne.n	800be3c <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800bde0:	693b      	ldr	r3, [r7, #16]
 800bde2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bde6:	3303      	adds	r3, #3
 800bde8:	781b      	ldrb	r3, [r3, #0]
 800bdea:	461a      	mov	r2, r3
 800bdec:	693b      	ldr	r3, [r7, #16]
 800bdee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bdf2:	3302      	adds	r3, #2
 800bdf4:	781b      	ldrb	r3, [r3, #0]
 800bdf6:	021b      	lsls	r3, r3, #8
 800bdf8:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800bdfa:	693b      	ldr	r3, [r7, #16]
 800bdfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800be00:	3301      	adds	r3, #1
 800be02:	781b      	ldrb	r3, [r3, #0]
 800be04:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800be06:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800be08:	693b      	ldr	r3, [r7, #16]
 800be0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800be0e:	781b      	ldrb	r3, [r3, #0]
 800be10:	061b      	lsls	r3, r3, #24
 800be12:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800be18:	693b      	ldr	r3, [r7, #16]
 800be1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800be1e:	3307      	adds	r3, #7
 800be20:	781b      	ldrb	r3, [r3, #0]
 800be22:	b29a      	uxth	r2, r3
 800be24:	693b      	ldr	r3, [r7, #16]
 800be26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800be2a:	3306      	adds	r3, #6
 800be2c:	781b      	ldrb	r3, [r3, #0]
 800be2e:	b29b      	uxth	r3, r3
 800be30:	021b      	lsls	r3, r3, #8
 800be32:	b29b      	uxth	r3, r3
 800be34:	4313      	orrs	r3, r2
 800be36:	b29a      	uxth	r2, r3
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	809a      	strh	r2, [r3, #4]
      break;
 800be3c:	bf00      	nop
  }

  return error;
 800be3e:	7dfb      	ldrb	r3, [r7, #23]
}
 800be40:	4618      	mov	r0, r3
 800be42:	3718      	adds	r7, #24
 800be44:	46bd      	mov	sp, r7
 800be46:	bd80      	pop	{r7, pc}

0800be48 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800be48:	b580      	push	{r7, lr}
 800be4a:	b086      	sub	sp, #24
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	60f8      	str	r0, [r7, #12]
 800be50:	460b      	mov	r3, r1
 800be52:	607a      	str	r2, [r7, #4]
 800be54:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800be56:	2302      	movs	r3, #2
 800be58:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800be60:	69db      	ldr	r3, [r3, #28]
 800be62:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800be64:	693b      	ldr	r3, [r7, #16]
 800be66:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800be6a:	2b01      	cmp	r3, #1
 800be6c:	d002      	beq.n	800be74 <USBH_MSC_SCSI_Inquiry+0x2c>
 800be6e:	2b02      	cmp	r3, #2
 800be70:	d03d      	beq.n	800beee <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800be72:	e089      	b.n	800bf88 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800be74:	693b      	ldr	r3, [r7, #16]
 800be76:	2224      	movs	r2, #36	; 0x24
 800be78:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800be7a:	693b      	ldr	r3, [r7, #16]
 800be7c:	2280      	movs	r2, #128	; 0x80
 800be7e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800be82:	693b      	ldr	r3, [r7, #16]
 800be84:	220a      	movs	r2, #10
 800be86:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800be8a:	693b      	ldr	r3, [r7, #16]
 800be8c:	3363      	adds	r3, #99	; 0x63
 800be8e:	220a      	movs	r2, #10
 800be90:	2100      	movs	r1, #0
 800be92:	4618      	mov	r0, r3
 800be94:	f002 fa00 	bl	800e298 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800be98:	693b      	ldr	r3, [r7, #16]
 800be9a:	2212      	movs	r2, #18
 800be9c:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800bea0:	7afb      	ldrb	r3, [r7, #11]
 800bea2:	015b      	lsls	r3, r3, #5
 800bea4:	b2da      	uxtb	r2, r3
 800bea6:	693b      	ldr	r3, [r7, #16]
 800bea8:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800beac:	693b      	ldr	r3, [r7, #16]
 800beae:	2200      	movs	r2, #0
 800beb0:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800beb4:	693b      	ldr	r3, [r7, #16]
 800beb6:	2200      	movs	r2, #0
 800beb8:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800bebc:	693b      	ldr	r3, [r7, #16]
 800bebe:	2224      	movs	r2, #36	; 0x24
 800bec0:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800bec4:	693b      	ldr	r3, [r7, #16]
 800bec6:	2200      	movs	r2, #0
 800bec8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800becc:	693b      	ldr	r3, [r7, #16]
 800bece:	2201      	movs	r2, #1
 800bed0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800bed4:	693b      	ldr	r3, [r7, #16]
 800bed6:	2202      	movs	r2, #2
 800bed8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800bedc:	693b      	ldr	r3, [r7, #16]
 800bede:	f103 0210 	add.w	r2, r3, #16
 800bee2:	693b      	ldr	r3, [r7, #16]
 800bee4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800bee8:	2301      	movs	r3, #1
 800beea:	75fb      	strb	r3, [r7, #23]
      break;
 800beec:	e04c      	b.n	800bf88 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800beee:	7afb      	ldrb	r3, [r7, #11]
 800bef0:	4619      	mov	r1, r3
 800bef2:	68f8      	ldr	r0, [r7, #12]
 800bef4:	f7ff fcac 	bl	800b850 <USBH_MSC_BOT_Process>
 800bef8:	4603      	mov	r3, r0
 800befa:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800befc:	7dfb      	ldrb	r3, [r7, #23]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d141      	bne.n	800bf86 <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800bf02:	2222      	movs	r2, #34	; 0x22
 800bf04:	2100      	movs	r1, #0
 800bf06:	6878      	ldr	r0, [r7, #4]
 800bf08:	f002 f9c6 	bl	800e298 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800bf0c:	693b      	ldr	r3, [r7, #16]
 800bf0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf12:	781b      	ldrb	r3, [r3, #0]
 800bf14:	f003 031f 	and.w	r3, r3, #31
 800bf18:	b2da      	uxtb	r2, r3
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800bf1e:	693b      	ldr	r3, [r7, #16]
 800bf20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf24:	781b      	ldrb	r3, [r3, #0]
 800bf26:	095b      	lsrs	r3, r3, #5
 800bf28:	b2da      	uxtb	r2, r3
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800bf2e:	693b      	ldr	r3, [r7, #16]
 800bf30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf34:	3301      	adds	r3, #1
 800bf36:	781b      	ldrb	r3, [r3, #0]
 800bf38:	b25b      	sxtb	r3, r3
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	da03      	bge.n	800bf46 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	2201      	movs	r2, #1
 800bf42:	709a      	strb	r2, [r3, #2]
 800bf44:	e002      	b.n	800bf4c <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	2200      	movs	r2, #0
 800bf4a:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	1cd8      	adds	r0, r3, #3
 800bf50:	693b      	ldr	r3, [r7, #16]
 800bf52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf56:	3308      	adds	r3, #8
 800bf58:	2208      	movs	r2, #8
 800bf5a:	4619      	mov	r1, r3
 800bf5c:	f002 f98e 	bl	800e27c <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	f103 000c 	add.w	r0, r3, #12
 800bf66:	693b      	ldr	r3, [r7, #16]
 800bf68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf6c:	3310      	adds	r3, #16
 800bf6e:	2210      	movs	r2, #16
 800bf70:	4619      	mov	r1, r3
 800bf72:	f002 f983 	bl	800e27c <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	331d      	adds	r3, #29
 800bf7a:	693a      	ldr	r2, [r7, #16]
 800bf7c:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800bf80:	3220      	adds	r2, #32
 800bf82:	6812      	ldr	r2, [r2, #0]
 800bf84:	601a      	str	r2, [r3, #0]
      break;
 800bf86:	bf00      	nop
  }

  return error;
 800bf88:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	3718      	adds	r7, #24
 800bf8e:	46bd      	mov	sp, r7
 800bf90:	bd80      	pop	{r7, pc}

0800bf92 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800bf92:	b580      	push	{r7, lr}
 800bf94:	b086      	sub	sp, #24
 800bf96:	af00      	add	r7, sp, #0
 800bf98:	60f8      	str	r0, [r7, #12]
 800bf9a:	460b      	mov	r3, r1
 800bf9c:	607a      	str	r2, [r7, #4]
 800bf9e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800bfa0:	2302      	movs	r3, #2
 800bfa2:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bfaa:	69db      	ldr	r3, [r3, #28]
 800bfac:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800bfae:	693b      	ldr	r3, [r7, #16]
 800bfb0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800bfb4:	2b01      	cmp	r3, #1
 800bfb6:	d002      	beq.n	800bfbe <USBH_MSC_SCSI_RequestSense+0x2c>
 800bfb8:	2b02      	cmp	r3, #2
 800bfba:	d03d      	beq.n	800c038 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800bfbc:	e05d      	b.n	800c07a <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800bfbe:	693b      	ldr	r3, [r7, #16]
 800bfc0:	220e      	movs	r2, #14
 800bfc2:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800bfc4:	693b      	ldr	r3, [r7, #16]
 800bfc6:	2280      	movs	r2, #128	; 0x80
 800bfc8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800bfcc:	693b      	ldr	r3, [r7, #16]
 800bfce:	220a      	movs	r2, #10
 800bfd0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800bfd4:	693b      	ldr	r3, [r7, #16]
 800bfd6:	3363      	adds	r3, #99	; 0x63
 800bfd8:	2210      	movs	r2, #16
 800bfda:	2100      	movs	r1, #0
 800bfdc:	4618      	mov	r0, r3
 800bfde:	f002 f95b 	bl	800e298 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800bfe2:	693b      	ldr	r3, [r7, #16]
 800bfe4:	2203      	movs	r2, #3
 800bfe6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800bfea:	7afb      	ldrb	r3, [r7, #11]
 800bfec:	015b      	lsls	r3, r3, #5
 800bfee:	b2da      	uxtb	r2, r3
 800bff0:	693b      	ldr	r3, [r7, #16]
 800bff2:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800bff6:	693b      	ldr	r3, [r7, #16]
 800bff8:	2200      	movs	r2, #0
 800bffa:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800bffe:	693b      	ldr	r3, [r7, #16]
 800c000:	2200      	movs	r2, #0
 800c002:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800c006:	693b      	ldr	r3, [r7, #16]
 800c008:	220e      	movs	r2, #14
 800c00a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800c00e:	693b      	ldr	r3, [r7, #16]
 800c010:	2200      	movs	r2, #0
 800c012:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c016:	693b      	ldr	r3, [r7, #16]
 800c018:	2201      	movs	r2, #1
 800c01a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c01e:	693b      	ldr	r3, [r7, #16]
 800c020:	2202      	movs	r2, #2
 800c022:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800c026:	693b      	ldr	r3, [r7, #16]
 800c028:	f103 0210 	add.w	r2, r3, #16
 800c02c:	693b      	ldr	r3, [r7, #16]
 800c02e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800c032:	2301      	movs	r3, #1
 800c034:	75fb      	strb	r3, [r7, #23]
      break;
 800c036:	e020      	b.n	800c07a <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c038:	7afb      	ldrb	r3, [r7, #11]
 800c03a:	4619      	mov	r1, r3
 800c03c:	68f8      	ldr	r0, [r7, #12]
 800c03e:	f7ff fc07 	bl	800b850 <USBH_MSC_BOT_Process>
 800c042:	4603      	mov	r3, r0
 800c044:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800c046:	7dfb      	ldrb	r3, [r7, #23]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d115      	bne.n	800c078 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800c04c:	693b      	ldr	r3, [r7, #16]
 800c04e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c052:	3302      	adds	r3, #2
 800c054:	781b      	ldrb	r3, [r3, #0]
 800c056:	f003 030f 	and.w	r3, r3, #15
 800c05a:	b2da      	uxtb	r2, r3
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800c060:	693b      	ldr	r3, [r7, #16]
 800c062:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c066:	7b1a      	ldrb	r2, [r3, #12]
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800c06c:	693b      	ldr	r3, [r7, #16]
 800c06e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c072:	7b5a      	ldrb	r2, [r3, #13]
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	709a      	strb	r2, [r3, #2]
      break;
 800c078:	bf00      	nop
  }

  return error;
 800c07a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c07c:	4618      	mov	r0, r3
 800c07e:	3718      	adds	r7, #24
 800c080:	46bd      	mov	sp, r7
 800c082:	bd80      	pop	{r7, pc}

0800c084 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800c084:	b580      	push	{r7, lr}
 800c086:	b086      	sub	sp, #24
 800c088:	af00      	add	r7, sp, #0
 800c08a:	60f8      	str	r0, [r7, #12]
 800c08c:	607a      	str	r2, [r7, #4]
 800c08e:	603b      	str	r3, [r7, #0]
 800c090:	460b      	mov	r3, r1
 800c092:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800c094:	2302      	movs	r3, #2
 800c096:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c09e:	69db      	ldr	r3, [r3, #28]
 800c0a0:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800c0a2:	693b      	ldr	r3, [r7, #16]
 800c0a4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c0a8:	2b01      	cmp	r3, #1
 800c0aa:	d002      	beq.n	800c0b2 <USBH_MSC_SCSI_Write+0x2e>
 800c0ac:	2b02      	cmp	r3, #2
 800c0ae:	d047      	beq.n	800c140 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800c0b0:	e04e      	b.n	800c150 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800c0b2:	693b      	ldr	r3, [r7, #16]
 800c0b4:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800c0b8:	461a      	mov	r2, r3
 800c0ba:	6a3b      	ldr	r3, [r7, #32]
 800c0bc:	fb03 f202 	mul.w	r2, r3, r2
 800c0c0:	693b      	ldr	r3, [r7, #16]
 800c0c2:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800c0c4:	693b      	ldr	r3, [r7, #16]
 800c0c6:	2200      	movs	r2, #0
 800c0c8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c0cc:	693b      	ldr	r3, [r7, #16]
 800c0ce:	220a      	movs	r2, #10
 800c0d0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800c0d4:	693b      	ldr	r3, [r7, #16]
 800c0d6:	3363      	adds	r3, #99	; 0x63
 800c0d8:	2210      	movs	r2, #16
 800c0da:	2100      	movs	r1, #0
 800c0dc:	4618      	mov	r0, r3
 800c0de:	f002 f8db 	bl	800e298 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800c0e2:	693b      	ldr	r3, [r7, #16]
 800c0e4:	222a      	movs	r2, #42	; 0x2a
 800c0e6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800c0ea:	79fa      	ldrb	r2, [r7, #7]
 800c0ec:	693b      	ldr	r3, [r7, #16]
 800c0ee:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800c0f2:	79ba      	ldrb	r2, [r7, #6]
 800c0f4:	693b      	ldr	r3, [r7, #16]
 800c0f6:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800c0fa:	797a      	ldrb	r2, [r7, #5]
 800c0fc:	693b      	ldr	r3, [r7, #16]
 800c0fe:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800c102:	1d3b      	adds	r3, r7, #4
 800c104:	781a      	ldrb	r2, [r3, #0]
 800c106:	693b      	ldr	r3, [r7, #16]
 800c108:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800c10c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800c110:	693b      	ldr	r3, [r7, #16]
 800c112:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800c116:	f107 0320 	add.w	r3, r7, #32
 800c11a:	781a      	ldrb	r2, [r3, #0]
 800c11c:	693b      	ldr	r3, [r7, #16]
 800c11e:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c122:	693b      	ldr	r3, [r7, #16]
 800c124:	2201      	movs	r2, #1
 800c126:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c12a:	693b      	ldr	r3, [r7, #16]
 800c12c:	2202      	movs	r2, #2
 800c12e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800c132:	693b      	ldr	r3, [r7, #16]
 800c134:	683a      	ldr	r2, [r7, #0]
 800c136:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800c13a:	2301      	movs	r3, #1
 800c13c:	75fb      	strb	r3, [r7, #23]
      break;
 800c13e:	e007      	b.n	800c150 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c140:	7afb      	ldrb	r3, [r7, #11]
 800c142:	4619      	mov	r1, r3
 800c144:	68f8      	ldr	r0, [r7, #12]
 800c146:	f7ff fb83 	bl	800b850 <USBH_MSC_BOT_Process>
 800c14a:	4603      	mov	r3, r0
 800c14c:	75fb      	strb	r3, [r7, #23]
      break;
 800c14e:	bf00      	nop
  }

  return error;
 800c150:	7dfb      	ldrb	r3, [r7, #23]
}
 800c152:	4618      	mov	r0, r3
 800c154:	3718      	adds	r7, #24
 800c156:	46bd      	mov	sp, r7
 800c158:	bd80      	pop	{r7, pc}

0800c15a <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800c15a:	b580      	push	{r7, lr}
 800c15c:	b086      	sub	sp, #24
 800c15e:	af00      	add	r7, sp, #0
 800c160:	60f8      	str	r0, [r7, #12]
 800c162:	607a      	str	r2, [r7, #4]
 800c164:	603b      	str	r3, [r7, #0]
 800c166:	460b      	mov	r3, r1
 800c168:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800c16a:	2302      	movs	r3, #2
 800c16c:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c174:	69db      	ldr	r3, [r3, #28]
 800c176:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800c178:	693b      	ldr	r3, [r7, #16]
 800c17a:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c17e:	2b01      	cmp	r3, #1
 800c180:	d002      	beq.n	800c188 <USBH_MSC_SCSI_Read+0x2e>
 800c182:	2b02      	cmp	r3, #2
 800c184:	d047      	beq.n	800c216 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800c186:	e04e      	b.n	800c226 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800c188:	693b      	ldr	r3, [r7, #16]
 800c18a:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800c18e:	461a      	mov	r2, r3
 800c190:	6a3b      	ldr	r3, [r7, #32]
 800c192:	fb03 f202 	mul.w	r2, r3, r2
 800c196:	693b      	ldr	r3, [r7, #16]
 800c198:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800c19a:	693b      	ldr	r3, [r7, #16]
 800c19c:	2280      	movs	r2, #128	; 0x80
 800c19e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c1a2:	693b      	ldr	r3, [r7, #16]
 800c1a4:	220a      	movs	r2, #10
 800c1a6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800c1aa:	693b      	ldr	r3, [r7, #16]
 800c1ac:	3363      	adds	r3, #99	; 0x63
 800c1ae:	2210      	movs	r2, #16
 800c1b0:	2100      	movs	r1, #0
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	f002 f870 	bl	800e298 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800c1b8:	693b      	ldr	r3, [r7, #16]
 800c1ba:	2228      	movs	r2, #40	; 0x28
 800c1bc:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800c1c0:	79fa      	ldrb	r2, [r7, #7]
 800c1c2:	693b      	ldr	r3, [r7, #16]
 800c1c4:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800c1c8:	79ba      	ldrb	r2, [r7, #6]
 800c1ca:	693b      	ldr	r3, [r7, #16]
 800c1cc:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800c1d0:	797a      	ldrb	r2, [r7, #5]
 800c1d2:	693b      	ldr	r3, [r7, #16]
 800c1d4:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800c1d8:	1d3b      	adds	r3, r7, #4
 800c1da:	781a      	ldrb	r2, [r3, #0]
 800c1dc:	693b      	ldr	r3, [r7, #16]
 800c1de:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800c1e2:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800c1e6:	693b      	ldr	r3, [r7, #16]
 800c1e8:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800c1ec:	f107 0320 	add.w	r3, r7, #32
 800c1f0:	781a      	ldrb	r2, [r3, #0]
 800c1f2:	693b      	ldr	r3, [r7, #16]
 800c1f4:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c1f8:	693b      	ldr	r3, [r7, #16]
 800c1fa:	2201      	movs	r2, #1
 800c1fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c200:	693b      	ldr	r3, [r7, #16]
 800c202:	2202      	movs	r2, #2
 800c204:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800c208:	693b      	ldr	r3, [r7, #16]
 800c20a:	683a      	ldr	r2, [r7, #0]
 800c20c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800c210:	2301      	movs	r3, #1
 800c212:	75fb      	strb	r3, [r7, #23]
      break;
 800c214:	e007      	b.n	800c226 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c216:	7afb      	ldrb	r3, [r7, #11]
 800c218:	4619      	mov	r1, r3
 800c21a:	68f8      	ldr	r0, [r7, #12]
 800c21c:	f7ff fb18 	bl	800b850 <USBH_MSC_BOT_Process>
 800c220:	4603      	mov	r3, r0
 800c222:	75fb      	strb	r3, [r7, #23]
      break;
 800c224:	bf00      	nop
  }

  return error;
 800c226:	7dfb      	ldrb	r3, [r7, #23]
}
 800c228:	4618      	mov	r0, r3
 800c22a:	3718      	adds	r7, #24
 800c22c:	46bd      	mov	sp, r7
 800c22e:	bd80      	pop	{r7, pc}

0800c230 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800c230:	b580      	push	{r7, lr}
 800c232:	b084      	sub	sp, #16
 800c234:	af00      	add	r7, sp, #0
 800c236:	60f8      	str	r0, [r7, #12]
 800c238:	60b9      	str	r1, [r7, #8]
 800c23a:	4613      	mov	r3, r2
 800c23c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d101      	bne.n	800c248 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800c244:	2302      	movs	r3, #2
 800c246:	e029      	b.n	800c29c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	79fa      	ldrb	r2, [r7, #7]
 800c24c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	2200      	movs	r2, #0
 800c254:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	2200      	movs	r2, #0
 800c25c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800c260:	68f8      	ldr	r0, [r7, #12]
 800c262:	f000 f81f 	bl	800c2a4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	2200      	movs	r2, #0
 800c26a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	2200      	movs	r2, #0
 800c272:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	2200      	movs	r2, #0
 800c27a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	2200      	movs	r2, #0
 800c282:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800c286:	68bb      	ldr	r3, [r7, #8]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d003      	beq.n	800c294 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	68ba      	ldr	r2, [r7, #8]
 800c290:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800c294:	68f8      	ldr	r0, [r7, #12]
 800c296:	f001 fd89 	bl	800ddac <USBH_LL_Init>

  return USBH_OK;
 800c29a:	2300      	movs	r3, #0
}
 800c29c:	4618      	mov	r0, r3
 800c29e:	3710      	adds	r7, #16
 800c2a0:	46bd      	mov	sp, r7
 800c2a2:	bd80      	pop	{r7, pc}

0800c2a4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800c2a4:	b480      	push	{r7}
 800c2a6:	b085      	sub	sp, #20
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	60fb      	str	r3, [r7, #12]
 800c2b4:	e009      	b.n	800c2ca <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800c2b6:	687a      	ldr	r2, [r7, #4]
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	33e0      	adds	r3, #224	; 0xe0
 800c2bc:	009b      	lsls	r3, r3, #2
 800c2be:	4413      	add	r3, r2
 800c2c0:	2200      	movs	r2, #0
 800c2c2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	3301      	adds	r3, #1
 800c2c8:	60fb      	str	r3, [r7, #12]
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	2b0f      	cmp	r3, #15
 800c2ce:	d9f2      	bls.n	800c2b6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	60fb      	str	r3, [r7, #12]
 800c2d4:	e009      	b.n	800c2ea <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800c2d6:	687a      	ldr	r2, [r7, #4]
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	4413      	add	r3, r2
 800c2dc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c2e0:	2200      	movs	r2, #0
 800c2e2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	3301      	adds	r3, #1
 800c2e8:	60fb      	str	r3, [r7, #12]
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c2f0:	d3f1      	bcc.n	800c2d6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	2200      	movs	r2, #0
 800c2f6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	2201      	movs	r2, #1
 800c302:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	2200      	movs	r2, #0
 800c308:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	2201      	movs	r2, #1
 800c310:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	2240      	movs	r2, #64	; 0x40
 800c316:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	2200      	movs	r2, #0
 800c31c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	2200      	movs	r2, #0
 800c322:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	2201      	movs	r2, #1
 800c32a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	2200      	movs	r2, #0
 800c332:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	2200      	movs	r2, #0
 800c33a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800c33e:	2300      	movs	r3, #0
}
 800c340:	4618      	mov	r0, r3
 800c342:	3714      	adds	r7, #20
 800c344:	46bd      	mov	sp, r7
 800c346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34a:	4770      	bx	lr

0800c34c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800c34c:	b480      	push	{r7}
 800c34e:	b085      	sub	sp, #20
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
 800c354:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800c356:	2300      	movs	r3, #0
 800c358:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800c35a:	683b      	ldr	r3, [r7, #0]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d016      	beq.n	800c38e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c366:	2b00      	cmp	r3, #0
 800c368:	d10e      	bne.n	800c388 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c370:	1c59      	adds	r1, r3, #1
 800c372:	687a      	ldr	r2, [r7, #4]
 800c374:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800c378:	687a      	ldr	r2, [r7, #4]
 800c37a:	33de      	adds	r3, #222	; 0xde
 800c37c:	6839      	ldr	r1, [r7, #0]
 800c37e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800c382:	2300      	movs	r3, #0
 800c384:	73fb      	strb	r3, [r7, #15]
 800c386:	e004      	b.n	800c392 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800c388:	2302      	movs	r3, #2
 800c38a:	73fb      	strb	r3, [r7, #15]
 800c38c:	e001      	b.n	800c392 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800c38e:	2302      	movs	r3, #2
 800c390:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c392:	7bfb      	ldrb	r3, [r7, #15]
}
 800c394:	4618      	mov	r0, r3
 800c396:	3714      	adds	r7, #20
 800c398:	46bd      	mov	sp, r7
 800c39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39e:	4770      	bx	lr

0800c3a0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800c3a0:	b480      	push	{r7}
 800c3a2:	b085      	sub	sp, #20
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]
 800c3a8:	460b      	mov	r3, r1
 800c3aa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800c3b6:	78fa      	ldrb	r2, [r7, #3]
 800c3b8:	429a      	cmp	r2, r3
 800c3ba:	d204      	bcs.n	800c3c6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	78fa      	ldrb	r2, [r7, #3]
 800c3c0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800c3c4:	e001      	b.n	800c3ca <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800c3c6:	2302      	movs	r3, #2
 800c3c8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c3ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	3714      	adds	r7, #20
 800c3d0:	46bd      	mov	sp, r7
 800c3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d6:	4770      	bx	lr

0800c3d8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800c3d8:	b480      	push	{r7}
 800c3da:	b087      	sub	sp, #28
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	6078      	str	r0, [r7, #4]
 800c3e0:	4608      	mov	r0, r1
 800c3e2:	4611      	mov	r1, r2
 800c3e4:	461a      	mov	r2, r3
 800c3e6:	4603      	mov	r3, r0
 800c3e8:	70fb      	strb	r3, [r7, #3]
 800c3ea:	460b      	mov	r3, r1
 800c3ec:	70bb      	strb	r3, [r7, #2]
 800c3ee:	4613      	mov	r3, r2
 800c3f0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800c400:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c402:	e025      	b.n	800c450 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800c404:	7dfb      	ldrb	r3, [r7, #23]
 800c406:	221a      	movs	r2, #26
 800c408:	fb02 f303 	mul.w	r3, r2, r3
 800c40c:	3308      	adds	r3, #8
 800c40e:	68fa      	ldr	r2, [r7, #12]
 800c410:	4413      	add	r3, r2
 800c412:	3302      	adds	r3, #2
 800c414:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c416:	693b      	ldr	r3, [r7, #16]
 800c418:	795b      	ldrb	r3, [r3, #5]
 800c41a:	78fa      	ldrb	r2, [r7, #3]
 800c41c:	429a      	cmp	r2, r3
 800c41e:	d002      	beq.n	800c426 <USBH_FindInterface+0x4e>
 800c420:	78fb      	ldrb	r3, [r7, #3]
 800c422:	2bff      	cmp	r3, #255	; 0xff
 800c424:	d111      	bne.n	800c44a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c426:	693b      	ldr	r3, [r7, #16]
 800c428:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c42a:	78ba      	ldrb	r2, [r7, #2]
 800c42c:	429a      	cmp	r2, r3
 800c42e:	d002      	beq.n	800c436 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c430:	78bb      	ldrb	r3, [r7, #2]
 800c432:	2bff      	cmp	r3, #255	; 0xff
 800c434:	d109      	bne.n	800c44a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c436:	693b      	ldr	r3, [r7, #16]
 800c438:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c43a:	787a      	ldrb	r2, [r7, #1]
 800c43c:	429a      	cmp	r2, r3
 800c43e:	d002      	beq.n	800c446 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c440:	787b      	ldrb	r3, [r7, #1]
 800c442:	2bff      	cmp	r3, #255	; 0xff
 800c444:	d101      	bne.n	800c44a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800c446:	7dfb      	ldrb	r3, [r7, #23]
 800c448:	e006      	b.n	800c458 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800c44a:	7dfb      	ldrb	r3, [r7, #23]
 800c44c:	3301      	adds	r3, #1
 800c44e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c450:	7dfb      	ldrb	r3, [r7, #23]
 800c452:	2b01      	cmp	r3, #1
 800c454:	d9d6      	bls.n	800c404 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800c456:	23ff      	movs	r3, #255	; 0xff
}
 800c458:	4618      	mov	r0, r3
 800c45a:	371c      	adds	r7, #28
 800c45c:	46bd      	mov	sp, r7
 800c45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c462:	4770      	bx	lr

0800c464 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800c464:	b580      	push	{r7, lr}
 800c466:	b082      	sub	sp, #8
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800c46c:	6878      	ldr	r0, [r7, #4]
 800c46e:	f001 fce3 	bl	800de38 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800c472:	2101      	movs	r1, #1
 800c474:	6878      	ldr	r0, [r7, #4]
 800c476:	f001 fdfc 	bl	800e072 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800c47a:	2300      	movs	r3, #0
}
 800c47c:	4618      	mov	r0, r3
 800c47e:	3708      	adds	r7, #8
 800c480:	46bd      	mov	sp, r7
 800c482:	bd80      	pop	{r7, pc}

0800c484 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800c484:	b580      	push	{r7, lr}
 800c486:	b088      	sub	sp, #32
 800c488:	af04      	add	r7, sp, #16
 800c48a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800c48c:	2302      	movs	r3, #2
 800c48e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800c490:	2300      	movs	r3, #0
 800c492:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800c49a:	b2db      	uxtb	r3, r3
 800c49c:	2b01      	cmp	r3, #1
 800c49e:	d102      	bne.n	800c4a6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	2203      	movs	r2, #3
 800c4a4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	781b      	ldrb	r3, [r3, #0]
 800c4aa:	b2db      	uxtb	r3, r3
 800c4ac:	2b0b      	cmp	r3, #11
 800c4ae:	f200 81be 	bhi.w	800c82e <USBH_Process+0x3aa>
 800c4b2:	a201      	add	r2, pc, #4	; (adr r2, 800c4b8 <USBH_Process+0x34>)
 800c4b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4b8:	0800c4e9 	.word	0x0800c4e9
 800c4bc:	0800c51b 	.word	0x0800c51b
 800c4c0:	0800c583 	.word	0x0800c583
 800c4c4:	0800c7c9 	.word	0x0800c7c9
 800c4c8:	0800c82f 	.word	0x0800c82f
 800c4cc:	0800c627 	.word	0x0800c627
 800c4d0:	0800c76f 	.word	0x0800c76f
 800c4d4:	0800c65d 	.word	0x0800c65d
 800c4d8:	0800c67d 	.word	0x0800c67d
 800c4dc:	0800c69d 	.word	0x0800c69d
 800c4e0:	0800c6e1 	.word	0x0800c6e1
 800c4e4:	0800c7b1 	.word	0x0800c7b1
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800c4ee:	b2db      	uxtb	r3, r3
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	f000 819e 	beq.w	800c832 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	2201      	movs	r2, #1
 800c4fa:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800c4fc:	20c8      	movs	r0, #200	; 0xc8
 800c4fe:	f001 fe2f 	bl	800e160 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800c502:	6878      	ldr	r0, [r7, #4]
 800c504:	f001 fcf5 	bl	800def2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	2200      	movs	r2, #0
 800c50c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	2200      	movs	r2, #0
 800c514:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800c518:	e18b      	b.n	800c832 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800c520:	2b01      	cmp	r3, #1
 800c522:	d107      	bne.n	800c534 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	2200      	movs	r2, #0
 800c528:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	2202      	movs	r2, #2
 800c530:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c532:	e18d      	b.n	800c850 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800c53a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c53e:	d914      	bls.n	800c56a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800c546:	3301      	adds	r3, #1
 800c548:	b2da      	uxtb	r2, r3
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800c556:	2b03      	cmp	r3, #3
 800c558:	d903      	bls.n	800c562 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	220d      	movs	r2, #13
 800c55e:	701a      	strb	r2, [r3, #0]
      break;
 800c560:	e176      	b.n	800c850 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	2200      	movs	r2, #0
 800c566:	701a      	strb	r2, [r3, #0]
      break;
 800c568:	e172      	b.n	800c850 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800c570:	f103 020a 	add.w	r2, r3, #10
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800c57a:	200a      	movs	r0, #10
 800c57c:	f001 fdf0 	bl	800e160 <USBH_Delay>
      break;
 800c580:	e166      	b.n	800c850 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d005      	beq.n	800c598 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c592:	2104      	movs	r1, #4
 800c594:	6878      	ldr	r0, [r7, #4]
 800c596:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800c598:	2064      	movs	r0, #100	; 0x64
 800c59a:	f001 fde1 	bl	800e160 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800c59e:	6878      	ldr	r0, [r7, #4]
 800c5a0:	f001 fc80 	bl	800dea4 <USBH_LL_GetSpeed>
 800c5a4:	4603      	mov	r3, r0
 800c5a6:	461a      	mov	r2, r3
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	2205      	movs	r2, #5
 800c5b2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800c5b4:	2100      	movs	r1, #0
 800c5b6:	6878      	ldr	r0, [r7, #4]
 800c5b8:	f001 fa29 	bl	800da0e <USBH_AllocPipe>
 800c5bc:	4603      	mov	r3, r0
 800c5be:	461a      	mov	r2, r3
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800c5c4:	2180      	movs	r1, #128	; 0x80
 800c5c6:	6878      	ldr	r0, [r7, #4]
 800c5c8:	f001 fa21 	bl	800da0e <USBH_AllocPipe>
 800c5cc:	4603      	mov	r3, r0
 800c5ce:	461a      	mov	r2, r3
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	7919      	ldrb	r1, [r3, #4]
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800c5e4:	687a      	ldr	r2, [r7, #4]
 800c5e6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800c5e8:	b292      	uxth	r2, r2
 800c5ea:	9202      	str	r2, [sp, #8]
 800c5ec:	2200      	movs	r2, #0
 800c5ee:	9201      	str	r2, [sp, #4]
 800c5f0:	9300      	str	r3, [sp, #0]
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	2280      	movs	r2, #128	; 0x80
 800c5f6:	6878      	ldr	r0, [r7, #4]
 800c5f8:	f001 f9da 	bl	800d9b0 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	7959      	ldrb	r1, [r3, #5]
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800c60c:	687a      	ldr	r2, [r7, #4]
 800c60e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800c610:	b292      	uxth	r2, r2
 800c612:	9202      	str	r2, [sp, #8]
 800c614:	2200      	movs	r2, #0
 800c616:	9201      	str	r2, [sp, #4]
 800c618:	9300      	str	r3, [sp, #0]
 800c61a:	4603      	mov	r3, r0
 800c61c:	2200      	movs	r2, #0
 800c61e:	6878      	ldr	r0, [r7, #4]
 800c620:	f001 f9c6 	bl	800d9b0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c624:	e114      	b.n	800c850 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800c626:	6878      	ldr	r0, [r7, #4]
 800c628:	f000 f918 	bl	800c85c <USBH_HandleEnum>
 800c62c:	4603      	mov	r3, r0
 800c62e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800c630:	7bbb      	ldrb	r3, [r7, #14]
 800c632:	b2db      	uxtb	r3, r3
 800c634:	2b00      	cmp	r3, #0
 800c636:	f040 80fe 	bne.w	800c836 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	2200      	movs	r2, #0
 800c63e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800c648:	2b01      	cmp	r3, #1
 800c64a:	d103      	bne.n	800c654 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	2208      	movs	r2, #8
 800c650:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800c652:	e0f0      	b.n	800c836 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	2207      	movs	r2, #7
 800c658:	701a      	strb	r2, [r3, #0]
      break;
 800c65a:	e0ec      	b.n	800c836 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c662:	2b00      	cmp	r3, #0
 800c664:	f000 80e9 	beq.w	800c83a <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c66e:	2101      	movs	r1, #1
 800c670:	6878      	ldr	r0, [r7, #4]
 800c672:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	2208      	movs	r2, #8
 800c678:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800c67a:	e0de      	b.n	800c83a <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800c682:	b29b      	uxth	r3, r3
 800c684:	4619      	mov	r1, r3
 800c686:	6878      	ldr	r0, [r7, #4]
 800c688:	f000 fc2c 	bl	800cee4 <USBH_SetCfg>
 800c68c:	4603      	mov	r3, r0
 800c68e:	2b00      	cmp	r3, #0
 800c690:	f040 80d5 	bne.w	800c83e <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	2209      	movs	r2, #9
 800c698:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c69a:	e0d0      	b.n	800c83e <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800c6a2:	f003 0320 	and.w	r3, r3, #32
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d016      	beq.n	800c6d8 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800c6aa:	2101      	movs	r1, #1
 800c6ac:	6878      	ldr	r0, [r7, #4]
 800c6ae:	f000 fc3c 	bl	800cf2a <USBH_SetFeature>
 800c6b2:	4603      	mov	r3, r0
 800c6b4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800c6b6:	7bbb      	ldrb	r3, [r7, #14]
 800c6b8:	b2db      	uxtb	r3, r3
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d103      	bne.n	800c6c6 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	220a      	movs	r2, #10
 800c6c2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c6c4:	e0bd      	b.n	800c842 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800c6c6:	7bbb      	ldrb	r3, [r7, #14]
 800c6c8:	b2db      	uxtb	r3, r3
 800c6ca:	2b03      	cmp	r3, #3
 800c6cc:	f040 80b9 	bne.w	800c842 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	220a      	movs	r2, #10
 800c6d4:	701a      	strb	r2, [r3, #0]
      break;
 800c6d6:	e0b4      	b.n	800c842 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	220a      	movs	r2, #10
 800c6dc:	701a      	strb	r2, [r3, #0]
      break;
 800c6de:	e0b0      	b.n	800c842 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	f000 80ad 	beq.w	800c846 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	73fb      	strb	r3, [r7, #15]
 800c6f8:	e016      	b.n	800c728 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800c6fa:	7bfa      	ldrb	r2, [r7, #15]
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	32de      	adds	r2, #222	; 0xde
 800c700:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c704:	791a      	ldrb	r2, [r3, #4]
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800c70c:	429a      	cmp	r2, r3
 800c70e:	d108      	bne.n	800c722 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800c710:	7bfa      	ldrb	r2, [r7, #15]
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	32de      	adds	r2, #222	; 0xde
 800c716:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800c720:	e005      	b.n	800c72e <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800c722:	7bfb      	ldrb	r3, [r7, #15]
 800c724:	3301      	adds	r3, #1
 800c726:	73fb      	strb	r3, [r7, #15]
 800c728:	7bfb      	ldrb	r3, [r7, #15]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d0e5      	beq.n	800c6fa <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c734:	2b00      	cmp	r3, #0
 800c736:	d016      	beq.n	800c766 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c73e:	689b      	ldr	r3, [r3, #8]
 800c740:	6878      	ldr	r0, [r7, #4]
 800c742:	4798      	blx	r3
 800c744:	4603      	mov	r3, r0
 800c746:	2b00      	cmp	r3, #0
 800c748:	d109      	bne.n	800c75e <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	2206      	movs	r2, #6
 800c74e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c756:	2103      	movs	r1, #3
 800c758:	6878      	ldr	r0, [r7, #4]
 800c75a:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c75c:	e073      	b.n	800c846 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	220d      	movs	r2, #13
 800c762:	701a      	strb	r2, [r3, #0]
      break;
 800c764:	e06f      	b.n	800c846 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	220d      	movs	r2, #13
 800c76a:	701a      	strb	r2, [r3, #0]
      break;
 800c76c:	e06b      	b.n	800c846 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c774:	2b00      	cmp	r3, #0
 800c776:	d017      	beq.n	800c7a8 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c77e:	691b      	ldr	r3, [r3, #16]
 800c780:	6878      	ldr	r0, [r7, #4]
 800c782:	4798      	blx	r3
 800c784:	4603      	mov	r3, r0
 800c786:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800c788:	7bbb      	ldrb	r3, [r7, #14]
 800c78a:	b2db      	uxtb	r3, r3
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d103      	bne.n	800c798 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	220b      	movs	r2, #11
 800c794:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c796:	e058      	b.n	800c84a <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800c798:	7bbb      	ldrb	r3, [r7, #14]
 800c79a:	b2db      	uxtb	r3, r3
 800c79c:	2b02      	cmp	r3, #2
 800c79e:	d154      	bne.n	800c84a <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	220d      	movs	r2, #13
 800c7a4:	701a      	strb	r2, [r3, #0]
      break;
 800c7a6:	e050      	b.n	800c84a <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	220d      	movs	r2, #13
 800c7ac:	701a      	strb	r2, [r3, #0]
      break;
 800c7ae:	e04c      	b.n	800c84a <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d049      	beq.n	800c84e <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c7c0:	695b      	ldr	r3, [r3, #20]
 800c7c2:	6878      	ldr	r0, [r7, #4]
 800c7c4:	4798      	blx	r3
      }
      break;
 800c7c6:	e042      	b.n	800c84e <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800c7d0:	6878      	ldr	r0, [r7, #4]
 800c7d2:	f7ff fd67 	bl	800c2a4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d009      	beq.n	800c7f4 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c7e6:	68db      	ldr	r3, [r3, #12]
 800c7e8:	6878      	ldr	r0, [r7, #4]
 800c7ea:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	2200      	movs	r2, #0
 800c7f0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d005      	beq.n	800c80a <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c804:	2105      	movs	r1, #5
 800c806:	6878      	ldr	r0, [r7, #4]
 800c808:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800c810:	b2db      	uxtb	r3, r3
 800c812:	2b01      	cmp	r3, #1
 800c814:	d107      	bne.n	800c826 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	2200      	movs	r2, #0
 800c81a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800c81e:	6878      	ldr	r0, [r7, #4]
 800c820:	f7ff fe20 	bl	800c464 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c824:	e014      	b.n	800c850 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800c826:	6878      	ldr	r0, [r7, #4]
 800c828:	f001 fb06 	bl	800de38 <USBH_LL_Start>
      break;
 800c82c:	e010      	b.n	800c850 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800c82e:	bf00      	nop
 800c830:	e00e      	b.n	800c850 <USBH_Process+0x3cc>
      break;
 800c832:	bf00      	nop
 800c834:	e00c      	b.n	800c850 <USBH_Process+0x3cc>
      break;
 800c836:	bf00      	nop
 800c838:	e00a      	b.n	800c850 <USBH_Process+0x3cc>
    break;
 800c83a:	bf00      	nop
 800c83c:	e008      	b.n	800c850 <USBH_Process+0x3cc>
      break;
 800c83e:	bf00      	nop
 800c840:	e006      	b.n	800c850 <USBH_Process+0x3cc>
      break;
 800c842:	bf00      	nop
 800c844:	e004      	b.n	800c850 <USBH_Process+0x3cc>
      break;
 800c846:	bf00      	nop
 800c848:	e002      	b.n	800c850 <USBH_Process+0x3cc>
      break;
 800c84a:	bf00      	nop
 800c84c:	e000      	b.n	800c850 <USBH_Process+0x3cc>
      break;
 800c84e:	bf00      	nop
  }
  return USBH_OK;
 800c850:	2300      	movs	r3, #0
}
 800c852:	4618      	mov	r0, r3
 800c854:	3710      	adds	r7, #16
 800c856:	46bd      	mov	sp, r7
 800c858:	bd80      	pop	{r7, pc}
 800c85a:	bf00      	nop

0800c85c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800c85c:	b580      	push	{r7, lr}
 800c85e:	b088      	sub	sp, #32
 800c860:	af04      	add	r7, sp, #16
 800c862:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800c864:	2301      	movs	r3, #1
 800c866:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800c868:	2301      	movs	r3, #1
 800c86a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	785b      	ldrb	r3, [r3, #1]
 800c870:	2b07      	cmp	r3, #7
 800c872:	f200 81c1 	bhi.w	800cbf8 <USBH_HandleEnum+0x39c>
 800c876:	a201      	add	r2, pc, #4	; (adr r2, 800c87c <USBH_HandleEnum+0x20>)
 800c878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c87c:	0800c89d 	.word	0x0800c89d
 800c880:	0800c95b 	.word	0x0800c95b
 800c884:	0800c9c5 	.word	0x0800c9c5
 800c888:	0800ca53 	.word	0x0800ca53
 800c88c:	0800cabd 	.word	0x0800cabd
 800c890:	0800cb2d 	.word	0x0800cb2d
 800c894:	0800cb73 	.word	0x0800cb73
 800c898:	0800cbb9 	.word	0x0800cbb9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800c89c:	2108      	movs	r1, #8
 800c89e:	6878      	ldr	r0, [r7, #4]
 800c8a0:	f000 fa50 	bl	800cd44 <USBH_Get_DevDesc>
 800c8a4:	4603      	mov	r3, r0
 800c8a6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c8a8:	7bbb      	ldrb	r3, [r7, #14]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d130      	bne.n	800c910 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	2201      	movs	r2, #1
 800c8bc:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	7919      	ldrb	r1, [r3, #4]
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c8ce:	687a      	ldr	r2, [r7, #4]
 800c8d0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c8d2:	b292      	uxth	r2, r2
 800c8d4:	9202      	str	r2, [sp, #8]
 800c8d6:	2200      	movs	r2, #0
 800c8d8:	9201      	str	r2, [sp, #4]
 800c8da:	9300      	str	r3, [sp, #0]
 800c8dc:	4603      	mov	r3, r0
 800c8de:	2280      	movs	r2, #128	; 0x80
 800c8e0:	6878      	ldr	r0, [r7, #4]
 800c8e2:	f001 f865 	bl	800d9b0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	7959      	ldrb	r1, [r3, #5]
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c8f6:	687a      	ldr	r2, [r7, #4]
 800c8f8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c8fa:	b292      	uxth	r2, r2
 800c8fc:	9202      	str	r2, [sp, #8]
 800c8fe:	2200      	movs	r2, #0
 800c900:	9201      	str	r2, [sp, #4]
 800c902:	9300      	str	r3, [sp, #0]
 800c904:	4603      	mov	r3, r0
 800c906:	2200      	movs	r2, #0
 800c908:	6878      	ldr	r0, [r7, #4]
 800c90a:	f001 f851 	bl	800d9b0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800c90e:	e175      	b.n	800cbfc <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c910:	7bbb      	ldrb	r3, [r7, #14]
 800c912:	2b03      	cmp	r3, #3
 800c914:	f040 8172 	bne.w	800cbfc <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c91e:	3301      	adds	r3, #1
 800c920:	b2da      	uxtb	r2, r3
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c92e:	2b03      	cmp	r3, #3
 800c930:	d903      	bls.n	800c93a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	220d      	movs	r2, #13
 800c936:	701a      	strb	r2, [r3, #0]
      break;
 800c938:	e160      	b.n	800cbfc <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	795b      	ldrb	r3, [r3, #5]
 800c93e:	4619      	mov	r1, r3
 800c940:	6878      	ldr	r0, [r7, #4]
 800c942:	f001 f885 	bl	800da50 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	791b      	ldrb	r3, [r3, #4]
 800c94a:	4619      	mov	r1, r3
 800c94c:	6878      	ldr	r0, [r7, #4]
 800c94e:	f001 f87f 	bl	800da50 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	2200      	movs	r2, #0
 800c956:	701a      	strb	r2, [r3, #0]
      break;
 800c958:	e150      	b.n	800cbfc <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800c95a:	2112      	movs	r1, #18
 800c95c:	6878      	ldr	r0, [r7, #4]
 800c95e:	f000 f9f1 	bl	800cd44 <USBH_Get_DevDesc>
 800c962:	4603      	mov	r3, r0
 800c964:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c966:	7bbb      	ldrb	r3, [r7, #14]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d103      	bne.n	800c974 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	2202      	movs	r2, #2
 800c970:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c972:	e145      	b.n	800cc00 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c974:	7bbb      	ldrb	r3, [r7, #14]
 800c976:	2b03      	cmp	r3, #3
 800c978:	f040 8142 	bne.w	800cc00 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c982:	3301      	adds	r3, #1
 800c984:	b2da      	uxtb	r2, r3
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c992:	2b03      	cmp	r3, #3
 800c994:	d903      	bls.n	800c99e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	220d      	movs	r2, #13
 800c99a:	701a      	strb	r2, [r3, #0]
      break;
 800c99c:	e130      	b.n	800cc00 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	795b      	ldrb	r3, [r3, #5]
 800c9a2:	4619      	mov	r1, r3
 800c9a4:	6878      	ldr	r0, [r7, #4]
 800c9a6:	f001 f853 	bl	800da50 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	791b      	ldrb	r3, [r3, #4]
 800c9ae:	4619      	mov	r1, r3
 800c9b0:	6878      	ldr	r0, [r7, #4]
 800c9b2:	f001 f84d 	bl	800da50 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	2200      	movs	r2, #0
 800c9c0:	701a      	strb	r2, [r3, #0]
      break;
 800c9c2:	e11d      	b.n	800cc00 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800c9c4:	2101      	movs	r1, #1
 800c9c6:	6878      	ldr	r0, [r7, #4]
 800c9c8:	f000 fa68 	bl	800ce9c <USBH_SetAddress>
 800c9cc:	4603      	mov	r3, r0
 800c9ce:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c9d0:	7bbb      	ldrb	r3, [r7, #14]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d132      	bne.n	800ca3c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800c9d6:	2002      	movs	r0, #2
 800c9d8:	f001 fbc2 	bl	800e160 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	2201      	movs	r2, #1
 800c9e0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	2203      	movs	r2, #3
 800c9e8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	7919      	ldrb	r1, [r3, #4]
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c9fa:	687a      	ldr	r2, [r7, #4]
 800c9fc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800c9fe:	b292      	uxth	r2, r2
 800ca00:	9202      	str	r2, [sp, #8]
 800ca02:	2200      	movs	r2, #0
 800ca04:	9201      	str	r2, [sp, #4]
 800ca06:	9300      	str	r3, [sp, #0]
 800ca08:	4603      	mov	r3, r0
 800ca0a:	2280      	movs	r2, #128	; 0x80
 800ca0c:	6878      	ldr	r0, [r7, #4]
 800ca0e:	f000 ffcf 	bl	800d9b0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	7959      	ldrb	r1, [r3, #5]
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800ca22:	687a      	ldr	r2, [r7, #4]
 800ca24:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ca26:	b292      	uxth	r2, r2
 800ca28:	9202      	str	r2, [sp, #8]
 800ca2a:	2200      	movs	r2, #0
 800ca2c:	9201      	str	r2, [sp, #4]
 800ca2e:	9300      	str	r3, [sp, #0]
 800ca30:	4603      	mov	r3, r0
 800ca32:	2200      	movs	r2, #0
 800ca34:	6878      	ldr	r0, [r7, #4]
 800ca36:	f000 ffbb 	bl	800d9b0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ca3a:	e0e3      	b.n	800cc04 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ca3c:	7bbb      	ldrb	r3, [r7, #14]
 800ca3e:	2b03      	cmp	r3, #3
 800ca40:	f040 80e0 	bne.w	800cc04 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	220d      	movs	r2, #13
 800ca48:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	705a      	strb	r2, [r3, #1]
      break;
 800ca50:	e0d8      	b.n	800cc04 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800ca52:	2109      	movs	r1, #9
 800ca54:	6878      	ldr	r0, [r7, #4]
 800ca56:	f000 f99d 	bl	800cd94 <USBH_Get_CfgDesc>
 800ca5a:	4603      	mov	r3, r0
 800ca5c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ca5e:	7bbb      	ldrb	r3, [r7, #14]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d103      	bne.n	800ca6c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	2204      	movs	r2, #4
 800ca68:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ca6a:	e0cd      	b.n	800cc08 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ca6c:	7bbb      	ldrb	r3, [r7, #14]
 800ca6e:	2b03      	cmp	r3, #3
 800ca70:	f040 80ca 	bne.w	800cc08 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ca7a:	3301      	adds	r3, #1
 800ca7c:	b2da      	uxtb	r2, r3
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ca8a:	2b03      	cmp	r3, #3
 800ca8c:	d903      	bls.n	800ca96 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	220d      	movs	r2, #13
 800ca92:	701a      	strb	r2, [r3, #0]
      break;
 800ca94:	e0b8      	b.n	800cc08 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	795b      	ldrb	r3, [r3, #5]
 800ca9a:	4619      	mov	r1, r3
 800ca9c:	6878      	ldr	r0, [r7, #4]
 800ca9e:	f000 ffd7 	bl	800da50 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	791b      	ldrb	r3, [r3, #4]
 800caa6:	4619      	mov	r1, r3
 800caa8:	6878      	ldr	r0, [r7, #4]
 800caaa:	f000 ffd1 	bl	800da50 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	2200      	movs	r2, #0
 800cab2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	2200      	movs	r2, #0
 800cab8:	701a      	strb	r2, [r3, #0]
      break;
 800caba:	e0a5      	b.n	800cc08 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800cac2:	4619      	mov	r1, r3
 800cac4:	6878      	ldr	r0, [r7, #4]
 800cac6:	f000 f965 	bl	800cd94 <USBH_Get_CfgDesc>
 800caca:	4603      	mov	r3, r0
 800cacc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cace:	7bbb      	ldrb	r3, [r7, #14]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d103      	bne.n	800cadc <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	2205      	movs	r2, #5
 800cad8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800cada:	e097      	b.n	800cc0c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cadc:	7bbb      	ldrb	r3, [r7, #14]
 800cade:	2b03      	cmp	r3, #3
 800cae0:	f040 8094 	bne.w	800cc0c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800caea:	3301      	adds	r3, #1
 800caec:	b2da      	uxtb	r2, r3
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cafa:	2b03      	cmp	r3, #3
 800cafc:	d903      	bls.n	800cb06 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	220d      	movs	r2, #13
 800cb02:	701a      	strb	r2, [r3, #0]
      break;
 800cb04:	e082      	b.n	800cc0c <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	795b      	ldrb	r3, [r3, #5]
 800cb0a:	4619      	mov	r1, r3
 800cb0c:	6878      	ldr	r0, [r7, #4]
 800cb0e:	f000 ff9f 	bl	800da50 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	791b      	ldrb	r3, [r3, #4]
 800cb16:	4619      	mov	r1, r3
 800cb18:	6878      	ldr	r0, [r7, #4]
 800cb1a:	f000 ff99 	bl	800da50 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	2200      	movs	r2, #0
 800cb22:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	2200      	movs	r2, #0
 800cb28:	701a      	strb	r2, [r3, #0]
      break;
 800cb2a:	e06f      	b.n	800cc0c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d019      	beq.n	800cb6a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800cb42:	23ff      	movs	r3, #255	; 0xff
 800cb44:	6878      	ldr	r0, [r7, #4]
 800cb46:	f000 f949 	bl	800cddc <USBH_Get_StringDesc>
 800cb4a:	4603      	mov	r3, r0
 800cb4c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800cb4e:	7bbb      	ldrb	r3, [r7, #14]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d103      	bne.n	800cb5c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	2206      	movs	r2, #6
 800cb58:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800cb5a:	e059      	b.n	800cc10 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cb5c:	7bbb      	ldrb	r3, [r7, #14]
 800cb5e:	2b03      	cmp	r3, #3
 800cb60:	d156      	bne.n	800cc10 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	2206      	movs	r2, #6
 800cb66:	705a      	strb	r2, [r3, #1]
      break;
 800cb68:	e052      	b.n	800cc10 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	2206      	movs	r2, #6
 800cb6e:	705a      	strb	r2, [r3, #1]
      break;
 800cb70:	e04e      	b.n	800cc10 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d019      	beq.n	800cbb0 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800cb88:	23ff      	movs	r3, #255	; 0xff
 800cb8a:	6878      	ldr	r0, [r7, #4]
 800cb8c:	f000 f926 	bl	800cddc <USBH_Get_StringDesc>
 800cb90:	4603      	mov	r3, r0
 800cb92:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800cb94:	7bbb      	ldrb	r3, [r7, #14]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d103      	bne.n	800cba2 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	2207      	movs	r2, #7
 800cb9e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800cba0:	e038      	b.n	800cc14 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cba2:	7bbb      	ldrb	r3, [r7, #14]
 800cba4:	2b03      	cmp	r3, #3
 800cba6:	d135      	bne.n	800cc14 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	2207      	movs	r2, #7
 800cbac:	705a      	strb	r2, [r3, #1]
      break;
 800cbae:	e031      	b.n	800cc14 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	2207      	movs	r2, #7
 800cbb4:	705a      	strb	r2, [r3, #1]
      break;
 800cbb6:	e02d      	b.n	800cc14 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d017      	beq.n	800cbf2 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800cbce:	23ff      	movs	r3, #255	; 0xff
 800cbd0:	6878      	ldr	r0, [r7, #4]
 800cbd2:	f000 f903 	bl	800cddc <USBH_Get_StringDesc>
 800cbd6:	4603      	mov	r3, r0
 800cbd8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800cbda:	7bbb      	ldrb	r3, [r7, #14]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d102      	bne.n	800cbe6 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800cbe4:	e018      	b.n	800cc18 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cbe6:	7bbb      	ldrb	r3, [r7, #14]
 800cbe8:	2b03      	cmp	r3, #3
 800cbea:	d115      	bne.n	800cc18 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800cbec:	2300      	movs	r3, #0
 800cbee:	73fb      	strb	r3, [r7, #15]
      break;
 800cbf0:	e012      	b.n	800cc18 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	73fb      	strb	r3, [r7, #15]
      break;
 800cbf6:	e00f      	b.n	800cc18 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800cbf8:	bf00      	nop
 800cbfa:	e00e      	b.n	800cc1a <USBH_HandleEnum+0x3be>
      break;
 800cbfc:	bf00      	nop
 800cbfe:	e00c      	b.n	800cc1a <USBH_HandleEnum+0x3be>
      break;
 800cc00:	bf00      	nop
 800cc02:	e00a      	b.n	800cc1a <USBH_HandleEnum+0x3be>
      break;
 800cc04:	bf00      	nop
 800cc06:	e008      	b.n	800cc1a <USBH_HandleEnum+0x3be>
      break;
 800cc08:	bf00      	nop
 800cc0a:	e006      	b.n	800cc1a <USBH_HandleEnum+0x3be>
      break;
 800cc0c:	bf00      	nop
 800cc0e:	e004      	b.n	800cc1a <USBH_HandleEnum+0x3be>
      break;
 800cc10:	bf00      	nop
 800cc12:	e002      	b.n	800cc1a <USBH_HandleEnum+0x3be>
      break;
 800cc14:	bf00      	nop
 800cc16:	e000      	b.n	800cc1a <USBH_HandleEnum+0x3be>
      break;
 800cc18:	bf00      	nop
  }
  return Status;
 800cc1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	3710      	adds	r7, #16
 800cc20:	46bd      	mov	sp, r7
 800cc22:	bd80      	pop	{r7, pc}

0800cc24 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800cc24:	b480      	push	{r7}
 800cc26:	b083      	sub	sp, #12
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	6078      	str	r0, [r7, #4]
 800cc2c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	683a      	ldr	r2, [r7, #0]
 800cc32:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800cc36:	bf00      	nop
 800cc38:	370c      	adds	r7, #12
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc40:	4770      	bx	lr

0800cc42 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800cc42:	b580      	push	{r7, lr}
 800cc44:	b082      	sub	sp, #8
 800cc46:	af00      	add	r7, sp, #0
 800cc48:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800cc50:	1c5a      	adds	r2, r3, #1
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800cc58:	6878      	ldr	r0, [r7, #4]
 800cc5a:	f000 f804 	bl	800cc66 <USBH_HandleSof>
}
 800cc5e:	bf00      	nop
 800cc60:	3708      	adds	r7, #8
 800cc62:	46bd      	mov	sp, r7
 800cc64:	bd80      	pop	{r7, pc}

0800cc66 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800cc66:	b580      	push	{r7, lr}
 800cc68:	b082      	sub	sp, #8
 800cc6a:	af00      	add	r7, sp, #0
 800cc6c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	781b      	ldrb	r3, [r3, #0]
 800cc72:	b2db      	uxtb	r3, r3
 800cc74:	2b0b      	cmp	r3, #11
 800cc76:	d10a      	bne.n	800cc8e <USBH_HandleSof+0x28>
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d005      	beq.n	800cc8e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cc88:	699b      	ldr	r3, [r3, #24]
 800cc8a:	6878      	ldr	r0, [r7, #4]
 800cc8c:	4798      	blx	r3
  }
}
 800cc8e:	bf00      	nop
 800cc90:	3708      	adds	r7, #8
 800cc92:	46bd      	mov	sp, r7
 800cc94:	bd80      	pop	{r7, pc}

0800cc96 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800cc96:	b480      	push	{r7}
 800cc98:	b083      	sub	sp, #12
 800cc9a:	af00      	add	r7, sp, #0
 800cc9c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	2201      	movs	r2, #1
 800cca2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800cca6:	bf00      	nop
}
 800cca8:	370c      	adds	r7, #12
 800ccaa:	46bd      	mov	sp, r7
 800ccac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb0:	4770      	bx	lr

0800ccb2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800ccb2:	b480      	push	{r7}
 800ccb4:	b083      	sub	sp, #12
 800ccb6:	af00      	add	r7, sp, #0
 800ccb8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	2200      	movs	r2, #0
 800ccbe:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800ccc2:	bf00      	nop
}
 800ccc4:	370c      	adds	r7, #12
 800ccc6:	46bd      	mov	sp, r7
 800ccc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cccc:	4770      	bx	lr

0800ccce <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800ccce:	b480      	push	{r7}
 800ccd0:	b083      	sub	sp, #12
 800ccd2:	af00      	add	r7, sp, #0
 800ccd4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	2201      	movs	r2, #1
 800ccda:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	2200      	movs	r2, #0
 800cce2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	2200      	movs	r2, #0
 800ccea:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800ccee:	2300      	movs	r3, #0
}
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	370c      	adds	r7, #12
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfa:	4770      	bx	lr

0800ccfc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b082      	sub	sp, #8
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	2201      	movs	r2, #1
 800cd08:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	2200      	movs	r2, #0
 800cd10:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	2200      	movs	r2, #0
 800cd18:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800cd1c:	6878      	ldr	r0, [r7, #4]
 800cd1e:	f001 f8a6 	bl	800de6e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	791b      	ldrb	r3, [r3, #4]
 800cd26:	4619      	mov	r1, r3
 800cd28:	6878      	ldr	r0, [r7, #4]
 800cd2a:	f000 fe91 	bl	800da50 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	795b      	ldrb	r3, [r3, #5]
 800cd32:	4619      	mov	r1, r3
 800cd34:	6878      	ldr	r0, [r7, #4]
 800cd36:	f000 fe8b 	bl	800da50 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800cd3a:	2300      	movs	r3, #0
}
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	3708      	adds	r7, #8
 800cd40:	46bd      	mov	sp, r7
 800cd42:	bd80      	pop	{r7, pc}

0800cd44 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800cd44:	b580      	push	{r7, lr}
 800cd46:	b086      	sub	sp, #24
 800cd48:	af02      	add	r7, sp, #8
 800cd4a:	6078      	str	r0, [r7, #4]
 800cd4c:	460b      	mov	r3, r1
 800cd4e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800cd56:	78fb      	ldrb	r3, [r7, #3]
 800cd58:	b29b      	uxth	r3, r3
 800cd5a:	9300      	str	r3, [sp, #0]
 800cd5c:	4613      	mov	r3, r2
 800cd5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cd62:	2100      	movs	r1, #0
 800cd64:	6878      	ldr	r0, [r7, #4]
 800cd66:	f000 f864 	bl	800ce32 <USBH_GetDescriptor>
 800cd6a:	4603      	mov	r3, r0
 800cd6c:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800cd6e:	7bfb      	ldrb	r3, [r7, #15]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d10a      	bne.n	800cd8a <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	f203 3026 	addw	r0, r3, #806	; 0x326
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800cd80:	78fa      	ldrb	r2, [r7, #3]
 800cd82:	b292      	uxth	r2, r2
 800cd84:	4619      	mov	r1, r3
 800cd86:	f000 f918 	bl	800cfba <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800cd8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	3710      	adds	r7, #16
 800cd90:	46bd      	mov	sp, r7
 800cd92:	bd80      	pop	{r7, pc}

0800cd94 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800cd94:	b580      	push	{r7, lr}
 800cd96:	b086      	sub	sp, #24
 800cd98:	af02      	add	r7, sp, #8
 800cd9a:	6078      	str	r0, [r7, #4]
 800cd9c:	460b      	mov	r3, r1
 800cd9e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	331c      	adds	r3, #28
 800cda4:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800cda6:	887b      	ldrh	r3, [r7, #2]
 800cda8:	9300      	str	r3, [sp, #0]
 800cdaa:	68bb      	ldr	r3, [r7, #8]
 800cdac:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cdb0:	2100      	movs	r1, #0
 800cdb2:	6878      	ldr	r0, [r7, #4]
 800cdb4:	f000 f83d 	bl	800ce32 <USBH_GetDescriptor>
 800cdb8:	4603      	mov	r3, r0
 800cdba:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800cdbc:	7bfb      	ldrb	r3, [r7, #15]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d107      	bne.n	800cdd2 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800cdc2:	887b      	ldrh	r3, [r7, #2]
 800cdc4:	461a      	mov	r2, r3
 800cdc6:	68b9      	ldr	r1, [r7, #8]
 800cdc8:	6878      	ldr	r0, [r7, #4]
 800cdca:	f000 f987 	bl	800d0dc <USBH_ParseCfgDesc>
 800cdce:	4603      	mov	r3, r0
 800cdd0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800cdd2:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	3710      	adds	r7, #16
 800cdd8:	46bd      	mov	sp, r7
 800cdda:	bd80      	pop	{r7, pc}

0800cddc <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800cddc:	b580      	push	{r7, lr}
 800cdde:	b088      	sub	sp, #32
 800cde0:	af02      	add	r7, sp, #8
 800cde2:	60f8      	str	r0, [r7, #12]
 800cde4:	607a      	str	r2, [r7, #4]
 800cde6:	461a      	mov	r2, r3
 800cde8:	460b      	mov	r3, r1
 800cdea:	72fb      	strb	r3, [r7, #11]
 800cdec:	4613      	mov	r3, r2
 800cdee:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800cdf0:	7afb      	ldrb	r3, [r7, #11]
 800cdf2:	b29b      	uxth	r3, r3
 800cdf4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800cdf8:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800ce00:	893b      	ldrh	r3, [r7, #8]
 800ce02:	9300      	str	r3, [sp, #0]
 800ce04:	460b      	mov	r3, r1
 800ce06:	2100      	movs	r1, #0
 800ce08:	68f8      	ldr	r0, [r7, #12]
 800ce0a:	f000 f812 	bl	800ce32 <USBH_GetDescriptor>
 800ce0e:	4603      	mov	r3, r0
 800ce10:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800ce12:	7dfb      	ldrb	r3, [r7, #23]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d107      	bne.n	800ce28 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ce1e:	893a      	ldrh	r2, [r7, #8]
 800ce20:	6879      	ldr	r1, [r7, #4]
 800ce22:	4618      	mov	r0, r3
 800ce24:	f000 fb24 	bl	800d470 <USBH_ParseStringDesc>
  }

  return status;
 800ce28:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	3718      	adds	r7, #24
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	bd80      	pop	{r7, pc}

0800ce32 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800ce32:	b580      	push	{r7, lr}
 800ce34:	b084      	sub	sp, #16
 800ce36:	af00      	add	r7, sp, #0
 800ce38:	60f8      	str	r0, [r7, #12]
 800ce3a:	607b      	str	r3, [r7, #4]
 800ce3c:	460b      	mov	r3, r1
 800ce3e:	72fb      	strb	r3, [r7, #11]
 800ce40:	4613      	mov	r3, r2
 800ce42:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	789b      	ldrb	r3, [r3, #2]
 800ce48:	2b01      	cmp	r3, #1
 800ce4a:	d11c      	bne.n	800ce86 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800ce4c:	7afb      	ldrb	r3, [r7, #11]
 800ce4e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ce52:	b2da      	uxtb	r2, r3
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	2206      	movs	r2, #6
 800ce5c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	893a      	ldrh	r2, [r7, #8]
 800ce62:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800ce64:	893b      	ldrh	r3, [r7, #8]
 800ce66:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ce6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ce6e:	d104      	bne.n	800ce7a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	f240 4209 	movw	r2, #1033	; 0x409
 800ce76:	829a      	strh	r2, [r3, #20]
 800ce78:	e002      	b.n	800ce80 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	2200      	movs	r2, #0
 800ce7e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	8b3a      	ldrh	r2, [r7, #24]
 800ce84:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800ce86:	8b3b      	ldrh	r3, [r7, #24]
 800ce88:	461a      	mov	r2, r3
 800ce8a:	6879      	ldr	r1, [r7, #4]
 800ce8c:	68f8      	ldr	r0, [r7, #12]
 800ce8e:	f000 fb3d 	bl	800d50c <USBH_CtlReq>
 800ce92:	4603      	mov	r3, r0
}
 800ce94:	4618      	mov	r0, r3
 800ce96:	3710      	adds	r7, #16
 800ce98:	46bd      	mov	sp, r7
 800ce9a:	bd80      	pop	{r7, pc}

0800ce9c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	b082      	sub	sp, #8
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	6078      	str	r0, [r7, #4]
 800cea4:	460b      	mov	r3, r1
 800cea6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	789b      	ldrb	r3, [r3, #2]
 800ceac:	2b01      	cmp	r3, #1
 800ceae:	d10f      	bne.n	800ced0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	2200      	movs	r2, #0
 800ceb4:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	2205      	movs	r2, #5
 800ceba:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800cebc:	78fb      	ldrb	r3, [r7, #3]
 800cebe:	b29a      	uxth	r2, r3
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	2200      	movs	r2, #0
 800cec8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	2200      	movs	r2, #0
 800cece:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800ced0:	2200      	movs	r2, #0
 800ced2:	2100      	movs	r1, #0
 800ced4:	6878      	ldr	r0, [r7, #4]
 800ced6:	f000 fb19 	bl	800d50c <USBH_CtlReq>
 800ceda:	4603      	mov	r3, r0
}
 800cedc:	4618      	mov	r0, r3
 800cede:	3708      	adds	r7, #8
 800cee0:	46bd      	mov	sp, r7
 800cee2:	bd80      	pop	{r7, pc}

0800cee4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800cee4:	b580      	push	{r7, lr}
 800cee6:	b082      	sub	sp, #8
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	6078      	str	r0, [r7, #4]
 800ceec:	460b      	mov	r3, r1
 800ceee:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	789b      	ldrb	r3, [r3, #2]
 800cef4:	2b01      	cmp	r3, #1
 800cef6:	d10e      	bne.n	800cf16 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	2200      	movs	r2, #0
 800cefc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	2209      	movs	r2, #9
 800cf02:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	887a      	ldrh	r2, [r7, #2]
 800cf08:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	2200      	movs	r2, #0
 800cf0e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	2200      	movs	r2, #0
 800cf14:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800cf16:	2200      	movs	r2, #0
 800cf18:	2100      	movs	r1, #0
 800cf1a:	6878      	ldr	r0, [r7, #4]
 800cf1c:	f000 faf6 	bl	800d50c <USBH_CtlReq>
 800cf20:	4603      	mov	r3, r0
}
 800cf22:	4618      	mov	r0, r3
 800cf24:	3708      	adds	r7, #8
 800cf26:	46bd      	mov	sp, r7
 800cf28:	bd80      	pop	{r7, pc}

0800cf2a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800cf2a:	b580      	push	{r7, lr}
 800cf2c:	b082      	sub	sp, #8
 800cf2e:	af00      	add	r7, sp, #0
 800cf30:	6078      	str	r0, [r7, #4]
 800cf32:	460b      	mov	r3, r1
 800cf34:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	789b      	ldrb	r3, [r3, #2]
 800cf3a:	2b01      	cmp	r3, #1
 800cf3c:	d10f      	bne.n	800cf5e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	2200      	movs	r2, #0
 800cf42:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	2203      	movs	r2, #3
 800cf48:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800cf4a:	78fb      	ldrb	r3, [r7, #3]
 800cf4c:	b29a      	uxth	r2, r3
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	2200      	movs	r2, #0
 800cf56:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	2200      	movs	r2, #0
 800cf5c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800cf5e:	2200      	movs	r2, #0
 800cf60:	2100      	movs	r1, #0
 800cf62:	6878      	ldr	r0, [r7, #4]
 800cf64:	f000 fad2 	bl	800d50c <USBH_CtlReq>
 800cf68:	4603      	mov	r3, r0
}
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	3708      	adds	r7, #8
 800cf6e:	46bd      	mov	sp, r7
 800cf70:	bd80      	pop	{r7, pc}

0800cf72 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800cf72:	b580      	push	{r7, lr}
 800cf74:	b082      	sub	sp, #8
 800cf76:	af00      	add	r7, sp, #0
 800cf78:	6078      	str	r0, [r7, #4]
 800cf7a:	460b      	mov	r3, r1
 800cf7c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	789b      	ldrb	r3, [r3, #2]
 800cf82:	2b01      	cmp	r3, #1
 800cf84:	d10f      	bne.n	800cfa6 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	2202      	movs	r2, #2
 800cf8a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	2201      	movs	r2, #1
 800cf90:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	2200      	movs	r2, #0
 800cf96:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800cf98:	78fb      	ldrb	r3, [r7, #3]
 800cf9a:	b29a      	uxth	r2, r3
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800cfa6:	2200      	movs	r2, #0
 800cfa8:	2100      	movs	r1, #0
 800cfaa:	6878      	ldr	r0, [r7, #4]
 800cfac:	f000 faae 	bl	800d50c <USBH_CtlReq>
 800cfb0:	4603      	mov	r3, r0
}
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	3708      	adds	r7, #8
 800cfb6:	46bd      	mov	sp, r7
 800cfb8:	bd80      	pop	{r7, pc}

0800cfba <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800cfba:	b480      	push	{r7}
 800cfbc:	b085      	sub	sp, #20
 800cfbe:	af00      	add	r7, sp, #0
 800cfc0:	60f8      	str	r0, [r7, #12]
 800cfc2:	60b9      	str	r1, [r7, #8]
 800cfc4:	4613      	mov	r3, r2
 800cfc6:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800cfc8:	68bb      	ldr	r3, [r7, #8]
 800cfca:	781a      	ldrb	r2, [r3, #0]
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800cfd0:	68bb      	ldr	r3, [r7, #8]
 800cfd2:	785a      	ldrb	r2, [r3, #1]
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800cfd8:	68bb      	ldr	r3, [r7, #8]
 800cfda:	3302      	adds	r3, #2
 800cfdc:	781b      	ldrb	r3, [r3, #0]
 800cfde:	b29a      	uxth	r2, r3
 800cfe0:	68bb      	ldr	r3, [r7, #8]
 800cfe2:	3303      	adds	r3, #3
 800cfe4:	781b      	ldrb	r3, [r3, #0]
 800cfe6:	b29b      	uxth	r3, r3
 800cfe8:	021b      	lsls	r3, r3, #8
 800cfea:	b29b      	uxth	r3, r3
 800cfec:	4313      	orrs	r3, r2
 800cfee:	b29a      	uxth	r2, r3
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800cff4:	68bb      	ldr	r3, [r7, #8]
 800cff6:	791a      	ldrb	r2, [r3, #4]
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800cffc:	68bb      	ldr	r3, [r7, #8]
 800cffe:	795a      	ldrb	r2, [r3, #5]
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800d004:	68bb      	ldr	r3, [r7, #8]
 800d006:	799a      	ldrb	r2, [r3, #6]
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800d00c:	68bb      	ldr	r3, [r7, #8]
 800d00e:	79da      	ldrb	r2, [r3, #7]
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	79db      	ldrb	r3, [r3, #7]
 800d018:	2b20      	cmp	r3, #32
 800d01a:	dc11      	bgt.n	800d040 <USBH_ParseDevDesc+0x86>
 800d01c:	2b08      	cmp	r3, #8
 800d01e:	db16      	blt.n	800d04e <USBH_ParseDevDesc+0x94>
 800d020:	3b08      	subs	r3, #8
 800d022:	2201      	movs	r2, #1
 800d024:	fa02 f303 	lsl.w	r3, r2, r3
 800d028:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800d02c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d030:	2b00      	cmp	r3, #0
 800d032:	bf14      	ite	ne
 800d034:	2301      	movne	r3, #1
 800d036:	2300      	moveq	r3, #0
 800d038:	b2db      	uxtb	r3, r3
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d102      	bne.n	800d044 <USBH_ParseDevDesc+0x8a>
 800d03e:	e006      	b.n	800d04e <USBH_ParseDevDesc+0x94>
 800d040:	2b40      	cmp	r3, #64	; 0x40
 800d042:	d104      	bne.n	800d04e <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	79da      	ldrb	r2, [r3, #7]
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	71da      	strb	r2, [r3, #7]
      break;
 800d04c:	e003      	b.n	800d056 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	2240      	movs	r2, #64	; 0x40
 800d052:	71da      	strb	r2, [r3, #7]
      break;
 800d054:	bf00      	nop
  }

  if (length > 8U)
 800d056:	88fb      	ldrh	r3, [r7, #6]
 800d058:	2b08      	cmp	r3, #8
 800d05a:	d939      	bls.n	800d0d0 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800d05c:	68bb      	ldr	r3, [r7, #8]
 800d05e:	3308      	adds	r3, #8
 800d060:	781b      	ldrb	r3, [r3, #0]
 800d062:	b29a      	uxth	r2, r3
 800d064:	68bb      	ldr	r3, [r7, #8]
 800d066:	3309      	adds	r3, #9
 800d068:	781b      	ldrb	r3, [r3, #0]
 800d06a:	b29b      	uxth	r3, r3
 800d06c:	021b      	lsls	r3, r3, #8
 800d06e:	b29b      	uxth	r3, r3
 800d070:	4313      	orrs	r3, r2
 800d072:	b29a      	uxth	r2, r3
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800d078:	68bb      	ldr	r3, [r7, #8]
 800d07a:	330a      	adds	r3, #10
 800d07c:	781b      	ldrb	r3, [r3, #0]
 800d07e:	b29a      	uxth	r2, r3
 800d080:	68bb      	ldr	r3, [r7, #8]
 800d082:	330b      	adds	r3, #11
 800d084:	781b      	ldrb	r3, [r3, #0]
 800d086:	b29b      	uxth	r3, r3
 800d088:	021b      	lsls	r3, r3, #8
 800d08a:	b29b      	uxth	r3, r3
 800d08c:	4313      	orrs	r3, r2
 800d08e:	b29a      	uxth	r2, r3
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800d094:	68bb      	ldr	r3, [r7, #8]
 800d096:	330c      	adds	r3, #12
 800d098:	781b      	ldrb	r3, [r3, #0]
 800d09a:	b29a      	uxth	r2, r3
 800d09c:	68bb      	ldr	r3, [r7, #8]
 800d09e:	330d      	adds	r3, #13
 800d0a0:	781b      	ldrb	r3, [r3, #0]
 800d0a2:	b29b      	uxth	r3, r3
 800d0a4:	021b      	lsls	r3, r3, #8
 800d0a6:	b29b      	uxth	r3, r3
 800d0a8:	4313      	orrs	r3, r2
 800d0aa:	b29a      	uxth	r2, r3
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800d0b0:	68bb      	ldr	r3, [r7, #8]
 800d0b2:	7b9a      	ldrb	r2, [r3, #14]
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800d0b8:	68bb      	ldr	r3, [r7, #8]
 800d0ba:	7bda      	ldrb	r2, [r3, #15]
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800d0c0:	68bb      	ldr	r3, [r7, #8]
 800d0c2:	7c1a      	ldrb	r2, [r3, #16]
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800d0c8:	68bb      	ldr	r3, [r7, #8]
 800d0ca:	7c5a      	ldrb	r2, [r3, #17]
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	745a      	strb	r2, [r3, #17]
  }
}
 800d0d0:	bf00      	nop
 800d0d2:	3714      	adds	r7, #20
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0da:	4770      	bx	lr

0800d0dc <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800d0dc:	b580      	push	{r7, lr}
 800d0de:	b08c      	sub	sp, #48	; 0x30
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	60f8      	str	r0, [r7, #12]
 800d0e4:	60b9      	str	r1, [r7, #8]
 800d0e6:	4613      	mov	r3, r2
 800d0e8:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800d0f0:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800d0f8:	68bb      	ldr	r3, [r7, #8]
 800d0fa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800d0fc:	2300      	movs	r3, #0
 800d0fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800d102:	2300      	movs	r3, #0
 800d104:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800d108:	68bb      	ldr	r3, [r7, #8]
 800d10a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800d10c:	68bb      	ldr	r3, [r7, #8]
 800d10e:	781a      	ldrb	r2, [r3, #0]
 800d110:	6a3b      	ldr	r3, [r7, #32]
 800d112:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800d114:	68bb      	ldr	r3, [r7, #8]
 800d116:	785a      	ldrb	r2, [r3, #1]
 800d118:	6a3b      	ldr	r3, [r7, #32]
 800d11a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800d11c:	68bb      	ldr	r3, [r7, #8]
 800d11e:	3302      	adds	r3, #2
 800d120:	781b      	ldrb	r3, [r3, #0]
 800d122:	b29a      	uxth	r2, r3
 800d124:	68bb      	ldr	r3, [r7, #8]
 800d126:	3303      	adds	r3, #3
 800d128:	781b      	ldrb	r3, [r3, #0]
 800d12a:	b29b      	uxth	r3, r3
 800d12c:	021b      	lsls	r3, r3, #8
 800d12e:	b29b      	uxth	r3, r3
 800d130:	4313      	orrs	r3, r2
 800d132:	b29b      	uxth	r3, r3
 800d134:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d138:	bf28      	it	cs
 800d13a:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800d13e:	b29a      	uxth	r2, r3
 800d140:	6a3b      	ldr	r3, [r7, #32]
 800d142:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800d144:	68bb      	ldr	r3, [r7, #8]
 800d146:	791a      	ldrb	r2, [r3, #4]
 800d148:	6a3b      	ldr	r3, [r7, #32]
 800d14a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800d14c:	68bb      	ldr	r3, [r7, #8]
 800d14e:	795a      	ldrb	r2, [r3, #5]
 800d150:	6a3b      	ldr	r3, [r7, #32]
 800d152:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800d154:	68bb      	ldr	r3, [r7, #8]
 800d156:	799a      	ldrb	r2, [r3, #6]
 800d158:	6a3b      	ldr	r3, [r7, #32]
 800d15a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800d15c:	68bb      	ldr	r3, [r7, #8]
 800d15e:	79da      	ldrb	r2, [r3, #7]
 800d160:	6a3b      	ldr	r3, [r7, #32]
 800d162:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800d164:	68bb      	ldr	r3, [r7, #8]
 800d166:	7a1a      	ldrb	r2, [r3, #8]
 800d168:	6a3b      	ldr	r3, [r7, #32]
 800d16a:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800d16c:	6a3b      	ldr	r3, [r7, #32]
 800d16e:	781b      	ldrb	r3, [r3, #0]
 800d170:	2b09      	cmp	r3, #9
 800d172:	d002      	beq.n	800d17a <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800d174:	6a3b      	ldr	r3, [r7, #32]
 800d176:	2209      	movs	r2, #9
 800d178:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800d17a:	88fb      	ldrh	r3, [r7, #6]
 800d17c:	2b09      	cmp	r3, #9
 800d17e:	f240 809d 	bls.w	800d2bc <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800d182:	2309      	movs	r3, #9
 800d184:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800d186:	2300      	movs	r3, #0
 800d188:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d18a:	e081      	b.n	800d290 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d18c:	f107 0316 	add.w	r3, r7, #22
 800d190:	4619      	mov	r1, r3
 800d192:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d194:	f000 f99f 	bl	800d4d6 <USBH_GetNextDesc>
 800d198:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800d19a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d19c:	785b      	ldrb	r3, [r3, #1]
 800d19e:	2b04      	cmp	r3, #4
 800d1a0:	d176      	bne.n	800d290 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800d1a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1a4:	781b      	ldrb	r3, [r3, #0]
 800d1a6:	2b09      	cmp	r3, #9
 800d1a8:	d002      	beq.n	800d1b0 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800d1aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1ac:	2209      	movs	r2, #9
 800d1ae:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800d1b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d1b4:	221a      	movs	r2, #26
 800d1b6:	fb02 f303 	mul.w	r3, r2, r3
 800d1ba:	3308      	adds	r3, #8
 800d1bc:	6a3a      	ldr	r2, [r7, #32]
 800d1be:	4413      	add	r3, r2
 800d1c0:	3302      	adds	r3, #2
 800d1c2:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800d1c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d1c6:	69f8      	ldr	r0, [r7, #28]
 800d1c8:	f000 f87e 	bl	800d2c8 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800d1d2:	2300      	movs	r3, #0
 800d1d4:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d1d6:	e043      	b.n	800d260 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d1d8:	f107 0316 	add.w	r3, r7, #22
 800d1dc:	4619      	mov	r1, r3
 800d1de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d1e0:	f000 f979 	bl	800d4d6 <USBH_GetNextDesc>
 800d1e4:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800d1e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1e8:	785b      	ldrb	r3, [r3, #1]
 800d1ea:	2b05      	cmp	r3, #5
 800d1ec:	d138      	bne.n	800d260 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800d1ee:	69fb      	ldr	r3, [r7, #28]
 800d1f0:	795b      	ldrb	r3, [r3, #5]
 800d1f2:	2b01      	cmp	r3, #1
 800d1f4:	d10f      	bne.n	800d216 <USBH_ParseCfgDesc+0x13a>
 800d1f6:	69fb      	ldr	r3, [r7, #28]
 800d1f8:	799b      	ldrb	r3, [r3, #6]
 800d1fa:	2b02      	cmp	r3, #2
 800d1fc:	d10b      	bne.n	800d216 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800d1fe:	69fb      	ldr	r3, [r7, #28]
 800d200:	79db      	ldrb	r3, [r3, #7]
 800d202:	2b00      	cmp	r3, #0
 800d204:	d10f      	bne.n	800d226 <USBH_ParseCfgDesc+0x14a>
 800d206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d208:	781b      	ldrb	r3, [r3, #0]
 800d20a:	2b09      	cmp	r3, #9
 800d20c:	d00b      	beq.n	800d226 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800d20e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d210:	2209      	movs	r2, #9
 800d212:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800d214:	e007      	b.n	800d226 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800d216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d218:	781b      	ldrb	r3, [r3, #0]
 800d21a:	2b07      	cmp	r3, #7
 800d21c:	d004      	beq.n	800d228 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800d21e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d220:	2207      	movs	r2, #7
 800d222:	701a      	strb	r2, [r3, #0]
 800d224:	e000      	b.n	800d228 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800d226:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800d228:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d22c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800d230:	3201      	adds	r2, #1
 800d232:	00d2      	lsls	r2, r2, #3
 800d234:	211a      	movs	r1, #26
 800d236:	fb01 f303 	mul.w	r3, r1, r3
 800d23a:	4413      	add	r3, r2
 800d23c:	3308      	adds	r3, #8
 800d23e:	6a3a      	ldr	r2, [r7, #32]
 800d240:	4413      	add	r3, r2
 800d242:	3304      	adds	r3, #4
 800d244:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800d246:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d248:	69b9      	ldr	r1, [r7, #24]
 800d24a:	68f8      	ldr	r0, [r7, #12]
 800d24c:	f000 f86b 	bl	800d326 <USBH_ParseEPDesc>
 800d250:	4603      	mov	r3, r0
 800d252:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800d256:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d25a:	3301      	adds	r3, #1
 800d25c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d260:	69fb      	ldr	r3, [r7, #28]
 800d262:	791b      	ldrb	r3, [r3, #4]
 800d264:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800d268:	429a      	cmp	r2, r3
 800d26a:	d204      	bcs.n	800d276 <USBH_ParseCfgDesc+0x19a>
 800d26c:	6a3b      	ldr	r3, [r7, #32]
 800d26e:	885a      	ldrh	r2, [r3, #2]
 800d270:	8afb      	ldrh	r3, [r7, #22]
 800d272:	429a      	cmp	r2, r3
 800d274:	d8b0      	bhi.n	800d1d8 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800d276:	69fb      	ldr	r3, [r7, #28]
 800d278:	791b      	ldrb	r3, [r3, #4]
 800d27a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800d27e:	429a      	cmp	r2, r3
 800d280:	d201      	bcs.n	800d286 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800d282:	2303      	movs	r3, #3
 800d284:	e01c      	b.n	800d2c0 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800d286:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d28a:	3301      	adds	r3, #1
 800d28c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d290:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d294:	2b01      	cmp	r3, #1
 800d296:	d805      	bhi.n	800d2a4 <USBH_ParseCfgDesc+0x1c8>
 800d298:	6a3b      	ldr	r3, [r7, #32]
 800d29a:	885a      	ldrh	r2, [r3, #2]
 800d29c:	8afb      	ldrh	r3, [r7, #22]
 800d29e:	429a      	cmp	r2, r3
 800d2a0:	f63f af74 	bhi.w	800d18c <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800d2a4:	6a3b      	ldr	r3, [r7, #32]
 800d2a6:	791b      	ldrb	r3, [r3, #4]
 800d2a8:	2b02      	cmp	r3, #2
 800d2aa:	bf28      	it	cs
 800d2ac:	2302      	movcs	r3, #2
 800d2ae:	b2db      	uxtb	r3, r3
 800d2b0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d2b4:	429a      	cmp	r2, r3
 800d2b6:	d201      	bcs.n	800d2bc <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800d2b8:	2303      	movs	r3, #3
 800d2ba:	e001      	b.n	800d2c0 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800d2bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	3730      	adds	r7, #48	; 0x30
 800d2c4:	46bd      	mov	sp, r7
 800d2c6:	bd80      	pop	{r7, pc}

0800d2c8 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800d2c8:	b480      	push	{r7}
 800d2ca:	b083      	sub	sp, #12
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	6078      	str	r0, [r7, #4]
 800d2d0:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800d2d2:	683b      	ldr	r3, [r7, #0]
 800d2d4:	781a      	ldrb	r2, [r3, #0]
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800d2da:	683b      	ldr	r3, [r7, #0]
 800d2dc:	785a      	ldrb	r2, [r3, #1]
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800d2e2:	683b      	ldr	r3, [r7, #0]
 800d2e4:	789a      	ldrb	r2, [r3, #2]
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800d2ea:	683b      	ldr	r3, [r7, #0]
 800d2ec:	78da      	ldrb	r2, [r3, #3]
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800d2f2:	683b      	ldr	r3, [r7, #0]
 800d2f4:	791a      	ldrb	r2, [r3, #4]
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800d2fa:	683b      	ldr	r3, [r7, #0]
 800d2fc:	795a      	ldrb	r2, [r3, #5]
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800d302:	683b      	ldr	r3, [r7, #0]
 800d304:	799a      	ldrb	r2, [r3, #6]
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800d30a:	683b      	ldr	r3, [r7, #0]
 800d30c:	79da      	ldrb	r2, [r3, #7]
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800d312:	683b      	ldr	r3, [r7, #0]
 800d314:	7a1a      	ldrb	r2, [r3, #8]
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	721a      	strb	r2, [r3, #8]
}
 800d31a:	bf00      	nop
 800d31c:	370c      	adds	r7, #12
 800d31e:	46bd      	mov	sp, r7
 800d320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d324:	4770      	bx	lr

0800d326 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800d326:	b480      	push	{r7}
 800d328:	b087      	sub	sp, #28
 800d32a:	af00      	add	r7, sp, #0
 800d32c:	60f8      	str	r0, [r7, #12]
 800d32e:	60b9      	str	r1, [r7, #8]
 800d330:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800d332:	2300      	movs	r3, #0
 800d334:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	781a      	ldrb	r2, [r3, #0]
 800d33a:	68bb      	ldr	r3, [r7, #8]
 800d33c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	785a      	ldrb	r2, [r3, #1]
 800d342:	68bb      	ldr	r3, [r7, #8]
 800d344:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	789a      	ldrb	r2, [r3, #2]
 800d34a:	68bb      	ldr	r3, [r7, #8]
 800d34c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	78da      	ldrb	r2, [r3, #3]
 800d352:	68bb      	ldr	r3, [r7, #8]
 800d354:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	3304      	adds	r3, #4
 800d35a:	781b      	ldrb	r3, [r3, #0]
 800d35c:	b29a      	uxth	r2, r3
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	3305      	adds	r3, #5
 800d362:	781b      	ldrb	r3, [r3, #0]
 800d364:	b29b      	uxth	r3, r3
 800d366:	021b      	lsls	r3, r3, #8
 800d368:	b29b      	uxth	r3, r3
 800d36a:	4313      	orrs	r3, r2
 800d36c:	b29a      	uxth	r2, r3
 800d36e:	68bb      	ldr	r3, [r7, #8]
 800d370:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	799a      	ldrb	r2, [r3, #6]
 800d376:	68bb      	ldr	r3, [r7, #8]
 800d378:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800d37a:	68bb      	ldr	r3, [r7, #8]
 800d37c:	889b      	ldrh	r3, [r3, #4]
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d102      	bne.n	800d388 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800d382:	2303      	movs	r3, #3
 800d384:	75fb      	strb	r3, [r7, #23]
 800d386:	e033      	b.n	800d3f0 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800d388:	68bb      	ldr	r3, [r7, #8]
 800d38a:	889b      	ldrh	r3, [r3, #4]
 800d38c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800d390:	f023 0307 	bic.w	r3, r3, #7
 800d394:	b29a      	uxth	r2, r3
 800d396:	68bb      	ldr	r3, [r7, #8]
 800d398:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800d39a:	68bb      	ldr	r3, [r7, #8]
 800d39c:	889b      	ldrh	r3, [r3, #4]
 800d39e:	b21a      	sxth	r2, r3
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	3304      	adds	r3, #4
 800d3a4:	781b      	ldrb	r3, [r3, #0]
 800d3a6:	b299      	uxth	r1, r3
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	3305      	adds	r3, #5
 800d3ac:	781b      	ldrb	r3, [r3, #0]
 800d3ae:	b29b      	uxth	r3, r3
 800d3b0:	021b      	lsls	r3, r3, #8
 800d3b2:	b29b      	uxth	r3, r3
 800d3b4:	430b      	orrs	r3, r1
 800d3b6:	b29b      	uxth	r3, r3
 800d3b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d110      	bne.n	800d3e2 <USBH_ParseEPDesc+0xbc>
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	3304      	adds	r3, #4
 800d3c4:	781b      	ldrb	r3, [r3, #0]
 800d3c6:	b299      	uxth	r1, r3
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	3305      	adds	r3, #5
 800d3cc:	781b      	ldrb	r3, [r3, #0]
 800d3ce:	b29b      	uxth	r3, r3
 800d3d0:	021b      	lsls	r3, r3, #8
 800d3d2:	b29b      	uxth	r3, r3
 800d3d4:	430b      	orrs	r3, r1
 800d3d6:	b29b      	uxth	r3, r3
 800d3d8:	b21b      	sxth	r3, r3
 800d3da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d3de:	b21b      	sxth	r3, r3
 800d3e0:	e001      	b.n	800d3e6 <USBH_ParseEPDesc+0xc0>
 800d3e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d3e6:	4313      	orrs	r3, r2
 800d3e8:	b21b      	sxth	r3, r3
 800d3ea:	b29a      	uxth	r2, r3
 800d3ec:	68bb      	ldr	r3, [r7, #8]
 800d3ee:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d116      	bne.n	800d428 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800d3fa:	68bb      	ldr	r3, [r7, #8]
 800d3fc:	78db      	ldrb	r3, [r3, #3]
 800d3fe:	f003 0303 	and.w	r3, r3, #3
 800d402:	2b01      	cmp	r3, #1
 800d404:	d005      	beq.n	800d412 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800d406:	68bb      	ldr	r3, [r7, #8]
 800d408:	78db      	ldrb	r3, [r3, #3]
 800d40a:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800d40e:	2b03      	cmp	r3, #3
 800d410:	d127      	bne.n	800d462 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800d412:	68bb      	ldr	r3, [r7, #8]
 800d414:	799b      	ldrb	r3, [r3, #6]
 800d416:	2b00      	cmp	r3, #0
 800d418:	d003      	beq.n	800d422 <USBH_ParseEPDesc+0xfc>
 800d41a:	68bb      	ldr	r3, [r7, #8]
 800d41c:	799b      	ldrb	r3, [r3, #6]
 800d41e:	2b10      	cmp	r3, #16
 800d420:	d91f      	bls.n	800d462 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800d422:	2303      	movs	r3, #3
 800d424:	75fb      	strb	r3, [r7, #23]
 800d426:	e01c      	b.n	800d462 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800d428:	68bb      	ldr	r3, [r7, #8]
 800d42a:	78db      	ldrb	r3, [r3, #3]
 800d42c:	f003 0303 	and.w	r3, r3, #3
 800d430:	2b01      	cmp	r3, #1
 800d432:	d10a      	bne.n	800d44a <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800d434:	68bb      	ldr	r3, [r7, #8]
 800d436:	799b      	ldrb	r3, [r3, #6]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d003      	beq.n	800d444 <USBH_ParseEPDesc+0x11e>
 800d43c:	68bb      	ldr	r3, [r7, #8]
 800d43e:	799b      	ldrb	r3, [r3, #6]
 800d440:	2b10      	cmp	r3, #16
 800d442:	d90e      	bls.n	800d462 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800d444:	2303      	movs	r3, #3
 800d446:	75fb      	strb	r3, [r7, #23]
 800d448:	e00b      	b.n	800d462 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800d44a:	68bb      	ldr	r3, [r7, #8]
 800d44c:	78db      	ldrb	r3, [r3, #3]
 800d44e:	f003 0303 	and.w	r3, r3, #3
 800d452:	2b03      	cmp	r3, #3
 800d454:	d105      	bne.n	800d462 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800d456:	68bb      	ldr	r3, [r7, #8]
 800d458:	799b      	ldrb	r3, [r3, #6]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d101      	bne.n	800d462 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800d45e:	2303      	movs	r3, #3
 800d460:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800d462:	7dfb      	ldrb	r3, [r7, #23]
}
 800d464:	4618      	mov	r0, r3
 800d466:	371c      	adds	r7, #28
 800d468:	46bd      	mov	sp, r7
 800d46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d46e:	4770      	bx	lr

0800d470 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800d470:	b480      	push	{r7}
 800d472:	b087      	sub	sp, #28
 800d474:	af00      	add	r7, sp, #0
 800d476:	60f8      	str	r0, [r7, #12]
 800d478:	60b9      	str	r1, [r7, #8]
 800d47a:	4613      	mov	r3, r2
 800d47c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	3301      	adds	r3, #1
 800d482:	781b      	ldrb	r3, [r3, #0]
 800d484:	2b03      	cmp	r3, #3
 800d486:	d120      	bne.n	800d4ca <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	781b      	ldrb	r3, [r3, #0]
 800d48c:	1e9a      	subs	r2, r3, #2
 800d48e:	88fb      	ldrh	r3, [r7, #6]
 800d490:	4293      	cmp	r3, r2
 800d492:	bf28      	it	cs
 800d494:	4613      	movcs	r3, r2
 800d496:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	3302      	adds	r3, #2
 800d49c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800d49e:	2300      	movs	r3, #0
 800d4a0:	82fb      	strh	r3, [r7, #22]
 800d4a2:	e00b      	b.n	800d4bc <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800d4a4:	8afb      	ldrh	r3, [r7, #22]
 800d4a6:	68fa      	ldr	r2, [r7, #12]
 800d4a8:	4413      	add	r3, r2
 800d4aa:	781a      	ldrb	r2, [r3, #0]
 800d4ac:	68bb      	ldr	r3, [r7, #8]
 800d4ae:	701a      	strb	r2, [r3, #0]
      pdest++;
 800d4b0:	68bb      	ldr	r3, [r7, #8]
 800d4b2:	3301      	adds	r3, #1
 800d4b4:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800d4b6:	8afb      	ldrh	r3, [r7, #22]
 800d4b8:	3302      	adds	r3, #2
 800d4ba:	82fb      	strh	r3, [r7, #22]
 800d4bc:	8afa      	ldrh	r2, [r7, #22]
 800d4be:	8abb      	ldrh	r3, [r7, #20]
 800d4c0:	429a      	cmp	r2, r3
 800d4c2:	d3ef      	bcc.n	800d4a4 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800d4c4:	68bb      	ldr	r3, [r7, #8]
 800d4c6:	2200      	movs	r2, #0
 800d4c8:	701a      	strb	r2, [r3, #0]
  }
}
 800d4ca:	bf00      	nop
 800d4cc:	371c      	adds	r7, #28
 800d4ce:	46bd      	mov	sp, r7
 800d4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d4:	4770      	bx	lr

0800d4d6 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800d4d6:	b480      	push	{r7}
 800d4d8:	b085      	sub	sp, #20
 800d4da:	af00      	add	r7, sp, #0
 800d4dc:	6078      	str	r0, [r7, #4]
 800d4de:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800d4e0:	683b      	ldr	r3, [r7, #0]
 800d4e2:	881a      	ldrh	r2, [r3, #0]
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	781b      	ldrb	r3, [r3, #0]
 800d4e8:	b29b      	uxth	r3, r3
 800d4ea:	4413      	add	r3, r2
 800d4ec:	b29a      	uxth	r2, r3
 800d4ee:	683b      	ldr	r3, [r7, #0]
 800d4f0:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	781b      	ldrb	r3, [r3, #0]
 800d4f6:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	4413      	add	r3, r2
 800d4fc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d4fe:	68fb      	ldr	r3, [r7, #12]
}
 800d500:	4618      	mov	r0, r3
 800d502:	3714      	adds	r7, #20
 800d504:	46bd      	mov	sp, r7
 800d506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d50a:	4770      	bx	lr

0800d50c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800d50c:	b580      	push	{r7, lr}
 800d50e:	b086      	sub	sp, #24
 800d510:	af00      	add	r7, sp, #0
 800d512:	60f8      	str	r0, [r7, #12]
 800d514:	60b9      	str	r1, [r7, #8]
 800d516:	4613      	mov	r3, r2
 800d518:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800d51a:	2301      	movs	r3, #1
 800d51c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	789b      	ldrb	r3, [r3, #2]
 800d522:	2b01      	cmp	r3, #1
 800d524:	d002      	beq.n	800d52c <USBH_CtlReq+0x20>
 800d526:	2b02      	cmp	r3, #2
 800d528:	d00f      	beq.n	800d54a <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800d52a:	e027      	b.n	800d57c <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	68ba      	ldr	r2, [r7, #8]
 800d530:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	88fa      	ldrh	r2, [r7, #6]
 800d536:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	2201      	movs	r2, #1
 800d53c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	2202      	movs	r2, #2
 800d542:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800d544:	2301      	movs	r3, #1
 800d546:	75fb      	strb	r3, [r7, #23]
      break;
 800d548:	e018      	b.n	800d57c <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800d54a:	68f8      	ldr	r0, [r7, #12]
 800d54c:	f000 f81c 	bl	800d588 <USBH_HandleControl>
 800d550:	4603      	mov	r3, r0
 800d552:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800d554:	7dfb      	ldrb	r3, [r7, #23]
 800d556:	2b00      	cmp	r3, #0
 800d558:	d002      	beq.n	800d560 <USBH_CtlReq+0x54>
 800d55a:	7dfb      	ldrb	r3, [r7, #23]
 800d55c:	2b03      	cmp	r3, #3
 800d55e:	d106      	bne.n	800d56e <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	2201      	movs	r2, #1
 800d564:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	2200      	movs	r2, #0
 800d56a:	761a      	strb	r2, [r3, #24]
      break;
 800d56c:	e005      	b.n	800d57a <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800d56e:	7dfb      	ldrb	r3, [r7, #23]
 800d570:	2b02      	cmp	r3, #2
 800d572:	d102      	bne.n	800d57a <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	2201      	movs	r2, #1
 800d578:	709a      	strb	r2, [r3, #2]
      break;
 800d57a:	bf00      	nop
  }
  return status;
 800d57c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d57e:	4618      	mov	r0, r3
 800d580:	3718      	adds	r7, #24
 800d582:	46bd      	mov	sp, r7
 800d584:	bd80      	pop	{r7, pc}
	...

0800d588 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800d588:	b580      	push	{r7, lr}
 800d58a:	b086      	sub	sp, #24
 800d58c:	af02      	add	r7, sp, #8
 800d58e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800d590:	2301      	movs	r3, #1
 800d592:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800d594:	2300      	movs	r3, #0
 800d596:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	7e1b      	ldrb	r3, [r3, #24]
 800d59c:	3b01      	subs	r3, #1
 800d59e:	2b0a      	cmp	r3, #10
 800d5a0:	f200 8156 	bhi.w	800d850 <USBH_HandleControl+0x2c8>
 800d5a4:	a201      	add	r2, pc, #4	; (adr r2, 800d5ac <USBH_HandleControl+0x24>)
 800d5a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5aa:	bf00      	nop
 800d5ac:	0800d5d9 	.word	0x0800d5d9
 800d5b0:	0800d5f3 	.word	0x0800d5f3
 800d5b4:	0800d65d 	.word	0x0800d65d
 800d5b8:	0800d683 	.word	0x0800d683
 800d5bc:	0800d6bb 	.word	0x0800d6bb
 800d5c0:	0800d6e5 	.word	0x0800d6e5
 800d5c4:	0800d737 	.word	0x0800d737
 800d5c8:	0800d759 	.word	0x0800d759
 800d5cc:	0800d795 	.word	0x0800d795
 800d5d0:	0800d7bb 	.word	0x0800d7bb
 800d5d4:	0800d7f9 	.word	0x0800d7f9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	f103 0110 	add.w	r1, r3, #16
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	795b      	ldrb	r3, [r3, #5]
 800d5e2:	461a      	mov	r2, r3
 800d5e4:	6878      	ldr	r0, [r7, #4]
 800d5e6:	f000 f943 	bl	800d870 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	2202      	movs	r2, #2
 800d5ee:	761a      	strb	r2, [r3, #24]
      break;
 800d5f0:	e139      	b.n	800d866 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	795b      	ldrb	r3, [r3, #5]
 800d5f6:	4619      	mov	r1, r3
 800d5f8:	6878      	ldr	r0, [r7, #4]
 800d5fa:	f000 fd27 	bl	800e04c <USBH_LL_GetURBState>
 800d5fe:	4603      	mov	r3, r0
 800d600:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800d602:	7bbb      	ldrb	r3, [r7, #14]
 800d604:	2b01      	cmp	r3, #1
 800d606:	d11e      	bne.n	800d646 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	7c1b      	ldrb	r3, [r3, #16]
 800d60c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d610:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	8adb      	ldrh	r3, [r3, #22]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d00a      	beq.n	800d630 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800d61a:	7b7b      	ldrb	r3, [r7, #13]
 800d61c:	2b80      	cmp	r3, #128	; 0x80
 800d61e:	d103      	bne.n	800d628 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	2203      	movs	r2, #3
 800d624:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d626:	e115      	b.n	800d854 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	2205      	movs	r2, #5
 800d62c:	761a      	strb	r2, [r3, #24]
      break;
 800d62e:	e111      	b.n	800d854 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800d630:	7b7b      	ldrb	r3, [r7, #13]
 800d632:	2b80      	cmp	r3, #128	; 0x80
 800d634:	d103      	bne.n	800d63e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	2209      	movs	r2, #9
 800d63a:	761a      	strb	r2, [r3, #24]
      break;
 800d63c:	e10a      	b.n	800d854 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	2207      	movs	r2, #7
 800d642:	761a      	strb	r2, [r3, #24]
      break;
 800d644:	e106      	b.n	800d854 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800d646:	7bbb      	ldrb	r3, [r7, #14]
 800d648:	2b04      	cmp	r3, #4
 800d64a:	d003      	beq.n	800d654 <USBH_HandleControl+0xcc>
 800d64c:	7bbb      	ldrb	r3, [r7, #14]
 800d64e:	2b02      	cmp	r3, #2
 800d650:	f040 8100 	bne.w	800d854 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	220b      	movs	r2, #11
 800d658:	761a      	strb	r2, [r3, #24]
      break;
 800d65a:	e0fb      	b.n	800d854 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d662:	b29a      	uxth	r2, r3
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	6899      	ldr	r1, [r3, #8]
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	899a      	ldrh	r2, [r3, #12]
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	791b      	ldrb	r3, [r3, #4]
 800d674:	6878      	ldr	r0, [r7, #4]
 800d676:	f000 f93a 	bl	800d8ee <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	2204      	movs	r2, #4
 800d67e:	761a      	strb	r2, [r3, #24]
      break;
 800d680:	e0f1      	b.n	800d866 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	791b      	ldrb	r3, [r3, #4]
 800d686:	4619      	mov	r1, r3
 800d688:	6878      	ldr	r0, [r7, #4]
 800d68a:	f000 fcdf 	bl	800e04c <USBH_LL_GetURBState>
 800d68e:	4603      	mov	r3, r0
 800d690:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800d692:	7bbb      	ldrb	r3, [r7, #14]
 800d694:	2b01      	cmp	r3, #1
 800d696:	d102      	bne.n	800d69e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	2209      	movs	r2, #9
 800d69c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800d69e:	7bbb      	ldrb	r3, [r7, #14]
 800d6a0:	2b05      	cmp	r3, #5
 800d6a2:	d102      	bne.n	800d6aa <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800d6a4:	2303      	movs	r3, #3
 800d6a6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d6a8:	e0d6      	b.n	800d858 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800d6aa:	7bbb      	ldrb	r3, [r7, #14]
 800d6ac:	2b04      	cmp	r3, #4
 800d6ae:	f040 80d3 	bne.w	800d858 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	220b      	movs	r2, #11
 800d6b6:	761a      	strb	r2, [r3, #24]
      break;
 800d6b8:	e0ce      	b.n	800d858 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	6899      	ldr	r1, [r3, #8]
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	899a      	ldrh	r2, [r3, #12]
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	795b      	ldrb	r3, [r3, #5]
 800d6c6:	2001      	movs	r0, #1
 800d6c8:	9000      	str	r0, [sp, #0]
 800d6ca:	6878      	ldr	r0, [r7, #4]
 800d6cc:	f000 f8ea 	bl	800d8a4 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d6d6:	b29a      	uxth	r2, r3
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	2206      	movs	r2, #6
 800d6e0:	761a      	strb	r2, [r3, #24]
      break;
 800d6e2:	e0c0      	b.n	800d866 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	795b      	ldrb	r3, [r3, #5]
 800d6e8:	4619      	mov	r1, r3
 800d6ea:	6878      	ldr	r0, [r7, #4]
 800d6ec:	f000 fcae 	bl	800e04c <USBH_LL_GetURBState>
 800d6f0:	4603      	mov	r3, r0
 800d6f2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800d6f4:	7bbb      	ldrb	r3, [r7, #14]
 800d6f6:	2b01      	cmp	r3, #1
 800d6f8:	d103      	bne.n	800d702 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	2207      	movs	r2, #7
 800d6fe:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d700:	e0ac      	b.n	800d85c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800d702:	7bbb      	ldrb	r3, [r7, #14]
 800d704:	2b05      	cmp	r3, #5
 800d706:	d105      	bne.n	800d714 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	220c      	movs	r2, #12
 800d70c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800d70e:	2303      	movs	r3, #3
 800d710:	73fb      	strb	r3, [r7, #15]
      break;
 800d712:	e0a3      	b.n	800d85c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d714:	7bbb      	ldrb	r3, [r7, #14]
 800d716:	2b02      	cmp	r3, #2
 800d718:	d103      	bne.n	800d722 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	2205      	movs	r2, #5
 800d71e:	761a      	strb	r2, [r3, #24]
      break;
 800d720:	e09c      	b.n	800d85c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800d722:	7bbb      	ldrb	r3, [r7, #14]
 800d724:	2b04      	cmp	r3, #4
 800d726:	f040 8099 	bne.w	800d85c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	220b      	movs	r2, #11
 800d72e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800d730:	2302      	movs	r3, #2
 800d732:	73fb      	strb	r3, [r7, #15]
      break;
 800d734:	e092      	b.n	800d85c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	791b      	ldrb	r3, [r3, #4]
 800d73a:	2200      	movs	r2, #0
 800d73c:	2100      	movs	r1, #0
 800d73e:	6878      	ldr	r0, [r7, #4]
 800d740:	f000 f8d5 	bl	800d8ee <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d74a:	b29a      	uxth	r2, r3
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	2208      	movs	r2, #8
 800d754:	761a      	strb	r2, [r3, #24]

      break;
 800d756:	e086      	b.n	800d866 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	791b      	ldrb	r3, [r3, #4]
 800d75c:	4619      	mov	r1, r3
 800d75e:	6878      	ldr	r0, [r7, #4]
 800d760:	f000 fc74 	bl	800e04c <USBH_LL_GetURBState>
 800d764:	4603      	mov	r3, r0
 800d766:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800d768:	7bbb      	ldrb	r3, [r7, #14]
 800d76a:	2b01      	cmp	r3, #1
 800d76c:	d105      	bne.n	800d77a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	220d      	movs	r2, #13
 800d772:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800d774:	2300      	movs	r3, #0
 800d776:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d778:	e072      	b.n	800d860 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800d77a:	7bbb      	ldrb	r3, [r7, #14]
 800d77c:	2b04      	cmp	r3, #4
 800d77e:	d103      	bne.n	800d788 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	220b      	movs	r2, #11
 800d784:	761a      	strb	r2, [r3, #24]
      break;
 800d786:	e06b      	b.n	800d860 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800d788:	7bbb      	ldrb	r3, [r7, #14]
 800d78a:	2b05      	cmp	r3, #5
 800d78c:	d168      	bne.n	800d860 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800d78e:	2303      	movs	r3, #3
 800d790:	73fb      	strb	r3, [r7, #15]
      break;
 800d792:	e065      	b.n	800d860 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	795b      	ldrb	r3, [r3, #5]
 800d798:	2201      	movs	r2, #1
 800d79a:	9200      	str	r2, [sp, #0]
 800d79c:	2200      	movs	r2, #0
 800d79e:	2100      	movs	r1, #0
 800d7a0:	6878      	ldr	r0, [r7, #4]
 800d7a2:	f000 f87f 	bl	800d8a4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d7ac:	b29a      	uxth	r2, r3
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	220a      	movs	r2, #10
 800d7b6:	761a      	strb	r2, [r3, #24]
      break;
 800d7b8:	e055      	b.n	800d866 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	795b      	ldrb	r3, [r3, #5]
 800d7be:	4619      	mov	r1, r3
 800d7c0:	6878      	ldr	r0, [r7, #4]
 800d7c2:	f000 fc43 	bl	800e04c <USBH_LL_GetURBState>
 800d7c6:	4603      	mov	r3, r0
 800d7c8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800d7ca:	7bbb      	ldrb	r3, [r7, #14]
 800d7cc:	2b01      	cmp	r3, #1
 800d7ce:	d105      	bne.n	800d7dc <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800d7d0:	2300      	movs	r3, #0
 800d7d2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	220d      	movs	r2, #13
 800d7d8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d7da:	e043      	b.n	800d864 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d7dc:	7bbb      	ldrb	r3, [r7, #14]
 800d7de:	2b02      	cmp	r3, #2
 800d7e0:	d103      	bne.n	800d7ea <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	2209      	movs	r2, #9
 800d7e6:	761a      	strb	r2, [r3, #24]
      break;
 800d7e8:	e03c      	b.n	800d864 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800d7ea:	7bbb      	ldrb	r3, [r7, #14]
 800d7ec:	2b04      	cmp	r3, #4
 800d7ee:	d139      	bne.n	800d864 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	220b      	movs	r2, #11
 800d7f4:	761a      	strb	r2, [r3, #24]
      break;
 800d7f6:	e035      	b.n	800d864 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	7e5b      	ldrb	r3, [r3, #25]
 800d7fc:	3301      	adds	r3, #1
 800d7fe:	b2da      	uxtb	r2, r3
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	765a      	strb	r2, [r3, #25]
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	7e5b      	ldrb	r3, [r3, #25]
 800d808:	2b02      	cmp	r3, #2
 800d80a:	d806      	bhi.n	800d81a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	2201      	movs	r2, #1
 800d810:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	2201      	movs	r2, #1
 800d816:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800d818:	e025      	b.n	800d866 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d820:	2106      	movs	r1, #6
 800d822:	6878      	ldr	r0, [r7, #4]
 800d824:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	2200      	movs	r2, #0
 800d82a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	795b      	ldrb	r3, [r3, #5]
 800d830:	4619      	mov	r1, r3
 800d832:	6878      	ldr	r0, [r7, #4]
 800d834:	f000 f90c 	bl	800da50 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	791b      	ldrb	r3, [r3, #4]
 800d83c:	4619      	mov	r1, r3
 800d83e:	6878      	ldr	r0, [r7, #4]
 800d840:	f000 f906 	bl	800da50 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	2200      	movs	r2, #0
 800d848:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800d84a:	2302      	movs	r3, #2
 800d84c:	73fb      	strb	r3, [r7, #15]
      break;
 800d84e:	e00a      	b.n	800d866 <USBH_HandleControl+0x2de>

    default:
      break;
 800d850:	bf00      	nop
 800d852:	e008      	b.n	800d866 <USBH_HandleControl+0x2de>
      break;
 800d854:	bf00      	nop
 800d856:	e006      	b.n	800d866 <USBH_HandleControl+0x2de>
      break;
 800d858:	bf00      	nop
 800d85a:	e004      	b.n	800d866 <USBH_HandleControl+0x2de>
      break;
 800d85c:	bf00      	nop
 800d85e:	e002      	b.n	800d866 <USBH_HandleControl+0x2de>
      break;
 800d860:	bf00      	nop
 800d862:	e000      	b.n	800d866 <USBH_HandleControl+0x2de>
      break;
 800d864:	bf00      	nop
  }

  return status;
 800d866:	7bfb      	ldrb	r3, [r7, #15]
}
 800d868:	4618      	mov	r0, r3
 800d86a:	3710      	adds	r7, #16
 800d86c:	46bd      	mov	sp, r7
 800d86e:	bd80      	pop	{r7, pc}

0800d870 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800d870:	b580      	push	{r7, lr}
 800d872:	b088      	sub	sp, #32
 800d874:	af04      	add	r7, sp, #16
 800d876:	60f8      	str	r0, [r7, #12]
 800d878:	60b9      	str	r1, [r7, #8]
 800d87a:	4613      	mov	r3, r2
 800d87c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d87e:	79f9      	ldrb	r1, [r7, #7]
 800d880:	2300      	movs	r3, #0
 800d882:	9303      	str	r3, [sp, #12]
 800d884:	2308      	movs	r3, #8
 800d886:	9302      	str	r3, [sp, #8]
 800d888:	68bb      	ldr	r3, [r7, #8]
 800d88a:	9301      	str	r3, [sp, #4]
 800d88c:	2300      	movs	r3, #0
 800d88e:	9300      	str	r3, [sp, #0]
 800d890:	2300      	movs	r3, #0
 800d892:	2200      	movs	r2, #0
 800d894:	68f8      	ldr	r0, [r7, #12]
 800d896:	f000 fba8 	bl	800dfea <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800d89a:	2300      	movs	r3, #0
}
 800d89c:	4618      	mov	r0, r3
 800d89e:	3710      	adds	r7, #16
 800d8a0:	46bd      	mov	sp, r7
 800d8a2:	bd80      	pop	{r7, pc}

0800d8a4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800d8a4:	b580      	push	{r7, lr}
 800d8a6:	b088      	sub	sp, #32
 800d8a8:	af04      	add	r7, sp, #16
 800d8aa:	60f8      	str	r0, [r7, #12]
 800d8ac:	60b9      	str	r1, [r7, #8]
 800d8ae:	4611      	mov	r1, r2
 800d8b0:	461a      	mov	r2, r3
 800d8b2:	460b      	mov	r3, r1
 800d8b4:	80fb      	strh	r3, [r7, #6]
 800d8b6:	4613      	mov	r3, r2
 800d8b8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d001      	beq.n	800d8c8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800d8c4:	2300      	movs	r3, #0
 800d8c6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d8c8:	7979      	ldrb	r1, [r7, #5]
 800d8ca:	7e3b      	ldrb	r3, [r7, #24]
 800d8cc:	9303      	str	r3, [sp, #12]
 800d8ce:	88fb      	ldrh	r3, [r7, #6]
 800d8d0:	9302      	str	r3, [sp, #8]
 800d8d2:	68bb      	ldr	r3, [r7, #8]
 800d8d4:	9301      	str	r3, [sp, #4]
 800d8d6:	2301      	movs	r3, #1
 800d8d8:	9300      	str	r3, [sp, #0]
 800d8da:	2300      	movs	r3, #0
 800d8dc:	2200      	movs	r2, #0
 800d8de:	68f8      	ldr	r0, [r7, #12]
 800d8e0:	f000 fb83 	bl	800dfea <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800d8e4:	2300      	movs	r3, #0
}
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	3710      	adds	r7, #16
 800d8ea:	46bd      	mov	sp, r7
 800d8ec:	bd80      	pop	{r7, pc}

0800d8ee <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800d8ee:	b580      	push	{r7, lr}
 800d8f0:	b088      	sub	sp, #32
 800d8f2:	af04      	add	r7, sp, #16
 800d8f4:	60f8      	str	r0, [r7, #12]
 800d8f6:	60b9      	str	r1, [r7, #8]
 800d8f8:	4611      	mov	r1, r2
 800d8fa:	461a      	mov	r2, r3
 800d8fc:	460b      	mov	r3, r1
 800d8fe:	80fb      	strh	r3, [r7, #6]
 800d900:	4613      	mov	r3, r2
 800d902:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d904:	7979      	ldrb	r1, [r7, #5]
 800d906:	2300      	movs	r3, #0
 800d908:	9303      	str	r3, [sp, #12]
 800d90a:	88fb      	ldrh	r3, [r7, #6]
 800d90c:	9302      	str	r3, [sp, #8]
 800d90e:	68bb      	ldr	r3, [r7, #8]
 800d910:	9301      	str	r3, [sp, #4]
 800d912:	2301      	movs	r3, #1
 800d914:	9300      	str	r3, [sp, #0]
 800d916:	2300      	movs	r3, #0
 800d918:	2201      	movs	r2, #1
 800d91a:	68f8      	ldr	r0, [r7, #12]
 800d91c:	f000 fb65 	bl	800dfea <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800d920:	2300      	movs	r3, #0

}
 800d922:	4618      	mov	r0, r3
 800d924:	3710      	adds	r7, #16
 800d926:	46bd      	mov	sp, r7
 800d928:	bd80      	pop	{r7, pc}

0800d92a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800d92a:	b580      	push	{r7, lr}
 800d92c:	b088      	sub	sp, #32
 800d92e:	af04      	add	r7, sp, #16
 800d930:	60f8      	str	r0, [r7, #12]
 800d932:	60b9      	str	r1, [r7, #8]
 800d934:	4611      	mov	r1, r2
 800d936:	461a      	mov	r2, r3
 800d938:	460b      	mov	r3, r1
 800d93a:	80fb      	strh	r3, [r7, #6]
 800d93c:	4613      	mov	r3, r2
 800d93e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d946:	2b00      	cmp	r3, #0
 800d948:	d001      	beq.n	800d94e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800d94a:	2300      	movs	r3, #0
 800d94c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d94e:	7979      	ldrb	r1, [r7, #5]
 800d950:	7e3b      	ldrb	r3, [r7, #24]
 800d952:	9303      	str	r3, [sp, #12]
 800d954:	88fb      	ldrh	r3, [r7, #6]
 800d956:	9302      	str	r3, [sp, #8]
 800d958:	68bb      	ldr	r3, [r7, #8]
 800d95a:	9301      	str	r3, [sp, #4]
 800d95c:	2301      	movs	r3, #1
 800d95e:	9300      	str	r3, [sp, #0]
 800d960:	2302      	movs	r3, #2
 800d962:	2200      	movs	r2, #0
 800d964:	68f8      	ldr	r0, [r7, #12]
 800d966:	f000 fb40 	bl	800dfea <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800d96a:	2300      	movs	r3, #0
}
 800d96c:	4618      	mov	r0, r3
 800d96e:	3710      	adds	r7, #16
 800d970:	46bd      	mov	sp, r7
 800d972:	bd80      	pop	{r7, pc}

0800d974 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800d974:	b580      	push	{r7, lr}
 800d976:	b088      	sub	sp, #32
 800d978:	af04      	add	r7, sp, #16
 800d97a:	60f8      	str	r0, [r7, #12]
 800d97c:	60b9      	str	r1, [r7, #8]
 800d97e:	4611      	mov	r1, r2
 800d980:	461a      	mov	r2, r3
 800d982:	460b      	mov	r3, r1
 800d984:	80fb      	strh	r3, [r7, #6]
 800d986:	4613      	mov	r3, r2
 800d988:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d98a:	7979      	ldrb	r1, [r7, #5]
 800d98c:	2300      	movs	r3, #0
 800d98e:	9303      	str	r3, [sp, #12]
 800d990:	88fb      	ldrh	r3, [r7, #6]
 800d992:	9302      	str	r3, [sp, #8]
 800d994:	68bb      	ldr	r3, [r7, #8]
 800d996:	9301      	str	r3, [sp, #4]
 800d998:	2301      	movs	r3, #1
 800d99a:	9300      	str	r3, [sp, #0]
 800d99c:	2302      	movs	r3, #2
 800d99e:	2201      	movs	r2, #1
 800d9a0:	68f8      	ldr	r0, [r7, #12]
 800d9a2:	f000 fb22 	bl	800dfea <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800d9a6:	2300      	movs	r3, #0
}
 800d9a8:	4618      	mov	r0, r3
 800d9aa:	3710      	adds	r7, #16
 800d9ac:	46bd      	mov	sp, r7
 800d9ae:	bd80      	pop	{r7, pc}

0800d9b0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	b086      	sub	sp, #24
 800d9b4:	af04      	add	r7, sp, #16
 800d9b6:	6078      	str	r0, [r7, #4]
 800d9b8:	4608      	mov	r0, r1
 800d9ba:	4611      	mov	r1, r2
 800d9bc:	461a      	mov	r2, r3
 800d9be:	4603      	mov	r3, r0
 800d9c0:	70fb      	strb	r3, [r7, #3]
 800d9c2:	460b      	mov	r3, r1
 800d9c4:	70bb      	strb	r3, [r7, #2]
 800d9c6:	4613      	mov	r3, r2
 800d9c8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800d9ca:	7878      	ldrb	r0, [r7, #1]
 800d9cc:	78ba      	ldrb	r2, [r7, #2]
 800d9ce:	78f9      	ldrb	r1, [r7, #3]
 800d9d0:	8b3b      	ldrh	r3, [r7, #24]
 800d9d2:	9302      	str	r3, [sp, #8]
 800d9d4:	7d3b      	ldrb	r3, [r7, #20]
 800d9d6:	9301      	str	r3, [sp, #4]
 800d9d8:	7c3b      	ldrb	r3, [r7, #16]
 800d9da:	9300      	str	r3, [sp, #0]
 800d9dc:	4603      	mov	r3, r0
 800d9de:	6878      	ldr	r0, [r7, #4]
 800d9e0:	f000 fab5 	bl	800df4e <USBH_LL_OpenPipe>

  return USBH_OK;
 800d9e4:	2300      	movs	r3, #0
}
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	3708      	adds	r7, #8
 800d9ea:	46bd      	mov	sp, r7
 800d9ec:	bd80      	pop	{r7, pc}

0800d9ee <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800d9ee:	b580      	push	{r7, lr}
 800d9f0:	b082      	sub	sp, #8
 800d9f2:	af00      	add	r7, sp, #0
 800d9f4:	6078      	str	r0, [r7, #4]
 800d9f6:	460b      	mov	r3, r1
 800d9f8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800d9fa:	78fb      	ldrb	r3, [r7, #3]
 800d9fc:	4619      	mov	r1, r3
 800d9fe:	6878      	ldr	r0, [r7, #4]
 800da00:	f000 fad4 	bl	800dfac <USBH_LL_ClosePipe>

  return USBH_OK;
 800da04:	2300      	movs	r3, #0
}
 800da06:	4618      	mov	r0, r3
 800da08:	3708      	adds	r7, #8
 800da0a:	46bd      	mov	sp, r7
 800da0c:	bd80      	pop	{r7, pc}

0800da0e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800da0e:	b580      	push	{r7, lr}
 800da10:	b084      	sub	sp, #16
 800da12:	af00      	add	r7, sp, #0
 800da14:	6078      	str	r0, [r7, #4]
 800da16:	460b      	mov	r3, r1
 800da18:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800da1a:	6878      	ldr	r0, [r7, #4]
 800da1c:	f000 f836 	bl	800da8c <USBH_GetFreePipe>
 800da20:	4603      	mov	r3, r0
 800da22:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800da24:	89fb      	ldrh	r3, [r7, #14]
 800da26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800da2a:	4293      	cmp	r3, r2
 800da2c:	d00a      	beq.n	800da44 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800da2e:	78fa      	ldrb	r2, [r7, #3]
 800da30:	89fb      	ldrh	r3, [r7, #14]
 800da32:	f003 030f 	and.w	r3, r3, #15
 800da36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800da3a:	6879      	ldr	r1, [r7, #4]
 800da3c:	33e0      	adds	r3, #224	; 0xe0
 800da3e:	009b      	lsls	r3, r3, #2
 800da40:	440b      	add	r3, r1
 800da42:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800da44:	89fb      	ldrh	r3, [r7, #14]
 800da46:	b2db      	uxtb	r3, r3
}
 800da48:	4618      	mov	r0, r3
 800da4a:	3710      	adds	r7, #16
 800da4c:	46bd      	mov	sp, r7
 800da4e:	bd80      	pop	{r7, pc}

0800da50 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800da50:	b480      	push	{r7}
 800da52:	b083      	sub	sp, #12
 800da54:	af00      	add	r7, sp, #0
 800da56:	6078      	str	r0, [r7, #4]
 800da58:	460b      	mov	r3, r1
 800da5a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800da5c:	78fb      	ldrb	r3, [r7, #3]
 800da5e:	2b0f      	cmp	r3, #15
 800da60:	d80d      	bhi.n	800da7e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800da62:	78fb      	ldrb	r3, [r7, #3]
 800da64:	687a      	ldr	r2, [r7, #4]
 800da66:	33e0      	adds	r3, #224	; 0xe0
 800da68:	009b      	lsls	r3, r3, #2
 800da6a:	4413      	add	r3, r2
 800da6c:	685a      	ldr	r2, [r3, #4]
 800da6e:	78fb      	ldrb	r3, [r7, #3]
 800da70:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800da74:	6879      	ldr	r1, [r7, #4]
 800da76:	33e0      	adds	r3, #224	; 0xe0
 800da78:	009b      	lsls	r3, r3, #2
 800da7a:	440b      	add	r3, r1
 800da7c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800da7e:	2300      	movs	r3, #0
}
 800da80:	4618      	mov	r0, r3
 800da82:	370c      	adds	r7, #12
 800da84:	46bd      	mov	sp, r7
 800da86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da8a:	4770      	bx	lr

0800da8c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800da8c:	b480      	push	{r7}
 800da8e:	b085      	sub	sp, #20
 800da90:	af00      	add	r7, sp, #0
 800da92:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800da94:	2300      	movs	r3, #0
 800da96:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800da98:	2300      	movs	r3, #0
 800da9a:	73fb      	strb	r3, [r7, #15]
 800da9c:	e00f      	b.n	800dabe <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800da9e:	7bfb      	ldrb	r3, [r7, #15]
 800daa0:	687a      	ldr	r2, [r7, #4]
 800daa2:	33e0      	adds	r3, #224	; 0xe0
 800daa4:	009b      	lsls	r3, r3, #2
 800daa6:	4413      	add	r3, r2
 800daa8:	685b      	ldr	r3, [r3, #4]
 800daaa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d102      	bne.n	800dab8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800dab2:	7bfb      	ldrb	r3, [r7, #15]
 800dab4:	b29b      	uxth	r3, r3
 800dab6:	e007      	b.n	800dac8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800dab8:	7bfb      	ldrb	r3, [r7, #15]
 800daba:	3301      	adds	r3, #1
 800dabc:	73fb      	strb	r3, [r7, #15]
 800dabe:	7bfb      	ldrb	r3, [r7, #15]
 800dac0:	2b0f      	cmp	r3, #15
 800dac2:	d9ec      	bls.n	800da9e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800dac4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800dac8:	4618      	mov	r0, r3
 800daca:	3714      	adds	r7, #20
 800dacc:	46bd      	mov	sp, r7
 800dace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad2:	4770      	bx	lr

0800dad4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800dad4:	b480      	push	{r7}
 800dad6:	b087      	sub	sp, #28
 800dad8:	af00      	add	r7, sp, #0
 800dada:	60f8      	str	r0, [r7, #12]
 800dadc:	60b9      	str	r1, [r7, #8]
 800dade:	4613      	mov	r3, r2
 800dae0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800dae2:	2301      	movs	r3, #1
 800dae4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800dae6:	2300      	movs	r3, #0
 800dae8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800daea:	4b1f      	ldr	r3, [pc, #124]	; (800db68 <FATFS_LinkDriverEx+0x94>)
 800daec:	7a5b      	ldrb	r3, [r3, #9]
 800daee:	b2db      	uxtb	r3, r3
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d131      	bne.n	800db58 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800daf4:	4b1c      	ldr	r3, [pc, #112]	; (800db68 <FATFS_LinkDriverEx+0x94>)
 800daf6:	7a5b      	ldrb	r3, [r3, #9]
 800daf8:	b2db      	uxtb	r3, r3
 800dafa:	461a      	mov	r2, r3
 800dafc:	4b1a      	ldr	r3, [pc, #104]	; (800db68 <FATFS_LinkDriverEx+0x94>)
 800dafe:	2100      	movs	r1, #0
 800db00:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800db02:	4b19      	ldr	r3, [pc, #100]	; (800db68 <FATFS_LinkDriverEx+0x94>)
 800db04:	7a5b      	ldrb	r3, [r3, #9]
 800db06:	b2db      	uxtb	r3, r3
 800db08:	4a17      	ldr	r2, [pc, #92]	; (800db68 <FATFS_LinkDriverEx+0x94>)
 800db0a:	009b      	lsls	r3, r3, #2
 800db0c:	4413      	add	r3, r2
 800db0e:	68fa      	ldr	r2, [r7, #12]
 800db10:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800db12:	4b15      	ldr	r3, [pc, #84]	; (800db68 <FATFS_LinkDriverEx+0x94>)
 800db14:	7a5b      	ldrb	r3, [r3, #9]
 800db16:	b2db      	uxtb	r3, r3
 800db18:	461a      	mov	r2, r3
 800db1a:	4b13      	ldr	r3, [pc, #76]	; (800db68 <FATFS_LinkDriverEx+0x94>)
 800db1c:	4413      	add	r3, r2
 800db1e:	79fa      	ldrb	r2, [r7, #7]
 800db20:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800db22:	4b11      	ldr	r3, [pc, #68]	; (800db68 <FATFS_LinkDriverEx+0x94>)
 800db24:	7a5b      	ldrb	r3, [r3, #9]
 800db26:	b2db      	uxtb	r3, r3
 800db28:	1c5a      	adds	r2, r3, #1
 800db2a:	b2d1      	uxtb	r1, r2
 800db2c:	4a0e      	ldr	r2, [pc, #56]	; (800db68 <FATFS_LinkDriverEx+0x94>)
 800db2e:	7251      	strb	r1, [r2, #9]
 800db30:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800db32:	7dbb      	ldrb	r3, [r7, #22]
 800db34:	3330      	adds	r3, #48	; 0x30
 800db36:	b2da      	uxtb	r2, r3
 800db38:	68bb      	ldr	r3, [r7, #8]
 800db3a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800db3c:	68bb      	ldr	r3, [r7, #8]
 800db3e:	3301      	adds	r3, #1
 800db40:	223a      	movs	r2, #58	; 0x3a
 800db42:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800db44:	68bb      	ldr	r3, [r7, #8]
 800db46:	3302      	adds	r3, #2
 800db48:	222f      	movs	r2, #47	; 0x2f
 800db4a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800db4c:	68bb      	ldr	r3, [r7, #8]
 800db4e:	3303      	adds	r3, #3
 800db50:	2200      	movs	r2, #0
 800db52:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800db54:	2300      	movs	r3, #0
 800db56:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800db58:	7dfb      	ldrb	r3, [r7, #23]
}
 800db5a:	4618      	mov	r0, r3
 800db5c:	371c      	adds	r7, #28
 800db5e:	46bd      	mov	sp, r7
 800db60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db64:	4770      	bx	lr
 800db66:	bf00      	nop
 800db68:	2000351c 	.word	0x2000351c

0800db6c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800db6c:	b580      	push	{r7, lr}
 800db6e:	b082      	sub	sp, #8
 800db70:	af00      	add	r7, sp, #0
 800db72:	6078      	str	r0, [r7, #4]
 800db74:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800db76:	2200      	movs	r2, #0
 800db78:	6839      	ldr	r1, [r7, #0]
 800db7a:	6878      	ldr	r0, [r7, #4]
 800db7c:	f7ff ffaa 	bl	800dad4 <FATFS_LinkDriverEx>
 800db80:	4603      	mov	r3, r0
}
 800db82:	4618      	mov	r0, r3
 800db84:	3708      	adds	r7, #8
 800db86:	46bd      	mov	sp, r7
 800db88:	bd80      	pop	{r7, pc}
	...

0800db8c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800db8c:	b580      	push	{r7, lr}
 800db8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 800db90:	2200      	movs	r2, #0
 800db92:	490e      	ldr	r1, [pc, #56]	; (800dbcc <MX_USB_HOST_Init+0x40>)
 800db94:	480e      	ldr	r0, [pc, #56]	; (800dbd0 <MX_USB_HOST_Init+0x44>)
 800db96:	f7fe fb4b 	bl	800c230 <USBH_Init>
 800db9a:	4603      	mov	r3, r0
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d001      	beq.n	800dba4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800dba0:	f7f4 f9f8 	bl	8001f94 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_MSC_CLASS) != USBH_OK)
 800dba4:	490b      	ldr	r1, [pc, #44]	; (800dbd4 <MX_USB_HOST_Init+0x48>)
 800dba6:	480a      	ldr	r0, [pc, #40]	; (800dbd0 <MX_USB_HOST_Init+0x44>)
 800dba8:	f7fe fbd0 	bl	800c34c <USBH_RegisterClass>
 800dbac:	4603      	mov	r3, r0
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d001      	beq.n	800dbb6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800dbb2:	f7f4 f9ef 	bl	8001f94 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 800dbb6:	4806      	ldr	r0, [pc, #24]	; (800dbd0 <MX_USB_HOST_Init+0x44>)
 800dbb8:	f7fe fc54 	bl	800c464 <USBH_Start>
 800dbbc:	4603      	mov	r3, r0
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d001      	beq.n	800dbc6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800dbc2:	f7f4 f9e7 	bl	8001f94 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800dbc6:	bf00      	nop
 800dbc8:	bd80      	pop	{r7, pc}
 800dbca:	bf00      	nop
 800dbcc:	0800dbed 	.word	0x0800dbed
 800dbd0:	20003528 	.word	0x20003528
 800dbd4:	200000d4 	.word	0x200000d4

0800dbd8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800dbd8:	b580      	push	{r7, lr}
 800dbda:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostHS);
 800dbdc:	4802      	ldr	r0, [pc, #8]	; (800dbe8 <MX_USB_HOST_Process+0x10>)
 800dbde:	f7fe fc51 	bl	800c484 <USBH_Process>
}
 800dbe2:	bf00      	nop
 800dbe4:	bd80      	pop	{r7, pc}
 800dbe6:	bf00      	nop
 800dbe8:	20003528 	.word	0x20003528

0800dbec <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800dbec:	b480      	push	{r7}
 800dbee:	b083      	sub	sp, #12
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	6078      	str	r0, [r7, #4]
 800dbf4:	460b      	mov	r3, r1
 800dbf6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800dbf8:	78fb      	ldrb	r3, [r7, #3]
 800dbfa:	3b01      	subs	r3, #1
 800dbfc:	2b04      	cmp	r3, #4
 800dbfe:	d819      	bhi.n	800dc34 <USBH_UserProcess+0x48>
 800dc00:	a201      	add	r2, pc, #4	; (adr r2, 800dc08 <USBH_UserProcess+0x1c>)
 800dc02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc06:	bf00      	nop
 800dc08:	0800dc35 	.word	0x0800dc35
 800dc0c:	0800dc25 	.word	0x0800dc25
 800dc10:	0800dc35 	.word	0x0800dc35
 800dc14:	0800dc2d 	.word	0x0800dc2d
 800dc18:	0800dc1d 	.word	0x0800dc1d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800dc1c:	4b09      	ldr	r3, [pc, #36]	; (800dc44 <USBH_UserProcess+0x58>)
 800dc1e:	2203      	movs	r2, #3
 800dc20:	701a      	strb	r2, [r3, #0]
  break;
 800dc22:	e008      	b.n	800dc36 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800dc24:	4b07      	ldr	r3, [pc, #28]	; (800dc44 <USBH_UserProcess+0x58>)
 800dc26:	2202      	movs	r2, #2
 800dc28:	701a      	strb	r2, [r3, #0]
  break;
 800dc2a:	e004      	b.n	800dc36 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800dc2c:	4b05      	ldr	r3, [pc, #20]	; (800dc44 <USBH_UserProcess+0x58>)
 800dc2e:	2201      	movs	r2, #1
 800dc30:	701a      	strb	r2, [r3, #0]

  break;
 800dc32:	e000      	b.n	800dc36 <USBH_UserProcess+0x4a>

  default:
  break;
 800dc34:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800dc36:	bf00      	nop
 800dc38:	370c      	adds	r7, #12
 800dc3a:	46bd      	mov	sp, r7
 800dc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc40:	4770      	bx	lr
 800dc42:	bf00      	nop
 800dc44:	20003900 	.word	0x20003900

0800dc48 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800dc48:	b580      	push	{r7, lr}
 800dc4a:	b08a      	sub	sp, #40	; 0x28
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dc50:	f107 0314 	add.w	r3, r7, #20
 800dc54:	2200      	movs	r2, #0
 800dc56:	601a      	str	r2, [r3, #0]
 800dc58:	605a      	str	r2, [r3, #4]
 800dc5a:	609a      	str	r2, [r3, #8]
 800dc5c:	60da      	str	r2, [r3, #12]
 800dc5e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	4a24      	ldr	r2, [pc, #144]	; (800dcf8 <HAL_HCD_MspInit+0xb0>)
 800dc66:	4293      	cmp	r3, r2
 800dc68:	d141      	bne.n	800dcee <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	613b      	str	r3, [r7, #16]
 800dc6e:	4b23      	ldr	r3, [pc, #140]	; (800dcfc <HAL_HCD_MspInit+0xb4>)
 800dc70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc72:	4a22      	ldr	r2, [pc, #136]	; (800dcfc <HAL_HCD_MspInit+0xb4>)
 800dc74:	f043 0302 	orr.w	r3, r3, #2
 800dc78:	6313      	str	r3, [r2, #48]	; 0x30
 800dc7a:	4b20      	ldr	r3, [pc, #128]	; (800dcfc <HAL_HCD_MspInit+0xb4>)
 800dc7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc7e:	f003 0302 	and.w	r3, r3, #2
 800dc82:	613b      	str	r3, [r7, #16]
 800dc84:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800dc86:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800dc8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dc8c:	2302      	movs	r3, #2
 800dc8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dc90:	2300      	movs	r3, #0
 800dc92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800dc94:	2300      	movs	r3, #0
 800dc96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800dc98:	230c      	movs	r3, #12
 800dc9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800dc9c:	f107 0314 	add.w	r3, r7, #20
 800dca0:	4619      	mov	r1, r3
 800dca2:	4817      	ldr	r0, [pc, #92]	; (800dd00 <HAL_HCD_MspInit+0xb8>)
 800dca4:	f7f5 fbac 	bl	8003400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800dca8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800dcac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800dcae:	2300      	movs	r3, #0
 800dcb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dcb2:	2300      	movs	r3, #0
 800dcb4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800dcb6:	f107 0314 	add.w	r3, r7, #20
 800dcba:	4619      	mov	r1, r3
 800dcbc:	4810      	ldr	r0, [pc, #64]	; (800dd00 <HAL_HCD_MspInit+0xb8>)
 800dcbe:	f7f5 fb9f 	bl	8003400 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	60fb      	str	r3, [r7, #12]
 800dcc6:	4b0d      	ldr	r3, [pc, #52]	; (800dcfc <HAL_HCD_MspInit+0xb4>)
 800dcc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcca:	4a0c      	ldr	r2, [pc, #48]	; (800dcfc <HAL_HCD_MspInit+0xb4>)
 800dccc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800dcd0:	6313      	str	r3, [r2, #48]	; 0x30
 800dcd2:	4b0a      	ldr	r3, [pc, #40]	; (800dcfc <HAL_HCD_MspInit+0xb4>)
 800dcd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcd6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dcda:	60fb      	str	r3, [r7, #12]
 800dcdc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800dcde:	2200      	movs	r2, #0
 800dce0:	2100      	movs	r1, #0
 800dce2:	204d      	movs	r0, #77	; 0x4d
 800dce4:	f7f4 ffbd 	bl	8002c62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800dce8:	204d      	movs	r0, #77	; 0x4d
 800dcea:	f7f4 ffd6 	bl	8002c9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800dcee:	bf00      	nop
 800dcf0:	3728      	adds	r7, #40	; 0x28
 800dcf2:	46bd      	mov	sp, r7
 800dcf4:	bd80      	pop	{r7, pc}
 800dcf6:	bf00      	nop
 800dcf8:	40040000 	.word	0x40040000
 800dcfc:	40023800 	.word	0x40023800
 800dd00:	40020400 	.word	0x40020400

0800dd04 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800dd04:	b580      	push	{r7, lr}
 800dd06:	b082      	sub	sp, #8
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800dd12:	4618      	mov	r0, r3
 800dd14:	f7fe ff95 	bl	800cc42 <USBH_LL_IncTimer>
}
 800dd18:	bf00      	nop
 800dd1a:	3708      	adds	r7, #8
 800dd1c:	46bd      	mov	sp, r7
 800dd1e:	bd80      	pop	{r7, pc}

0800dd20 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800dd20:	b580      	push	{r7, lr}
 800dd22:	b082      	sub	sp, #8
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800dd2e:	4618      	mov	r0, r3
 800dd30:	f7fe ffcd 	bl	800ccce <USBH_LL_Connect>
}
 800dd34:	bf00      	nop
 800dd36:	3708      	adds	r7, #8
 800dd38:	46bd      	mov	sp, r7
 800dd3a:	bd80      	pop	{r7, pc}

0800dd3c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800dd3c:	b580      	push	{r7, lr}
 800dd3e:	b082      	sub	sp, #8
 800dd40:	af00      	add	r7, sp, #0
 800dd42:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800dd4a:	4618      	mov	r0, r3
 800dd4c:	f7fe ffd6 	bl	800ccfc <USBH_LL_Disconnect>
}
 800dd50:	bf00      	nop
 800dd52:	3708      	adds	r7, #8
 800dd54:	46bd      	mov	sp, r7
 800dd56:	bd80      	pop	{r7, pc}

0800dd58 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800dd58:	b480      	push	{r7}
 800dd5a:	b083      	sub	sp, #12
 800dd5c:	af00      	add	r7, sp, #0
 800dd5e:	6078      	str	r0, [r7, #4]
 800dd60:	460b      	mov	r3, r1
 800dd62:	70fb      	strb	r3, [r7, #3]
 800dd64:	4613      	mov	r3, r2
 800dd66:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800dd68:	bf00      	nop
 800dd6a:	370c      	adds	r7, #12
 800dd6c:	46bd      	mov	sp, r7
 800dd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd72:	4770      	bx	lr

0800dd74 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800dd74:	b580      	push	{r7, lr}
 800dd76:	b082      	sub	sp, #8
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800dd82:	4618      	mov	r0, r3
 800dd84:	f7fe ff87 	bl	800cc96 <USBH_LL_PortEnabled>
}
 800dd88:	bf00      	nop
 800dd8a:	3708      	adds	r7, #8
 800dd8c:	46bd      	mov	sp, r7
 800dd8e:	bd80      	pop	{r7, pc}

0800dd90 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800dd90:	b580      	push	{r7, lr}
 800dd92:	b082      	sub	sp, #8
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800dd9e:	4618      	mov	r0, r3
 800dda0:	f7fe ff87 	bl	800ccb2 <USBH_LL_PortDisabled>
}
 800dda4:	bf00      	nop
 800dda6:	3708      	adds	r7, #8
 800dda8:	46bd      	mov	sp, r7
 800ddaa:	bd80      	pop	{r7, pc}

0800ddac <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800ddac:	b580      	push	{r7, lr}
 800ddae:	b082      	sub	sp, #8
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d132      	bne.n	800de24 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 800ddbe:	4a1c      	ldr	r2, [pc, #112]	; (800de30 <USBH_LL_Init+0x84>)
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	4a19      	ldr	r2, [pc, #100]	; (800de30 <USBH_LL_Init+0x84>)
 800ddca:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800ddce:	4b18      	ldr	r3, [pc, #96]	; (800de30 <USBH_LL_Init+0x84>)
 800ddd0:	4a18      	ldr	r2, [pc, #96]	; (800de34 <USBH_LL_Init+0x88>)
 800ddd2:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 800ddd4:	4b16      	ldr	r3, [pc, #88]	; (800de30 <USBH_LL_Init+0x84>)
 800ddd6:	220c      	movs	r2, #12
 800ddd8:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 800ddda:	4b15      	ldr	r3, [pc, #84]	; (800de30 <USBH_LL_Init+0x84>)
 800dddc:	2201      	movs	r2, #1
 800ddde:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800dde0:	4b13      	ldr	r3, [pc, #76]	; (800de30 <USBH_LL_Init+0x84>)
 800dde2:	2200      	movs	r2, #0
 800dde4:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800dde6:	4b12      	ldr	r3, [pc, #72]	; (800de30 <USBH_LL_Init+0x84>)
 800dde8:	2202      	movs	r2, #2
 800ddea:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800ddec:	4b10      	ldr	r3, [pc, #64]	; (800de30 <USBH_LL_Init+0x84>)
 800ddee:	2200      	movs	r2, #0
 800ddf0:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800ddf2:	4b0f      	ldr	r3, [pc, #60]	; (800de30 <USBH_LL_Init+0x84>)
 800ddf4:	2200      	movs	r2, #0
 800ddf6:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800ddf8:	4b0d      	ldr	r3, [pc, #52]	; (800de30 <USBH_LL_Init+0x84>)
 800ddfa:	2200      	movs	r2, #0
 800ddfc:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800ddfe:	4b0c      	ldr	r3, [pc, #48]	; (800de30 <USBH_LL_Init+0x84>)
 800de00:	2200      	movs	r2, #0
 800de02:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800de04:	480a      	ldr	r0, [pc, #40]	; (800de30 <USBH_LL_Init+0x84>)
 800de06:	f7f5 fcf1 	bl	80037ec <HAL_HCD_Init>
 800de0a:	4603      	mov	r3, r0
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d001      	beq.n	800de14 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 800de10:	f7f4 f8c0 	bl	8001f94 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800de14:	4806      	ldr	r0, [pc, #24]	; (800de30 <USBH_LL_Init+0x84>)
 800de16:	f7f6 f8d4 	bl	8003fc2 <HAL_HCD_GetCurrentFrame>
 800de1a:	4603      	mov	r3, r0
 800de1c:	4619      	mov	r1, r3
 800de1e:	6878      	ldr	r0, [r7, #4]
 800de20:	f7fe ff00 	bl	800cc24 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800de24:	2300      	movs	r3, #0
}
 800de26:	4618      	mov	r0, r3
 800de28:	3708      	adds	r7, #8
 800de2a:	46bd      	mov	sp, r7
 800de2c:	bd80      	pop	{r7, pc}
 800de2e:	bf00      	nop
 800de30:	20003904 	.word	0x20003904
 800de34:	40040000 	.word	0x40040000

0800de38 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800de38:	b580      	push	{r7, lr}
 800de3a:	b084      	sub	sp, #16
 800de3c:	af00      	add	r7, sp, #0
 800de3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de40:	2300      	movs	r3, #0
 800de42:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800de44:	2300      	movs	r3, #0
 800de46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800de4e:	4618      	mov	r0, r3
 800de50:	f7f6 f841 	bl	8003ed6 <HAL_HCD_Start>
 800de54:	4603      	mov	r3, r0
 800de56:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800de58:	7bfb      	ldrb	r3, [r7, #15]
 800de5a:	4618      	mov	r0, r3
 800de5c:	f000 f98c 	bl	800e178 <USBH_Get_USB_Status>
 800de60:	4603      	mov	r3, r0
 800de62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800de64:	7bbb      	ldrb	r3, [r7, #14]
}
 800de66:	4618      	mov	r0, r3
 800de68:	3710      	adds	r7, #16
 800de6a:	46bd      	mov	sp, r7
 800de6c:	bd80      	pop	{r7, pc}

0800de6e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800de6e:	b580      	push	{r7, lr}
 800de70:	b084      	sub	sp, #16
 800de72:	af00      	add	r7, sp, #0
 800de74:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de76:	2300      	movs	r3, #0
 800de78:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800de7a:	2300      	movs	r3, #0
 800de7c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800de84:	4618      	mov	r0, r3
 800de86:	f7f6 f849 	bl	8003f1c <HAL_HCD_Stop>
 800de8a:	4603      	mov	r3, r0
 800de8c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800de8e:	7bfb      	ldrb	r3, [r7, #15]
 800de90:	4618      	mov	r0, r3
 800de92:	f000 f971 	bl	800e178 <USBH_Get_USB_Status>
 800de96:	4603      	mov	r3, r0
 800de98:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800de9a:	7bbb      	ldrb	r3, [r7, #14]
}
 800de9c:	4618      	mov	r0, r3
 800de9e:	3710      	adds	r7, #16
 800dea0:	46bd      	mov	sp, r7
 800dea2:	bd80      	pop	{r7, pc}

0800dea4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800dea4:	b580      	push	{r7, lr}
 800dea6:	b084      	sub	sp, #16
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800deac:	2301      	movs	r3, #1
 800deae:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800deb6:	4618      	mov	r0, r3
 800deb8:	f7f6 f891 	bl	8003fde <HAL_HCD_GetCurrentSpeed>
 800debc:	4603      	mov	r3, r0
 800debe:	2b02      	cmp	r3, #2
 800dec0:	d00c      	beq.n	800dedc <USBH_LL_GetSpeed+0x38>
 800dec2:	2b02      	cmp	r3, #2
 800dec4:	d80d      	bhi.n	800dee2 <USBH_LL_GetSpeed+0x3e>
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d002      	beq.n	800ded0 <USBH_LL_GetSpeed+0x2c>
 800deca:	2b01      	cmp	r3, #1
 800decc:	d003      	beq.n	800ded6 <USBH_LL_GetSpeed+0x32>
 800dece:	e008      	b.n	800dee2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800ded0:	2300      	movs	r3, #0
 800ded2:	73fb      	strb	r3, [r7, #15]
    break;
 800ded4:	e008      	b.n	800dee8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800ded6:	2301      	movs	r3, #1
 800ded8:	73fb      	strb	r3, [r7, #15]
    break;
 800deda:	e005      	b.n	800dee8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800dedc:	2302      	movs	r3, #2
 800dede:	73fb      	strb	r3, [r7, #15]
    break;
 800dee0:	e002      	b.n	800dee8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800dee2:	2301      	movs	r3, #1
 800dee4:	73fb      	strb	r3, [r7, #15]
    break;
 800dee6:	bf00      	nop
  }
  return  speed;
 800dee8:	7bfb      	ldrb	r3, [r7, #15]
}
 800deea:	4618      	mov	r0, r3
 800deec:	3710      	adds	r7, #16
 800deee:	46bd      	mov	sp, r7
 800def0:	bd80      	pop	{r7, pc}

0800def2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800def2:	b580      	push	{r7, lr}
 800def4:	b084      	sub	sp, #16
 800def6:	af00      	add	r7, sp, #0
 800def8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800defa:	2300      	movs	r3, #0
 800defc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800defe:	2300      	movs	r3, #0
 800df00:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800df08:	4618      	mov	r0, r3
 800df0a:	f7f6 f824 	bl	8003f56 <HAL_HCD_ResetPort>
 800df0e:	4603      	mov	r3, r0
 800df10:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800df12:	7bfb      	ldrb	r3, [r7, #15]
 800df14:	4618      	mov	r0, r3
 800df16:	f000 f92f 	bl	800e178 <USBH_Get_USB_Status>
 800df1a:	4603      	mov	r3, r0
 800df1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800df1e:	7bbb      	ldrb	r3, [r7, #14]
}
 800df20:	4618      	mov	r0, r3
 800df22:	3710      	adds	r7, #16
 800df24:	46bd      	mov	sp, r7
 800df26:	bd80      	pop	{r7, pc}

0800df28 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800df28:	b580      	push	{r7, lr}
 800df2a:	b082      	sub	sp, #8
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	6078      	str	r0, [r7, #4]
 800df30:	460b      	mov	r3, r1
 800df32:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800df3a:	78fa      	ldrb	r2, [r7, #3]
 800df3c:	4611      	mov	r1, r2
 800df3e:	4618      	mov	r0, r3
 800df40:	f7f6 f82b 	bl	8003f9a <HAL_HCD_HC_GetXferCount>
 800df44:	4603      	mov	r3, r0
}
 800df46:	4618      	mov	r0, r3
 800df48:	3708      	adds	r7, #8
 800df4a:	46bd      	mov	sp, r7
 800df4c:	bd80      	pop	{r7, pc}

0800df4e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800df4e:	b590      	push	{r4, r7, lr}
 800df50:	b089      	sub	sp, #36	; 0x24
 800df52:	af04      	add	r7, sp, #16
 800df54:	6078      	str	r0, [r7, #4]
 800df56:	4608      	mov	r0, r1
 800df58:	4611      	mov	r1, r2
 800df5a:	461a      	mov	r2, r3
 800df5c:	4603      	mov	r3, r0
 800df5e:	70fb      	strb	r3, [r7, #3]
 800df60:	460b      	mov	r3, r1
 800df62:	70bb      	strb	r3, [r7, #2]
 800df64:	4613      	mov	r3, r2
 800df66:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df68:	2300      	movs	r3, #0
 800df6a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800df6c:	2300      	movs	r3, #0
 800df6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800df76:	787c      	ldrb	r4, [r7, #1]
 800df78:	78ba      	ldrb	r2, [r7, #2]
 800df7a:	78f9      	ldrb	r1, [r7, #3]
 800df7c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800df7e:	9302      	str	r3, [sp, #8]
 800df80:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800df84:	9301      	str	r3, [sp, #4]
 800df86:	f897 3020 	ldrb.w	r3, [r7, #32]
 800df8a:	9300      	str	r3, [sp, #0]
 800df8c:	4623      	mov	r3, r4
 800df8e:	f7f5 fc8f 	bl	80038b0 <HAL_HCD_HC_Init>
 800df92:	4603      	mov	r3, r0
 800df94:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800df96:	7bfb      	ldrb	r3, [r7, #15]
 800df98:	4618      	mov	r0, r3
 800df9a:	f000 f8ed 	bl	800e178 <USBH_Get_USB_Status>
 800df9e:	4603      	mov	r3, r0
 800dfa0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dfa2:	7bbb      	ldrb	r3, [r7, #14]
}
 800dfa4:	4618      	mov	r0, r3
 800dfa6:	3714      	adds	r7, #20
 800dfa8:	46bd      	mov	sp, r7
 800dfaa:	bd90      	pop	{r4, r7, pc}

0800dfac <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800dfac:	b580      	push	{r7, lr}
 800dfae:	b084      	sub	sp, #16
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	6078      	str	r0, [r7, #4]
 800dfb4:	460b      	mov	r3, r1
 800dfb6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dfb8:	2300      	movs	r3, #0
 800dfba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dfbc:	2300      	movs	r3, #0
 800dfbe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800dfc6:	78fa      	ldrb	r2, [r7, #3]
 800dfc8:	4611      	mov	r1, r2
 800dfca:	4618      	mov	r0, r3
 800dfcc:	f7f5 fcff 	bl	80039ce <HAL_HCD_HC_Halt>
 800dfd0:	4603      	mov	r3, r0
 800dfd2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800dfd4:	7bfb      	ldrb	r3, [r7, #15]
 800dfd6:	4618      	mov	r0, r3
 800dfd8:	f000 f8ce 	bl	800e178 <USBH_Get_USB_Status>
 800dfdc:	4603      	mov	r3, r0
 800dfde:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dfe0:	7bbb      	ldrb	r3, [r7, #14]
}
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	3710      	adds	r7, #16
 800dfe6:	46bd      	mov	sp, r7
 800dfe8:	bd80      	pop	{r7, pc}

0800dfea <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800dfea:	b590      	push	{r4, r7, lr}
 800dfec:	b089      	sub	sp, #36	; 0x24
 800dfee:	af04      	add	r7, sp, #16
 800dff0:	6078      	str	r0, [r7, #4]
 800dff2:	4608      	mov	r0, r1
 800dff4:	4611      	mov	r1, r2
 800dff6:	461a      	mov	r2, r3
 800dff8:	4603      	mov	r3, r0
 800dffa:	70fb      	strb	r3, [r7, #3]
 800dffc:	460b      	mov	r3, r1
 800dffe:	70bb      	strb	r3, [r7, #2]
 800e000:	4613      	mov	r3, r2
 800e002:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e004:	2300      	movs	r3, #0
 800e006:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e008:	2300      	movs	r3, #0
 800e00a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e012:	787c      	ldrb	r4, [r7, #1]
 800e014:	78ba      	ldrb	r2, [r7, #2]
 800e016:	78f9      	ldrb	r1, [r7, #3]
 800e018:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e01c:	9303      	str	r3, [sp, #12]
 800e01e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e020:	9302      	str	r3, [sp, #8]
 800e022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e024:	9301      	str	r3, [sp, #4]
 800e026:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e02a:	9300      	str	r3, [sp, #0]
 800e02c:	4623      	mov	r3, r4
 800e02e:	f7f5 fcf1 	bl	8003a14 <HAL_HCD_HC_SubmitRequest>
 800e032:	4603      	mov	r3, r0
 800e034:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800e036:	7bfb      	ldrb	r3, [r7, #15]
 800e038:	4618      	mov	r0, r3
 800e03a:	f000 f89d 	bl	800e178 <USBH_Get_USB_Status>
 800e03e:	4603      	mov	r3, r0
 800e040:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e042:	7bbb      	ldrb	r3, [r7, #14]
}
 800e044:	4618      	mov	r0, r3
 800e046:	3714      	adds	r7, #20
 800e048:	46bd      	mov	sp, r7
 800e04a:	bd90      	pop	{r4, r7, pc}

0800e04c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e04c:	b580      	push	{r7, lr}
 800e04e:	b082      	sub	sp, #8
 800e050:	af00      	add	r7, sp, #0
 800e052:	6078      	str	r0, [r7, #4]
 800e054:	460b      	mov	r3, r1
 800e056:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e05e:	78fa      	ldrb	r2, [r7, #3]
 800e060:	4611      	mov	r1, r2
 800e062:	4618      	mov	r0, r3
 800e064:	f7f5 ff85 	bl	8003f72 <HAL_HCD_HC_GetURBState>
 800e068:	4603      	mov	r3, r0
}
 800e06a:	4618      	mov	r0, r3
 800e06c:	3708      	adds	r7, #8
 800e06e:	46bd      	mov	sp, r7
 800e070:	bd80      	pop	{r7, pc}

0800e072 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800e072:	b580      	push	{r7, lr}
 800e074:	b082      	sub	sp, #8
 800e076:	af00      	add	r7, sp, #0
 800e078:	6078      	str	r0, [r7, #4]
 800e07a:	460b      	mov	r3, r1
 800e07c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800e084:	2b00      	cmp	r3, #0
 800e086:	d103      	bne.n	800e090 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 800e088:	78fb      	ldrb	r3, [r7, #3]
 800e08a:	4618      	mov	r0, r3
 800e08c:	f000 f8a0 	bl	800e1d0 <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800e090:	20c8      	movs	r0, #200	; 0xc8
 800e092:	f7f4 fce7 	bl	8002a64 <HAL_Delay>
  return USBH_OK;
 800e096:	2300      	movs	r3, #0
}
 800e098:	4618      	mov	r0, r3
 800e09a:	3708      	adds	r7, #8
 800e09c:	46bd      	mov	sp, r7
 800e09e:	bd80      	pop	{r7, pc}

0800e0a0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800e0a0:	b480      	push	{r7}
 800e0a2:	b085      	sub	sp, #20
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	6078      	str	r0, [r7, #4]
 800e0a8:	460b      	mov	r3, r1
 800e0aa:	70fb      	strb	r3, [r7, #3]
 800e0ac:	4613      	mov	r3, r2
 800e0ae:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e0b6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800e0b8:	78fb      	ldrb	r3, [r7, #3]
 800e0ba:	68fa      	ldr	r2, [r7, #12]
 800e0bc:	212c      	movs	r1, #44	; 0x2c
 800e0be:	fb01 f303 	mul.w	r3, r1, r3
 800e0c2:	4413      	add	r3, r2
 800e0c4:	333b      	adds	r3, #59	; 0x3b
 800e0c6:	781b      	ldrb	r3, [r3, #0]
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d009      	beq.n	800e0e0 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800e0cc:	78fb      	ldrb	r3, [r7, #3]
 800e0ce:	68fa      	ldr	r2, [r7, #12]
 800e0d0:	212c      	movs	r1, #44	; 0x2c
 800e0d2:	fb01 f303 	mul.w	r3, r1, r3
 800e0d6:	4413      	add	r3, r2
 800e0d8:	3354      	adds	r3, #84	; 0x54
 800e0da:	78ba      	ldrb	r2, [r7, #2]
 800e0dc:	701a      	strb	r2, [r3, #0]
 800e0de:	e008      	b.n	800e0f2 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800e0e0:	78fb      	ldrb	r3, [r7, #3]
 800e0e2:	68fa      	ldr	r2, [r7, #12]
 800e0e4:	212c      	movs	r1, #44	; 0x2c
 800e0e6:	fb01 f303 	mul.w	r3, r1, r3
 800e0ea:	4413      	add	r3, r2
 800e0ec:	3355      	adds	r3, #85	; 0x55
 800e0ee:	78ba      	ldrb	r2, [r7, #2]
 800e0f0:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800e0f2:	2300      	movs	r3, #0
}
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	3714      	adds	r7, #20
 800e0f8:	46bd      	mov	sp, r7
 800e0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0fe:	4770      	bx	lr

0800e100 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e100:	b480      	push	{r7}
 800e102:	b085      	sub	sp, #20
 800e104:	af00      	add	r7, sp, #0
 800e106:	6078      	str	r0, [r7, #4]
 800e108:	460b      	mov	r3, r1
 800e10a:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800e10c:	2300      	movs	r3, #0
 800e10e:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e116:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800e118:	78fb      	ldrb	r3, [r7, #3]
 800e11a:	68ba      	ldr	r2, [r7, #8]
 800e11c:	212c      	movs	r1, #44	; 0x2c
 800e11e:	fb01 f303 	mul.w	r3, r1, r3
 800e122:	4413      	add	r3, r2
 800e124:	333b      	adds	r3, #59	; 0x3b
 800e126:	781b      	ldrb	r3, [r3, #0]
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d009      	beq.n	800e140 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800e12c:	78fb      	ldrb	r3, [r7, #3]
 800e12e:	68ba      	ldr	r2, [r7, #8]
 800e130:	212c      	movs	r1, #44	; 0x2c
 800e132:	fb01 f303 	mul.w	r3, r1, r3
 800e136:	4413      	add	r3, r2
 800e138:	3354      	adds	r3, #84	; 0x54
 800e13a:	781b      	ldrb	r3, [r3, #0]
 800e13c:	73fb      	strb	r3, [r7, #15]
 800e13e:	e008      	b.n	800e152 <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800e140:	78fb      	ldrb	r3, [r7, #3]
 800e142:	68ba      	ldr	r2, [r7, #8]
 800e144:	212c      	movs	r1, #44	; 0x2c
 800e146:	fb01 f303 	mul.w	r3, r1, r3
 800e14a:	4413      	add	r3, r2
 800e14c:	3355      	adds	r3, #85	; 0x55
 800e14e:	781b      	ldrb	r3, [r3, #0]
 800e150:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800e152:	7bfb      	ldrb	r3, [r7, #15]
}
 800e154:	4618      	mov	r0, r3
 800e156:	3714      	adds	r7, #20
 800e158:	46bd      	mov	sp, r7
 800e15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e15e:	4770      	bx	lr

0800e160 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800e160:	b580      	push	{r7, lr}
 800e162:	b082      	sub	sp, #8
 800e164:	af00      	add	r7, sp, #0
 800e166:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800e168:	6878      	ldr	r0, [r7, #4]
 800e16a:	f7f4 fc7b 	bl	8002a64 <HAL_Delay>
}
 800e16e:	bf00      	nop
 800e170:	3708      	adds	r7, #8
 800e172:	46bd      	mov	sp, r7
 800e174:	bd80      	pop	{r7, pc}
	...

0800e178 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e178:	b480      	push	{r7}
 800e17a:	b085      	sub	sp, #20
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	4603      	mov	r3, r0
 800e180:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e182:	2300      	movs	r3, #0
 800e184:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e186:	79fb      	ldrb	r3, [r7, #7]
 800e188:	2b03      	cmp	r3, #3
 800e18a:	d817      	bhi.n	800e1bc <USBH_Get_USB_Status+0x44>
 800e18c:	a201      	add	r2, pc, #4	; (adr r2, 800e194 <USBH_Get_USB_Status+0x1c>)
 800e18e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e192:	bf00      	nop
 800e194:	0800e1a5 	.word	0x0800e1a5
 800e198:	0800e1ab 	.word	0x0800e1ab
 800e19c:	0800e1b1 	.word	0x0800e1b1
 800e1a0:	0800e1b7 	.word	0x0800e1b7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800e1a4:	2300      	movs	r3, #0
 800e1a6:	73fb      	strb	r3, [r7, #15]
    break;
 800e1a8:	e00b      	b.n	800e1c2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800e1aa:	2302      	movs	r3, #2
 800e1ac:	73fb      	strb	r3, [r7, #15]
    break;
 800e1ae:	e008      	b.n	800e1c2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800e1b0:	2301      	movs	r3, #1
 800e1b2:	73fb      	strb	r3, [r7, #15]
    break;
 800e1b4:	e005      	b.n	800e1c2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800e1b6:	2302      	movs	r3, #2
 800e1b8:	73fb      	strb	r3, [r7, #15]
    break;
 800e1ba:	e002      	b.n	800e1c2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800e1bc:	2302      	movs	r3, #2
 800e1be:	73fb      	strb	r3, [r7, #15]
    break;
 800e1c0:	bf00      	nop
  }
  return usb_status;
 800e1c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1c4:	4618      	mov	r0, r3
 800e1c6:	3714      	adds	r7, #20
 800e1c8:	46bd      	mov	sp, r7
 800e1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ce:	4770      	bx	lr

0800e1d0 <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 800e1d0:	b580      	push	{r7, lr}
 800e1d2:	b084      	sub	sp, #16
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	4603      	mov	r3, r0
 800e1d8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800e1da:	79fb      	ldrb	r3, [r7, #7]
 800e1dc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 800e1de:	79fb      	ldrb	r3, [r7, #7]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d102      	bne.n	800e1ea <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800e1e4:	2301      	movs	r3, #1
 800e1e6:	73fb      	strb	r3, [r7, #15]
 800e1e8:	e001      	b.n	800e1ee <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 800e1ee:	7bfb      	ldrb	r3, [r7, #15]
 800e1f0:	461a      	mov	r2, r3
 800e1f2:	2110      	movs	r1, #16
 800e1f4:	4803      	ldr	r0, [pc, #12]	; (800e204 <MX_DriverVbusHS+0x34>)
 800e1f6:	f7f5 fac7 	bl	8003788 <HAL_GPIO_WritePin>
}
 800e1fa:	bf00      	nop
 800e1fc:	3710      	adds	r7, #16
 800e1fe:	46bd      	mov	sp, r7
 800e200:	bd80      	pop	{r7, pc}
 800e202:	bf00      	nop
 800e204:	40020800 	.word	0x40020800

0800e208 <__errno>:
 800e208:	4b01      	ldr	r3, [pc, #4]	; (800e210 <__errno+0x8>)
 800e20a:	6818      	ldr	r0, [r3, #0]
 800e20c:	4770      	bx	lr
 800e20e:	bf00      	nop
 800e210:	200000f4 	.word	0x200000f4

0800e214 <__libc_init_array>:
 800e214:	b570      	push	{r4, r5, r6, lr}
 800e216:	4d0d      	ldr	r5, [pc, #52]	; (800e24c <__libc_init_array+0x38>)
 800e218:	4c0d      	ldr	r4, [pc, #52]	; (800e250 <__libc_init_array+0x3c>)
 800e21a:	1b64      	subs	r4, r4, r5
 800e21c:	10a4      	asrs	r4, r4, #2
 800e21e:	2600      	movs	r6, #0
 800e220:	42a6      	cmp	r6, r4
 800e222:	d109      	bne.n	800e238 <__libc_init_array+0x24>
 800e224:	4d0b      	ldr	r5, [pc, #44]	; (800e254 <__libc_init_array+0x40>)
 800e226:	4c0c      	ldr	r4, [pc, #48]	; (800e258 <__libc_init_array+0x44>)
 800e228:	f001 f892 	bl	800f350 <_init>
 800e22c:	1b64      	subs	r4, r4, r5
 800e22e:	10a4      	asrs	r4, r4, #2
 800e230:	2600      	movs	r6, #0
 800e232:	42a6      	cmp	r6, r4
 800e234:	d105      	bne.n	800e242 <__libc_init_array+0x2e>
 800e236:	bd70      	pop	{r4, r5, r6, pc}
 800e238:	f855 3b04 	ldr.w	r3, [r5], #4
 800e23c:	4798      	blx	r3
 800e23e:	3601      	adds	r6, #1
 800e240:	e7ee      	b.n	800e220 <__libc_init_array+0xc>
 800e242:	f855 3b04 	ldr.w	r3, [r5], #4
 800e246:	4798      	blx	r3
 800e248:	3601      	adds	r6, #1
 800e24a:	e7f2      	b.n	800e232 <__libc_init_array+0x1e>
 800e24c:	0800f56c 	.word	0x0800f56c
 800e250:	0800f56c 	.word	0x0800f56c
 800e254:	0800f56c 	.word	0x0800f56c
 800e258:	0800f570 	.word	0x0800f570

0800e25c <malloc>:
 800e25c:	4b02      	ldr	r3, [pc, #8]	; (800e268 <malloc+0xc>)
 800e25e:	4601      	mov	r1, r0
 800e260:	6818      	ldr	r0, [r3, #0]
 800e262:	f000 b88d 	b.w	800e380 <_malloc_r>
 800e266:	bf00      	nop
 800e268:	200000f4 	.word	0x200000f4

0800e26c <free>:
 800e26c:	4b02      	ldr	r3, [pc, #8]	; (800e278 <free+0xc>)
 800e26e:	4601      	mov	r1, r0
 800e270:	6818      	ldr	r0, [r3, #0]
 800e272:	f000 b819 	b.w	800e2a8 <_free_r>
 800e276:	bf00      	nop
 800e278:	200000f4 	.word	0x200000f4

0800e27c <memcpy>:
 800e27c:	440a      	add	r2, r1
 800e27e:	4291      	cmp	r1, r2
 800e280:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800e284:	d100      	bne.n	800e288 <memcpy+0xc>
 800e286:	4770      	bx	lr
 800e288:	b510      	push	{r4, lr}
 800e28a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e28e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e292:	4291      	cmp	r1, r2
 800e294:	d1f9      	bne.n	800e28a <memcpy+0xe>
 800e296:	bd10      	pop	{r4, pc}

0800e298 <memset>:
 800e298:	4402      	add	r2, r0
 800e29a:	4603      	mov	r3, r0
 800e29c:	4293      	cmp	r3, r2
 800e29e:	d100      	bne.n	800e2a2 <memset+0xa>
 800e2a0:	4770      	bx	lr
 800e2a2:	f803 1b01 	strb.w	r1, [r3], #1
 800e2a6:	e7f9      	b.n	800e29c <memset+0x4>

0800e2a8 <_free_r>:
 800e2a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e2aa:	2900      	cmp	r1, #0
 800e2ac:	d044      	beq.n	800e338 <_free_r+0x90>
 800e2ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e2b2:	9001      	str	r0, [sp, #4]
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	f1a1 0404 	sub.w	r4, r1, #4
 800e2ba:	bfb8      	it	lt
 800e2bc:	18e4      	addlt	r4, r4, r3
 800e2be:	f000 fbe1 	bl	800ea84 <__malloc_lock>
 800e2c2:	4a1e      	ldr	r2, [pc, #120]	; (800e33c <_free_r+0x94>)
 800e2c4:	9801      	ldr	r0, [sp, #4]
 800e2c6:	6813      	ldr	r3, [r2, #0]
 800e2c8:	b933      	cbnz	r3, 800e2d8 <_free_r+0x30>
 800e2ca:	6063      	str	r3, [r4, #4]
 800e2cc:	6014      	str	r4, [r2, #0]
 800e2ce:	b003      	add	sp, #12
 800e2d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e2d4:	f000 bbdc 	b.w	800ea90 <__malloc_unlock>
 800e2d8:	42a3      	cmp	r3, r4
 800e2da:	d908      	bls.n	800e2ee <_free_r+0x46>
 800e2dc:	6825      	ldr	r5, [r4, #0]
 800e2de:	1961      	adds	r1, r4, r5
 800e2e0:	428b      	cmp	r3, r1
 800e2e2:	bf01      	itttt	eq
 800e2e4:	6819      	ldreq	r1, [r3, #0]
 800e2e6:	685b      	ldreq	r3, [r3, #4]
 800e2e8:	1949      	addeq	r1, r1, r5
 800e2ea:	6021      	streq	r1, [r4, #0]
 800e2ec:	e7ed      	b.n	800e2ca <_free_r+0x22>
 800e2ee:	461a      	mov	r2, r3
 800e2f0:	685b      	ldr	r3, [r3, #4]
 800e2f2:	b10b      	cbz	r3, 800e2f8 <_free_r+0x50>
 800e2f4:	42a3      	cmp	r3, r4
 800e2f6:	d9fa      	bls.n	800e2ee <_free_r+0x46>
 800e2f8:	6811      	ldr	r1, [r2, #0]
 800e2fa:	1855      	adds	r5, r2, r1
 800e2fc:	42a5      	cmp	r5, r4
 800e2fe:	d10b      	bne.n	800e318 <_free_r+0x70>
 800e300:	6824      	ldr	r4, [r4, #0]
 800e302:	4421      	add	r1, r4
 800e304:	1854      	adds	r4, r2, r1
 800e306:	42a3      	cmp	r3, r4
 800e308:	6011      	str	r1, [r2, #0]
 800e30a:	d1e0      	bne.n	800e2ce <_free_r+0x26>
 800e30c:	681c      	ldr	r4, [r3, #0]
 800e30e:	685b      	ldr	r3, [r3, #4]
 800e310:	6053      	str	r3, [r2, #4]
 800e312:	4421      	add	r1, r4
 800e314:	6011      	str	r1, [r2, #0]
 800e316:	e7da      	b.n	800e2ce <_free_r+0x26>
 800e318:	d902      	bls.n	800e320 <_free_r+0x78>
 800e31a:	230c      	movs	r3, #12
 800e31c:	6003      	str	r3, [r0, #0]
 800e31e:	e7d6      	b.n	800e2ce <_free_r+0x26>
 800e320:	6825      	ldr	r5, [r4, #0]
 800e322:	1961      	adds	r1, r4, r5
 800e324:	428b      	cmp	r3, r1
 800e326:	bf04      	itt	eq
 800e328:	6819      	ldreq	r1, [r3, #0]
 800e32a:	685b      	ldreq	r3, [r3, #4]
 800e32c:	6063      	str	r3, [r4, #4]
 800e32e:	bf04      	itt	eq
 800e330:	1949      	addeq	r1, r1, r5
 800e332:	6021      	streq	r1, [r4, #0]
 800e334:	6054      	str	r4, [r2, #4]
 800e336:	e7ca      	b.n	800e2ce <_free_r+0x26>
 800e338:	b003      	add	sp, #12
 800e33a:	bd30      	pop	{r4, r5, pc}
 800e33c:	20003c08 	.word	0x20003c08

0800e340 <sbrk_aligned>:
 800e340:	b570      	push	{r4, r5, r6, lr}
 800e342:	4e0e      	ldr	r6, [pc, #56]	; (800e37c <sbrk_aligned+0x3c>)
 800e344:	460c      	mov	r4, r1
 800e346:	6831      	ldr	r1, [r6, #0]
 800e348:	4605      	mov	r5, r0
 800e34a:	b911      	cbnz	r1, 800e352 <sbrk_aligned+0x12>
 800e34c:	f000 f8a4 	bl	800e498 <_sbrk_r>
 800e350:	6030      	str	r0, [r6, #0]
 800e352:	4621      	mov	r1, r4
 800e354:	4628      	mov	r0, r5
 800e356:	f000 f89f 	bl	800e498 <_sbrk_r>
 800e35a:	1c43      	adds	r3, r0, #1
 800e35c:	d00a      	beq.n	800e374 <sbrk_aligned+0x34>
 800e35e:	1cc4      	adds	r4, r0, #3
 800e360:	f024 0403 	bic.w	r4, r4, #3
 800e364:	42a0      	cmp	r0, r4
 800e366:	d007      	beq.n	800e378 <sbrk_aligned+0x38>
 800e368:	1a21      	subs	r1, r4, r0
 800e36a:	4628      	mov	r0, r5
 800e36c:	f000 f894 	bl	800e498 <_sbrk_r>
 800e370:	3001      	adds	r0, #1
 800e372:	d101      	bne.n	800e378 <sbrk_aligned+0x38>
 800e374:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800e378:	4620      	mov	r0, r4
 800e37a:	bd70      	pop	{r4, r5, r6, pc}
 800e37c:	20003c0c 	.word	0x20003c0c

0800e380 <_malloc_r>:
 800e380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e384:	1ccd      	adds	r5, r1, #3
 800e386:	f025 0503 	bic.w	r5, r5, #3
 800e38a:	3508      	adds	r5, #8
 800e38c:	2d0c      	cmp	r5, #12
 800e38e:	bf38      	it	cc
 800e390:	250c      	movcc	r5, #12
 800e392:	2d00      	cmp	r5, #0
 800e394:	4607      	mov	r7, r0
 800e396:	db01      	blt.n	800e39c <_malloc_r+0x1c>
 800e398:	42a9      	cmp	r1, r5
 800e39a:	d905      	bls.n	800e3a8 <_malloc_r+0x28>
 800e39c:	230c      	movs	r3, #12
 800e39e:	603b      	str	r3, [r7, #0]
 800e3a0:	2600      	movs	r6, #0
 800e3a2:	4630      	mov	r0, r6
 800e3a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3a8:	4e2e      	ldr	r6, [pc, #184]	; (800e464 <_malloc_r+0xe4>)
 800e3aa:	f000 fb6b 	bl	800ea84 <__malloc_lock>
 800e3ae:	6833      	ldr	r3, [r6, #0]
 800e3b0:	461c      	mov	r4, r3
 800e3b2:	bb34      	cbnz	r4, 800e402 <_malloc_r+0x82>
 800e3b4:	4629      	mov	r1, r5
 800e3b6:	4638      	mov	r0, r7
 800e3b8:	f7ff ffc2 	bl	800e340 <sbrk_aligned>
 800e3bc:	1c43      	adds	r3, r0, #1
 800e3be:	4604      	mov	r4, r0
 800e3c0:	d14d      	bne.n	800e45e <_malloc_r+0xde>
 800e3c2:	6834      	ldr	r4, [r6, #0]
 800e3c4:	4626      	mov	r6, r4
 800e3c6:	2e00      	cmp	r6, #0
 800e3c8:	d140      	bne.n	800e44c <_malloc_r+0xcc>
 800e3ca:	6823      	ldr	r3, [r4, #0]
 800e3cc:	4631      	mov	r1, r6
 800e3ce:	4638      	mov	r0, r7
 800e3d0:	eb04 0803 	add.w	r8, r4, r3
 800e3d4:	f000 f860 	bl	800e498 <_sbrk_r>
 800e3d8:	4580      	cmp	r8, r0
 800e3da:	d13a      	bne.n	800e452 <_malloc_r+0xd2>
 800e3dc:	6821      	ldr	r1, [r4, #0]
 800e3de:	3503      	adds	r5, #3
 800e3e0:	1a6d      	subs	r5, r5, r1
 800e3e2:	f025 0503 	bic.w	r5, r5, #3
 800e3e6:	3508      	adds	r5, #8
 800e3e8:	2d0c      	cmp	r5, #12
 800e3ea:	bf38      	it	cc
 800e3ec:	250c      	movcc	r5, #12
 800e3ee:	4629      	mov	r1, r5
 800e3f0:	4638      	mov	r0, r7
 800e3f2:	f7ff ffa5 	bl	800e340 <sbrk_aligned>
 800e3f6:	3001      	adds	r0, #1
 800e3f8:	d02b      	beq.n	800e452 <_malloc_r+0xd2>
 800e3fa:	6823      	ldr	r3, [r4, #0]
 800e3fc:	442b      	add	r3, r5
 800e3fe:	6023      	str	r3, [r4, #0]
 800e400:	e00e      	b.n	800e420 <_malloc_r+0xa0>
 800e402:	6822      	ldr	r2, [r4, #0]
 800e404:	1b52      	subs	r2, r2, r5
 800e406:	d41e      	bmi.n	800e446 <_malloc_r+0xc6>
 800e408:	2a0b      	cmp	r2, #11
 800e40a:	d916      	bls.n	800e43a <_malloc_r+0xba>
 800e40c:	1961      	adds	r1, r4, r5
 800e40e:	42a3      	cmp	r3, r4
 800e410:	6025      	str	r5, [r4, #0]
 800e412:	bf18      	it	ne
 800e414:	6059      	strne	r1, [r3, #4]
 800e416:	6863      	ldr	r3, [r4, #4]
 800e418:	bf08      	it	eq
 800e41a:	6031      	streq	r1, [r6, #0]
 800e41c:	5162      	str	r2, [r4, r5]
 800e41e:	604b      	str	r3, [r1, #4]
 800e420:	4638      	mov	r0, r7
 800e422:	f104 060b 	add.w	r6, r4, #11
 800e426:	f000 fb33 	bl	800ea90 <__malloc_unlock>
 800e42a:	f026 0607 	bic.w	r6, r6, #7
 800e42e:	1d23      	adds	r3, r4, #4
 800e430:	1af2      	subs	r2, r6, r3
 800e432:	d0b6      	beq.n	800e3a2 <_malloc_r+0x22>
 800e434:	1b9b      	subs	r3, r3, r6
 800e436:	50a3      	str	r3, [r4, r2]
 800e438:	e7b3      	b.n	800e3a2 <_malloc_r+0x22>
 800e43a:	6862      	ldr	r2, [r4, #4]
 800e43c:	42a3      	cmp	r3, r4
 800e43e:	bf0c      	ite	eq
 800e440:	6032      	streq	r2, [r6, #0]
 800e442:	605a      	strne	r2, [r3, #4]
 800e444:	e7ec      	b.n	800e420 <_malloc_r+0xa0>
 800e446:	4623      	mov	r3, r4
 800e448:	6864      	ldr	r4, [r4, #4]
 800e44a:	e7b2      	b.n	800e3b2 <_malloc_r+0x32>
 800e44c:	4634      	mov	r4, r6
 800e44e:	6876      	ldr	r6, [r6, #4]
 800e450:	e7b9      	b.n	800e3c6 <_malloc_r+0x46>
 800e452:	230c      	movs	r3, #12
 800e454:	603b      	str	r3, [r7, #0]
 800e456:	4638      	mov	r0, r7
 800e458:	f000 fb1a 	bl	800ea90 <__malloc_unlock>
 800e45c:	e7a1      	b.n	800e3a2 <_malloc_r+0x22>
 800e45e:	6025      	str	r5, [r4, #0]
 800e460:	e7de      	b.n	800e420 <_malloc_r+0xa0>
 800e462:	bf00      	nop
 800e464:	20003c08 	.word	0x20003c08

0800e468 <iprintf>:
 800e468:	b40f      	push	{r0, r1, r2, r3}
 800e46a:	4b0a      	ldr	r3, [pc, #40]	; (800e494 <iprintf+0x2c>)
 800e46c:	b513      	push	{r0, r1, r4, lr}
 800e46e:	681c      	ldr	r4, [r3, #0]
 800e470:	b124      	cbz	r4, 800e47c <iprintf+0x14>
 800e472:	69a3      	ldr	r3, [r4, #24]
 800e474:	b913      	cbnz	r3, 800e47c <iprintf+0x14>
 800e476:	4620      	mov	r0, r4
 800e478:	f000 f9fe 	bl	800e878 <__sinit>
 800e47c:	ab05      	add	r3, sp, #20
 800e47e:	9a04      	ldr	r2, [sp, #16]
 800e480:	68a1      	ldr	r1, [r4, #8]
 800e482:	9301      	str	r3, [sp, #4]
 800e484:	4620      	mov	r0, r4
 800e486:	f000 fb33 	bl	800eaf0 <_vfiprintf_r>
 800e48a:	b002      	add	sp, #8
 800e48c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e490:	b004      	add	sp, #16
 800e492:	4770      	bx	lr
 800e494:	200000f4 	.word	0x200000f4

0800e498 <_sbrk_r>:
 800e498:	b538      	push	{r3, r4, r5, lr}
 800e49a:	4d06      	ldr	r5, [pc, #24]	; (800e4b4 <_sbrk_r+0x1c>)
 800e49c:	2300      	movs	r3, #0
 800e49e:	4604      	mov	r4, r0
 800e4a0:	4608      	mov	r0, r1
 800e4a2:	602b      	str	r3, [r5, #0]
 800e4a4:	f7f4 f9fa 	bl	800289c <_sbrk>
 800e4a8:	1c43      	adds	r3, r0, #1
 800e4aa:	d102      	bne.n	800e4b2 <_sbrk_r+0x1a>
 800e4ac:	682b      	ldr	r3, [r5, #0]
 800e4ae:	b103      	cbz	r3, 800e4b2 <_sbrk_r+0x1a>
 800e4b0:	6023      	str	r3, [r4, #0]
 800e4b2:	bd38      	pop	{r3, r4, r5, pc}
 800e4b4:	20003c14 	.word	0x20003c14

0800e4b8 <setvbuf>:
 800e4b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e4bc:	461d      	mov	r5, r3
 800e4be:	4b5d      	ldr	r3, [pc, #372]	; (800e634 <setvbuf+0x17c>)
 800e4c0:	681f      	ldr	r7, [r3, #0]
 800e4c2:	4604      	mov	r4, r0
 800e4c4:	460e      	mov	r6, r1
 800e4c6:	4690      	mov	r8, r2
 800e4c8:	b127      	cbz	r7, 800e4d4 <setvbuf+0x1c>
 800e4ca:	69bb      	ldr	r3, [r7, #24]
 800e4cc:	b913      	cbnz	r3, 800e4d4 <setvbuf+0x1c>
 800e4ce:	4638      	mov	r0, r7
 800e4d0:	f000 f9d2 	bl	800e878 <__sinit>
 800e4d4:	4b58      	ldr	r3, [pc, #352]	; (800e638 <setvbuf+0x180>)
 800e4d6:	429c      	cmp	r4, r3
 800e4d8:	d167      	bne.n	800e5aa <setvbuf+0xf2>
 800e4da:	687c      	ldr	r4, [r7, #4]
 800e4dc:	f1b8 0f02 	cmp.w	r8, #2
 800e4e0:	d006      	beq.n	800e4f0 <setvbuf+0x38>
 800e4e2:	f1b8 0f01 	cmp.w	r8, #1
 800e4e6:	f200 809f 	bhi.w	800e628 <setvbuf+0x170>
 800e4ea:	2d00      	cmp	r5, #0
 800e4ec:	f2c0 809c 	blt.w	800e628 <setvbuf+0x170>
 800e4f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e4f2:	07db      	lsls	r3, r3, #31
 800e4f4:	d405      	bmi.n	800e502 <setvbuf+0x4a>
 800e4f6:	89a3      	ldrh	r3, [r4, #12]
 800e4f8:	0598      	lsls	r0, r3, #22
 800e4fa:	d402      	bmi.n	800e502 <setvbuf+0x4a>
 800e4fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e4fe:	f000 fa59 	bl	800e9b4 <__retarget_lock_acquire_recursive>
 800e502:	4621      	mov	r1, r4
 800e504:	4638      	mov	r0, r7
 800e506:	f000 f923 	bl	800e750 <_fflush_r>
 800e50a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e50c:	b141      	cbz	r1, 800e520 <setvbuf+0x68>
 800e50e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e512:	4299      	cmp	r1, r3
 800e514:	d002      	beq.n	800e51c <setvbuf+0x64>
 800e516:	4638      	mov	r0, r7
 800e518:	f7ff fec6 	bl	800e2a8 <_free_r>
 800e51c:	2300      	movs	r3, #0
 800e51e:	6363      	str	r3, [r4, #52]	; 0x34
 800e520:	2300      	movs	r3, #0
 800e522:	61a3      	str	r3, [r4, #24]
 800e524:	6063      	str	r3, [r4, #4]
 800e526:	89a3      	ldrh	r3, [r4, #12]
 800e528:	0619      	lsls	r1, r3, #24
 800e52a:	d503      	bpl.n	800e534 <setvbuf+0x7c>
 800e52c:	6921      	ldr	r1, [r4, #16]
 800e52e:	4638      	mov	r0, r7
 800e530:	f7ff feba 	bl	800e2a8 <_free_r>
 800e534:	89a3      	ldrh	r3, [r4, #12]
 800e536:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800e53a:	f023 0303 	bic.w	r3, r3, #3
 800e53e:	f1b8 0f02 	cmp.w	r8, #2
 800e542:	81a3      	strh	r3, [r4, #12]
 800e544:	d06c      	beq.n	800e620 <setvbuf+0x168>
 800e546:	ab01      	add	r3, sp, #4
 800e548:	466a      	mov	r2, sp
 800e54a:	4621      	mov	r1, r4
 800e54c:	4638      	mov	r0, r7
 800e54e:	f000 fa33 	bl	800e9b8 <__swhatbuf_r>
 800e552:	89a3      	ldrh	r3, [r4, #12]
 800e554:	4318      	orrs	r0, r3
 800e556:	81a0      	strh	r0, [r4, #12]
 800e558:	2d00      	cmp	r5, #0
 800e55a:	d130      	bne.n	800e5be <setvbuf+0x106>
 800e55c:	9d00      	ldr	r5, [sp, #0]
 800e55e:	4628      	mov	r0, r5
 800e560:	f7ff fe7c 	bl	800e25c <malloc>
 800e564:	4606      	mov	r6, r0
 800e566:	2800      	cmp	r0, #0
 800e568:	d155      	bne.n	800e616 <setvbuf+0x15e>
 800e56a:	f8dd 9000 	ldr.w	r9, [sp]
 800e56e:	45a9      	cmp	r9, r5
 800e570:	d14a      	bne.n	800e608 <setvbuf+0x150>
 800e572:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800e576:	2200      	movs	r2, #0
 800e578:	60a2      	str	r2, [r4, #8]
 800e57a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800e57e:	6022      	str	r2, [r4, #0]
 800e580:	6122      	str	r2, [r4, #16]
 800e582:	2201      	movs	r2, #1
 800e584:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e588:	6162      	str	r2, [r4, #20]
 800e58a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e58c:	f043 0302 	orr.w	r3, r3, #2
 800e590:	07d2      	lsls	r2, r2, #31
 800e592:	81a3      	strh	r3, [r4, #12]
 800e594:	d405      	bmi.n	800e5a2 <setvbuf+0xea>
 800e596:	f413 7f00 	tst.w	r3, #512	; 0x200
 800e59a:	d102      	bne.n	800e5a2 <setvbuf+0xea>
 800e59c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e59e:	f000 fa0a 	bl	800e9b6 <__retarget_lock_release_recursive>
 800e5a2:	4628      	mov	r0, r5
 800e5a4:	b003      	add	sp, #12
 800e5a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e5aa:	4b24      	ldr	r3, [pc, #144]	; (800e63c <setvbuf+0x184>)
 800e5ac:	429c      	cmp	r4, r3
 800e5ae:	d101      	bne.n	800e5b4 <setvbuf+0xfc>
 800e5b0:	68bc      	ldr	r4, [r7, #8]
 800e5b2:	e793      	b.n	800e4dc <setvbuf+0x24>
 800e5b4:	4b22      	ldr	r3, [pc, #136]	; (800e640 <setvbuf+0x188>)
 800e5b6:	429c      	cmp	r4, r3
 800e5b8:	bf08      	it	eq
 800e5ba:	68fc      	ldreq	r4, [r7, #12]
 800e5bc:	e78e      	b.n	800e4dc <setvbuf+0x24>
 800e5be:	2e00      	cmp	r6, #0
 800e5c0:	d0cd      	beq.n	800e55e <setvbuf+0xa6>
 800e5c2:	69bb      	ldr	r3, [r7, #24]
 800e5c4:	b913      	cbnz	r3, 800e5cc <setvbuf+0x114>
 800e5c6:	4638      	mov	r0, r7
 800e5c8:	f000 f956 	bl	800e878 <__sinit>
 800e5cc:	f1b8 0f01 	cmp.w	r8, #1
 800e5d0:	bf08      	it	eq
 800e5d2:	89a3      	ldrheq	r3, [r4, #12]
 800e5d4:	6026      	str	r6, [r4, #0]
 800e5d6:	bf04      	itt	eq
 800e5d8:	f043 0301 	orreq.w	r3, r3, #1
 800e5dc:	81a3      	strheq	r3, [r4, #12]
 800e5de:	89a2      	ldrh	r2, [r4, #12]
 800e5e0:	f012 0308 	ands.w	r3, r2, #8
 800e5e4:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800e5e8:	d01c      	beq.n	800e624 <setvbuf+0x16c>
 800e5ea:	07d3      	lsls	r3, r2, #31
 800e5ec:	bf41      	itttt	mi
 800e5ee:	2300      	movmi	r3, #0
 800e5f0:	426d      	negmi	r5, r5
 800e5f2:	60a3      	strmi	r3, [r4, #8]
 800e5f4:	61a5      	strmi	r5, [r4, #24]
 800e5f6:	bf58      	it	pl
 800e5f8:	60a5      	strpl	r5, [r4, #8]
 800e5fa:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800e5fc:	f015 0501 	ands.w	r5, r5, #1
 800e600:	d115      	bne.n	800e62e <setvbuf+0x176>
 800e602:	f412 7f00 	tst.w	r2, #512	; 0x200
 800e606:	e7c8      	b.n	800e59a <setvbuf+0xe2>
 800e608:	4648      	mov	r0, r9
 800e60a:	f7ff fe27 	bl	800e25c <malloc>
 800e60e:	4606      	mov	r6, r0
 800e610:	2800      	cmp	r0, #0
 800e612:	d0ae      	beq.n	800e572 <setvbuf+0xba>
 800e614:	464d      	mov	r5, r9
 800e616:	89a3      	ldrh	r3, [r4, #12]
 800e618:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e61c:	81a3      	strh	r3, [r4, #12]
 800e61e:	e7d0      	b.n	800e5c2 <setvbuf+0x10a>
 800e620:	2500      	movs	r5, #0
 800e622:	e7a8      	b.n	800e576 <setvbuf+0xbe>
 800e624:	60a3      	str	r3, [r4, #8]
 800e626:	e7e8      	b.n	800e5fa <setvbuf+0x142>
 800e628:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800e62c:	e7b9      	b.n	800e5a2 <setvbuf+0xea>
 800e62e:	2500      	movs	r5, #0
 800e630:	e7b7      	b.n	800e5a2 <setvbuf+0xea>
 800e632:	bf00      	nop
 800e634:	200000f4 	.word	0x200000f4
 800e638:	0800f4f0 	.word	0x0800f4f0
 800e63c:	0800f510 	.word	0x0800f510
 800e640:	0800f4d0 	.word	0x0800f4d0

0800e644 <__sflush_r>:
 800e644:	898a      	ldrh	r2, [r1, #12]
 800e646:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e64a:	4605      	mov	r5, r0
 800e64c:	0710      	lsls	r0, r2, #28
 800e64e:	460c      	mov	r4, r1
 800e650:	d458      	bmi.n	800e704 <__sflush_r+0xc0>
 800e652:	684b      	ldr	r3, [r1, #4]
 800e654:	2b00      	cmp	r3, #0
 800e656:	dc05      	bgt.n	800e664 <__sflush_r+0x20>
 800e658:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	dc02      	bgt.n	800e664 <__sflush_r+0x20>
 800e65e:	2000      	movs	r0, #0
 800e660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e664:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e666:	2e00      	cmp	r6, #0
 800e668:	d0f9      	beq.n	800e65e <__sflush_r+0x1a>
 800e66a:	2300      	movs	r3, #0
 800e66c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e670:	682f      	ldr	r7, [r5, #0]
 800e672:	602b      	str	r3, [r5, #0]
 800e674:	d032      	beq.n	800e6dc <__sflush_r+0x98>
 800e676:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e678:	89a3      	ldrh	r3, [r4, #12]
 800e67a:	075a      	lsls	r2, r3, #29
 800e67c:	d505      	bpl.n	800e68a <__sflush_r+0x46>
 800e67e:	6863      	ldr	r3, [r4, #4]
 800e680:	1ac0      	subs	r0, r0, r3
 800e682:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e684:	b10b      	cbz	r3, 800e68a <__sflush_r+0x46>
 800e686:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e688:	1ac0      	subs	r0, r0, r3
 800e68a:	2300      	movs	r3, #0
 800e68c:	4602      	mov	r2, r0
 800e68e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e690:	6a21      	ldr	r1, [r4, #32]
 800e692:	4628      	mov	r0, r5
 800e694:	47b0      	blx	r6
 800e696:	1c43      	adds	r3, r0, #1
 800e698:	89a3      	ldrh	r3, [r4, #12]
 800e69a:	d106      	bne.n	800e6aa <__sflush_r+0x66>
 800e69c:	6829      	ldr	r1, [r5, #0]
 800e69e:	291d      	cmp	r1, #29
 800e6a0:	d82c      	bhi.n	800e6fc <__sflush_r+0xb8>
 800e6a2:	4a2a      	ldr	r2, [pc, #168]	; (800e74c <__sflush_r+0x108>)
 800e6a4:	40ca      	lsrs	r2, r1
 800e6a6:	07d6      	lsls	r6, r2, #31
 800e6a8:	d528      	bpl.n	800e6fc <__sflush_r+0xb8>
 800e6aa:	2200      	movs	r2, #0
 800e6ac:	6062      	str	r2, [r4, #4]
 800e6ae:	04d9      	lsls	r1, r3, #19
 800e6b0:	6922      	ldr	r2, [r4, #16]
 800e6b2:	6022      	str	r2, [r4, #0]
 800e6b4:	d504      	bpl.n	800e6c0 <__sflush_r+0x7c>
 800e6b6:	1c42      	adds	r2, r0, #1
 800e6b8:	d101      	bne.n	800e6be <__sflush_r+0x7a>
 800e6ba:	682b      	ldr	r3, [r5, #0]
 800e6bc:	b903      	cbnz	r3, 800e6c0 <__sflush_r+0x7c>
 800e6be:	6560      	str	r0, [r4, #84]	; 0x54
 800e6c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e6c2:	602f      	str	r7, [r5, #0]
 800e6c4:	2900      	cmp	r1, #0
 800e6c6:	d0ca      	beq.n	800e65e <__sflush_r+0x1a>
 800e6c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e6cc:	4299      	cmp	r1, r3
 800e6ce:	d002      	beq.n	800e6d6 <__sflush_r+0x92>
 800e6d0:	4628      	mov	r0, r5
 800e6d2:	f7ff fde9 	bl	800e2a8 <_free_r>
 800e6d6:	2000      	movs	r0, #0
 800e6d8:	6360      	str	r0, [r4, #52]	; 0x34
 800e6da:	e7c1      	b.n	800e660 <__sflush_r+0x1c>
 800e6dc:	6a21      	ldr	r1, [r4, #32]
 800e6de:	2301      	movs	r3, #1
 800e6e0:	4628      	mov	r0, r5
 800e6e2:	47b0      	blx	r6
 800e6e4:	1c41      	adds	r1, r0, #1
 800e6e6:	d1c7      	bne.n	800e678 <__sflush_r+0x34>
 800e6e8:	682b      	ldr	r3, [r5, #0]
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d0c4      	beq.n	800e678 <__sflush_r+0x34>
 800e6ee:	2b1d      	cmp	r3, #29
 800e6f0:	d001      	beq.n	800e6f6 <__sflush_r+0xb2>
 800e6f2:	2b16      	cmp	r3, #22
 800e6f4:	d101      	bne.n	800e6fa <__sflush_r+0xb6>
 800e6f6:	602f      	str	r7, [r5, #0]
 800e6f8:	e7b1      	b.n	800e65e <__sflush_r+0x1a>
 800e6fa:	89a3      	ldrh	r3, [r4, #12]
 800e6fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e700:	81a3      	strh	r3, [r4, #12]
 800e702:	e7ad      	b.n	800e660 <__sflush_r+0x1c>
 800e704:	690f      	ldr	r7, [r1, #16]
 800e706:	2f00      	cmp	r7, #0
 800e708:	d0a9      	beq.n	800e65e <__sflush_r+0x1a>
 800e70a:	0793      	lsls	r3, r2, #30
 800e70c:	680e      	ldr	r6, [r1, #0]
 800e70e:	bf08      	it	eq
 800e710:	694b      	ldreq	r3, [r1, #20]
 800e712:	600f      	str	r7, [r1, #0]
 800e714:	bf18      	it	ne
 800e716:	2300      	movne	r3, #0
 800e718:	eba6 0807 	sub.w	r8, r6, r7
 800e71c:	608b      	str	r3, [r1, #8]
 800e71e:	f1b8 0f00 	cmp.w	r8, #0
 800e722:	dd9c      	ble.n	800e65e <__sflush_r+0x1a>
 800e724:	6a21      	ldr	r1, [r4, #32]
 800e726:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e728:	4643      	mov	r3, r8
 800e72a:	463a      	mov	r2, r7
 800e72c:	4628      	mov	r0, r5
 800e72e:	47b0      	blx	r6
 800e730:	2800      	cmp	r0, #0
 800e732:	dc06      	bgt.n	800e742 <__sflush_r+0xfe>
 800e734:	89a3      	ldrh	r3, [r4, #12]
 800e736:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e73a:	81a3      	strh	r3, [r4, #12]
 800e73c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e740:	e78e      	b.n	800e660 <__sflush_r+0x1c>
 800e742:	4407      	add	r7, r0
 800e744:	eba8 0800 	sub.w	r8, r8, r0
 800e748:	e7e9      	b.n	800e71e <__sflush_r+0xda>
 800e74a:	bf00      	nop
 800e74c:	20400001 	.word	0x20400001

0800e750 <_fflush_r>:
 800e750:	b538      	push	{r3, r4, r5, lr}
 800e752:	690b      	ldr	r3, [r1, #16]
 800e754:	4605      	mov	r5, r0
 800e756:	460c      	mov	r4, r1
 800e758:	b913      	cbnz	r3, 800e760 <_fflush_r+0x10>
 800e75a:	2500      	movs	r5, #0
 800e75c:	4628      	mov	r0, r5
 800e75e:	bd38      	pop	{r3, r4, r5, pc}
 800e760:	b118      	cbz	r0, 800e76a <_fflush_r+0x1a>
 800e762:	6983      	ldr	r3, [r0, #24]
 800e764:	b90b      	cbnz	r3, 800e76a <_fflush_r+0x1a>
 800e766:	f000 f887 	bl	800e878 <__sinit>
 800e76a:	4b14      	ldr	r3, [pc, #80]	; (800e7bc <_fflush_r+0x6c>)
 800e76c:	429c      	cmp	r4, r3
 800e76e:	d11b      	bne.n	800e7a8 <_fflush_r+0x58>
 800e770:	686c      	ldr	r4, [r5, #4]
 800e772:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e776:	2b00      	cmp	r3, #0
 800e778:	d0ef      	beq.n	800e75a <_fflush_r+0xa>
 800e77a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e77c:	07d0      	lsls	r0, r2, #31
 800e77e:	d404      	bmi.n	800e78a <_fflush_r+0x3a>
 800e780:	0599      	lsls	r1, r3, #22
 800e782:	d402      	bmi.n	800e78a <_fflush_r+0x3a>
 800e784:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e786:	f000 f915 	bl	800e9b4 <__retarget_lock_acquire_recursive>
 800e78a:	4628      	mov	r0, r5
 800e78c:	4621      	mov	r1, r4
 800e78e:	f7ff ff59 	bl	800e644 <__sflush_r>
 800e792:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e794:	07da      	lsls	r2, r3, #31
 800e796:	4605      	mov	r5, r0
 800e798:	d4e0      	bmi.n	800e75c <_fflush_r+0xc>
 800e79a:	89a3      	ldrh	r3, [r4, #12]
 800e79c:	059b      	lsls	r3, r3, #22
 800e79e:	d4dd      	bmi.n	800e75c <_fflush_r+0xc>
 800e7a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e7a2:	f000 f908 	bl	800e9b6 <__retarget_lock_release_recursive>
 800e7a6:	e7d9      	b.n	800e75c <_fflush_r+0xc>
 800e7a8:	4b05      	ldr	r3, [pc, #20]	; (800e7c0 <_fflush_r+0x70>)
 800e7aa:	429c      	cmp	r4, r3
 800e7ac:	d101      	bne.n	800e7b2 <_fflush_r+0x62>
 800e7ae:	68ac      	ldr	r4, [r5, #8]
 800e7b0:	e7df      	b.n	800e772 <_fflush_r+0x22>
 800e7b2:	4b04      	ldr	r3, [pc, #16]	; (800e7c4 <_fflush_r+0x74>)
 800e7b4:	429c      	cmp	r4, r3
 800e7b6:	bf08      	it	eq
 800e7b8:	68ec      	ldreq	r4, [r5, #12]
 800e7ba:	e7da      	b.n	800e772 <_fflush_r+0x22>
 800e7bc:	0800f4f0 	.word	0x0800f4f0
 800e7c0:	0800f510 	.word	0x0800f510
 800e7c4:	0800f4d0 	.word	0x0800f4d0

0800e7c8 <std>:
 800e7c8:	2300      	movs	r3, #0
 800e7ca:	b510      	push	{r4, lr}
 800e7cc:	4604      	mov	r4, r0
 800e7ce:	e9c0 3300 	strd	r3, r3, [r0]
 800e7d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e7d6:	6083      	str	r3, [r0, #8]
 800e7d8:	8181      	strh	r1, [r0, #12]
 800e7da:	6643      	str	r3, [r0, #100]	; 0x64
 800e7dc:	81c2      	strh	r2, [r0, #14]
 800e7de:	6183      	str	r3, [r0, #24]
 800e7e0:	4619      	mov	r1, r3
 800e7e2:	2208      	movs	r2, #8
 800e7e4:	305c      	adds	r0, #92	; 0x5c
 800e7e6:	f7ff fd57 	bl	800e298 <memset>
 800e7ea:	4b05      	ldr	r3, [pc, #20]	; (800e800 <std+0x38>)
 800e7ec:	6263      	str	r3, [r4, #36]	; 0x24
 800e7ee:	4b05      	ldr	r3, [pc, #20]	; (800e804 <std+0x3c>)
 800e7f0:	62a3      	str	r3, [r4, #40]	; 0x28
 800e7f2:	4b05      	ldr	r3, [pc, #20]	; (800e808 <std+0x40>)
 800e7f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e7f6:	4b05      	ldr	r3, [pc, #20]	; (800e80c <std+0x44>)
 800e7f8:	6224      	str	r4, [r4, #32]
 800e7fa:	6323      	str	r3, [r4, #48]	; 0x30
 800e7fc:	bd10      	pop	{r4, pc}
 800e7fe:	bf00      	nop
 800e800:	0800f079 	.word	0x0800f079
 800e804:	0800f09b 	.word	0x0800f09b
 800e808:	0800f0d3 	.word	0x0800f0d3
 800e80c:	0800f0f7 	.word	0x0800f0f7

0800e810 <_cleanup_r>:
 800e810:	4901      	ldr	r1, [pc, #4]	; (800e818 <_cleanup_r+0x8>)
 800e812:	f000 b8af 	b.w	800e974 <_fwalk_reent>
 800e816:	bf00      	nop
 800e818:	0800e751 	.word	0x0800e751

0800e81c <__sfmoreglue>:
 800e81c:	b570      	push	{r4, r5, r6, lr}
 800e81e:	2268      	movs	r2, #104	; 0x68
 800e820:	1e4d      	subs	r5, r1, #1
 800e822:	4355      	muls	r5, r2
 800e824:	460e      	mov	r6, r1
 800e826:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e82a:	f7ff fda9 	bl	800e380 <_malloc_r>
 800e82e:	4604      	mov	r4, r0
 800e830:	b140      	cbz	r0, 800e844 <__sfmoreglue+0x28>
 800e832:	2100      	movs	r1, #0
 800e834:	e9c0 1600 	strd	r1, r6, [r0]
 800e838:	300c      	adds	r0, #12
 800e83a:	60a0      	str	r0, [r4, #8]
 800e83c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e840:	f7ff fd2a 	bl	800e298 <memset>
 800e844:	4620      	mov	r0, r4
 800e846:	bd70      	pop	{r4, r5, r6, pc}

0800e848 <__sfp_lock_acquire>:
 800e848:	4801      	ldr	r0, [pc, #4]	; (800e850 <__sfp_lock_acquire+0x8>)
 800e84a:	f000 b8b3 	b.w	800e9b4 <__retarget_lock_acquire_recursive>
 800e84e:	bf00      	nop
 800e850:	20003c11 	.word	0x20003c11

0800e854 <__sfp_lock_release>:
 800e854:	4801      	ldr	r0, [pc, #4]	; (800e85c <__sfp_lock_release+0x8>)
 800e856:	f000 b8ae 	b.w	800e9b6 <__retarget_lock_release_recursive>
 800e85a:	bf00      	nop
 800e85c:	20003c11 	.word	0x20003c11

0800e860 <__sinit_lock_acquire>:
 800e860:	4801      	ldr	r0, [pc, #4]	; (800e868 <__sinit_lock_acquire+0x8>)
 800e862:	f000 b8a7 	b.w	800e9b4 <__retarget_lock_acquire_recursive>
 800e866:	bf00      	nop
 800e868:	20003c12 	.word	0x20003c12

0800e86c <__sinit_lock_release>:
 800e86c:	4801      	ldr	r0, [pc, #4]	; (800e874 <__sinit_lock_release+0x8>)
 800e86e:	f000 b8a2 	b.w	800e9b6 <__retarget_lock_release_recursive>
 800e872:	bf00      	nop
 800e874:	20003c12 	.word	0x20003c12

0800e878 <__sinit>:
 800e878:	b510      	push	{r4, lr}
 800e87a:	4604      	mov	r4, r0
 800e87c:	f7ff fff0 	bl	800e860 <__sinit_lock_acquire>
 800e880:	69a3      	ldr	r3, [r4, #24]
 800e882:	b11b      	cbz	r3, 800e88c <__sinit+0x14>
 800e884:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e888:	f7ff bff0 	b.w	800e86c <__sinit_lock_release>
 800e88c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e890:	6523      	str	r3, [r4, #80]	; 0x50
 800e892:	4b13      	ldr	r3, [pc, #76]	; (800e8e0 <__sinit+0x68>)
 800e894:	4a13      	ldr	r2, [pc, #76]	; (800e8e4 <__sinit+0x6c>)
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	62a2      	str	r2, [r4, #40]	; 0x28
 800e89a:	42a3      	cmp	r3, r4
 800e89c:	bf04      	itt	eq
 800e89e:	2301      	moveq	r3, #1
 800e8a0:	61a3      	streq	r3, [r4, #24]
 800e8a2:	4620      	mov	r0, r4
 800e8a4:	f000 f820 	bl	800e8e8 <__sfp>
 800e8a8:	6060      	str	r0, [r4, #4]
 800e8aa:	4620      	mov	r0, r4
 800e8ac:	f000 f81c 	bl	800e8e8 <__sfp>
 800e8b0:	60a0      	str	r0, [r4, #8]
 800e8b2:	4620      	mov	r0, r4
 800e8b4:	f000 f818 	bl	800e8e8 <__sfp>
 800e8b8:	2200      	movs	r2, #0
 800e8ba:	60e0      	str	r0, [r4, #12]
 800e8bc:	2104      	movs	r1, #4
 800e8be:	6860      	ldr	r0, [r4, #4]
 800e8c0:	f7ff ff82 	bl	800e7c8 <std>
 800e8c4:	68a0      	ldr	r0, [r4, #8]
 800e8c6:	2201      	movs	r2, #1
 800e8c8:	2109      	movs	r1, #9
 800e8ca:	f7ff ff7d 	bl	800e7c8 <std>
 800e8ce:	68e0      	ldr	r0, [r4, #12]
 800e8d0:	2202      	movs	r2, #2
 800e8d2:	2112      	movs	r1, #18
 800e8d4:	f7ff ff78 	bl	800e7c8 <std>
 800e8d8:	2301      	movs	r3, #1
 800e8da:	61a3      	str	r3, [r4, #24]
 800e8dc:	e7d2      	b.n	800e884 <__sinit+0xc>
 800e8de:	bf00      	nop
 800e8e0:	0800f4cc 	.word	0x0800f4cc
 800e8e4:	0800e811 	.word	0x0800e811

0800e8e8 <__sfp>:
 800e8e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8ea:	4607      	mov	r7, r0
 800e8ec:	f7ff ffac 	bl	800e848 <__sfp_lock_acquire>
 800e8f0:	4b1e      	ldr	r3, [pc, #120]	; (800e96c <__sfp+0x84>)
 800e8f2:	681e      	ldr	r6, [r3, #0]
 800e8f4:	69b3      	ldr	r3, [r6, #24]
 800e8f6:	b913      	cbnz	r3, 800e8fe <__sfp+0x16>
 800e8f8:	4630      	mov	r0, r6
 800e8fa:	f7ff ffbd 	bl	800e878 <__sinit>
 800e8fe:	3648      	adds	r6, #72	; 0x48
 800e900:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e904:	3b01      	subs	r3, #1
 800e906:	d503      	bpl.n	800e910 <__sfp+0x28>
 800e908:	6833      	ldr	r3, [r6, #0]
 800e90a:	b30b      	cbz	r3, 800e950 <__sfp+0x68>
 800e90c:	6836      	ldr	r6, [r6, #0]
 800e90e:	e7f7      	b.n	800e900 <__sfp+0x18>
 800e910:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e914:	b9d5      	cbnz	r5, 800e94c <__sfp+0x64>
 800e916:	4b16      	ldr	r3, [pc, #88]	; (800e970 <__sfp+0x88>)
 800e918:	60e3      	str	r3, [r4, #12]
 800e91a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e91e:	6665      	str	r5, [r4, #100]	; 0x64
 800e920:	f000 f847 	bl	800e9b2 <__retarget_lock_init_recursive>
 800e924:	f7ff ff96 	bl	800e854 <__sfp_lock_release>
 800e928:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e92c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e930:	6025      	str	r5, [r4, #0]
 800e932:	61a5      	str	r5, [r4, #24]
 800e934:	2208      	movs	r2, #8
 800e936:	4629      	mov	r1, r5
 800e938:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e93c:	f7ff fcac 	bl	800e298 <memset>
 800e940:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e944:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e948:	4620      	mov	r0, r4
 800e94a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e94c:	3468      	adds	r4, #104	; 0x68
 800e94e:	e7d9      	b.n	800e904 <__sfp+0x1c>
 800e950:	2104      	movs	r1, #4
 800e952:	4638      	mov	r0, r7
 800e954:	f7ff ff62 	bl	800e81c <__sfmoreglue>
 800e958:	4604      	mov	r4, r0
 800e95a:	6030      	str	r0, [r6, #0]
 800e95c:	2800      	cmp	r0, #0
 800e95e:	d1d5      	bne.n	800e90c <__sfp+0x24>
 800e960:	f7ff ff78 	bl	800e854 <__sfp_lock_release>
 800e964:	230c      	movs	r3, #12
 800e966:	603b      	str	r3, [r7, #0]
 800e968:	e7ee      	b.n	800e948 <__sfp+0x60>
 800e96a:	bf00      	nop
 800e96c:	0800f4cc 	.word	0x0800f4cc
 800e970:	ffff0001 	.word	0xffff0001

0800e974 <_fwalk_reent>:
 800e974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e978:	4606      	mov	r6, r0
 800e97a:	4688      	mov	r8, r1
 800e97c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e980:	2700      	movs	r7, #0
 800e982:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e986:	f1b9 0901 	subs.w	r9, r9, #1
 800e98a:	d505      	bpl.n	800e998 <_fwalk_reent+0x24>
 800e98c:	6824      	ldr	r4, [r4, #0]
 800e98e:	2c00      	cmp	r4, #0
 800e990:	d1f7      	bne.n	800e982 <_fwalk_reent+0xe>
 800e992:	4638      	mov	r0, r7
 800e994:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e998:	89ab      	ldrh	r3, [r5, #12]
 800e99a:	2b01      	cmp	r3, #1
 800e99c:	d907      	bls.n	800e9ae <_fwalk_reent+0x3a>
 800e99e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e9a2:	3301      	adds	r3, #1
 800e9a4:	d003      	beq.n	800e9ae <_fwalk_reent+0x3a>
 800e9a6:	4629      	mov	r1, r5
 800e9a8:	4630      	mov	r0, r6
 800e9aa:	47c0      	blx	r8
 800e9ac:	4307      	orrs	r7, r0
 800e9ae:	3568      	adds	r5, #104	; 0x68
 800e9b0:	e7e9      	b.n	800e986 <_fwalk_reent+0x12>

0800e9b2 <__retarget_lock_init_recursive>:
 800e9b2:	4770      	bx	lr

0800e9b4 <__retarget_lock_acquire_recursive>:
 800e9b4:	4770      	bx	lr

0800e9b6 <__retarget_lock_release_recursive>:
 800e9b6:	4770      	bx	lr

0800e9b8 <__swhatbuf_r>:
 800e9b8:	b570      	push	{r4, r5, r6, lr}
 800e9ba:	460e      	mov	r6, r1
 800e9bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e9c0:	2900      	cmp	r1, #0
 800e9c2:	b096      	sub	sp, #88	; 0x58
 800e9c4:	4614      	mov	r4, r2
 800e9c6:	461d      	mov	r5, r3
 800e9c8:	da08      	bge.n	800e9dc <__swhatbuf_r+0x24>
 800e9ca:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e9ce:	2200      	movs	r2, #0
 800e9d0:	602a      	str	r2, [r5, #0]
 800e9d2:	061a      	lsls	r2, r3, #24
 800e9d4:	d410      	bmi.n	800e9f8 <__swhatbuf_r+0x40>
 800e9d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e9da:	e00e      	b.n	800e9fa <__swhatbuf_r+0x42>
 800e9dc:	466a      	mov	r2, sp
 800e9de:	f000 fc71 	bl	800f2c4 <_fstat_r>
 800e9e2:	2800      	cmp	r0, #0
 800e9e4:	dbf1      	blt.n	800e9ca <__swhatbuf_r+0x12>
 800e9e6:	9a01      	ldr	r2, [sp, #4]
 800e9e8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e9ec:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e9f0:	425a      	negs	r2, r3
 800e9f2:	415a      	adcs	r2, r3
 800e9f4:	602a      	str	r2, [r5, #0]
 800e9f6:	e7ee      	b.n	800e9d6 <__swhatbuf_r+0x1e>
 800e9f8:	2340      	movs	r3, #64	; 0x40
 800e9fa:	2000      	movs	r0, #0
 800e9fc:	6023      	str	r3, [r4, #0]
 800e9fe:	b016      	add	sp, #88	; 0x58
 800ea00:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ea04 <__smakebuf_r>:
 800ea04:	898b      	ldrh	r3, [r1, #12]
 800ea06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ea08:	079d      	lsls	r5, r3, #30
 800ea0a:	4606      	mov	r6, r0
 800ea0c:	460c      	mov	r4, r1
 800ea0e:	d507      	bpl.n	800ea20 <__smakebuf_r+0x1c>
 800ea10:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ea14:	6023      	str	r3, [r4, #0]
 800ea16:	6123      	str	r3, [r4, #16]
 800ea18:	2301      	movs	r3, #1
 800ea1a:	6163      	str	r3, [r4, #20]
 800ea1c:	b002      	add	sp, #8
 800ea1e:	bd70      	pop	{r4, r5, r6, pc}
 800ea20:	ab01      	add	r3, sp, #4
 800ea22:	466a      	mov	r2, sp
 800ea24:	f7ff ffc8 	bl	800e9b8 <__swhatbuf_r>
 800ea28:	9900      	ldr	r1, [sp, #0]
 800ea2a:	4605      	mov	r5, r0
 800ea2c:	4630      	mov	r0, r6
 800ea2e:	f7ff fca7 	bl	800e380 <_malloc_r>
 800ea32:	b948      	cbnz	r0, 800ea48 <__smakebuf_r+0x44>
 800ea34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ea38:	059a      	lsls	r2, r3, #22
 800ea3a:	d4ef      	bmi.n	800ea1c <__smakebuf_r+0x18>
 800ea3c:	f023 0303 	bic.w	r3, r3, #3
 800ea40:	f043 0302 	orr.w	r3, r3, #2
 800ea44:	81a3      	strh	r3, [r4, #12]
 800ea46:	e7e3      	b.n	800ea10 <__smakebuf_r+0xc>
 800ea48:	4b0d      	ldr	r3, [pc, #52]	; (800ea80 <__smakebuf_r+0x7c>)
 800ea4a:	62b3      	str	r3, [r6, #40]	; 0x28
 800ea4c:	89a3      	ldrh	r3, [r4, #12]
 800ea4e:	6020      	str	r0, [r4, #0]
 800ea50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ea54:	81a3      	strh	r3, [r4, #12]
 800ea56:	9b00      	ldr	r3, [sp, #0]
 800ea58:	6163      	str	r3, [r4, #20]
 800ea5a:	9b01      	ldr	r3, [sp, #4]
 800ea5c:	6120      	str	r0, [r4, #16]
 800ea5e:	b15b      	cbz	r3, 800ea78 <__smakebuf_r+0x74>
 800ea60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ea64:	4630      	mov	r0, r6
 800ea66:	f000 fc3f 	bl	800f2e8 <_isatty_r>
 800ea6a:	b128      	cbz	r0, 800ea78 <__smakebuf_r+0x74>
 800ea6c:	89a3      	ldrh	r3, [r4, #12]
 800ea6e:	f023 0303 	bic.w	r3, r3, #3
 800ea72:	f043 0301 	orr.w	r3, r3, #1
 800ea76:	81a3      	strh	r3, [r4, #12]
 800ea78:	89a0      	ldrh	r0, [r4, #12]
 800ea7a:	4305      	orrs	r5, r0
 800ea7c:	81a5      	strh	r5, [r4, #12]
 800ea7e:	e7cd      	b.n	800ea1c <__smakebuf_r+0x18>
 800ea80:	0800e811 	.word	0x0800e811

0800ea84 <__malloc_lock>:
 800ea84:	4801      	ldr	r0, [pc, #4]	; (800ea8c <__malloc_lock+0x8>)
 800ea86:	f7ff bf95 	b.w	800e9b4 <__retarget_lock_acquire_recursive>
 800ea8a:	bf00      	nop
 800ea8c:	20003c10 	.word	0x20003c10

0800ea90 <__malloc_unlock>:
 800ea90:	4801      	ldr	r0, [pc, #4]	; (800ea98 <__malloc_unlock+0x8>)
 800ea92:	f7ff bf90 	b.w	800e9b6 <__retarget_lock_release_recursive>
 800ea96:	bf00      	nop
 800ea98:	20003c10 	.word	0x20003c10

0800ea9c <__sfputc_r>:
 800ea9c:	6893      	ldr	r3, [r2, #8]
 800ea9e:	3b01      	subs	r3, #1
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	b410      	push	{r4}
 800eaa4:	6093      	str	r3, [r2, #8]
 800eaa6:	da08      	bge.n	800eaba <__sfputc_r+0x1e>
 800eaa8:	6994      	ldr	r4, [r2, #24]
 800eaaa:	42a3      	cmp	r3, r4
 800eaac:	db01      	blt.n	800eab2 <__sfputc_r+0x16>
 800eaae:	290a      	cmp	r1, #10
 800eab0:	d103      	bne.n	800eaba <__sfputc_r+0x1e>
 800eab2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eab6:	f000 bb23 	b.w	800f100 <__swbuf_r>
 800eaba:	6813      	ldr	r3, [r2, #0]
 800eabc:	1c58      	adds	r0, r3, #1
 800eabe:	6010      	str	r0, [r2, #0]
 800eac0:	7019      	strb	r1, [r3, #0]
 800eac2:	4608      	mov	r0, r1
 800eac4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eac8:	4770      	bx	lr

0800eaca <__sfputs_r>:
 800eaca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eacc:	4606      	mov	r6, r0
 800eace:	460f      	mov	r7, r1
 800ead0:	4614      	mov	r4, r2
 800ead2:	18d5      	adds	r5, r2, r3
 800ead4:	42ac      	cmp	r4, r5
 800ead6:	d101      	bne.n	800eadc <__sfputs_r+0x12>
 800ead8:	2000      	movs	r0, #0
 800eada:	e007      	b.n	800eaec <__sfputs_r+0x22>
 800eadc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eae0:	463a      	mov	r2, r7
 800eae2:	4630      	mov	r0, r6
 800eae4:	f7ff ffda 	bl	800ea9c <__sfputc_r>
 800eae8:	1c43      	adds	r3, r0, #1
 800eaea:	d1f3      	bne.n	800ead4 <__sfputs_r+0xa>
 800eaec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800eaf0 <_vfiprintf_r>:
 800eaf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eaf4:	460d      	mov	r5, r1
 800eaf6:	b09d      	sub	sp, #116	; 0x74
 800eaf8:	4614      	mov	r4, r2
 800eafa:	4698      	mov	r8, r3
 800eafc:	4606      	mov	r6, r0
 800eafe:	b118      	cbz	r0, 800eb08 <_vfiprintf_r+0x18>
 800eb00:	6983      	ldr	r3, [r0, #24]
 800eb02:	b90b      	cbnz	r3, 800eb08 <_vfiprintf_r+0x18>
 800eb04:	f7ff feb8 	bl	800e878 <__sinit>
 800eb08:	4b89      	ldr	r3, [pc, #548]	; (800ed30 <_vfiprintf_r+0x240>)
 800eb0a:	429d      	cmp	r5, r3
 800eb0c:	d11b      	bne.n	800eb46 <_vfiprintf_r+0x56>
 800eb0e:	6875      	ldr	r5, [r6, #4]
 800eb10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eb12:	07d9      	lsls	r1, r3, #31
 800eb14:	d405      	bmi.n	800eb22 <_vfiprintf_r+0x32>
 800eb16:	89ab      	ldrh	r3, [r5, #12]
 800eb18:	059a      	lsls	r2, r3, #22
 800eb1a:	d402      	bmi.n	800eb22 <_vfiprintf_r+0x32>
 800eb1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eb1e:	f7ff ff49 	bl	800e9b4 <__retarget_lock_acquire_recursive>
 800eb22:	89ab      	ldrh	r3, [r5, #12]
 800eb24:	071b      	lsls	r3, r3, #28
 800eb26:	d501      	bpl.n	800eb2c <_vfiprintf_r+0x3c>
 800eb28:	692b      	ldr	r3, [r5, #16]
 800eb2a:	b9eb      	cbnz	r3, 800eb68 <_vfiprintf_r+0x78>
 800eb2c:	4629      	mov	r1, r5
 800eb2e:	4630      	mov	r0, r6
 800eb30:	f000 fb4a 	bl	800f1c8 <__swsetup_r>
 800eb34:	b1c0      	cbz	r0, 800eb68 <_vfiprintf_r+0x78>
 800eb36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eb38:	07dc      	lsls	r4, r3, #31
 800eb3a:	d50e      	bpl.n	800eb5a <_vfiprintf_r+0x6a>
 800eb3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800eb40:	b01d      	add	sp, #116	; 0x74
 800eb42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb46:	4b7b      	ldr	r3, [pc, #492]	; (800ed34 <_vfiprintf_r+0x244>)
 800eb48:	429d      	cmp	r5, r3
 800eb4a:	d101      	bne.n	800eb50 <_vfiprintf_r+0x60>
 800eb4c:	68b5      	ldr	r5, [r6, #8]
 800eb4e:	e7df      	b.n	800eb10 <_vfiprintf_r+0x20>
 800eb50:	4b79      	ldr	r3, [pc, #484]	; (800ed38 <_vfiprintf_r+0x248>)
 800eb52:	429d      	cmp	r5, r3
 800eb54:	bf08      	it	eq
 800eb56:	68f5      	ldreq	r5, [r6, #12]
 800eb58:	e7da      	b.n	800eb10 <_vfiprintf_r+0x20>
 800eb5a:	89ab      	ldrh	r3, [r5, #12]
 800eb5c:	0598      	lsls	r0, r3, #22
 800eb5e:	d4ed      	bmi.n	800eb3c <_vfiprintf_r+0x4c>
 800eb60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eb62:	f7ff ff28 	bl	800e9b6 <__retarget_lock_release_recursive>
 800eb66:	e7e9      	b.n	800eb3c <_vfiprintf_r+0x4c>
 800eb68:	2300      	movs	r3, #0
 800eb6a:	9309      	str	r3, [sp, #36]	; 0x24
 800eb6c:	2320      	movs	r3, #32
 800eb6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800eb72:	f8cd 800c 	str.w	r8, [sp, #12]
 800eb76:	2330      	movs	r3, #48	; 0x30
 800eb78:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ed3c <_vfiprintf_r+0x24c>
 800eb7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800eb80:	f04f 0901 	mov.w	r9, #1
 800eb84:	4623      	mov	r3, r4
 800eb86:	469a      	mov	sl, r3
 800eb88:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eb8c:	b10a      	cbz	r2, 800eb92 <_vfiprintf_r+0xa2>
 800eb8e:	2a25      	cmp	r2, #37	; 0x25
 800eb90:	d1f9      	bne.n	800eb86 <_vfiprintf_r+0x96>
 800eb92:	ebba 0b04 	subs.w	fp, sl, r4
 800eb96:	d00b      	beq.n	800ebb0 <_vfiprintf_r+0xc0>
 800eb98:	465b      	mov	r3, fp
 800eb9a:	4622      	mov	r2, r4
 800eb9c:	4629      	mov	r1, r5
 800eb9e:	4630      	mov	r0, r6
 800eba0:	f7ff ff93 	bl	800eaca <__sfputs_r>
 800eba4:	3001      	adds	r0, #1
 800eba6:	f000 80aa 	beq.w	800ecfe <_vfiprintf_r+0x20e>
 800ebaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ebac:	445a      	add	r2, fp
 800ebae:	9209      	str	r2, [sp, #36]	; 0x24
 800ebb0:	f89a 3000 	ldrb.w	r3, [sl]
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	f000 80a2 	beq.w	800ecfe <_vfiprintf_r+0x20e>
 800ebba:	2300      	movs	r3, #0
 800ebbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ebc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ebc4:	f10a 0a01 	add.w	sl, sl, #1
 800ebc8:	9304      	str	r3, [sp, #16]
 800ebca:	9307      	str	r3, [sp, #28]
 800ebcc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ebd0:	931a      	str	r3, [sp, #104]	; 0x68
 800ebd2:	4654      	mov	r4, sl
 800ebd4:	2205      	movs	r2, #5
 800ebd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ebda:	4858      	ldr	r0, [pc, #352]	; (800ed3c <_vfiprintf_r+0x24c>)
 800ebdc:	f7f1 fb08 	bl	80001f0 <memchr>
 800ebe0:	9a04      	ldr	r2, [sp, #16]
 800ebe2:	b9d8      	cbnz	r0, 800ec1c <_vfiprintf_r+0x12c>
 800ebe4:	06d1      	lsls	r1, r2, #27
 800ebe6:	bf44      	itt	mi
 800ebe8:	2320      	movmi	r3, #32
 800ebea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ebee:	0713      	lsls	r3, r2, #28
 800ebf0:	bf44      	itt	mi
 800ebf2:	232b      	movmi	r3, #43	; 0x2b
 800ebf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ebf8:	f89a 3000 	ldrb.w	r3, [sl]
 800ebfc:	2b2a      	cmp	r3, #42	; 0x2a
 800ebfe:	d015      	beq.n	800ec2c <_vfiprintf_r+0x13c>
 800ec00:	9a07      	ldr	r2, [sp, #28]
 800ec02:	4654      	mov	r4, sl
 800ec04:	2000      	movs	r0, #0
 800ec06:	f04f 0c0a 	mov.w	ip, #10
 800ec0a:	4621      	mov	r1, r4
 800ec0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ec10:	3b30      	subs	r3, #48	; 0x30
 800ec12:	2b09      	cmp	r3, #9
 800ec14:	d94e      	bls.n	800ecb4 <_vfiprintf_r+0x1c4>
 800ec16:	b1b0      	cbz	r0, 800ec46 <_vfiprintf_r+0x156>
 800ec18:	9207      	str	r2, [sp, #28]
 800ec1a:	e014      	b.n	800ec46 <_vfiprintf_r+0x156>
 800ec1c:	eba0 0308 	sub.w	r3, r0, r8
 800ec20:	fa09 f303 	lsl.w	r3, r9, r3
 800ec24:	4313      	orrs	r3, r2
 800ec26:	9304      	str	r3, [sp, #16]
 800ec28:	46a2      	mov	sl, r4
 800ec2a:	e7d2      	b.n	800ebd2 <_vfiprintf_r+0xe2>
 800ec2c:	9b03      	ldr	r3, [sp, #12]
 800ec2e:	1d19      	adds	r1, r3, #4
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	9103      	str	r1, [sp, #12]
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	bfbb      	ittet	lt
 800ec38:	425b      	neglt	r3, r3
 800ec3a:	f042 0202 	orrlt.w	r2, r2, #2
 800ec3e:	9307      	strge	r3, [sp, #28]
 800ec40:	9307      	strlt	r3, [sp, #28]
 800ec42:	bfb8      	it	lt
 800ec44:	9204      	strlt	r2, [sp, #16]
 800ec46:	7823      	ldrb	r3, [r4, #0]
 800ec48:	2b2e      	cmp	r3, #46	; 0x2e
 800ec4a:	d10c      	bne.n	800ec66 <_vfiprintf_r+0x176>
 800ec4c:	7863      	ldrb	r3, [r4, #1]
 800ec4e:	2b2a      	cmp	r3, #42	; 0x2a
 800ec50:	d135      	bne.n	800ecbe <_vfiprintf_r+0x1ce>
 800ec52:	9b03      	ldr	r3, [sp, #12]
 800ec54:	1d1a      	adds	r2, r3, #4
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	9203      	str	r2, [sp, #12]
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	bfb8      	it	lt
 800ec5e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ec62:	3402      	adds	r4, #2
 800ec64:	9305      	str	r3, [sp, #20]
 800ec66:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ed4c <_vfiprintf_r+0x25c>
 800ec6a:	7821      	ldrb	r1, [r4, #0]
 800ec6c:	2203      	movs	r2, #3
 800ec6e:	4650      	mov	r0, sl
 800ec70:	f7f1 fabe 	bl	80001f0 <memchr>
 800ec74:	b140      	cbz	r0, 800ec88 <_vfiprintf_r+0x198>
 800ec76:	2340      	movs	r3, #64	; 0x40
 800ec78:	eba0 000a 	sub.w	r0, r0, sl
 800ec7c:	fa03 f000 	lsl.w	r0, r3, r0
 800ec80:	9b04      	ldr	r3, [sp, #16]
 800ec82:	4303      	orrs	r3, r0
 800ec84:	3401      	adds	r4, #1
 800ec86:	9304      	str	r3, [sp, #16]
 800ec88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec8c:	482c      	ldr	r0, [pc, #176]	; (800ed40 <_vfiprintf_r+0x250>)
 800ec8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ec92:	2206      	movs	r2, #6
 800ec94:	f7f1 faac 	bl	80001f0 <memchr>
 800ec98:	2800      	cmp	r0, #0
 800ec9a:	d03f      	beq.n	800ed1c <_vfiprintf_r+0x22c>
 800ec9c:	4b29      	ldr	r3, [pc, #164]	; (800ed44 <_vfiprintf_r+0x254>)
 800ec9e:	bb1b      	cbnz	r3, 800ece8 <_vfiprintf_r+0x1f8>
 800eca0:	9b03      	ldr	r3, [sp, #12]
 800eca2:	3307      	adds	r3, #7
 800eca4:	f023 0307 	bic.w	r3, r3, #7
 800eca8:	3308      	adds	r3, #8
 800ecaa:	9303      	str	r3, [sp, #12]
 800ecac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ecae:	443b      	add	r3, r7
 800ecb0:	9309      	str	r3, [sp, #36]	; 0x24
 800ecb2:	e767      	b.n	800eb84 <_vfiprintf_r+0x94>
 800ecb4:	fb0c 3202 	mla	r2, ip, r2, r3
 800ecb8:	460c      	mov	r4, r1
 800ecba:	2001      	movs	r0, #1
 800ecbc:	e7a5      	b.n	800ec0a <_vfiprintf_r+0x11a>
 800ecbe:	2300      	movs	r3, #0
 800ecc0:	3401      	adds	r4, #1
 800ecc2:	9305      	str	r3, [sp, #20]
 800ecc4:	4619      	mov	r1, r3
 800ecc6:	f04f 0c0a 	mov.w	ip, #10
 800ecca:	4620      	mov	r0, r4
 800eccc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ecd0:	3a30      	subs	r2, #48	; 0x30
 800ecd2:	2a09      	cmp	r2, #9
 800ecd4:	d903      	bls.n	800ecde <_vfiprintf_r+0x1ee>
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d0c5      	beq.n	800ec66 <_vfiprintf_r+0x176>
 800ecda:	9105      	str	r1, [sp, #20]
 800ecdc:	e7c3      	b.n	800ec66 <_vfiprintf_r+0x176>
 800ecde:	fb0c 2101 	mla	r1, ip, r1, r2
 800ece2:	4604      	mov	r4, r0
 800ece4:	2301      	movs	r3, #1
 800ece6:	e7f0      	b.n	800ecca <_vfiprintf_r+0x1da>
 800ece8:	ab03      	add	r3, sp, #12
 800ecea:	9300      	str	r3, [sp, #0]
 800ecec:	462a      	mov	r2, r5
 800ecee:	4b16      	ldr	r3, [pc, #88]	; (800ed48 <_vfiprintf_r+0x258>)
 800ecf0:	a904      	add	r1, sp, #16
 800ecf2:	4630      	mov	r0, r6
 800ecf4:	f3af 8000 	nop.w
 800ecf8:	4607      	mov	r7, r0
 800ecfa:	1c78      	adds	r0, r7, #1
 800ecfc:	d1d6      	bne.n	800ecac <_vfiprintf_r+0x1bc>
 800ecfe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ed00:	07d9      	lsls	r1, r3, #31
 800ed02:	d405      	bmi.n	800ed10 <_vfiprintf_r+0x220>
 800ed04:	89ab      	ldrh	r3, [r5, #12]
 800ed06:	059a      	lsls	r2, r3, #22
 800ed08:	d402      	bmi.n	800ed10 <_vfiprintf_r+0x220>
 800ed0a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ed0c:	f7ff fe53 	bl	800e9b6 <__retarget_lock_release_recursive>
 800ed10:	89ab      	ldrh	r3, [r5, #12]
 800ed12:	065b      	lsls	r3, r3, #25
 800ed14:	f53f af12 	bmi.w	800eb3c <_vfiprintf_r+0x4c>
 800ed18:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ed1a:	e711      	b.n	800eb40 <_vfiprintf_r+0x50>
 800ed1c:	ab03      	add	r3, sp, #12
 800ed1e:	9300      	str	r3, [sp, #0]
 800ed20:	462a      	mov	r2, r5
 800ed22:	4b09      	ldr	r3, [pc, #36]	; (800ed48 <_vfiprintf_r+0x258>)
 800ed24:	a904      	add	r1, sp, #16
 800ed26:	4630      	mov	r0, r6
 800ed28:	f000 f880 	bl	800ee2c <_printf_i>
 800ed2c:	e7e4      	b.n	800ecf8 <_vfiprintf_r+0x208>
 800ed2e:	bf00      	nop
 800ed30:	0800f4f0 	.word	0x0800f4f0
 800ed34:	0800f510 	.word	0x0800f510
 800ed38:	0800f4d0 	.word	0x0800f4d0
 800ed3c:	0800f530 	.word	0x0800f530
 800ed40:	0800f53a 	.word	0x0800f53a
 800ed44:	00000000 	.word	0x00000000
 800ed48:	0800eacb 	.word	0x0800eacb
 800ed4c:	0800f536 	.word	0x0800f536

0800ed50 <_printf_common>:
 800ed50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed54:	4616      	mov	r6, r2
 800ed56:	4699      	mov	r9, r3
 800ed58:	688a      	ldr	r2, [r1, #8]
 800ed5a:	690b      	ldr	r3, [r1, #16]
 800ed5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ed60:	4293      	cmp	r3, r2
 800ed62:	bfb8      	it	lt
 800ed64:	4613      	movlt	r3, r2
 800ed66:	6033      	str	r3, [r6, #0]
 800ed68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ed6c:	4607      	mov	r7, r0
 800ed6e:	460c      	mov	r4, r1
 800ed70:	b10a      	cbz	r2, 800ed76 <_printf_common+0x26>
 800ed72:	3301      	adds	r3, #1
 800ed74:	6033      	str	r3, [r6, #0]
 800ed76:	6823      	ldr	r3, [r4, #0]
 800ed78:	0699      	lsls	r1, r3, #26
 800ed7a:	bf42      	ittt	mi
 800ed7c:	6833      	ldrmi	r3, [r6, #0]
 800ed7e:	3302      	addmi	r3, #2
 800ed80:	6033      	strmi	r3, [r6, #0]
 800ed82:	6825      	ldr	r5, [r4, #0]
 800ed84:	f015 0506 	ands.w	r5, r5, #6
 800ed88:	d106      	bne.n	800ed98 <_printf_common+0x48>
 800ed8a:	f104 0a19 	add.w	sl, r4, #25
 800ed8e:	68e3      	ldr	r3, [r4, #12]
 800ed90:	6832      	ldr	r2, [r6, #0]
 800ed92:	1a9b      	subs	r3, r3, r2
 800ed94:	42ab      	cmp	r3, r5
 800ed96:	dc26      	bgt.n	800ede6 <_printf_common+0x96>
 800ed98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ed9c:	1e13      	subs	r3, r2, #0
 800ed9e:	6822      	ldr	r2, [r4, #0]
 800eda0:	bf18      	it	ne
 800eda2:	2301      	movne	r3, #1
 800eda4:	0692      	lsls	r2, r2, #26
 800eda6:	d42b      	bmi.n	800ee00 <_printf_common+0xb0>
 800eda8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800edac:	4649      	mov	r1, r9
 800edae:	4638      	mov	r0, r7
 800edb0:	47c0      	blx	r8
 800edb2:	3001      	adds	r0, #1
 800edb4:	d01e      	beq.n	800edf4 <_printf_common+0xa4>
 800edb6:	6823      	ldr	r3, [r4, #0]
 800edb8:	68e5      	ldr	r5, [r4, #12]
 800edba:	6832      	ldr	r2, [r6, #0]
 800edbc:	f003 0306 	and.w	r3, r3, #6
 800edc0:	2b04      	cmp	r3, #4
 800edc2:	bf08      	it	eq
 800edc4:	1aad      	subeq	r5, r5, r2
 800edc6:	68a3      	ldr	r3, [r4, #8]
 800edc8:	6922      	ldr	r2, [r4, #16]
 800edca:	bf0c      	ite	eq
 800edcc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800edd0:	2500      	movne	r5, #0
 800edd2:	4293      	cmp	r3, r2
 800edd4:	bfc4      	itt	gt
 800edd6:	1a9b      	subgt	r3, r3, r2
 800edd8:	18ed      	addgt	r5, r5, r3
 800edda:	2600      	movs	r6, #0
 800eddc:	341a      	adds	r4, #26
 800edde:	42b5      	cmp	r5, r6
 800ede0:	d11a      	bne.n	800ee18 <_printf_common+0xc8>
 800ede2:	2000      	movs	r0, #0
 800ede4:	e008      	b.n	800edf8 <_printf_common+0xa8>
 800ede6:	2301      	movs	r3, #1
 800ede8:	4652      	mov	r2, sl
 800edea:	4649      	mov	r1, r9
 800edec:	4638      	mov	r0, r7
 800edee:	47c0      	blx	r8
 800edf0:	3001      	adds	r0, #1
 800edf2:	d103      	bne.n	800edfc <_printf_common+0xac>
 800edf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800edf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800edfc:	3501      	adds	r5, #1
 800edfe:	e7c6      	b.n	800ed8e <_printf_common+0x3e>
 800ee00:	18e1      	adds	r1, r4, r3
 800ee02:	1c5a      	adds	r2, r3, #1
 800ee04:	2030      	movs	r0, #48	; 0x30
 800ee06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ee0a:	4422      	add	r2, r4
 800ee0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ee10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ee14:	3302      	adds	r3, #2
 800ee16:	e7c7      	b.n	800eda8 <_printf_common+0x58>
 800ee18:	2301      	movs	r3, #1
 800ee1a:	4622      	mov	r2, r4
 800ee1c:	4649      	mov	r1, r9
 800ee1e:	4638      	mov	r0, r7
 800ee20:	47c0      	blx	r8
 800ee22:	3001      	adds	r0, #1
 800ee24:	d0e6      	beq.n	800edf4 <_printf_common+0xa4>
 800ee26:	3601      	adds	r6, #1
 800ee28:	e7d9      	b.n	800edde <_printf_common+0x8e>
	...

0800ee2c <_printf_i>:
 800ee2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ee30:	7e0f      	ldrb	r7, [r1, #24]
 800ee32:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ee34:	2f78      	cmp	r7, #120	; 0x78
 800ee36:	4691      	mov	r9, r2
 800ee38:	4680      	mov	r8, r0
 800ee3a:	460c      	mov	r4, r1
 800ee3c:	469a      	mov	sl, r3
 800ee3e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ee42:	d807      	bhi.n	800ee54 <_printf_i+0x28>
 800ee44:	2f62      	cmp	r7, #98	; 0x62
 800ee46:	d80a      	bhi.n	800ee5e <_printf_i+0x32>
 800ee48:	2f00      	cmp	r7, #0
 800ee4a:	f000 80d8 	beq.w	800effe <_printf_i+0x1d2>
 800ee4e:	2f58      	cmp	r7, #88	; 0x58
 800ee50:	f000 80a3 	beq.w	800ef9a <_printf_i+0x16e>
 800ee54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ee58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ee5c:	e03a      	b.n	800eed4 <_printf_i+0xa8>
 800ee5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ee62:	2b15      	cmp	r3, #21
 800ee64:	d8f6      	bhi.n	800ee54 <_printf_i+0x28>
 800ee66:	a101      	add	r1, pc, #4	; (adr r1, 800ee6c <_printf_i+0x40>)
 800ee68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ee6c:	0800eec5 	.word	0x0800eec5
 800ee70:	0800eed9 	.word	0x0800eed9
 800ee74:	0800ee55 	.word	0x0800ee55
 800ee78:	0800ee55 	.word	0x0800ee55
 800ee7c:	0800ee55 	.word	0x0800ee55
 800ee80:	0800ee55 	.word	0x0800ee55
 800ee84:	0800eed9 	.word	0x0800eed9
 800ee88:	0800ee55 	.word	0x0800ee55
 800ee8c:	0800ee55 	.word	0x0800ee55
 800ee90:	0800ee55 	.word	0x0800ee55
 800ee94:	0800ee55 	.word	0x0800ee55
 800ee98:	0800efe5 	.word	0x0800efe5
 800ee9c:	0800ef09 	.word	0x0800ef09
 800eea0:	0800efc7 	.word	0x0800efc7
 800eea4:	0800ee55 	.word	0x0800ee55
 800eea8:	0800ee55 	.word	0x0800ee55
 800eeac:	0800f007 	.word	0x0800f007
 800eeb0:	0800ee55 	.word	0x0800ee55
 800eeb4:	0800ef09 	.word	0x0800ef09
 800eeb8:	0800ee55 	.word	0x0800ee55
 800eebc:	0800ee55 	.word	0x0800ee55
 800eec0:	0800efcf 	.word	0x0800efcf
 800eec4:	682b      	ldr	r3, [r5, #0]
 800eec6:	1d1a      	adds	r2, r3, #4
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	602a      	str	r2, [r5, #0]
 800eecc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800eed0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800eed4:	2301      	movs	r3, #1
 800eed6:	e0a3      	b.n	800f020 <_printf_i+0x1f4>
 800eed8:	6820      	ldr	r0, [r4, #0]
 800eeda:	6829      	ldr	r1, [r5, #0]
 800eedc:	0606      	lsls	r6, r0, #24
 800eede:	f101 0304 	add.w	r3, r1, #4
 800eee2:	d50a      	bpl.n	800eefa <_printf_i+0xce>
 800eee4:	680e      	ldr	r6, [r1, #0]
 800eee6:	602b      	str	r3, [r5, #0]
 800eee8:	2e00      	cmp	r6, #0
 800eeea:	da03      	bge.n	800eef4 <_printf_i+0xc8>
 800eeec:	232d      	movs	r3, #45	; 0x2d
 800eeee:	4276      	negs	r6, r6
 800eef0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eef4:	485e      	ldr	r0, [pc, #376]	; (800f070 <_printf_i+0x244>)
 800eef6:	230a      	movs	r3, #10
 800eef8:	e019      	b.n	800ef2e <_printf_i+0x102>
 800eefa:	680e      	ldr	r6, [r1, #0]
 800eefc:	602b      	str	r3, [r5, #0]
 800eefe:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ef02:	bf18      	it	ne
 800ef04:	b236      	sxthne	r6, r6
 800ef06:	e7ef      	b.n	800eee8 <_printf_i+0xbc>
 800ef08:	682b      	ldr	r3, [r5, #0]
 800ef0a:	6820      	ldr	r0, [r4, #0]
 800ef0c:	1d19      	adds	r1, r3, #4
 800ef0e:	6029      	str	r1, [r5, #0]
 800ef10:	0601      	lsls	r1, r0, #24
 800ef12:	d501      	bpl.n	800ef18 <_printf_i+0xec>
 800ef14:	681e      	ldr	r6, [r3, #0]
 800ef16:	e002      	b.n	800ef1e <_printf_i+0xf2>
 800ef18:	0646      	lsls	r6, r0, #25
 800ef1a:	d5fb      	bpl.n	800ef14 <_printf_i+0xe8>
 800ef1c:	881e      	ldrh	r6, [r3, #0]
 800ef1e:	4854      	ldr	r0, [pc, #336]	; (800f070 <_printf_i+0x244>)
 800ef20:	2f6f      	cmp	r7, #111	; 0x6f
 800ef22:	bf0c      	ite	eq
 800ef24:	2308      	moveq	r3, #8
 800ef26:	230a      	movne	r3, #10
 800ef28:	2100      	movs	r1, #0
 800ef2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ef2e:	6865      	ldr	r5, [r4, #4]
 800ef30:	60a5      	str	r5, [r4, #8]
 800ef32:	2d00      	cmp	r5, #0
 800ef34:	bfa2      	ittt	ge
 800ef36:	6821      	ldrge	r1, [r4, #0]
 800ef38:	f021 0104 	bicge.w	r1, r1, #4
 800ef3c:	6021      	strge	r1, [r4, #0]
 800ef3e:	b90e      	cbnz	r6, 800ef44 <_printf_i+0x118>
 800ef40:	2d00      	cmp	r5, #0
 800ef42:	d04d      	beq.n	800efe0 <_printf_i+0x1b4>
 800ef44:	4615      	mov	r5, r2
 800ef46:	fbb6 f1f3 	udiv	r1, r6, r3
 800ef4a:	fb03 6711 	mls	r7, r3, r1, r6
 800ef4e:	5dc7      	ldrb	r7, [r0, r7]
 800ef50:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ef54:	4637      	mov	r7, r6
 800ef56:	42bb      	cmp	r3, r7
 800ef58:	460e      	mov	r6, r1
 800ef5a:	d9f4      	bls.n	800ef46 <_printf_i+0x11a>
 800ef5c:	2b08      	cmp	r3, #8
 800ef5e:	d10b      	bne.n	800ef78 <_printf_i+0x14c>
 800ef60:	6823      	ldr	r3, [r4, #0]
 800ef62:	07de      	lsls	r6, r3, #31
 800ef64:	d508      	bpl.n	800ef78 <_printf_i+0x14c>
 800ef66:	6923      	ldr	r3, [r4, #16]
 800ef68:	6861      	ldr	r1, [r4, #4]
 800ef6a:	4299      	cmp	r1, r3
 800ef6c:	bfde      	ittt	le
 800ef6e:	2330      	movle	r3, #48	; 0x30
 800ef70:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ef74:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800ef78:	1b52      	subs	r2, r2, r5
 800ef7a:	6122      	str	r2, [r4, #16]
 800ef7c:	f8cd a000 	str.w	sl, [sp]
 800ef80:	464b      	mov	r3, r9
 800ef82:	aa03      	add	r2, sp, #12
 800ef84:	4621      	mov	r1, r4
 800ef86:	4640      	mov	r0, r8
 800ef88:	f7ff fee2 	bl	800ed50 <_printf_common>
 800ef8c:	3001      	adds	r0, #1
 800ef8e:	d14c      	bne.n	800f02a <_printf_i+0x1fe>
 800ef90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ef94:	b004      	add	sp, #16
 800ef96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef9a:	4835      	ldr	r0, [pc, #212]	; (800f070 <_printf_i+0x244>)
 800ef9c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800efa0:	6829      	ldr	r1, [r5, #0]
 800efa2:	6823      	ldr	r3, [r4, #0]
 800efa4:	f851 6b04 	ldr.w	r6, [r1], #4
 800efa8:	6029      	str	r1, [r5, #0]
 800efaa:	061d      	lsls	r5, r3, #24
 800efac:	d514      	bpl.n	800efd8 <_printf_i+0x1ac>
 800efae:	07df      	lsls	r7, r3, #31
 800efb0:	bf44      	itt	mi
 800efb2:	f043 0320 	orrmi.w	r3, r3, #32
 800efb6:	6023      	strmi	r3, [r4, #0]
 800efb8:	b91e      	cbnz	r6, 800efc2 <_printf_i+0x196>
 800efba:	6823      	ldr	r3, [r4, #0]
 800efbc:	f023 0320 	bic.w	r3, r3, #32
 800efc0:	6023      	str	r3, [r4, #0]
 800efc2:	2310      	movs	r3, #16
 800efc4:	e7b0      	b.n	800ef28 <_printf_i+0xfc>
 800efc6:	6823      	ldr	r3, [r4, #0]
 800efc8:	f043 0320 	orr.w	r3, r3, #32
 800efcc:	6023      	str	r3, [r4, #0]
 800efce:	2378      	movs	r3, #120	; 0x78
 800efd0:	4828      	ldr	r0, [pc, #160]	; (800f074 <_printf_i+0x248>)
 800efd2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800efd6:	e7e3      	b.n	800efa0 <_printf_i+0x174>
 800efd8:	0659      	lsls	r1, r3, #25
 800efda:	bf48      	it	mi
 800efdc:	b2b6      	uxthmi	r6, r6
 800efde:	e7e6      	b.n	800efae <_printf_i+0x182>
 800efe0:	4615      	mov	r5, r2
 800efe2:	e7bb      	b.n	800ef5c <_printf_i+0x130>
 800efe4:	682b      	ldr	r3, [r5, #0]
 800efe6:	6826      	ldr	r6, [r4, #0]
 800efe8:	6961      	ldr	r1, [r4, #20]
 800efea:	1d18      	adds	r0, r3, #4
 800efec:	6028      	str	r0, [r5, #0]
 800efee:	0635      	lsls	r5, r6, #24
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	d501      	bpl.n	800eff8 <_printf_i+0x1cc>
 800eff4:	6019      	str	r1, [r3, #0]
 800eff6:	e002      	b.n	800effe <_printf_i+0x1d2>
 800eff8:	0670      	lsls	r0, r6, #25
 800effa:	d5fb      	bpl.n	800eff4 <_printf_i+0x1c8>
 800effc:	8019      	strh	r1, [r3, #0]
 800effe:	2300      	movs	r3, #0
 800f000:	6123      	str	r3, [r4, #16]
 800f002:	4615      	mov	r5, r2
 800f004:	e7ba      	b.n	800ef7c <_printf_i+0x150>
 800f006:	682b      	ldr	r3, [r5, #0]
 800f008:	1d1a      	adds	r2, r3, #4
 800f00a:	602a      	str	r2, [r5, #0]
 800f00c:	681d      	ldr	r5, [r3, #0]
 800f00e:	6862      	ldr	r2, [r4, #4]
 800f010:	2100      	movs	r1, #0
 800f012:	4628      	mov	r0, r5
 800f014:	f7f1 f8ec 	bl	80001f0 <memchr>
 800f018:	b108      	cbz	r0, 800f01e <_printf_i+0x1f2>
 800f01a:	1b40      	subs	r0, r0, r5
 800f01c:	6060      	str	r0, [r4, #4]
 800f01e:	6863      	ldr	r3, [r4, #4]
 800f020:	6123      	str	r3, [r4, #16]
 800f022:	2300      	movs	r3, #0
 800f024:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f028:	e7a8      	b.n	800ef7c <_printf_i+0x150>
 800f02a:	6923      	ldr	r3, [r4, #16]
 800f02c:	462a      	mov	r2, r5
 800f02e:	4649      	mov	r1, r9
 800f030:	4640      	mov	r0, r8
 800f032:	47d0      	blx	sl
 800f034:	3001      	adds	r0, #1
 800f036:	d0ab      	beq.n	800ef90 <_printf_i+0x164>
 800f038:	6823      	ldr	r3, [r4, #0]
 800f03a:	079b      	lsls	r3, r3, #30
 800f03c:	d413      	bmi.n	800f066 <_printf_i+0x23a>
 800f03e:	68e0      	ldr	r0, [r4, #12]
 800f040:	9b03      	ldr	r3, [sp, #12]
 800f042:	4298      	cmp	r0, r3
 800f044:	bfb8      	it	lt
 800f046:	4618      	movlt	r0, r3
 800f048:	e7a4      	b.n	800ef94 <_printf_i+0x168>
 800f04a:	2301      	movs	r3, #1
 800f04c:	4632      	mov	r2, r6
 800f04e:	4649      	mov	r1, r9
 800f050:	4640      	mov	r0, r8
 800f052:	47d0      	blx	sl
 800f054:	3001      	adds	r0, #1
 800f056:	d09b      	beq.n	800ef90 <_printf_i+0x164>
 800f058:	3501      	adds	r5, #1
 800f05a:	68e3      	ldr	r3, [r4, #12]
 800f05c:	9903      	ldr	r1, [sp, #12]
 800f05e:	1a5b      	subs	r3, r3, r1
 800f060:	42ab      	cmp	r3, r5
 800f062:	dcf2      	bgt.n	800f04a <_printf_i+0x21e>
 800f064:	e7eb      	b.n	800f03e <_printf_i+0x212>
 800f066:	2500      	movs	r5, #0
 800f068:	f104 0619 	add.w	r6, r4, #25
 800f06c:	e7f5      	b.n	800f05a <_printf_i+0x22e>
 800f06e:	bf00      	nop
 800f070:	0800f541 	.word	0x0800f541
 800f074:	0800f552 	.word	0x0800f552

0800f078 <__sread>:
 800f078:	b510      	push	{r4, lr}
 800f07a:	460c      	mov	r4, r1
 800f07c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f080:	f000 f954 	bl	800f32c <_read_r>
 800f084:	2800      	cmp	r0, #0
 800f086:	bfab      	itete	ge
 800f088:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f08a:	89a3      	ldrhlt	r3, [r4, #12]
 800f08c:	181b      	addge	r3, r3, r0
 800f08e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f092:	bfac      	ite	ge
 800f094:	6563      	strge	r3, [r4, #84]	; 0x54
 800f096:	81a3      	strhlt	r3, [r4, #12]
 800f098:	bd10      	pop	{r4, pc}

0800f09a <__swrite>:
 800f09a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f09e:	461f      	mov	r7, r3
 800f0a0:	898b      	ldrh	r3, [r1, #12]
 800f0a2:	05db      	lsls	r3, r3, #23
 800f0a4:	4605      	mov	r5, r0
 800f0a6:	460c      	mov	r4, r1
 800f0a8:	4616      	mov	r6, r2
 800f0aa:	d505      	bpl.n	800f0b8 <__swrite+0x1e>
 800f0ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0b0:	2302      	movs	r3, #2
 800f0b2:	2200      	movs	r2, #0
 800f0b4:	f000 f928 	bl	800f308 <_lseek_r>
 800f0b8:	89a3      	ldrh	r3, [r4, #12]
 800f0ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f0be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f0c2:	81a3      	strh	r3, [r4, #12]
 800f0c4:	4632      	mov	r2, r6
 800f0c6:	463b      	mov	r3, r7
 800f0c8:	4628      	mov	r0, r5
 800f0ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f0ce:	f000 b869 	b.w	800f1a4 <_write_r>

0800f0d2 <__sseek>:
 800f0d2:	b510      	push	{r4, lr}
 800f0d4:	460c      	mov	r4, r1
 800f0d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0da:	f000 f915 	bl	800f308 <_lseek_r>
 800f0de:	1c43      	adds	r3, r0, #1
 800f0e0:	89a3      	ldrh	r3, [r4, #12]
 800f0e2:	bf15      	itete	ne
 800f0e4:	6560      	strne	r0, [r4, #84]	; 0x54
 800f0e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f0ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f0ee:	81a3      	strheq	r3, [r4, #12]
 800f0f0:	bf18      	it	ne
 800f0f2:	81a3      	strhne	r3, [r4, #12]
 800f0f4:	bd10      	pop	{r4, pc}

0800f0f6 <__sclose>:
 800f0f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0fa:	f000 b8d3 	b.w	800f2a4 <_close_r>
	...

0800f100 <__swbuf_r>:
 800f100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f102:	460e      	mov	r6, r1
 800f104:	4614      	mov	r4, r2
 800f106:	4605      	mov	r5, r0
 800f108:	b118      	cbz	r0, 800f112 <__swbuf_r+0x12>
 800f10a:	6983      	ldr	r3, [r0, #24]
 800f10c:	b90b      	cbnz	r3, 800f112 <__swbuf_r+0x12>
 800f10e:	f7ff fbb3 	bl	800e878 <__sinit>
 800f112:	4b21      	ldr	r3, [pc, #132]	; (800f198 <__swbuf_r+0x98>)
 800f114:	429c      	cmp	r4, r3
 800f116:	d12b      	bne.n	800f170 <__swbuf_r+0x70>
 800f118:	686c      	ldr	r4, [r5, #4]
 800f11a:	69a3      	ldr	r3, [r4, #24]
 800f11c:	60a3      	str	r3, [r4, #8]
 800f11e:	89a3      	ldrh	r3, [r4, #12]
 800f120:	071a      	lsls	r2, r3, #28
 800f122:	d52f      	bpl.n	800f184 <__swbuf_r+0x84>
 800f124:	6923      	ldr	r3, [r4, #16]
 800f126:	b36b      	cbz	r3, 800f184 <__swbuf_r+0x84>
 800f128:	6923      	ldr	r3, [r4, #16]
 800f12a:	6820      	ldr	r0, [r4, #0]
 800f12c:	1ac0      	subs	r0, r0, r3
 800f12e:	6963      	ldr	r3, [r4, #20]
 800f130:	b2f6      	uxtb	r6, r6
 800f132:	4283      	cmp	r3, r0
 800f134:	4637      	mov	r7, r6
 800f136:	dc04      	bgt.n	800f142 <__swbuf_r+0x42>
 800f138:	4621      	mov	r1, r4
 800f13a:	4628      	mov	r0, r5
 800f13c:	f7ff fb08 	bl	800e750 <_fflush_r>
 800f140:	bb30      	cbnz	r0, 800f190 <__swbuf_r+0x90>
 800f142:	68a3      	ldr	r3, [r4, #8]
 800f144:	3b01      	subs	r3, #1
 800f146:	60a3      	str	r3, [r4, #8]
 800f148:	6823      	ldr	r3, [r4, #0]
 800f14a:	1c5a      	adds	r2, r3, #1
 800f14c:	6022      	str	r2, [r4, #0]
 800f14e:	701e      	strb	r6, [r3, #0]
 800f150:	6963      	ldr	r3, [r4, #20]
 800f152:	3001      	adds	r0, #1
 800f154:	4283      	cmp	r3, r0
 800f156:	d004      	beq.n	800f162 <__swbuf_r+0x62>
 800f158:	89a3      	ldrh	r3, [r4, #12]
 800f15a:	07db      	lsls	r3, r3, #31
 800f15c:	d506      	bpl.n	800f16c <__swbuf_r+0x6c>
 800f15e:	2e0a      	cmp	r6, #10
 800f160:	d104      	bne.n	800f16c <__swbuf_r+0x6c>
 800f162:	4621      	mov	r1, r4
 800f164:	4628      	mov	r0, r5
 800f166:	f7ff faf3 	bl	800e750 <_fflush_r>
 800f16a:	b988      	cbnz	r0, 800f190 <__swbuf_r+0x90>
 800f16c:	4638      	mov	r0, r7
 800f16e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f170:	4b0a      	ldr	r3, [pc, #40]	; (800f19c <__swbuf_r+0x9c>)
 800f172:	429c      	cmp	r4, r3
 800f174:	d101      	bne.n	800f17a <__swbuf_r+0x7a>
 800f176:	68ac      	ldr	r4, [r5, #8]
 800f178:	e7cf      	b.n	800f11a <__swbuf_r+0x1a>
 800f17a:	4b09      	ldr	r3, [pc, #36]	; (800f1a0 <__swbuf_r+0xa0>)
 800f17c:	429c      	cmp	r4, r3
 800f17e:	bf08      	it	eq
 800f180:	68ec      	ldreq	r4, [r5, #12]
 800f182:	e7ca      	b.n	800f11a <__swbuf_r+0x1a>
 800f184:	4621      	mov	r1, r4
 800f186:	4628      	mov	r0, r5
 800f188:	f000 f81e 	bl	800f1c8 <__swsetup_r>
 800f18c:	2800      	cmp	r0, #0
 800f18e:	d0cb      	beq.n	800f128 <__swbuf_r+0x28>
 800f190:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800f194:	e7ea      	b.n	800f16c <__swbuf_r+0x6c>
 800f196:	bf00      	nop
 800f198:	0800f4f0 	.word	0x0800f4f0
 800f19c:	0800f510 	.word	0x0800f510
 800f1a0:	0800f4d0 	.word	0x0800f4d0

0800f1a4 <_write_r>:
 800f1a4:	b538      	push	{r3, r4, r5, lr}
 800f1a6:	4d07      	ldr	r5, [pc, #28]	; (800f1c4 <_write_r+0x20>)
 800f1a8:	4604      	mov	r4, r0
 800f1aa:	4608      	mov	r0, r1
 800f1ac:	4611      	mov	r1, r2
 800f1ae:	2200      	movs	r2, #0
 800f1b0:	602a      	str	r2, [r5, #0]
 800f1b2:	461a      	mov	r2, r3
 800f1b4:	f7f2 ff22 	bl	8001ffc <_write>
 800f1b8:	1c43      	adds	r3, r0, #1
 800f1ba:	d102      	bne.n	800f1c2 <_write_r+0x1e>
 800f1bc:	682b      	ldr	r3, [r5, #0]
 800f1be:	b103      	cbz	r3, 800f1c2 <_write_r+0x1e>
 800f1c0:	6023      	str	r3, [r4, #0]
 800f1c2:	bd38      	pop	{r3, r4, r5, pc}
 800f1c4:	20003c14 	.word	0x20003c14

0800f1c8 <__swsetup_r>:
 800f1c8:	4b32      	ldr	r3, [pc, #200]	; (800f294 <__swsetup_r+0xcc>)
 800f1ca:	b570      	push	{r4, r5, r6, lr}
 800f1cc:	681d      	ldr	r5, [r3, #0]
 800f1ce:	4606      	mov	r6, r0
 800f1d0:	460c      	mov	r4, r1
 800f1d2:	b125      	cbz	r5, 800f1de <__swsetup_r+0x16>
 800f1d4:	69ab      	ldr	r3, [r5, #24]
 800f1d6:	b913      	cbnz	r3, 800f1de <__swsetup_r+0x16>
 800f1d8:	4628      	mov	r0, r5
 800f1da:	f7ff fb4d 	bl	800e878 <__sinit>
 800f1de:	4b2e      	ldr	r3, [pc, #184]	; (800f298 <__swsetup_r+0xd0>)
 800f1e0:	429c      	cmp	r4, r3
 800f1e2:	d10f      	bne.n	800f204 <__swsetup_r+0x3c>
 800f1e4:	686c      	ldr	r4, [r5, #4]
 800f1e6:	89a3      	ldrh	r3, [r4, #12]
 800f1e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f1ec:	0719      	lsls	r1, r3, #28
 800f1ee:	d42c      	bmi.n	800f24a <__swsetup_r+0x82>
 800f1f0:	06dd      	lsls	r5, r3, #27
 800f1f2:	d411      	bmi.n	800f218 <__swsetup_r+0x50>
 800f1f4:	2309      	movs	r3, #9
 800f1f6:	6033      	str	r3, [r6, #0]
 800f1f8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f1fc:	81a3      	strh	r3, [r4, #12]
 800f1fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f202:	e03e      	b.n	800f282 <__swsetup_r+0xba>
 800f204:	4b25      	ldr	r3, [pc, #148]	; (800f29c <__swsetup_r+0xd4>)
 800f206:	429c      	cmp	r4, r3
 800f208:	d101      	bne.n	800f20e <__swsetup_r+0x46>
 800f20a:	68ac      	ldr	r4, [r5, #8]
 800f20c:	e7eb      	b.n	800f1e6 <__swsetup_r+0x1e>
 800f20e:	4b24      	ldr	r3, [pc, #144]	; (800f2a0 <__swsetup_r+0xd8>)
 800f210:	429c      	cmp	r4, r3
 800f212:	bf08      	it	eq
 800f214:	68ec      	ldreq	r4, [r5, #12]
 800f216:	e7e6      	b.n	800f1e6 <__swsetup_r+0x1e>
 800f218:	0758      	lsls	r0, r3, #29
 800f21a:	d512      	bpl.n	800f242 <__swsetup_r+0x7a>
 800f21c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f21e:	b141      	cbz	r1, 800f232 <__swsetup_r+0x6a>
 800f220:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f224:	4299      	cmp	r1, r3
 800f226:	d002      	beq.n	800f22e <__swsetup_r+0x66>
 800f228:	4630      	mov	r0, r6
 800f22a:	f7ff f83d 	bl	800e2a8 <_free_r>
 800f22e:	2300      	movs	r3, #0
 800f230:	6363      	str	r3, [r4, #52]	; 0x34
 800f232:	89a3      	ldrh	r3, [r4, #12]
 800f234:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f238:	81a3      	strh	r3, [r4, #12]
 800f23a:	2300      	movs	r3, #0
 800f23c:	6063      	str	r3, [r4, #4]
 800f23e:	6923      	ldr	r3, [r4, #16]
 800f240:	6023      	str	r3, [r4, #0]
 800f242:	89a3      	ldrh	r3, [r4, #12]
 800f244:	f043 0308 	orr.w	r3, r3, #8
 800f248:	81a3      	strh	r3, [r4, #12]
 800f24a:	6923      	ldr	r3, [r4, #16]
 800f24c:	b94b      	cbnz	r3, 800f262 <__swsetup_r+0x9a>
 800f24e:	89a3      	ldrh	r3, [r4, #12]
 800f250:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f254:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f258:	d003      	beq.n	800f262 <__swsetup_r+0x9a>
 800f25a:	4621      	mov	r1, r4
 800f25c:	4630      	mov	r0, r6
 800f25e:	f7ff fbd1 	bl	800ea04 <__smakebuf_r>
 800f262:	89a0      	ldrh	r0, [r4, #12]
 800f264:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f268:	f010 0301 	ands.w	r3, r0, #1
 800f26c:	d00a      	beq.n	800f284 <__swsetup_r+0xbc>
 800f26e:	2300      	movs	r3, #0
 800f270:	60a3      	str	r3, [r4, #8]
 800f272:	6963      	ldr	r3, [r4, #20]
 800f274:	425b      	negs	r3, r3
 800f276:	61a3      	str	r3, [r4, #24]
 800f278:	6923      	ldr	r3, [r4, #16]
 800f27a:	b943      	cbnz	r3, 800f28e <__swsetup_r+0xc6>
 800f27c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f280:	d1ba      	bne.n	800f1f8 <__swsetup_r+0x30>
 800f282:	bd70      	pop	{r4, r5, r6, pc}
 800f284:	0781      	lsls	r1, r0, #30
 800f286:	bf58      	it	pl
 800f288:	6963      	ldrpl	r3, [r4, #20]
 800f28a:	60a3      	str	r3, [r4, #8]
 800f28c:	e7f4      	b.n	800f278 <__swsetup_r+0xb0>
 800f28e:	2000      	movs	r0, #0
 800f290:	e7f7      	b.n	800f282 <__swsetup_r+0xba>
 800f292:	bf00      	nop
 800f294:	200000f4 	.word	0x200000f4
 800f298:	0800f4f0 	.word	0x0800f4f0
 800f29c:	0800f510 	.word	0x0800f510
 800f2a0:	0800f4d0 	.word	0x0800f4d0

0800f2a4 <_close_r>:
 800f2a4:	b538      	push	{r3, r4, r5, lr}
 800f2a6:	4d06      	ldr	r5, [pc, #24]	; (800f2c0 <_close_r+0x1c>)
 800f2a8:	2300      	movs	r3, #0
 800f2aa:	4604      	mov	r4, r0
 800f2ac:	4608      	mov	r0, r1
 800f2ae:	602b      	str	r3, [r5, #0]
 800f2b0:	f7f2 fed0 	bl	8002054 <_close>
 800f2b4:	1c43      	adds	r3, r0, #1
 800f2b6:	d102      	bne.n	800f2be <_close_r+0x1a>
 800f2b8:	682b      	ldr	r3, [r5, #0]
 800f2ba:	b103      	cbz	r3, 800f2be <_close_r+0x1a>
 800f2bc:	6023      	str	r3, [r4, #0]
 800f2be:	bd38      	pop	{r3, r4, r5, pc}
 800f2c0:	20003c14 	.word	0x20003c14

0800f2c4 <_fstat_r>:
 800f2c4:	b538      	push	{r3, r4, r5, lr}
 800f2c6:	4d07      	ldr	r5, [pc, #28]	; (800f2e4 <_fstat_r+0x20>)
 800f2c8:	2300      	movs	r3, #0
 800f2ca:	4604      	mov	r4, r0
 800f2cc:	4608      	mov	r0, r1
 800f2ce:	4611      	mov	r1, r2
 800f2d0:	602b      	str	r3, [r5, #0]
 800f2d2:	f7f2 ff0f 	bl	80020f4 <_fstat>
 800f2d6:	1c43      	adds	r3, r0, #1
 800f2d8:	d102      	bne.n	800f2e0 <_fstat_r+0x1c>
 800f2da:	682b      	ldr	r3, [r5, #0]
 800f2dc:	b103      	cbz	r3, 800f2e0 <_fstat_r+0x1c>
 800f2de:	6023      	str	r3, [r4, #0]
 800f2e0:	bd38      	pop	{r3, r4, r5, pc}
 800f2e2:	bf00      	nop
 800f2e4:	20003c14 	.word	0x20003c14

0800f2e8 <_isatty_r>:
 800f2e8:	b538      	push	{r3, r4, r5, lr}
 800f2ea:	4d06      	ldr	r5, [pc, #24]	; (800f304 <_isatty_r+0x1c>)
 800f2ec:	2300      	movs	r3, #0
 800f2ee:	4604      	mov	r4, r0
 800f2f0:	4608      	mov	r0, r1
 800f2f2:	602b      	str	r3, [r5, #0]
 800f2f4:	f7f2 fe6c 	bl	8001fd0 <_isatty>
 800f2f8:	1c43      	adds	r3, r0, #1
 800f2fa:	d102      	bne.n	800f302 <_isatty_r+0x1a>
 800f2fc:	682b      	ldr	r3, [r5, #0]
 800f2fe:	b103      	cbz	r3, 800f302 <_isatty_r+0x1a>
 800f300:	6023      	str	r3, [r4, #0]
 800f302:	bd38      	pop	{r3, r4, r5, pc}
 800f304:	20003c14 	.word	0x20003c14

0800f308 <_lseek_r>:
 800f308:	b538      	push	{r3, r4, r5, lr}
 800f30a:	4d07      	ldr	r5, [pc, #28]	; (800f328 <_lseek_r+0x20>)
 800f30c:	4604      	mov	r4, r0
 800f30e:	4608      	mov	r0, r1
 800f310:	4611      	mov	r1, r2
 800f312:	2200      	movs	r2, #0
 800f314:	602a      	str	r2, [r5, #0]
 800f316:	461a      	mov	r2, r3
 800f318:	f7f2 feb3 	bl	8002082 <_lseek>
 800f31c:	1c43      	adds	r3, r0, #1
 800f31e:	d102      	bne.n	800f326 <_lseek_r+0x1e>
 800f320:	682b      	ldr	r3, [r5, #0]
 800f322:	b103      	cbz	r3, 800f326 <_lseek_r+0x1e>
 800f324:	6023      	str	r3, [r4, #0]
 800f326:	bd38      	pop	{r3, r4, r5, pc}
 800f328:	20003c14 	.word	0x20003c14

0800f32c <_read_r>:
 800f32c:	b538      	push	{r3, r4, r5, lr}
 800f32e:	4d07      	ldr	r5, [pc, #28]	; (800f34c <_read_r+0x20>)
 800f330:	4604      	mov	r4, r0
 800f332:	4608      	mov	r0, r1
 800f334:	4611      	mov	r1, r2
 800f336:	2200      	movs	r2, #0
 800f338:	602a      	str	r2, [r5, #0]
 800f33a:	461a      	mov	r2, r3
 800f33c:	f7f2 feb2 	bl	80020a4 <_read>
 800f340:	1c43      	adds	r3, r0, #1
 800f342:	d102      	bne.n	800f34a <_read_r+0x1e>
 800f344:	682b      	ldr	r3, [r5, #0]
 800f346:	b103      	cbz	r3, 800f34a <_read_r+0x1e>
 800f348:	6023      	str	r3, [r4, #0]
 800f34a:	bd38      	pop	{r3, r4, r5, pc}
 800f34c:	20003c14 	.word	0x20003c14

0800f350 <_init>:
 800f350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f352:	bf00      	nop
 800f354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f356:	bc08      	pop	{r3}
 800f358:	469e      	mov	lr, r3
 800f35a:	4770      	bx	lr

0800f35c <_fini>:
 800f35c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f35e:	bf00      	nop
 800f360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f362:	bc08      	pop	{r3}
 800f364:	469e      	mov	lr, r3
 800f366:	4770      	bx	lr
