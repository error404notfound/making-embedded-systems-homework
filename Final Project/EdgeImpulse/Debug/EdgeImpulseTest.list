
EdgeImpulseTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d2c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08006edc  08006edc  00016edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f98  08006f98  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006f98  08006f98  00016f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006fa0  08006fa0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006fa0  08006fa0  00016fa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006fa4  08006fa4  00016fa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006fa8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000190  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000200  20000200  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014f89  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002866  00000000  00000000  00035029  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011d0  00000000  00000000  00037890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000010e0  00000000  00000000  00038a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025ba1  00000000  00000000  00039b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000164ff  00000000  00000000  0005f6e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1558  00000000  00000000  00075be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00157138  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000053f8  00000000  00000000  00157188  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006ec4 	.word	0x08006ec4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08006ec4 	.word	0x08006ec4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <Lis3dhInit>:

}



HAL_StatusTypeDef Lis3dhInit(I2C_HandleTypeDef *I2Cxhandle){
 8000594:	b580      	push	{r7, lr}
 8000596:	b088      	sub	sp, #32
 8000598:	af02      	add	r7, sp, #8
 800059a:	6078      	str	r0, [r7, #4]

	 HAL_StatusTypeDef ret;

	    uint8_t sendBuff[2];
	    uint8_t reciveBuff[12];
	    I2Cx = I2Cxhandle;
 800059c:	4a43      	ldr	r2, [pc, #268]	; (80006ac <Lis3dhInit+0x118>)
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	6013      	str	r3, [r2, #0]

	    sendBuff[0] = WHO_AM_I|LIS3DH_READ;
 80005a2:	238f      	movs	r3, #143	; 0x8f
 80005a4:	753b      	strb	r3, [r7, #20]
	    ret = HAL_I2C_IsDeviceReady(I2Cx,LIS3DH_ADDR,1, HAL_MAX_DELAY);
 80005a6:	4b41      	ldr	r3, [pc, #260]	; (80006ac <Lis3dhInit+0x118>)
 80005a8:	6818      	ldr	r0, [r3, #0]
 80005aa:	2130      	movs	r1, #48	; 0x30
 80005ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005b0:	2201      	movs	r2, #1
 80005b2:	f002 f90d 	bl	80027d0 <HAL_I2C_IsDeviceReady>
 80005b6:	4603      	mov	r3, r0
 80005b8:	75fb      	strb	r3, [r7, #23]

	    ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 1, HAL_MAX_DELAY);
 80005ba:	4b3c      	ldr	r3, [pc, #240]	; (80006ac <Lis3dhInit+0x118>)
 80005bc:	6818      	ldr	r0, [r3, #0]
 80005be:	2130      	movs	r1, #48	; 0x30
 80005c0:	f107 0214 	add.w	r2, r7, #20
 80005c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005c8:	9300      	str	r3, [sp, #0]
 80005ca:	2301      	movs	r3, #1
 80005cc:	f001 fddc 	bl	8002188 <HAL_I2C_Master_Transmit>
 80005d0:	4603      	mov	r3, r0
 80005d2:	75fb      	strb	r3, [r7, #23]
	    if(ret != HAL_OK) {
 80005d4:	7dfb      	ldrb	r3, [r7, #23]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d002      	beq.n	80005e0 <Lis3dhInit+0x4c>
	        //Handle Error
	    	errorHandler();
 80005da:	f000 f92b 	bl	8000834 <errorHandler>
 80005de:	e05f      	b.n	80006a0 <Lis3dhInit+0x10c>

	    } else {

	        ret = HAL_I2C_Master_Receive(I2Cx, LIS3DH_ADDR, reciveBuff, 2, HAL_MAX_DELAY);
 80005e0:	4b32      	ldr	r3, [pc, #200]	; (80006ac <Lis3dhInit+0x118>)
 80005e2:	6818      	ldr	r0, [r3, #0]
 80005e4:	2130      	movs	r1, #48	; 0x30
 80005e6:	f107 0208 	add.w	r2, r7, #8
 80005ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005ee:	9300      	str	r3, [sp, #0]
 80005f0:	2302      	movs	r3, #2
 80005f2:	f001 fec7 	bl	8002384 <HAL_I2C_Master_Receive>
 80005f6:	4603      	mov	r3, r0
 80005f8:	75fb      	strb	r3, [r7, #23]
	        if(ret != HAL_OK) {
 80005fa:	7dfb      	ldrb	r3, [r7, #23]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d002      	beq.n	8000606 <Lis3dhInit+0x72>

	        	//Handle error.
	        	errorHandler();
 8000600:	f000 f918 	bl	8000834 <errorHandler>
 8000604:	e04c      	b.n	80006a0 <Lis3dhInit+0x10c>
	        } else {

	        	// configure the sensor.
	        	// Setting our resolution 100HZ so that we can use interrupts
	        	// and that we will read all three axis
				sendBuff[0]  = LIS3DH_REG_CTRL1  |LIS3DH_READ;
 8000606:	23a0      	movs	r3, #160	; 0xa0
 8000608:	753b      	strb	r3, [r7, #20]

				ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 1, HAL_MAX_DELAY);
 800060a:	4b28      	ldr	r3, [pc, #160]	; (80006ac <Lis3dhInit+0x118>)
 800060c:	6818      	ldr	r0, [r3, #0]
 800060e:	2130      	movs	r1, #48	; 0x30
 8000610:	f107 0214 	add.w	r2, r7, #20
 8000614:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000618:	9300      	str	r3, [sp, #0]
 800061a:	2301      	movs	r3, #1
 800061c:	f001 fdb4 	bl	8002188 <HAL_I2C_Master_Transmit>
 8000620:	4603      	mov	r3, r0
 8000622:	75fb      	strb	r3, [r7, #23]
				ret = HAL_I2C_Master_Receive(I2Cx, LIS3DH_ADDR, reciveBuff, 2, HAL_MAX_DELAY);
 8000624:	4b21      	ldr	r3, [pc, #132]	; (80006ac <Lis3dhInit+0x118>)
 8000626:	6818      	ldr	r0, [r3, #0]
 8000628:	2130      	movs	r1, #48	; 0x30
 800062a:	f107 0208 	add.w	r2, r7, #8
 800062e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000632:	9300      	str	r3, [sp, #0]
 8000634:	2302      	movs	r3, #2
 8000636:	f001 fea5 	bl	8002384 <HAL_I2C_Master_Receive>
 800063a:	4603      	mov	r3, r0
 800063c:	75fb      	strb	r3, [r7, #23]

				sendBuff[0] = LIS3DH_REG_CTRL1;
 800063e:	2320      	movs	r3, #32
 8000640:	753b      	strb	r3, [r7, #20]
				sendBuff[1] = LIS3DH_ON_100HZ;
 8000642:	2357      	movs	r3, #87	; 0x57
 8000644:	757b      	strb	r3, [r7, #21]
				ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 2, HAL_MAX_DELAY);
 8000646:	4b19      	ldr	r3, [pc, #100]	; (80006ac <Lis3dhInit+0x118>)
 8000648:	6818      	ldr	r0, [r3, #0]
 800064a:	2130      	movs	r1, #48	; 0x30
 800064c:	f107 0214 	add.w	r2, r7, #20
 8000650:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000654:	9300      	str	r3, [sp, #0]
 8000656:	2302      	movs	r3, #2
 8000658:	f001 fd96 	bl	8002188 <HAL_I2C_Master_Transmit>
 800065c:	4603      	mov	r3, r0
 800065e:	75fb      	strb	r3, [r7, #23]

				//Read to make sure the write worked.
				sendBuff[0]  = LIS3DH_REG_CTRL1  |LIS3DH_READ;
 8000660:	23a0      	movs	r3, #160	; 0xa0
 8000662:	753b      	strb	r3, [r7, #20]

				ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 1, HAL_MAX_DELAY);
 8000664:	4b11      	ldr	r3, [pc, #68]	; (80006ac <Lis3dhInit+0x118>)
 8000666:	6818      	ldr	r0, [r3, #0]
 8000668:	2130      	movs	r1, #48	; 0x30
 800066a:	f107 0214 	add.w	r2, r7, #20
 800066e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000672:	9300      	str	r3, [sp, #0]
 8000674:	2301      	movs	r3, #1
 8000676:	f001 fd87 	bl	8002188 <HAL_I2C_Master_Transmit>
 800067a:	4603      	mov	r3, r0
 800067c:	75fb      	strb	r3, [r7, #23]
				ret = HAL_I2C_Master_Receive(I2Cx, LIS3DH_ADDR, reciveBuff, 2, HAL_MAX_DELAY);
 800067e:	4b0b      	ldr	r3, [pc, #44]	; (80006ac <Lis3dhInit+0x118>)
 8000680:	6818      	ldr	r0, [r3, #0]
 8000682:	2130      	movs	r1, #48	; 0x30
 8000684:	f107 0208 	add.w	r2, r7, #8
 8000688:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800068c:	9300      	str	r3, [sp, #0]
 800068e:	2302      	movs	r3, #2
 8000690:	f001 fe78 	bl	8002384 <HAL_I2C_Master_Receive>
 8000694:	4603      	mov	r3, r0
 8000696:	75fb      	strb	r3, [r7, #23]

				ret = Lis3dhInteruptSetup();
 8000698:	f000 f8ae 	bl	80007f8 <Lis3dhInteruptSetup>
 800069c:	4603      	mov	r3, r0
 800069e:	75fb      	strb	r3, [r7, #23]
	        }

	    }


return ret;
 80006a0:	7dfb      	ldrb	r3, [r7, #23]




}
 80006a2:	4618      	mov	r0, r3
 80006a4:	3718      	adds	r7, #24
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	2000008c 	.word	0x2000008c

080006b0 <Lis3dhGetAcc>:
HAL_StatusTypeDef Lis3dhGetAcc(){
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b088      	sub	sp, #32
 80006b4:	af02      	add	r7, sp, #8
	uint8_t reciveBuff[12];

	HAL_StatusTypeDef ret;

	//1. Read STATUS_REG
	 sendBuff[0]  = LIS3DH_REG_STATUS  | LIS3DH_READ;
 80006b6:	23a7      	movs	r3, #167	; 0xa7
 80006b8:	753b      	strb	r3, [r7, #20]
		ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 1, HAL_MAX_DELAY);
 80006ba:	4b3a      	ldr	r3, [pc, #232]	; (80007a4 <Lis3dhGetAcc+0xf4>)
 80006bc:	6818      	ldr	r0, [r3, #0]
 80006be:	2130      	movs	r1, #48	; 0x30
 80006c0:	f107 0214 	add.w	r2, r7, #20
 80006c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006c8:	9300      	str	r3, [sp, #0]
 80006ca:	2301      	movs	r3, #1
 80006cc:	f001 fd5c 	bl	8002188 <HAL_I2C_Master_Transmit>
 80006d0:	4603      	mov	r3, r0
 80006d2:	75fb      	strb	r3, [r7, #23]
		ret = HAL_I2C_Master_Receive(I2Cx, LIS3DH_ADDR, reciveBuff, 2, HAL_MAX_DELAY);
 80006d4:	4b33      	ldr	r3, [pc, #204]	; (80007a4 <Lis3dhGetAcc+0xf4>)
 80006d6:	6818      	ldr	r0, [r3, #0]
 80006d8:	2130      	movs	r1, #48	; 0x30
 80006da:	f107 0208 	add.w	r2, r7, #8
 80006de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006e2:	9300      	str	r3, [sp, #0]
 80006e4:	2302      	movs	r3, #2
 80006e6:	f001 fe4d 	bl	8002384 <HAL_I2C_Master_Receive>
 80006ea:	4603      	mov	r3, r0
 80006ec:	75fb      	strb	r3, [r7, #23]

	// if there is new data on any axis proceed ZYXDA,ZDA,YDA = 1 in the status_reg.

	// else do nothing. this isn't ideal maybe we should hang out here till there is new data.
	sendBuff[0] = LIS3DH_REG_OUT_X_L  | LIS3DH_READ;
 80006ee:	23a8      	movs	r3, #168	; 0xa8
 80006f0:	753b      	strb	r3, [r7, #20]
	ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 1, HAL_MAX_DELAY);
 80006f2:	4b2c      	ldr	r3, [pc, #176]	; (80007a4 <Lis3dhGetAcc+0xf4>)
 80006f4:	6818      	ldr	r0, [r3, #0]
 80006f6:	2130      	movs	r1, #48	; 0x30
 80006f8:	f107 0214 	add.w	r2, r7, #20
 80006fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000700:	9300      	str	r3, [sp, #0]
 8000702:	2301      	movs	r3, #1
 8000704:	f001 fd40 	bl	8002188 <HAL_I2C_Master_Transmit>
 8000708:	4603      	mov	r3, r0
 800070a:	75fb      	strb	r3, [r7, #23]
	ret = HAL_I2C_Master_Receive(I2Cx, LIS3DH_ADDR, reciveBuff, 6 , HAL_MAX_DELAY);
 800070c:	4b25      	ldr	r3, [pc, #148]	; (80007a4 <Lis3dhGetAcc+0xf4>)
 800070e:	6818      	ldr	r0, [r3, #0]
 8000710:	2130      	movs	r1, #48	; 0x30
 8000712:	f107 0208 	add.w	r2, r7, #8
 8000716:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800071a:	9300      	str	r3, [sp, #0]
 800071c:	2306      	movs	r3, #6
 800071e:	f001 fe31 	bl	8002384 <HAL_I2C_Master_Receive>
 8000722:	4603      	mov	r3, r0
 8000724:	75fb      	strb	r3, [r7, #23]

	 int16_t val[3];

	 val[0] = (int16_t)reciveBuff[1];
 8000726:	7a7b      	ldrb	r3, [r7, #9]
 8000728:	b21b      	sxth	r3, r3
 800072a:	803b      	strh	r3, [r7, #0]
	  val[0] = (val[0] * 256) + (int16_t)reciveBuff[0];
 800072c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000730:	b29b      	uxth	r3, r3
 8000732:	021b      	lsls	r3, r3, #8
 8000734:	b29a      	uxth	r2, r3
 8000736:	7a3b      	ldrb	r3, [r7, #8]
 8000738:	b29b      	uxth	r3, r3
 800073a:	4413      	add	r3, r2
 800073c:	b29b      	uxth	r3, r3
 800073e:	b21b      	sxth	r3, r3
 8000740:	803b      	strh	r3, [r7, #0]
	  val[1] = (int16_t)reciveBuff[3];
 8000742:	7afb      	ldrb	r3, [r7, #11]
 8000744:	b21b      	sxth	r3, r3
 8000746:	807b      	strh	r3, [r7, #2]
	  val[1] = (val[1] * 256) + (int16_t)reciveBuff[2];
 8000748:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800074c:	b29b      	uxth	r3, r3
 800074e:	021b      	lsls	r3, r3, #8
 8000750:	b29a      	uxth	r2, r3
 8000752:	7abb      	ldrb	r3, [r7, #10]
 8000754:	b29b      	uxth	r3, r3
 8000756:	4413      	add	r3, r2
 8000758:	b29b      	uxth	r3, r3
 800075a:	b21b      	sxth	r3, r3
 800075c:	807b      	strh	r3, [r7, #2]
	  val[2] = (int16_t)reciveBuff[5];
 800075e:	7b7b      	ldrb	r3, [r7, #13]
 8000760:	b21b      	sxth	r3, r3
 8000762:	80bb      	strh	r3, [r7, #4]
	  val[2] = (val[2] * 256) + (int16_t)reciveBuff[4];
 8000764:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000768:	b29b      	uxth	r3, r3
 800076a:	021b      	lsls	r3, r3, #8
 800076c:	b29a      	uxth	r2, r3
 800076e:	7b3b      	ldrb	r3, [r7, #12]
 8000770:	b29b      	uxth	r3, r3
 8000772:	4413      	add	r3, r2
 8000774:	b29b      	uxth	r3, r3
 8000776:	b21b      	sxth	r3, r3
 8000778:	80bb      	strh	r3, [r7, #4]
	LastXAcel=val[0];
 800077a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800077e:	b29a      	uxth	r2, r3
 8000780:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <Lis3dhGetAcc+0xf8>)
 8000782:	801a      	strh	r2, [r3, #0]
	LastYAcel=val[1];
 8000784:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000788:	b29a      	uxth	r2, r3
 800078a:	4b08      	ldr	r3, [pc, #32]	; (80007ac <Lis3dhGetAcc+0xfc>)
 800078c:	801a      	strh	r2, [r3, #0]
	LastZAcel=val[2];
 800078e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000792:	b29a      	uxth	r2, r3
 8000794:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <Lis3dhGetAcc+0x100>)
 8000796:	801a      	strh	r2, [r3, #0]

	return ret;
 8000798:	7dfb      	ldrb	r3, [r7, #23]
}
 800079a:	4618      	mov	r0, r3
 800079c:	3718      	adds	r7, #24
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	2000008c 	.word	0x2000008c
 80007a8:	20000090 	.word	0x20000090
 80007ac:	20000092 	.word	0x20000092
 80007b0:	20000094 	.word	0x20000094

080007b4 <AccelGetData>:
void Lis3dhSetRange(int8_t range){}

void AccelGetData(int16_t *acelX, int16_t*acelY, int16_t*acelZ)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b085      	sub	sp, #20
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	60f8      	str	r0, [r7, #12]
 80007bc:	60b9      	str	r1, [r7, #8]
 80007be:	607a      	str	r2, [r7, #4]
	*acelX = LastXAcel;
 80007c0:	4b0a      	ldr	r3, [pc, #40]	; (80007ec <AccelGetData+0x38>)
 80007c2:	881b      	ldrh	r3, [r3, #0]
 80007c4:	b21a      	sxth	r2, r3
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	801a      	strh	r2, [r3, #0]
	*acelY = LastYAcel;
 80007ca:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <AccelGetData+0x3c>)
 80007cc:	881b      	ldrh	r3, [r3, #0]
 80007ce:	b21a      	sxth	r2, r3
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	801a      	strh	r2, [r3, #0]
	*acelZ = LastZAcel;
 80007d4:	4b07      	ldr	r3, [pc, #28]	; (80007f4 <AccelGetData+0x40>)
 80007d6:	881b      	ldrh	r3, [r3, #0]
 80007d8:	b21a      	sxth	r2, r3
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	801a      	strh	r2, [r3, #0]

}
 80007de:	bf00      	nop
 80007e0:	3714      	adds	r7, #20
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	20000090 	.word	0x20000090
 80007f0:	20000092 	.word	0x20000092
 80007f4:	20000094 	.word	0x20000094

080007f8 <Lis3dhInteruptSetup>:
HAL_StatusTypeDef Lis3dhInteruptSetup()
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b086      	sub	sp, #24
 80007fc:	af02      	add	r7, sp, #8
	HAL_StatusTypeDef ret = HAL_OK;
 80007fe:	2300      	movs	r3, #0
 8000800:	73fb      	strb	r3, [r7, #15]
	uint8_t sendBuff[2];
	uint8_t reciveBuff[12];
	// set the double tap interrupt

	sendBuff[0] = LIS3DH_REG_CTRL1;
 8000802:	2320      	movs	r3, #32
 8000804:	733b      	strb	r3, [r7, #12]
	sendBuff[1] = 0x57;
 8000806:	2357      	movs	r3, #87	; 0x57
 8000808:	737b      	strb	r3, [r7, #13]
	ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 2, HAL_MAX_DELAY);
 800080a:	4b09      	ldr	r3, [pc, #36]	; (8000830 <Lis3dhInteruptSetup+0x38>)
 800080c:	6818      	ldr	r0, [r3, #0]
 800080e:	2130      	movs	r1, #48	; 0x30
 8000810:	f107 020c 	add.w	r2, r7, #12
 8000814:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000818:	9300      	str	r3, [sp, #0]
 800081a:	2302      	movs	r3, #2
 800081c:	f001 fcb4 	bl	8002188 <HAL_I2C_Master_Transmit>
 8000820:	4603      	mov	r3, r0
 8000822:	73fb      	strb	r3, [r7, #15]

	return ret;
 8000824:	7bfb      	ldrb	r3, [r7, #15]

}
 8000826:	4618      	mov	r0, r3
 8000828:	3710      	adds	r7, #16
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	2000008c 	.word	0x2000008c

08000834 <errorHandler>:
void errorHandler()
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
	// handle the error
}
 8000838:	bf00      	nop
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
	...

08000844 <I3G450D_Init>:
static uint8_t spiRxBuf[7];

SPI_HandleTypeDef * spiHandle;

void I3G450D_Init(SPI_HandleTypeDef * xSPI)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]

	spiHandle = xSPI;
 800084c:	4a5d      	ldr	r2, [pc, #372]	; (80009c4 <I3G450D_Init+0x180>)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8000852:	2201      	movs	r2, #1
 8000854:	2102      	movs	r1, #2
 8000856:	485c      	ldr	r0, [pc, #368]	; (80009c8 <I3G450D_Init+0x184>)
 8000858:	f001 fb38 	bl	8001ecc <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800085c:	2014      	movs	r0, #20
 800085e:	f000 ffc1 	bl	80017e4 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	2102      	movs	r1, #2
 8000866:	4858      	ldr	r0, [pc, #352]	; (80009c8 <I3G450D_Init+0x184>)
 8000868:	f001 fb30 	bl	8001ecc <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800086c:	2014      	movs	r0, #20
 800086e:	f000 ffb9 	bl	80017e4 <HAL_Delay>
	spiTxBuf[0]=0x20;
 8000872:	4b56      	ldr	r3, [pc, #344]	; (80009cc <I3G450D_Init+0x188>)
 8000874:	2220      	movs	r2, #32
 8000876:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0xff;
 8000878:	4b54      	ldr	r3, [pc, #336]	; (80009cc <I3G450D_Init+0x188>)
 800087a:	22ff      	movs	r2, #255	; 0xff
 800087c:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(spiHandle,spiTxBuf,2,50);
 800087e:	4b51      	ldr	r3, [pc, #324]	; (80009c4 <I3G450D_Init+0x180>)
 8000880:	6818      	ldr	r0, [r3, #0]
 8000882:	2332      	movs	r3, #50	; 0x32
 8000884:	2202      	movs	r2, #2
 8000886:	4951      	ldr	r1, [pc, #324]	; (80009cc <I3G450D_Init+0x188>)
 8000888:	f003 f999 	bl	8003bbe <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 800088c:	2201      	movs	r2, #1
 800088e:	2102      	movs	r1, #2
 8000890:	484d      	ldr	r0, [pc, #308]	; (80009c8 <I3G450D_Init+0x184>)
 8000892:	f001 fb1b 	bl	8001ecc <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000896:	2014      	movs	r0, #20
 8000898:	f000 ffa4 	bl	80017e4 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 800089c:	2200      	movs	r2, #0
 800089e:	2102      	movs	r1, #2
 80008a0:	4849      	ldr	r0, [pc, #292]	; (80009c8 <I3G450D_Init+0x184>)
 80008a2:	f001 fb13 	bl	8001ecc <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80008a6:	2014      	movs	r0, #20
 80008a8:	f000 ff9c 	bl	80017e4 <HAL_Delay>
	spiTxBuf[0]=0x21;
 80008ac:	4b47      	ldr	r3, [pc, #284]	; (80009cc <I3G450D_Init+0x188>)
 80008ae:	2221      	movs	r2, #33	; 0x21
 80008b0:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x00;
 80008b2:	4b46      	ldr	r3, [pc, #280]	; (80009cc <I3G450D_Init+0x188>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(spiHandle,spiTxBuf,2,50);
 80008b8:	4b42      	ldr	r3, [pc, #264]	; (80009c4 <I3G450D_Init+0x180>)
 80008ba:	6818      	ldr	r0, [r3, #0]
 80008bc:	2332      	movs	r3, #50	; 0x32
 80008be:	2202      	movs	r2, #2
 80008c0:	4942      	ldr	r1, [pc, #264]	; (80009cc <I3G450D_Init+0x188>)
 80008c2:	f003 f97c 	bl	8003bbe <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 80008c6:	2201      	movs	r2, #1
 80008c8:	2102      	movs	r1, #2
 80008ca:	483f      	ldr	r0, [pc, #252]	; (80009c8 <I3G450D_Init+0x184>)
 80008cc:	f001 fafe 	bl	8001ecc <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80008d0:	2014      	movs	r0, #20
 80008d2:	f000 ff87 	bl	80017e4 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 80008d6:	2200      	movs	r2, #0
 80008d8:	2102      	movs	r1, #2
 80008da:	483b      	ldr	r0, [pc, #236]	; (80009c8 <I3G450D_Init+0x184>)
 80008dc:	f001 faf6 	bl	8001ecc <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80008e0:	2014      	movs	r0, #20
 80008e2:	f000 ff7f 	bl	80017e4 <HAL_Delay>
	spiTxBuf[0]=0x22;
 80008e6:	4b39      	ldr	r3, [pc, #228]	; (80009cc <I3G450D_Init+0x188>)
 80008e8:	2222      	movs	r2, #34	; 0x22
 80008ea:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x00;
 80008ec:	4b37      	ldr	r3, [pc, #220]	; (80009cc <I3G450D_Init+0x188>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(spiHandle,spiTxBuf,2,50);
 80008f2:	4b34      	ldr	r3, [pc, #208]	; (80009c4 <I3G450D_Init+0x180>)
 80008f4:	6818      	ldr	r0, [r3, #0]
 80008f6:	2332      	movs	r3, #50	; 0x32
 80008f8:	2202      	movs	r2, #2
 80008fa:	4934      	ldr	r1, [pc, #208]	; (80009cc <I3G450D_Init+0x188>)
 80008fc:	f003 f95f 	bl	8003bbe <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8000900:	2201      	movs	r2, #1
 8000902:	2102      	movs	r1, #2
 8000904:	4830      	ldr	r0, [pc, #192]	; (80009c8 <I3G450D_Init+0x184>)
 8000906:	f001 fae1 	bl	8001ecc <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800090a:	2014      	movs	r0, #20
 800090c:	f000 ff6a 	bl	80017e4 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8000910:	2200      	movs	r2, #0
 8000912:	2102      	movs	r1, #2
 8000914:	482c      	ldr	r0, [pc, #176]	; (80009c8 <I3G450D_Init+0x184>)
 8000916:	f001 fad9 	bl	8001ecc <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800091a:	2014      	movs	r0, #20
 800091c:	f000 ff62 	bl	80017e4 <HAL_Delay>
	spiTxBuf[0]=0x23;
 8000920:	4b2a      	ldr	r3, [pc, #168]	; (80009cc <I3G450D_Init+0x188>)
 8000922:	2223      	movs	r2, #35	; 0x23
 8000924:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x20;
 8000926:	4b29      	ldr	r3, [pc, #164]	; (80009cc <I3G450D_Init+0x188>)
 8000928:	2220      	movs	r2, #32
 800092a:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(spiHandle,spiTxBuf,2,50);
 800092c:	4b25      	ldr	r3, [pc, #148]	; (80009c4 <I3G450D_Init+0x180>)
 800092e:	6818      	ldr	r0, [r3, #0]
 8000930:	2332      	movs	r3, #50	; 0x32
 8000932:	2202      	movs	r2, #2
 8000934:	4925      	ldr	r1, [pc, #148]	; (80009cc <I3G450D_Init+0x188>)
 8000936:	f003 f942 	bl	8003bbe <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 800093a:	2201      	movs	r2, #1
 800093c:	2102      	movs	r1, #2
 800093e:	4822      	ldr	r0, [pc, #136]	; (80009c8 <I3G450D_Init+0x184>)
 8000940:	f001 fac4 	bl	8001ecc <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000944:	2014      	movs	r0, #20
 8000946:	f000 ff4d 	bl	80017e4 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 800094a:	2200      	movs	r2, #0
 800094c:	2102      	movs	r1, #2
 800094e:	481e      	ldr	r0, [pc, #120]	; (80009c8 <I3G450D_Init+0x184>)
 8000950:	f001 fabc 	bl	8001ecc <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000954:	2014      	movs	r0, #20
 8000956:	f000 ff45 	bl	80017e4 <HAL_Delay>
	spiTxBuf[0]=0x24;
 800095a:	4b1c      	ldr	r3, [pc, #112]	; (80009cc <I3G450D_Init+0x188>)
 800095c:	2224      	movs	r2, #36	; 0x24
 800095e:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x10;
 8000960:	4b1a      	ldr	r3, [pc, #104]	; (80009cc <I3G450D_Init+0x188>)
 8000962:	2210      	movs	r2, #16
 8000964:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(spiHandle,spiTxBuf,2,50);
 8000966:	4b17      	ldr	r3, [pc, #92]	; (80009c4 <I3G450D_Init+0x180>)
 8000968:	6818      	ldr	r0, [r3, #0]
 800096a:	2332      	movs	r3, #50	; 0x32
 800096c:	2202      	movs	r2, #2
 800096e:	4917      	ldr	r1, [pc, #92]	; (80009cc <I3G450D_Init+0x188>)
 8000970:	f003 f925 	bl	8003bbe <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8000974:	2201      	movs	r2, #1
 8000976:	2102      	movs	r1, #2
 8000978:	4813      	ldr	r0, [pc, #76]	; (80009c8 <I3G450D_Init+0x184>)
 800097a:	f001 faa7 	bl	8001ecc <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800097e:	2014      	movs	r0, #20
 8000980:	f000 ff30 	bl	80017e4 <HAL_Delay>
	// read who am i register
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8000984:	2200      	movs	r2, #0
 8000986:	2102      	movs	r1, #2
 8000988:	480f      	ldr	r0, [pc, #60]	; (80009c8 <I3G450D_Init+0x184>)
 800098a:	f001 fa9f 	bl	8001ecc <HAL_GPIO_WritePin>
	spiTxBuf[0]=0x0F|0x80;
 800098e:	4b0f      	ldr	r3, [pc, #60]	; (80009cc <I3G450D_Init+0x188>)
 8000990:	228f      	movs	r2, #143	; 0x8f
 8000992:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(spiHandle,spiTxBuf,1,50);
 8000994:	4b0b      	ldr	r3, [pc, #44]	; (80009c4 <I3G450D_Init+0x180>)
 8000996:	6818      	ldr	r0, [r3, #0]
 8000998:	2332      	movs	r3, #50	; 0x32
 800099a:	2201      	movs	r2, #1
 800099c:	490b      	ldr	r1, [pc, #44]	; (80009cc <I3G450D_Init+0x188>)
 800099e:	f003 f90e 	bl	8003bbe <HAL_SPI_Transmit>
	HAL_SPI_Receive(spiHandle,&spiRxBuf[1],1,50);
 80009a2:	4b08      	ldr	r3, [pc, #32]	; (80009c4 <I3G450D_Init+0x180>)
 80009a4:	6818      	ldr	r0, [r3, #0]
 80009a6:	2332      	movs	r3, #50	; 0x32
 80009a8:	2201      	movs	r2, #1
 80009aa:	4909      	ldr	r1, [pc, #36]	; (80009d0 <I3G450D_Init+0x18c>)
 80009ac:	f003 fa43 	bl	8003e36 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 80009b0:	2201      	movs	r2, #1
 80009b2:	2102      	movs	r1, #2
 80009b4:	4804      	ldr	r0, [pc, #16]	; (80009c8 <I3G450D_Init+0x184>)
 80009b6:	f001 fa89 	bl	8001ecc <HAL_GPIO_WritePin>
}
 80009ba:	bf00      	nop
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	200000a4 	.word	0x200000a4
 80009c8:	40020800 	.word	0x40020800
 80009cc:	20000098 	.word	0x20000098
 80009d0:	2000009d 	.word	0x2000009d

080009d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009da:	f000 fe91 	bl	8001700 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009de:	f000 f843 	bl	8000a68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009e2:	f000 f983 	bl	8000cec <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80009e6:	f000 f957 	bl	8000c98 <MX_USART1_UART_Init>
  MX_I2C3_Init();
 80009ea:	f000 f8a9 	bl	8000b40 <MX_I2C3_Init>
  MX_SPI5_Init();
 80009ee:	f000 f8e7 	bl	8000bc0 <MX_SPI5_Init>
  MX_TIM7_Init();
 80009f2:	f000 f91b 	bl	8000c2c <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart1);
 80009f6:	4816      	ldr	r0, [pc, #88]	; (8000a50 <main+0x7c>)
 80009f8:	f000 fbba 	bl	8001170 <RetargetInit>
  I3G450D_Init(&hspi5);
 80009fc:	4815      	ldr	r0, [pc, #84]	; (8000a54 <main+0x80>)
 80009fe:	f7ff ff21 	bl	8000844 <I3G450D_Init>
  Lis3dhInit(&hi2c3);
 8000a02:	4815      	ldr	r0, [pc, #84]	; (8000a58 <main+0x84>)
 8000a04:	f7ff fdc6 	bl	8000594 <Lis3dhInit>

  if (HAL_TIM_Base_Start_IT(&htim7) != HAL_OK)
 8000a08:	4814      	ldr	r0, [pc, #80]	; (8000a5c <main+0x88>)
 8000a0a:	f003 fe47 	bl	800469c <HAL_TIM_Base_Start_IT>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <main+0x44>
    {
      /* Counter Enable Error */
      Error_Handler();
 8000a14:	f000 fba6 	bl	8001164 <Error_Handler>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(sampleAccelFlag){
 8000a18:	4b11      	ldr	r3, [pc, #68]	; (8000a60 <main+0x8c>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d0fb      	beq.n	8000a18 <main+0x44>
		Lis3dhGetAcc();
 8000a20:	f7ff fe46 	bl	80006b0 <Lis3dhGetAcc>
		int16_t acelX,acelY,acelZ;
		AccelGetData(&acelX, &acelY, &acelZ);
 8000a24:	1cba      	adds	r2, r7, #2
 8000a26:	1d39      	adds	r1, r7, #4
 8000a28:	1dbb      	adds	r3, r7, #6
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f7ff fec2 	bl	80007b4 <AccelGetData>
		printf("%d,%d,%d \n",acelX,acelY,acelZ);
 8000a30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a34:	4619      	mov	r1, r3
 8000a36:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000a40:	4808      	ldr	r0, [pc, #32]	; (8000a64 <main+0x90>)
 8000a42:	f005 f9e3 	bl	8005e0c <iprintf>
		sampleAccelFlag = 0;
 8000a46:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <main+0x8c>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
	  if(sampleAccelFlag){
 8000a4c:	e7e4      	b.n	8000a18 <main+0x44>
 8000a4e:	bf00      	nop
 8000a50:	2000019c 	.word	0x2000019c
 8000a54:	200000fc 	.word	0x200000fc
 8000a58:	200000a8 	.word	0x200000a8
 8000a5c:	20000154 	.word	0x20000154
 8000a60:	200001e0 	.word	0x200001e0
 8000a64:	08006edc 	.word	0x08006edc

08000a68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b094      	sub	sp, #80	; 0x50
 8000a6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a6e:	f107 0320 	add.w	r3, r7, #32
 8000a72:	2230      	movs	r2, #48	; 0x30
 8000a74:	2100      	movs	r1, #0
 8000a76:	4618      	mov	r0, r3
 8000a78:	f005 f9c0 	bl	8005dfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a7c:	f107 030c 	add.w	r3, r7, #12
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
 8000a8a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	60bb      	str	r3, [r7, #8]
 8000a90:	4b29      	ldr	r3, [pc, #164]	; (8000b38 <SystemClock_Config+0xd0>)
 8000a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a94:	4a28      	ldr	r2, [pc, #160]	; (8000b38 <SystemClock_Config+0xd0>)
 8000a96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a9a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a9c:	4b26      	ldr	r3, [pc, #152]	; (8000b38 <SystemClock_Config+0xd0>)
 8000a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa4:	60bb      	str	r3, [r7, #8]
 8000aa6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	607b      	str	r3, [r7, #4]
 8000aac:	4b23      	ldr	r3, [pc, #140]	; (8000b3c <SystemClock_Config+0xd4>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ab4:	4a21      	ldr	r2, [pc, #132]	; (8000b3c <SystemClock_Config+0xd4>)
 8000ab6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aba:	6013      	str	r3, [r2, #0]
 8000abc:	4b1f      	ldr	r3, [pc, #124]	; (8000b3c <SystemClock_Config+0xd4>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ac4:	607b      	str	r3, [r7, #4]
 8000ac6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000acc:	2301      	movs	r3, #1
 8000ace:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ad0:	2310      	movs	r3, #16
 8000ad2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000adc:	2308      	movs	r3, #8
 8000ade:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000ae0:	2348      	movs	r3, #72	; 0x48
 8000ae2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ae8:	2307      	movs	r3, #7
 8000aea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aec:	f107 0320 	add.w	r3, r7, #32
 8000af0:	4618      	mov	r0, r3
 8000af2:	f002 fb43 	bl	800317c <HAL_RCC_OscConfig>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000afc:	f000 fb32 	bl	8001164 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b00:	230f      	movs	r3, #15
 8000b02:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b04:	2302      	movs	r3, #2
 8000b06:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b10:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000b12:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b16:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b18:	f107 030c 	add.w	r3, r7, #12
 8000b1c:	2102      	movs	r1, #2
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f002 fda4 	bl	800366c <HAL_RCC_ClockConfig>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000b2a:	f000 fb1b 	bl	8001164 <Error_Handler>
  }
}
 8000b2e:	bf00      	nop
 8000b30:	3750      	adds	r7, #80	; 0x50
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40023800 	.word	0x40023800
 8000b3c:	40007000 	.word	0x40007000

08000b40 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000b44:	4b1b      	ldr	r3, [pc, #108]	; (8000bb4 <MX_I2C3_Init+0x74>)
 8000b46:	4a1c      	ldr	r2, [pc, #112]	; (8000bb8 <MX_I2C3_Init+0x78>)
 8000b48:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000b4a:	4b1a      	ldr	r3, [pc, #104]	; (8000bb4 <MX_I2C3_Init+0x74>)
 8000b4c:	4a1b      	ldr	r2, [pc, #108]	; (8000bbc <MX_I2C3_Init+0x7c>)
 8000b4e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b50:	4b18      	ldr	r3, [pc, #96]	; (8000bb4 <MX_I2C3_Init+0x74>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000b56:	4b17      	ldr	r3, [pc, #92]	; (8000bb4 <MX_I2C3_Init+0x74>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b5c:	4b15      	ldr	r3, [pc, #84]	; (8000bb4 <MX_I2C3_Init+0x74>)
 8000b5e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b62:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b64:	4b13      	ldr	r3, [pc, #76]	; (8000bb4 <MX_I2C3_Init+0x74>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000b6a:	4b12      	ldr	r3, [pc, #72]	; (8000bb4 <MX_I2C3_Init+0x74>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b70:	4b10      	ldr	r3, [pc, #64]	; (8000bb4 <MX_I2C3_Init+0x74>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b76:	4b0f      	ldr	r3, [pc, #60]	; (8000bb4 <MX_I2C3_Init+0x74>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000b7c:	480d      	ldr	r0, [pc, #52]	; (8000bb4 <MX_I2C3_Init+0x74>)
 8000b7e:	f001 f9bf 	bl	8001f00 <HAL_I2C_Init>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000b88:	f000 faec 	bl	8001164 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	4809      	ldr	r0, [pc, #36]	; (8000bb4 <MX_I2C3_Init+0x74>)
 8000b90:	f002 fa79 	bl	8003086 <HAL_I2CEx_ConfigAnalogFilter>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000b9a:	f000 fae3 	bl	8001164 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	4804      	ldr	r0, [pc, #16]	; (8000bb4 <MX_I2C3_Init+0x74>)
 8000ba2:	f002 faac 	bl	80030fe <HAL_I2CEx_ConfigDigitalFilter>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000bac:	f000 fada 	bl	8001164 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000bb0:	bf00      	nop
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	200000a8 	.word	0x200000a8
 8000bb8:	40005c00 	.word	0x40005c00
 8000bbc:	000186a0 	.word	0x000186a0

08000bc0 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000bc4:	4b17      	ldr	r3, [pc, #92]	; (8000c24 <MX_SPI5_Init+0x64>)
 8000bc6:	4a18      	ldr	r2, [pc, #96]	; (8000c28 <MX_SPI5_Init+0x68>)
 8000bc8:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000bca:	4b16      	ldr	r3, [pc, #88]	; (8000c24 <MX_SPI5_Init+0x64>)
 8000bcc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000bd0:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000bd2:	4b14      	ldr	r3, [pc, #80]	; (8000c24 <MX_SPI5_Init+0x64>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bd8:	4b12      	ldr	r3, [pc, #72]	; (8000c24 <MX_SPI5_Init+0x64>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bde:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <MX_SPI5_Init+0x64>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000be4:	4b0f      	ldr	r3, [pc, #60]	; (8000c24 <MX_SPI5_Init+0x64>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000bea:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <MX_SPI5_Init+0x64>)
 8000bec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bf0:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000bf2:	4b0c      	ldr	r3, [pc, #48]	; (8000c24 <MX_SPI5_Init+0x64>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bf8:	4b0a      	ldr	r3, [pc, #40]	; (8000c24 <MX_SPI5_Init+0x64>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bfe:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <MX_SPI5_Init+0x64>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c04:	4b07      	ldr	r3, [pc, #28]	; (8000c24 <MX_SPI5_Init+0x64>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000c0a:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <MX_SPI5_Init+0x64>)
 8000c0c:	220a      	movs	r2, #10
 8000c0e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000c10:	4804      	ldr	r0, [pc, #16]	; (8000c24 <MX_SPI5_Init+0x64>)
 8000c12:	f002 ff4b 	bl	8003aac <HAL_SPI_Init>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000c1c:	f000 faa2 	bl	8001164 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000c20:	bf00      	nop
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	200000fc 	.word	0x200000fc
 8000c28:	40015000 	.word	0x40015000

08000c2c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c32:	463b      	mov	r3, r7
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000c3a:	4b15      	ldr	r3, [pc, #84]	; (8000c90 <MX_TIM7_Init+0x64>)
 8000c3c:	4a15      	ldr	r2, [pc, #84]	; (8000c94 <MX_TIM7_Init+0x68>)
 8000c3e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 101-1;
 8000c40:	4b13      	ldr	r3, [pc, #76]	; (8000c90 <MX_TIM7_Init+0x64>)
 8000c42:	2264      	movs	r2, #100	; 0x64
 8000c44:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c46:	4b12      	ldr	r3, [pc, #72]	; (8000c90 <MX_TIM7_Init+0x64>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 7200;
 8000c4c:	4b10      	ldr	r3, [pc, #64]	; (8000c90 <MX_TIM7_Init+0x64>)
 8000c4e:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8000c52:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c54:	4b0e      	ldr	r3, [pc, #56]	; (8000c90 <MX_TIM7_Init+0x64>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000c5a:	480d      	ldr	r0, [pc, #52]	; (8000c90 <MX_TIM7_Init+0x64>)
 8000c5c:	f003 fcce 	bl	80045fc <HAL_TIM_Base_Init>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8000c66:	f000 fa7d 	bl	8001164 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000c72:	463b      	mov	r3, r7
 8000c74:	4619      	mov	r1, r3
 8000c76:	4806      	ldr	r0, [pc, #24]	; (8000c90 <MX_TIM7_Init+0x64>)
 8000c78:	f003 ff50 	bl	8004b1c <HAL_TIMEx_MasterConfigSynchronization>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8000c82:	f000 fa6f 	bl	8001164 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000c86:	bf00      	nop
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	20000154 	.word	0x20000154
 8000c94:	40001400 	.word	0x40001400

08000c98 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c9c:	4b11      	ldr	r3, [pc, #68]	; (8000ce4 <MX_USART1_UART_Init+0x4c>)
 8000c9e:	4a12      	ldr	r2, [pc, #72]	; (8000ce8 <MX_USART1_UART_Init+0x50>)
 8000ca0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ca2:	4b10      	ldr	r3, [pc, #64]	; (8000ce4 <MX_USART1_UART_Init+0x4c>)
 8000ca4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ca8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000caa:	4b0e      	ldr	r3, [pc, #56]	; (8000ce4 <MX_USART1_UART_Init+0x4c>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ce4 <MX_USART1_UART_Init+0x4c>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ce4 <MX_USART1_UART_Init+0x4c>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000cbc:	4b09      	ldr	r3, [pc, #36]	; (8000ce4 <MX_USART1_UART_Init+0x4c>)
 8000cbe:	220c      	movs	r2, #12
 8000cc0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cc2:	4b08      	ldr	r3, [pc, #32]	; (8000ce4 <MX_USART1_UART_Init+0x4c>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cc8:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <MX_USART1_UART_Init+0x4c>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cce:	4805      	ldr	r0, [pc, #20]	; (8000ce4 <MX_USART1_UART_Init+0x4c>)
 8000cd0:	f003 ffb4 	bl	8004c3c <HAL_UART_Init>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000cda:	f000 fa43 	bl	8001164 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	2000019c 	.word	0x2000019c
 8000ce8:	40011000 	.word	0x40011000

08000cec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b08e      	sub	sp, #56	; 0x38
 8000cf0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
 8000cfa:	605a      	str	r2, [r3, #4]
 8000cfc:	609a      	str	r2, [r3, #8]
 8000cfe:	60da      	str	r2, [r3, #12]
 8000d00:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	623b      	str	r3, [r7, #32]
 8000d06:	4bb2      	ldr	r3, [pc, #712]	; (8000fd0 <MX_GPIO_Init+0x2e4>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	4ab1      	ldr	r2, [pc, #708]	; (8000fd0 <MX_GPIO_Init+0x2e4>)
 8000d0c:	f043 0304 	orr.w	r3, r3, #4
 8000d10:	6313      	str	r3, [r2, #48]	; 0x30
 8000d12:	4baf      	ldr	r3, [pc, #700]	; (8000fd0 <MX_GPIO_Init+0x2e4>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	f003 0304 	and.w	r3, r3, #4
 8000d1a:	623b      	str	r3, [r7, #32]
 8000d1c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	61fb      	str	r3, [r7, #28]
 8000d22:	4bab      	ldr	r3, [pc, #684]	; (8000fd0 <MX_GPIO_Init+0x2e4>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	4aaa      	ldr	r2, [pc, #680]	; (8000fd0 <MX_GPIO_Init+0x2e4>)
 8000d28:	f043 0320 	orr.w	r3, r3, #32
 8000d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2e:	4ba8      	ldr	r3, [pc, #672]	; (8000fd0 <MX_GPIO_Init+0x2e4>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	f003 0320 	and.w	r3, r3, #32
 8000d36:	61fb      	str	r3, [r7, #28]
 8000d38:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	61bb      	str	r3, [r7, #24]
 8000d3e:	4ba4      	ldr	r3, [pc, #656]	; (8000fd0 <MX_GPIO_Init+0x2e4>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	4aa3      	ldr	r2, [pc, #652]	; (8000fd0 <MX_GPIO_Init+0x2e4>)
 8000d44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d48:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4a:	4ba1      	ldr	r3, [pc, #644]	; (8000fd0 <MX_GPIO_Init+0x2e4>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d52:	61bb      	str	r3, [r7, #24]
 8000d54:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	617b      	str	r3, [r7, #20]
 8000d5a:	4b9d      	ldr	r3, [pc, #628]	; (8000fd0 <MX_GPIO_Init+0x2e4>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	4a9c      	ldr	r2, [pc, #624]	; (8000fd0 <MX_GPIO_Init+0x2e4>)
 8000d60:	f043 0301 	orr.w	r3, r3, #1
 8000d64:	6313      	str	r3, [r2, #48]	; 0x30
 8000d66:	4b9a      	ldr	r3, [pc, #616]	; (8000fd0 <MX_GPIO_Init+0x2e4>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	f003 0301 	and.w	r3, r3, #1
 8000d6e:	617b      	str	r3, [r7, #20]
 8000d70:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	613b      	str	r3, [r7, #16]
 8000d76:	4b96      	ldr	r3, [pc, #600]	; (8000fd0 <MX_GPIO_Init+0x2e4>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	4a95      	ldr	r2, [pc, #596]	; (8000fd0 <MX_GPIO_Init+0x2e4>)
 8000d7c:	f043 0302 	orr.w	r3, r3, #2
 8000d80:	6313      	str	r3, [r2, #48]	; 0x30
 8000d82:	4b93      	ldr	r3, [pc, #588]	; (8000fd0 <MX_GPIO_Init+0x2e4>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	f003 0302 	and.w	r3, r3, #2
 8000d8a:	613b      	str	r3, [r7, #16]
 8000d8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	60fb      	str	r3, [r7, #12]
 8000d92:	4b8f      	ldr	r3, [pc, #572]	; (8000fd0 <MX_GPIO_Init+0x2e4>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	4a8e      	ldr	r2, [pc, #568]	; (8000fd0 <MX_GPIO_Init+0x2e4>)
 8000d98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9e:	4b8c      	ldr	r3, [pc, #560]	; (8000fd0 <MX_GPIO_Init+0x2e4>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	60bb      	str	r3, [r7, #8]
 8000dae:	4b88      	ldr	r3, [pc, #544]	; (8000fd0 <MX_GPIO_Init+0x2e4>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	4a87      	ldr	r2, [pc, #540]	; (8000fd0 <MX_GPIO_Init+0x2e4>)
 8000db4:	f043 0310 	orr.w	r3, r3, #16
 8000db8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dba:	4b85      	ldr	r3, [pc, #532]	; (8000fd0 <MX_GPIO_Init+0x2e4>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	f003 0310 	and.w	r3, r3, #16
 8000dc2:	60bb      	str	r3, [r7, #8]
 8000dc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	607b      	str	r3, [r7, #4]
 8000dca:	4b81      	ldr	r3, [pc, #516]	; (8000fd0 <MX_GPIO_Init+0x2e4>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	4a80      	ldr	r2, [pc, #512]	; (8000fd0 <MX_GPIO_Init+0x2e4>)
 8000dd0:	f043 0308 	orr.w	r3, r3, #8
 8000dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd6:	4b7e      	ldr	r3, [pc, #504]	; (8000fd0 <MX_GPIO_Init+0x2e4>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	f003 0308 	and.w	r3, r3, #8
 8000dde:	607b      	str	r3, [r7, #4]
 8000de0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000de2:	2200      	movs	r2, #0
 8000de4:	2116      	movs	r1, #22
 8000de6:	487b      	ldr	r0, [pc, #492]	; (8000fd4 <MX_GPIO_Init+0x2e8>)
 8000de8:	f001 f870 	bl	8001ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000dec:	2200      	movs	r2, #0
 8000dee:	2180      	movs	r1, #128	; 0x80
 8000df0:	4879      	ldr	r0, [pc, #484]	; (8000fd8 <MX_GPIO_Init+0x2ec>)
 8000df2:	f001 f86b 	bl	8001ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000df6:	2200      	movs	r2, #0
 8000df8:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000dfc:	4877      	ldr	r0, [pc, #476]	; (8000fdc <MX_GPIO_Init+0x2f0>)
 8000dfe:	f001 f865 	bl	8001ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000e02:	2200      	movs	r2, #0
 8000e04:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000e08:	4875      	ldr	r0, [pc, #468]	; (8000fe0 <MX_GPIO_Init+0x2f4>)
 8000e0a:	f001 f85f 	bl	8001ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8000e0e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000e12:	627b      	str	r3, [r7, #36]	; 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e14:	2302      	movs	r3, #2
 8000e16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e20:	230c      	movs	r3, #12
 8000e22:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e28:	4619      	mov	r1, r3
 8000e2a:	486e      	ldr	r0, [pc, #440]	; (8000fe4 <MX_GPIO_Init+0x2f8>)
 8000e2c:	f000 fea2 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 8000e30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e36:	2302      	movs	r3, #2
 8000e38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e42:	230e      	movs	r3, #14
 8000e44:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000e46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4865      	ldr	r0, [pc, #404]	; (8000fe4 <MX_GPIO_Init+0x2f8>)
 8000e4e:	f000 fe91 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8000e52:	2301      	movs	r3, #1
 8000e54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e56:	2302      	movs	r3, #2
 8000e58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e5e:	2303      	movs	r3, #3
 8000e60:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e62:	230c      	movs	r3, #12
 8000e64:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8000e66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4859      	ldr	r0, [pc, #356]	; (8000fd4 <MX_GPIO_Init+0x2e8>)
 8000e6e:	f000 fe81 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000e72:	2316      	movs	r3, #22
 8000e74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e76:	2301      	movs	r3, #1
 8000e78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e86:	4619      	mov	r1, r3
 8000e88:	4852      	ldr	r0, [pc, #328]	; (8000fd4 <MX_GPIO_Init+0x2e8>)
 8000e8a:	f000 fe73 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000e8e:	f248 0307 	movw	r3, #32775	; 0x8007
 8000e92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e94:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000e98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	484c      	ldr	r0, [pc, #304]	; (8000fd8 <MX_GPIO_Init+0x2ec>)
 8000ea6:	f000 fe65 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin
                           R5_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8000eaa:	f641 0358 	movw	r3, #6232	; 0x1858
 8000eae:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ebc:	230e      	movs	r3, #14
 8000ebe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4844      	ldr	r0, [pc, #272]	; (8000fd8 <MX_GPIO_Init+0x2ec>)
 8000ec8:	f000 fe54 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000ecc:	2380      	movs	r3, #128	; 0x80
 8000ece:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000edc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	483d      	ldr	r0, [pc, #244]	; (8000fd8 <MX_GPIO_Init+0x2ec>)
 8000ee4:	f000 fe46 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000ee8:	2320      	movs	r3, #32
 8000eea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000eec:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000ef0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000ef6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000efa:	4619      	mov	r1, r3
 8000efc:	4835      	ldr	r0, [pc, #212]	; (8000fd4 <MX_GPIO_Init+0x2e8>)
 8000efe:	f000 fe39 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8000f02:	2303      	movs	r3, #3
 8000f04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f06:	2302      	movs	r3, #2
 8000f08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000f12:	2309      	movs	r3, #9
 8000f14:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4832      	ldr	r0, [pc, #200]	; (8000fe8 <MX_GPIO_Init+0x2fc>)
 8000f1e:	f000 fe29 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000f22:	2304      	movs	r3, #4
 8000f24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f26:	2300      	movs	r3, #0
 8000f28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000f2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f32:	4619      	mov	r1, r3
 8000f34:	482c      	ldr	r0, [pc, #176]	; (8000fe8 <MX_GPIO_Init+0x2fc>)
 8000f36:	f000 fe1d 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8000f3a:	f248 1333 	movw	r3, #33075	; 0x8133
 8000f3e:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f40:	2302      	movs	r3, #2
 8000f42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f48:	2303      	movs	r3, #3
 8000f4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f4c:	230c      	movs	r3, #12
 8000f4e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f54:	4619      	mov	r1, r3
 8000f56:	4822      	ldr	r0, [pc, #136]	; (8000fe0 <MX_GPIO_Init+0x2f4>)
 8000f58:	f000 fe0c 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8000f5c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000f60:	627b      	str	r3, [r7, #36]	; 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f62:	2302      	movs	r3, #2
 8000f64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f6e:	230c      	movs	r3, #12
 8000f70:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f76:	4619      	mov	r1, r3
 8000f78:	481c      	ldr	r0, [pc, #112]	; (8000fec <MX_GPIO_Init+0x300>)
 8000f7a:	f000 fdfb 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8000f7e:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000f82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f84:	2302      	movs	r3, #2
 8000f86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f90:	230e      	movs	r3, #14
 8000f92:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4813      	ldr	r0, [pc, #76]	; (8000fe8 <MX_GPIO_Init+0x2fc>)
 8000f9c:	f000 fdea 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8000fa0:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8000fa4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8000fb2:	230c      	movs	r3, #12
 8000fb4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fba:	4619      	mov	r1, r3
 8000fbc:	480a      	ldr	r0, [pc, #40]	; (8000fe8 <MX_GPIO_Init+0x2fc>)
 8000fbe:	f000 fdd9 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8000fc2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	62bb      	str	r3, [r7, #40]	; 0x28
 8000fcc:	e010      	b.n	8000ff0 <MX_GPIO_Init+0x304>
 8000fce:	bf00      	nop
 8000fd0:	40023800 	.word	0x40023800
 8000fd4:	40020800 	.word	0x40020800
 8000fd8:	40020000 	.word	0x40020000
 8000fdc:	40020c00 	.word	0x40020c00
 8000fe0:	40021800 	.word	0x40021800
 8000fe4:	40021400 	.word	0x40021400
 8000fe8:	40020400 	.word	0x40020400
 8000fec:	40021000 	.word	0x40021000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8000ff4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	484b      	ldr	r0, [pc, #300]	; (8001128 <MX_GPIO_Init+0x43c>)
 8000ffc:	f000 fdba 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8001000:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001004:	627b      	str	r3, [r7, #36]	; 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001006:	2302      	movs	r3, #2
 8001008:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800100e:	2303      	movs	r3, #3
 8001010:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001012:	230c      	movs	r3, #12
 8001014:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001016:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800101a:	4619      	mov	r1, r3
 800101c:	4843      	ldr	r0, [pc, #268]	; (800112c <MX_GPIO_Init+0x440>)
 800101e:	f000 fda9 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8001022:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001026:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001028:	2300      	movs	r3, #0
 800102a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102c:	2300      	movs	r3, #0
 800102e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8001030:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001034:	4619      	mov	r1, r3
 8001036:	483d      	ldr	r0, [pc, #244]	; (800112c <MX_GPIO_Init+0x440>)
 8001038:	f000 fd9c 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 800103c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001040:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001042:	2301      	movs	r3, #1
 8001044:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	2300      	movs	r3, #0
 8001048:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104a:	2300      	movs	r3, #0
 800104c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800104e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001052:	4619      	mov	r1, r3
 8001054:	4835      	ldr	r0, [pc, #212]	; (800112c <MX_GPIO_Init+0x440>)
 8001056:	f000 fd8d 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 800105a:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800105e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001060:	2302      	movs	r3, #2
 8001062:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001068:	2300      	movs	r3, #0
 800106a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800106c:	230e      	movs	r3, #14
 800106e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001070:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001074:	4619      	mov	r1, r3
 8001076:	482e      	ldr	r0, [pc, #184]	; (8001130 <MX_GPIO_Init+0x444>)
 8001078:	f000 fd7c 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800107c:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001080:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001082:	2302      	movs	r3, #2
 8001084:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001086:	2300      	movs	r3, #0
 8001088:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108a:	2300      	movs	r3, #0
 800108c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800108e:	230e      	movs	r3, #14
 8001090:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001092:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001096:	4619      	mov	r1, r3
 8001098:	4826      	ldr	r0, [pc, #152]	; (8001134 <MX_GPIO_Init+0x448>)
 800109a:	f000 fd6b 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : G7_Pin B2_Pin */
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 800109e:	2348      	movs	r3, #72	; 0x48
 80010a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a2:	2302      	movs	r3, #2
 80010a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a6:	2300      	movs	r3, #0
 80010a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010aa:	2300      	movs	r3, #0
 80010ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010ae:	230e      	movs	r3, #14
 80010b0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010b6:	4619      	mov	r1, r3
 80010b8:	481c      	ldr	r0, [pc, #112]	; (800112c <MX_GPIO_Init+0x440>)
 80010ba:	f000 fd5b 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : G3_Pin B4_Pin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80010be:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c4:	2302      	movs	r3, #2
 80010c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010cc:	2300      	movs	r3, #0
 80010ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80010d0:	2309      	movs	r3, #9
 80010d2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010d8:	4619      	mov	r1, r3
 80010da:	4815      	ldr	r0, [pc, #84]	; (8001130 <MX_GPIO_Init+0x444>)
 80010dc:	f000 fd4a 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 80010e0:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80010e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e6:	2301      	movs	r3, #1
 80010e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ee:	2300      	movs	r3, #0
 80010f0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010f6:	4619      	mov	r1, r3
 80010f8:	480d      	ldr	r0, [pc, #52]	; (8001130 <MX_GPIO_Init+0x444>)
 80010fa:	f000 fd3b 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80010fe:	2360      	movs	r3, #96	; 0x60
 8001100:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001102:	2302      	movs	r3, #2
 8001104:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800110a:	2303      	movs	r3, #3
 800110c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800110e:	230c      	movs	r3, #12
 8001110:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001112:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001116:	4619      	mov	r1, r3
 8001118:	4803      	ldr	r0, [pc, #12]	; (8001128 <MX_GPIO_Init+0x43c>)
 800111a:	f000 fd2b 	bl	8001b74 <HAL_GPIO_Init>

}
 800111e:	bf00      	nop
 8001120:	3738      	adds	r7, #56	; 0x38
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40020400 	.word	0x40020400
 800112c:	40020c00 	.word	0x40020c00
 8001130:	40021800 	.word	0x40021800
 8001134:	40020800 	.word	0x40020800

08001138 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim7 )
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	4a06      	ldr	r2, [pc, #24]	; (800115c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d102      	bne.n	800114e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
   // HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
	  sampleAccelFlag  =1;
 8001148:	4b05      	ldr	r3, [pc, #20]	; (8001160 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800114a:	2201      	movs	r2, #1
 800114c:	601a      	str	r2, [r3, #0]
  }
}
 800114e:	bf00      	nop
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	20000154 	.word	0x20000154
 8001160:	200001e0 	.word	0x200001e0

08001164 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001168:	b672      	cpsid	i
}
 800116a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800116c:	e7fe      	b.n	800116c <Error_Handler+0x8>
	...

08001170 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8001178:	4a07      	ldr	r2, [pc, #28]	; (8001198 <RetargetInit+0x28>)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 800117e:	4b07      	ldr	r3, [pc, #28]	; (800119c <RetargetInit+0x2c>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	6898      	ldr	r0, [r3, #8]
 8001184:	2300      	movs	r3, #0
 8001186:	2202      	movs	r2, #2
 8001188:	2100      	movs	r1, #0
 800118a:	f004 fe57 	bl	8005e3c <setvbuf>
}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	200001e4 	.word	0x200001e4
 800119c:	2000000c 	.word	0x2000000c

080011a0 <_isatty>:

int _isatty(int fd) {
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	db04      	blt.n	80011b8 <_isatty+0x18>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	dc01      	bgt.n	80011b8 <_isatty+0x18>
    return 1;
 80011b4:	2301      	movs	r3, #1
 80011b6:	e005      	b.n	80011c4 <_isatty+0x24>

  errno = EBADF;
 80011b8:	f004 fdf6 	bl	8005da8 <__errno>
 80011bc:	4603      	mov	r3, r0
 80011be:	2209      	movs	r2, #9
 80011c0:	601a      	str	r2, [r3, #0]
  return 0;
 80011c2:	2300      	movs	r3, #0
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <_write>:

int _write(int fd, char* ptr, int len) {
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b086      	sub	sp, #24
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d002      	beq.n	80011e4 <_write+0x18>
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	d111      	bne.n	8001208 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80011e4:	4b0e      	ldr	r3, [pc, #56]	; (8001220 <_write+0x54>)
 80011e6:	6818      	ldr	r0, [r3, #0]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	b29a      	uxth	r2, r3
 80011ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011f0:	68b9      	ldr	r1, [r7, #8]
 80011f2:	f003 fd70 	bl	8004cd6 <HAL_UART_Transmit>
 80011f6:	4603      	mov	r3, r0
 80011f8:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80011fa:	7dfb      	ldrb	r3, [r7, #23]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d101      	bne.n	8001204 <_write+0x38>
      return len;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	e008      	b.n	8001216 <_write+0x4a>
    else
      return EIO;
 8001204:	2305      	movs	r3, #5
 8001206:	e006      	b.n	8001216 <_write+0x4a>
  }
  errno = EBADF;
 8001208:	f004 fdce 	bl	8005da8 <__errno>
 800120c:	4603      	mov	r3, r0
 800120e:	2209      	movs	r2, #9
 8001210:	601a      	str	r2, [r3, #0]
  return -1;
 8001212:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001216:	4618      	mov	r0, r3
 8001218:	3718      	adds	r7, #24
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	200001e4 	.word	0x200001e4

08001224 <_close>:

int _close(int fd) {
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2b00      	cmp	r3, #0
 8001230:	db04      	blt.n	800123c <_close+0x18>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2b02      	cmp	r3, #2
 8001236:	dc01      	bgt.n	800123c <_close+0x18>
    return 0;
 8001238:	2300      	movs	r3, #0
 800123a:	e006      	b.n	800124a <_close+0x26>

  errno = EBADF;
 800123c:	f004 fdb4 	bl	8005da8 <__errno>
 8001240:	4603      	mov	r3, r0
 8001242:	2209      	movs	r2, #9
 8001244:	601a      	str	r2, [r3, #0]
  return -1;
 8001246:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800124a:	4618      	mov	r0, r3
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8001252:	b580      	push	{r7, lr}
 8001254:	b084      	sub	sp, #16
 8001256:	af00      	add	r7, sp, #0
 8001258:	60f8      	str	r0, [r7, #12]
 800125a:	60b9      	str	r1, [r7, #8]
 800125c:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 800125e:	f004 fda3 	bl	8005da8 <__errno>
 8001262:	4603      	mov	r3, r0
 8001264:	2209      	movs	r2, #9
 8001266:	601a      	str	r2, [r3, #0]
  return -1;
 8001268:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800126c:	4618      	mov	r0, r3
 800126e:	3710      	adds	r7, #16
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <_read>:

int _read(int fd, char* ptr, int len) {
 8001274:	b580      	push	{r7, lr}
 8001276:	b086      	sub	sp, #24
 8001278:	af00      	add	r7, sp, #0
 800127a:	60f8      	str	r0, [r7, #12]
 800127c:	60b9      	str	r1, [r7, #8]
 800127e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d110      	bne.n	80012a8 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8001286:	4b0e      	ldr	r3, [pc, #56]	; (80012c0 <_read+0x4c>)
 8001288:	6818      	ldr	r0, [r3, #0]
 800128a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800128e:	2201      	movs	r2, #1
 8001290:	68b9      	ldr	r1, [r7, #8]
 8001292:	f003 fdb2 	bl	8004dfa <HAL_UART_Receive>
 8001296:	4603      	mov	r3, r0
 8001298:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800129a:	7dfb      	ldrb	r3, [r7, #23]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d101      	bne.n	80012a4 <_read+0x30>
      return 1;
 80012a0:	2301      	movs	r3, #1
 80012a2:	e008      	b.n	80012b6 <_read+0x42>
    else
      return EIO;
 80012a4:	2305      	movs	r3, #5
 80012a6:	e006      	b.n	80012b6 <_read+0x42>
  }
  errno = EBADF;
 80012a8:	f004 fd7e 	bl	8005da8 <__errno>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2209      	movs	r2, #9
 80012b0:	601a      	str	r2, [r3, #0]
  return -1;
 80012b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3718      	adds	r7, #24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	200001e4 	.word	0x200001e4

080012c4 <_fstat>:

int _fstat(int fd, struct stat* st) {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	db08      	blt.n	80012e6 <_fstat+0x22>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	dc05      	bgt.n	80012e6 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012e0:	605a      	str	r2, [r3, #4]
    return 0;
 80012e2:	2300      	movs	r3, #0
 80012e4:	e005      	b.n	80012f2 <_fstat+0x2e>
  }

  errno = EBADF;
 80012e6:	f004 fd5f 	bl	8005da8 <__errno>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2209      	movs	r2, #9
 80012ee:	601a      	str	r2, [r3, #0]
  return 0;
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
	...

080012fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	607b      	str	r3, [r7, #4]
 8001306:	4b10      	ldr	r3, [pc, #64]	; (8001348 <HAL_MspInit+0x4c>)
 8001308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130a:	4a0f      	ldr	r2, [pc, #60]	; (8001348 <HAL_MspInit+0x4c>)
 800130c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001310:	6453      	str	r3, [r2, #68]	; 0x44
 8001312:	4b0d      	ldr	r3, [pc, #52]	; (8001348 <HAL_MspInit+0x4c>)
 8001314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001316:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800131a:	607b      	str	r3, [r7, #4]
 800131c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	603b      	str	r3, [r7, #0]
 8001322:	4b09      	ldr	r3, [pc, #36]	; (8001348 <HAL_MspInit+0x4c>)
 8001324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001326:	4a08      	ldr	r2, [pc, #32]	; (8001348 <HAL_MspInit+0x4c>)
 8001328:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800132c:	6413      	str	r3, [r2, #64]	; 0x40
 800132e:	4b06      	ldr	r3, [pc, #24]	; (8001348 <HAL_MspInit+0x4c>)
 8001330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001336:	603b      	str	r3, [r7, #0]
 8001338:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800133a:	2007      	movs	r0, #7
 800133c:	f000 fb46 	bl	80019cc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001340:	bf00      	nop
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40023800 	.word	0x40023800

0800134c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08a      	sub	sp, #40	; 0x28
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001354:	f107 0314 	add.w	r3, r7, #20
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]
 8001362:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a29      	ldr	r2, [pc, #164]	; (8001410 <HAL_I2C_MspInit+0xc4>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d14b      	bne.n	8001406 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	613b      	str	r3, [r7, #16]
 8001372:	4b28      	ldr	r3, [pc, #160]	; (8001414 <HAL_I2C_MspInit+0xc8>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	4a27      	ldr	r2, [pc, #156]	; (8001414 <HAL_I2C_MspInit+0xc8>)
 8001378:	f043 0304 	orr.w	r3, r3, #4
 800137c:	6313      	str	r3, [r2, #48]	; 0x30
 800137e:	4b25      	ldr	r3, [pc, #148]	; (8001414 <HAL_I2C_MspInit+0xc8>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	f003 0304 	and.w	r3, r3, #4
 8001386:	613b      	str	r3, [r7, #16]
 8001388:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	4b21      	ldr	r3, [pc, #132]	; (8001414 <HAL_I2C_MspInit+0xc8>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	4a20      	ldr	r2, [pc, #128]	; (8001414 <HAL_I2C_MspInit+0xc8>)
 8001394:	f043 0301 	orr.w	r3, r3, #1
 8001398:	6313      	str	r3, [r2, #48]	; 0x30
 800139a:	4b1e      	ldr	r3, [pc, #120]	; (8001414 <HAL_I2C_MspInit+0xc8>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	f003 0301 	and.w	r3, r3, #1
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80013a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013ac:	2312      	movs	r3, #18
 80013ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b4:	2300      	movs	r3, #0
 80013b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80013b8:	2304      	movs	r3, #4
 80013ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80013bc:	f107 0314 	add.w	r3, r7, #20
 80013c0:	4619      	mov	r1, r3
 80013c2:	4815      	ldr	r0, [pc, #84]	; (8001418 <HAL_I2C_MspInit+0xcc>)
 80013c4:	f000 fbd6 	bl	8001b74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80013c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013ce:	2312      	movs	r3, #18
 80013d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d6:	2300      	movs	r3, #0
 80013d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80013da:	2304      	movs	r3, #4
 80013dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80013de:	f107 0314 	add.w	r3, r7, #20
 80013e2:	4619      	mov	r1, r3
 80013e4:	480d      	ldr	r0, [pc, #52]	; (800141c <HAL_I2C_MspInit+0xd0>)
 80013e6:	f000 fbc5 	bl	8001b74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	60bb      	str	r3, [r7, #8]
 80013ee:	4b09      	ldr	r3, [pc, #36]	; (8001414 <HAL_I2C_MspInit+0xc8>)
 80013f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f2:	4a08      	ldr	r2, [pc, #32]	; (8001414 <HAL_I2C_MspInit+0xc8>)
 80013f4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80013f8:	6413      	str	r3, [r2, #64]	; 0x40
 80013fa:	4b06      	ldr	r3, [pc, #24]	; (8001414 <HAL_I2C_MspInit+0xc8>)
 80013fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001402:	60bb      	str	r3, [r7, #8]
 8001404:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001406:	bf00      	nop
 8001408:	3728      	adds	r7, #40	; 0x28
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40005c00 	.word	0x40005c00
 8001414:	40023800 	.word	0x40023800
 8001418:	40020800 	.word	0x40020800
 800141c:	40020000 	.word	0x40020000

08001420 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b08a      	sub	sp, #40	; 0x28
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001428:	f107 0314 	add.w	r3, r7, #20
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	609a      	str	r2, [r3, #8]
 8001434:	60da      	str	r2, [r3, #12]
 8001436:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a19      	ldr	r2, [pc, #100]	; (80014a4 <HAL_SPI_MspInit+0x84>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d12c      	bne.n	800149c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	613b      	str	r3, [r7, #16]
 8001446:	4b18      	ldr	r3, [pc, #96]	; (80014a8 <HAL_SPI_MspInit+0x88>)
 8001448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144a:	4a17      	ldr	r2, [pc, #92]	; (80014a8 <HAL_SPI_MspInit+0x88>)
 800144c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001450:	6453      	str	r3, [r2, #68]	; 0x44
 8001452:	4b15      	ldr	r3, [pc, #84]	; (80014a8 <HAL_SPI_MspInit+0x88>)
 8001454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001456:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800145a:	613b      	str	r3, [r7, #16]
 800145c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <HAL_SPI_MspInit+0x88>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	4a10      	ldr	r2, [pc, #64]	; (80014a8 <HAL_SPI_MspInit+0x88>)
 8001468:	f043 0320 	orr.w	r3, r3, #32
 800146c:	6313      	str	r3, [r2, #48]	; 0x30
 800146e:	4b0e      	ldr	r3, [pc, #56]	; (80014a8 <HAL_SPI_MspInit+0x88>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	f003 0320 	and.w	r3, r3, #32
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800147a:	f44f 7360 	mov.w	r3, #896	; 0x380
 800147e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001480:	2302      	movs	r3, #2
 8001482:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001488:	2300      	movs	r3, #0
 800148a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800148c:	2305      	movs	r3, #5
 800148e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001490:	f107 0314 	add.w	r3, r7, #20
 8001494:	4619      	mov	r1, r3
 8001496:	4805      	ldr	r0, [pc, #20]	; (80014ac <HAL_SPI_MspInit+0x8c>)
 8001498:	f000 fb6c 	bl	8001b74 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 800149c:	bf00      	nop
 800149e:	3728      	adds	r7, #40	; 0x28
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	40015000 	.word	0x40015000
 80014a8:	40023800 	.word	0x40023800
 80014ac:	40021400 	.word	0x40021400

080014b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a0e      	ldr	r2, [pc, #56]	; (80014f8 <HAL_TIM_Base_MspInit+0x48>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d115      	bne.n	80014ee <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	60fb      	str	r3, [r7, #12]
 80014c6:	4b0d      	ldr	r3, [pc, #52]	; (80014fc <HAL_TIM_Base_MspInit+0x4c>)
 80014c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ca:	4a0c      	ldr	r2, [pc, #48]	; (80014fc <HAL_TIM_Base_MspInit+0x4c>)
 80014cc:	f043 0320 	orr.w	r3, r3, #32
 80014d0:	6413      	str	r3, [r2, #64]	; 0x40
 80014d2:	4b0a      	ldr	r3, [pc, #40]	; (80014fc <HAL_TIM_Base_MspInit+0x4c>)
 80014d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d6:	f003 0320 	and.w	r3, r3, #32
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80014de:	2200      	movs	r2, #0
 80014e0:	2100      	movs	r1, #0
 80014e2:	2037      	movs	r0, #55	; 0x37
 80014e4:	f000 fa7d 	bl	80019e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80014e8:	2037      	movs	r0, #55	; 0x37
 80014ea:	f000 fa96 	bl	8001a1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80014ee:	bf00      	nop
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40001400 	.word	0x40001400
 80014fc:	40023800 	.word	0x40023800

08001500 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b08a      	sub	sp, #40	; 0x28
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001508:	f107 0314 	add.w	r3, r7, #20
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	605a      	str	r2, [r3, #4]
 8001512:	609a      	str	r2, [r3, #8]
 8001514:	60da      	str	r2, [r3, #12]
 8001516:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a1d      	ldr	r2, [pc, #116]	; (8001594 <HAL_UART_MspInit+0x94>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d134      	bne.n	800158c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	613b      	str	r3, [r7, #16]
 8001526:	4b1c      	ldr	r3, [pc, #112]	; (8001598 <HAL_UART_MspInit+0x98>)
 8001528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152a:	4a1b      	ldr	r2, [pc, #108]	; (8001598 <HAL_UART_MspInit+0x98>)
 800152c:	f043 0310 	orr.w	r3, r3, #16
 8001530:	6453      	str	r3, [r2, #68]	; 0x44
 8001532:	4b19      	ldr	r3, [pc, #100]	; (8001598 <HAL_UART_MspInit+0x98>)
 8001534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001536:	f003 0310 	and.w	r3, r3, #16
 800153a:	613b      	str	r3, [r7, #16]
 800153c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	60fb      	str	r3, [r7, #12]
 8001542:	4b15      	ldr	r3, [pc, #84]	; (8001598 <HAL_UART_MspInit+0x98>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	4a14      	ldr	r2, [pc, #80]	; (8001598 <HAL_UART_MspInit+0x98>)
 8001548:	f043 0301 	orr.w	r3, r3, #1
 800154c:	6313      	str	r3, [r2, #48]	; 0x30
 800154e:	4b12      	ldr	r3, [pc, #72]	; (8001598 <HAL_UART_MspInit+0x98>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800155a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800155e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001560:	2302      	movs	r3, #2
 8001562:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	2300      	movs	r3, #0
 8001566:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001568:	2303      	movs	r3, #3
 800156a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800156c:	2307      	movs	r3, #7
 800156e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001570:	f107 0314 	add.w	r3, r7, #20
 8001574:	4619      	mov	r1, r3
 8001576:	4809      	ldr	r0, [pc, #36]	; (800159c <HAL_UART_MspInit+0x9c>)
 8001578:	f000 fafc 	bl	8001b74 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800157c:	2200      	movs	r2, #0
 800157e:	2100      	movs	r1, #0
 8001580:	2025      	movs	r0, #37	; 0x25
 8001582:	f000 fa2e 	bl	80019e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001586:	2025      	movs	r0, #37	; 0x25
 8001588:	f000 fa47 	bl	8001a1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800158c:	bf00      	nop
 800158e:	3728      	adds	r7, #40	; 0x28
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	40011000 	.word	0x40011000
 8001598:	40023800 	.word	0x40023800
 800159c:	40020000 	.word	0x40020000

080015a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015a4:	e7fe      	b.n	80015a4 <NMI_Handler+0x4>

080015a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015a6:	b480      	push	{r7}
 80015a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015aa:	e7fe      	b.n	80015aa <HardFault_Handler+0x4>

080015ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015b0:	e7fe      	b.n	80015b0 <MemManage_Handler+0x4>

080015b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015b2:	b480      	push	{r7}
 80015b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015b6:	e7fe      	b.n	80015b6 <BusFault_Handler+0x4>

080015b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015bc:	e7fe      	b.n	80015bc <UsageFault_Handler+0x4>

080015be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015be:	b480      	push	{r7}
 80015c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015c2:	bf00      	nop
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015d0:	bf00      	nop
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr

080015da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015da:	b480      	push	{r7}
 80015dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015de:	bf00      	nop
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr

080015e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015ec:	f000 f8da 	bl	80017a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015f0:	bf00      	nop
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80015f8:	4802      	ldr	r0, [pc, #8]	; (8001604 <USART1_IRQHandler+0x10>)
 80015fa:	f003 fca1 	bl	8004f40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	2000019c 	.word	0x2000019c

08001608 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800160c:	4802      	ldr	r0, [pc, #8]	; (8001618 <TIM7_IRQHandler+0x10>)
 800160e:	f003 f8b5 	bl	800477c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	20000154 	.word	0x20000154

0800161c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b086      	sub	sp, #24
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001624:	4a14      	ldr	r2, [pc, #80]	; (8001678 <_sbrk+0x5c>)
 8001626:	4b15      	ldr	r3, [pc, #84]	; (800167c <_sbrk+0x60>)
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001630:	4b13      	ldr	r3, [pc, #76]	; (8001680 <_sbrk+0x64>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d102      	bne.n	800163e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001638:	4b11      	ldr	r3, [pc, #68]	; (8001680 <_sbrk+0x64>)
 800163a:	4a12      	ldr	r2, [pc, #72]	; (8001684 <_sbrk+0x68>)
 800163c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800163e:	4b10      	ldr	r3, [pc, #64]	; (8001680 <_sbrk+0x64>)
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4413      	add	r3, r2
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	429a      	cmp	r2, r3
 800164a:	d207      	bcs.n	800165c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800164c:	f004 fbac 	bl	8005da8 <__errno>
 8001650:	4603      	mov	r3, r0
 8001652:	220c      	movs	r2, #12
 8001654:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001656:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800165a:	e009      	b.n	8001670 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800165c:	4b08      	ldr	r3, [pc, #32]	; (8001680 <_sbrk+0x64>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001662:	4b07      	ldr	r3, [pc, #28]	; (8001680 <_sbrk+0x64>)
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4413      	add	r3, r2
 800166a:	4a05      	ldr	r2, [pc, #20]	; (8001680 <_sbrk+0x64>)
 800166c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800166e:	68fb      	ldr	r3, [r7, #12]
}
 8001670:	4618      	mov	r0, r3
 8001672:	3718      	adds	r7, #24
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	20030000 	.word	0x20030000
 800167c:	00000400 	.word	0x00000400
 8001680:	200001e8 	.word	0x200001e8
 8001684:	20000200 	.word	0x20000200

08001688 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800168c:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <SystemInit+0x20>)
 800168e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001692:	4a05      	ldr	r2, [pc, #20]	; (80016a8 <SystemInit+0x20>)
 8001694:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001698:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800169c:	bf00      	nop
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	e000ed00 	.word	0xe000ed00

080016ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80016ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016e4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016b0:	480d      	ldr	r0, [pc, #52]	; (80016e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016b2:	490e      	ldr	r1, [pc, #56]	; (80016ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016b4:	4a0e      	ldr	r2, [pc, #56]	; (80016f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016b8:	e002      	b.n	80016c0 <LoopCopyDataInit>

080016ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016be:	3304      	adds	r3, #4

080016c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016c4:	d3f9      	bcc.n	80016ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016c6:	4a0b      	ldr	r2, [pc, #44]	; (80016f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016c8:	4c0b      	ldr	r4, [pc, #44]	; (80016f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016cc:	e001      	b.n	80016d2 <LoopFillZerobss>

080016ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016d0:	3204      	adds	r2, #4

080016d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016d4:	d3fb      	bcc.n	80016ce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016d6:	f7ff ffd7 	bl	8001688 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016da:	f004 fb6b 	bl	8005db4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016de:	f7ff f979 	bl	80009d4 <main>
  bx  lr    
 80016e2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80016e4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80016e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016ec:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80016f0:	08006fa8 	.word	0x08006fa8
  ldr r2, =_sbss
 80016f4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80016f8:	20000200 	.word	0x20000200

080016fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016fc:	e7fe      	b.n	80016fc <ADC_IRQHandler>
	...

08001700 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001704:	4b0e      	ldr	r3, [pc, #56]	; (8001740 <HAL_Init+0x40>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a0d      	ldr	r2, [pc, #52]	; (8001740 <HAL_Init+0x40>)
 800170a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800170e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001710:	4b0b      	ldr	r3, [pc, #44]	; (8001740 <HAL_Init+0x40>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a0a      	ldr	r2, [pc, #40]	; (8001740 <HAL_Init+0x40>)
 8001716:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800171a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800171c:	4b08      	ldr	r3, [pc, #32]	; (8001740 <HAL_Init+0x40>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a07      	ldr	r2, [pc, #28]	; (8001740 <HAL_Init+0x40>)
 8001722:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001726:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001728:	2003      	movs	r0, #3
 800172a:	f000 f94f 	bl	80019cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800172e:	2000      	movs	r0, #0
 8001730:	f000 f808 	bl	8001744 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001734:	f7ff fde2 	bl	80012fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001738:	2300      	movs	r3, #0
}
 800173a:	4618      	mov	r0, r3
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40023c00 	.word	0x40023c00

08001744 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800174c:	4b12      	ldr	r3, [pc, #72]	; (8001798 <HAL_InitTick+0x54>)
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	4b12      	ldr	r3, [pc, #72]	; (800179c <HAL_InitTick+0x58>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	4619      	mov	r1, r3
 8001756:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800175a:	fbb3 f3f1 	udiv	r3, r3, r1
 800175e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001762:	4618      	mov	r0, r3
 8001764:	f000 f967 	bl	8001a36 <HAL_SYSTICK_Config>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e00e      	b.n	8001790 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2b0f      	cmp	r3, #15
 8001776:	d80a      	bhi.n	800178e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001778:	2200      	movs	r2, #0
 800177a:	6879      	ldr	r1, [r7, #4]
 800177c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001780:	f000 f92f 	bl	80019e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001784:	4a06      	ldr	r2, [pc, #24]	; (80017a0 <HAL_InitTick+0x5c>)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800178a:	2300      	movs	r3, #0
 800178c:	e000      	b.n	8001790 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
}
 8001790:	4618      	mov	r0, r3
 8001792:	3708      	adds	r7, #8
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	20000000 	.word	0x20000000
 800179c:	20000008 	.word	0x20000008
 80017a0:	20000004 	.word	0x20000004

080017a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017a8:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <HAL_IncTick+0x20>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	461a      	mov	r2, r3
 80017ae:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <HAL_IncTick+0x24>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4413      	add	r3, r2
 80017b4:	4a04      	ldr	r2, [pc, #16]	; (80017c8 <HAL_IncTick+0x24>)
 80017b6:	6013      	str	r3, [r2, #0]
}
 80017b8:	bf00      	nop
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	20000008 	.word	0x20000008
 80017c8:	200001ec 	.word	0x200001ec

080017cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  return uwTick;
 80017d0:	4b03      	ldr	r3, [pc, #12]	; (80017e0 <HAL_GetTick+0x14>)
 80017d2:	681b      	ldr	r3, [r3, #0]
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	200001ec 	.word	0x200001ec

080017e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017ec:	f7ff ffee 	bl	80017cc <HAL_GetTick>
 80017f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80017fc:	d005      	beq.n	800180a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017fe:	4b0a      	ldr	r3, [pc, #40]	; (8001828 <HAL_Delay+0x44>)
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	461a      	mov	r2, r3
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	4413      	add	r3, r2
 8001808:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800180a:	bf00      	nop
 800180c:	f7ff ffde 	bl	80017cc <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	68fa      	ldr	r2, [r7, #12]
 8001818:	429a      	cmp	r2, r3
 800181a:	d8f7      	bhi.n	800180c <HAL_Delay+0x28>
  {
  }
}
 800181c:	bf00      	nop
 800181e:	bf00      	nop
 8001820:	3710      	adds	r7, #16
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	20000008 	.word	0x20000008

0800182c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800182c:	b480      	push	{r7}
 800182e:	b085      	sub	sp, #20
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f003 0307 	and.w	r3, r3, #7
 800183a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800183c:	4b0c      	ldr	r3, [pc, #48]	; (8001870 <__NVIC_SetPriorityGrouping+0x44>)
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001842:	68ba      	ldr	r2, [r7, #8]
 8001844:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001848:	4013      	ands	r3, r2
 800184a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001854:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001858:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800185c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800185e:	4a04      	ldr	r2, [pc, #16]	; (8001870 <__NVIC_SetPriorityGrouping+0x44>)
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	60d3      	str	r3, [r2, #12]
}
 8001864:	bf00      	nop
 8001866:	3714      	adds	r7, #20
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr
 8001870:	e000ed00 	.word	0xe000ed00

08001874 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001878:	4b04      	ldr	r3, [pc, #16]	; (800188c <__NVIC_GetPriorityGrouping+0x18>)
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	0a1b      	lsrs	r3, r3, #8
 800187e:	f003 0307 	and.w	r3, r3, #7
}
 8001882:	4618      	mov	r0, r3
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr
 800188c:	e000ed00 	.word	0xe000ed00

08001890 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	4603      	mov	r3, r0
 8001898:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800189a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	db0b      	blt.n	80018ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018a2:	79fb      	ldrb	r3, [r7, #7]
 80018a4:	f003 021f 	and.w	r2, r3, #31
 80018a8:	4907      	ldr	r1, [pc, #28]	; (80018c8 <__NVIC_EnableIRQ+0x38>)
 80018aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ae:	095b      	lsrs	r3, r3, #5
 80018b0:	2001      	movs	r0, #1
 80018b2:	fa00 f202 	lsl.w	r2, r0, r2
 80018b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018ba:	bf00      	nop
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	e000e100 	.word	0xe000e100

080018cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	4603      	mov	r3, r0
 80018d4:	6039      	str	r1, [r7, #0]
 80018d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	db0a      	blt.n	80018f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	b2da      	uxtb	r2, r3
 80018e4:	490c      	ldr	r1, [pc, #48]	; (8001918 <__NVIC_SetPriority+0x4c>)
 80018e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ea:	0112      	lsls	r2, r2, #4
 80018ec:	b2d2      	uxtb	r2, r2
 80018ee:	440b      	add	r3, r1
 80018f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018f4:	e00a      	b.n	800190c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	b2da      	uxtb	r2, r3
 80018fa:	4908      	ldr	r1, [pc, #32]	; (800191c <__NVIC_SetPriority+0x50>)
 80018fc:	79fb      	ldrb	r3, [r7, #7]
 80018fe:	f003 030f 	and.w	r3, r3, #15
 8001902:	3b04      	subs	r3, #4
 8001904:	0112      	lsls	r2, r2, #4
 8001906:	b2d2      	uxtb	r2, r2
 8001908:	440b      	add	r3, r1
 800190a:	761a      	strb	r2, [r3, #24]
}
 800190c:	bf00      	nop
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr
 8001918:	e000e100 	.word	0xe000e100
 800191c:	e000ed00 	.word	0xe000ed00

08001920 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001920:	b480      	push	{r7}
 8001922:	b089      	sub	sp, #36	; 0x24
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	f003 0307 	and.w	r3, r3, #7
 8001932:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	f1c3 0307 	rsb	r3, r3, #7
 800193a:	2b04      	cmp	r3, #4
 800193c:	bf28      	it	cs
 800193e:	2304      	movcs	r3, #4
 8001940:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	3304      	adds	r3, #4
 8001946:	2b06      	cmp	r3, #6
 8001948:	d902      	bls.n	8001950 <NVIC_EncodePriority+0x30>
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	3b03      	subs	r3, #3
 800194e:	e000      	b.n	8001952 <NVIC_EncodePriority+0x32>
 8001950:	2300      	movs	r3, #0
 8001952:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001954:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	fa02 f303 	lsl.w	r3, r2, r3
 800195e:	43da      	mvns	r2, r3
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	401a      	ands	r2, r3
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001968:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	fa01 f303 	lsl.w	r3, r1, r3
 8001972:	43d9      	mvns	r1, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001978:	4313      	orrs	r3, r2
         );
}
 800197a:	4618      	mov	r0, r3
 800197c:	3724      	adds	r7, #36	; 0x24
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
	...

08001988 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	3b01      	subs	r3, #1
 8001994:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001998:	d301      	bcc.n	800199e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800199a:	2301      	movs	r3, #1
 800199c:	e00f      	b.n	80019be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800199e:	4a0a      	ldr	r2, [pc, #40]	; (80019c8 <SysTick_Config+0x40>)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	3b01      	subs	r3, #1
 80019a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019a6:	210f      	movs	r1, #15
 80019a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019ac:	f7ff ff8e 	bl	80018cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019b0:	4b05      	ldr	r3, [pc, #20]	; (80019c8 <SysTick_Config+0x40>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019b6:	4b04      	ldr	r3, [pc, #16]	; (80019c8 <SysTick_Config+0x40>)
 80019b8:	2207      	movs	r2, #7
 80019ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	e000e010 	.word	0xe000e010

080019cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f7ff ff29 	bl	800182c <__NVIC_SetPriorityGrouping>
}
 80019da:	bf00      	nop
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b086      	sub	sp, #24
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	4603      	mov	r3, r0
 80019ea:	60b9      	str	r1, [r7, #8]
 80019ec:	607a      	str	r2, [r7, #4]
 80019ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019f0:	2300      	movs	r3, #0
 80019f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019f4:	f7ff ff3e 	bl	8001874 <__NVIC_GetPriorityGrouping>
 80019f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	68b9      	ldr	r1, [r7, #8]
 80019fe:	6978      	ldr	r0, [r7, #20]
 8001a00:	f7ff ff8e 	bl	8001920 <NVIC_EncodePriority>
 8001a04:	4602      	mov	r2, r0
 8001a06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a0a:	4611      	mov	r1, r2
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff ff5d 	bl	80018cc <__NVIC_SetPriority>
}
 8001a12:	bf00      	nop
 8001a14:	3718      	adds	r7, #24
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b082      	sub	sp, #8
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	4603      	mov	r3, r0
 8001a22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7ff ff31 	bl	8001890 <__NVIC_EnableIRQ>
}
 8001a2e:	bf00      	nop
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b082      	sub	sp, #8
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f7ff ffa2 	bl	8001988 <SysTick_Config>
 8001a44:	4603      	mov	r3, r0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	b084      	sub	sp, #16
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a5a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001a5c:	f7ff feb6 	bl	80017cc <HAL_GetTick>
 8001a60:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d008      	beq.n	8001a80 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2280      	movs	r2, #128	; 0x80
 8001a72:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2200      	movs	r2, #0
 8001a78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e052      	b.n	8001b26 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f022 0216 	bic.w	r2, r2, #22
 8001a8e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	695a      	ldr	r2, [r3, #20]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a9e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d103      	bne.n	8001ab0 <HAL_DMA_Abort+0x62>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d007      	beq.n	8001ac0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f022 0208 	bic.w	r2, r2, #8
 8001abe:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f022 0201 	bic.w	r2, r2, #1
 8001ace:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ad0:	e013      	b.n	8001afa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ad2:	f7ff fe7b 	bl	80017cc <HAL_GetTick>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	2b05      	cmp	r3, #5
 8001ade:	d90c      	bls.n	8001afa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2220      	movs	r2, #32
 8001ae4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2203      	movs	r2, #3
 8001aea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e015      	b.n	8001b26 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0301 	and.w	r3, r3, #1
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d1e4      	bne.n	8001ad2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b0c:	223f      	movs	r2, #63	; 0x3f
 8001b0e:	409a      	lsls	r2, r3
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2201      	movs	r2, #1
 8001b18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3710      	adds	r7, #16
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	b083      	sub	sp, #12
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d004      	beq.n	8001b4c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2280      	movs	r2, #128	; 0x80
 8001b46:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e00c      	b.n	8001b66 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2205      	movs	r2, #5
 8001b50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f022 0201 	bic.w	r2, r2, #1
 8001b62:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
	...

08001b74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b089      	sub	sp, #36	; 0x24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b82:	2300      	movs	r3, #0
 8001b84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b86:	2300      	movs	r3, #0
 8001b88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	61fb      	str	r3, [r7, #28]
 8001b8e:	e177      	b.n	8001e80 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b90:	2201      	movs	r2, #1
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	697a      	ldr	r2, [r7, #20]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ba4:	693a      	ldr	r2, [r7, #16]
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	f040 8166 	bne.w	8001e7a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f003 0303 	and.w	r3, r3, #3
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d005      	beq.n	8001bc6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d130      	bne.n	8001c28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	2203      	movs	r2, #3
 8001bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd6:	43db      	mvns	r3, r3
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	4013      	ands	r3, r2
 8001bdc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	68da      	ldr	r2, [r3, #12]
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	69ba      	ldr	r2, [r7, #24]
 8001bf4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	43db      	mvns	r3, r3
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	091b      	lsrs	r3, r3, #4
 8001c12:	f003 0201 	and.w	r2, r3, #1
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f003 0303 	and.w	r3, r3, #3
 8001c30:	2b03      	cmp	r3, #3
 8001c32:	d017      	beq.n	8001c64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	2203      	movs	r2, #3
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	43db      	mvns	r3, r3
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	689a      	ldr	r2, [r3, #8]
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f003 0303 	and.w	r3, r3, #3
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d123      	bne.n	8001cb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	08da      	lsrs	r2, r3, #3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	3208      	adds	r2, #8
 8001c78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	f003 0307 	and.w	r3, r3, #7
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	220f      	movs	r2, #15
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	43db      	mvns	r3, r3
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	4013      	ands	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	691a      	ldr	r2, [r3, #16]
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	f003 0307 	and.w	r3, r3, #7
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	08da      	lsrs	r2, r3, #3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	3208      	adds	r2, #8
 8001cb2:	69b9      	ldr	r1, [r7, #24]
 8001cb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	2203      	movs	r2, #3
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	43db      	mvns	r3, r3
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f003 0203 	and.w	r2, r3, #3
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	f000 80c0 	beq.w	8001e7a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60fb      	str	r3, [r7, #12]
 8001cfe:	4b66      	ldr	r3, [pc, #408]	; (8001e98 <HAL_GPIO_Init+0x324>)
 8001d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d02:	4a65      	ldr	r2, [pc, #404]	; (8001e98 <HAL_GPIO_Init+0x324>)
 8001d04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d08:	6453      	str	r3, [r2, #68]	; 0x44
 8001d0a:	4b63      	ldr	r3, [pc, #396]	; (8001e98 <HAL_GPIO_Init+0x324>)
 8001d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d16:	4a61      	ldr	r2, [pc, #388]	; (8001e9c <HAL_GPIO_Init+0x328>)
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	089b      	lsrs	r3, r3, #2
 8001d1c:	3302      	adds	r3, #2
 8001d1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	f003 0303 	and.w	r3, r3, #3
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	220f      	movs	r2, #15
 8001d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d32:	43db      	mvns	r3, r3
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	4013      	ands	r3, r2
 8001d38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a58      	ldr	r2, [pc, #352]	; (8001ea0 <HAL_GPIO_Init+0x32c>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d037      	beq.n	8001db2 <HAL_GPIO_Init+0x23e>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a57      	ldr	r2, [pc, #348]	; (8001ea4 <HAL_GPIO_Init+0x330>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d031      	beq.n	8001dae <HAL_GPIO_Init+0x23a>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a56      	ldr	r2, [pc, #344]	; (8001ea8 <HAL_GPIO_Init+0x334>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d02b      	beq.n	8001daa <HAL_GPIO_Init+0x236>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a55      	ldr	r2, [pc, #340]	; (8001eac <HAL_GPIO_Init+0x338>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d025      	beq.n	8001da6 <HAL_GPIO_Init+0x232>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a54      	ldr	r2, [pc, #336]	; (8001eb0 <HAL_GPIO_Init+0x33c>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d01f      	beq.n	8001da2 <HAL_GPIO_Init+0x22e>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a53      	ldr	r2, [pc, #332]	; (8001eb4 <HAL_GPIO_Init+0x340>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d019      	beq.n	8001d9e <HAL_GPIO_Init+0x22a>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a52      	ldr	r2, [pc, #328]	; (8001eb8 <HAL_GPIO_Init+0x344>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d013      	beq.n	8001d9a <HAL_GPIO_Init+0x226>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a51      	ldr	r2, [pc, #324]	; (8001ebc <HAL_GPIO_Init+0x348>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d00d      	beq.n	8001d96 <HAL_GPIO_Init+0x222>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a50      	ldr	r2, [pc, #320]	; (8001ec0 <HAL_GPIO_Init+0x34c>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d007      	beq.n	8001d92 <HAL_GPIO_Init+0x21e>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a4f      	ldr	r2, [pc, #316]	; (8001ec4 <HAL_GPIO_Init+0x350>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d101      	bne.n	8001d8e <HAL_GPIO_Init+0x21a>
 8001d8a:	2309      	movs	r3, #9
 8001d8c:	e012      	b.n	8001db4 <HAL_GPIO_Init+0x240>
 8001d8e:	230a      	movs	r3, #10
 8001d90:	e010      	b.n	8001db4 <HAL_GPIO_Init+0x240>
 8001d92:	2308      	movs	r3, #8
 8001d94:	e00e      	b.n	8001db4 <HAL_GPIO_Init+0x240>
 8001d96:	2307      	movs	r3, #7
 8001d98:	e00c      	b.n	8001db4 <HAL_GPIO_Init+0x240>
 8001d9a:	2306      	movs	r3, #6
 8001d9c:	e00a      	b.n	8001db4 <HAL_GPIO_Init+0x240>
 8001d9e:	2305      	movs	r3, #5
 8001da0:	e008      	b.n	8001db4 <HAL_GPIO_Init+0x240>
 8001da2:	2304      	movs	r3, #4
 8001da4:	e006      	b.n	8001db4 <HAL_GPIO_Init+0x240>
 8001da6:	2303      	movs	r3, #3
 8001da8:	e004      	b.n	8001db4 <HAL_GPIO_Init+0x240>
 8001daa:	2302      	movs	r3, #2
 8001dac:	e002      	b.n	8001db4 <HAL_GPIO_Init+0x240>
 8001dae:	2301      	movs	r3, #1
 8001db0:	e000      	b.n	8001db4 <HAL_GPIO_Init+0x240>
 8001db2:	2300      	movs	r3, #0
 8001db4:	69fa      	ldr	r2, [r7, #28]
 8001db6:	f002 0203 	and.w	r2, r2, #3
 8001dba:	0092      	lsls	r2, r2, #2
 8001dbc:	4093      	lsls	r3, r2
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001dc4:	4935      	ldr	r1, [pc, #212]	; (8001e9c <HAL_GPIO_Init+0x328>)
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	089b      	lsrs	r3, r3, #2
 8001dca:	3302      	adds	r3, #2
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dd2:	4b3d      	ldr	r3, [pc, #244]	; (8001ec8 <HAL_GPIO_Init+0x354>)
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	43db      	mvns	r3, r3
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	4013      	ands	r3, r2
 8001de0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d003      	beq.n	8001df6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001df6:	4a34      	ldr	r2, [pc, #208]	; (8001ec8 <HAL_GPIO_Init+0x354>)
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dfc:	4b32      	ldr	r3, [pc, #200]	; (8001ec8 <HAL_GPIO_Init+0x354>)
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	43db      	mvns	r3, r3
 8001e06:	69ba      	ldr	r2, [r7, #24]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d003      	beq.n	8001e20 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e20:	4a29      	ldr	r2, [pc, #164]	; (8001ec8 <HAL_GPIO_Init+0x354>)
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e26:	4b28      	ldr	r3, [pc, #160]	; (8001ec8 <HAL_GPIO_Init+0x354>)
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	43db      	mvns	r3, r3
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	4013      	ands	r3, r2
 8001e34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d003      	beq.n	8001e4a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001e42:	69ba      	ldr	r2, [r7, #24]
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e4a:	4a1f      	ldr	r2, [pc, #124]	; (8001ec8 <HAL_GPIO_Init+0x354>)
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e50:	4b1d      	ldr	r3, [pc, #116]	; (8001ec8 <HAL_GPIO_Init+0x354>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	43db      	mvns	r3, r3
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d003      	beq.n	8001e74 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e74:	4a14      	ldr	r2, [pc, #80]	; (8001ec8 <HAL_GPIO_Init+0x354>)
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	61fb      	str	r3, [r7, #28]
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	2b0f      	cmp	r3, #15
 8001e84:	f67f ae84 	bls.w	8001b90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e88:	bf00      	nop
 8001e8a:	bf00      	nop
 8001e8c:	3724      	adds	r7, #36	; 0x24
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	40023800 	.word	0x40023800
 8001e9c:	40013800 	.word	0x40013800
 8001ea0:	40020000 	.word	0x40020000
 8001ea4:	40020400 	.word	0x40020400
 8001ea8:	40020800 	.word	0x40020800
 8001eac:	40020c00 	.word	0x40020c00
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	40021400 	.word	0x40021400
 8001eb8:	40021800 	.word	0x40021800
 8001ebc:	40021c00 	.word	0x40021c00
 8001ec0:	40022000 	.word	0x40022000
 8001ec4:	40022400 	.word	0x40022400
 8001ec8:	40013c00 	.word	0x40013c00

08001ecc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	807b      	strh	r3, [r7, #2]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001edc:	787b      	ldrb	r3, [r7, #1]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d003      	beq.n	8001eea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ee2:	887a      	ldrh	r2, [r7, #2]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ee8:	e003      	b.n	8001ef2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001eea:	887b      	ldrh	r3, [r7, #2]
 8001eec:	041a      	lsls	r2, r3, #16
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	619a      	str	r2, [r3, #24]
}
 8001ef2:	bf00      	nop
 8001ef4:	370c      	adds	r7, #12
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
	...

08001f00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d101      	bne.n	8001f12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e12b      	b.n	800216a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d106      	bne.n	8001f2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f7ff fa10 	bl	800134c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2224      	movs	r2, #36	; 0x24
 8001f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f022 0201 	bic.w	r2, r2, #1
 8001f42:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f52:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f62:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f64:	f001 fd7a 	bl	8003a5c <HAL_RCC_GetPCLK1Freq>
 8001f68:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	4a81      	ldr	r2, [pc, #516]	; (8002174 <HAL_I2C_Init+0x274>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d807      	bhi.n	8001f84 <HAL_I2C_Init+0x84>
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	4a80      	ldr	r2, [pc, #512]	; (8002178 <HAL_I2C_Init+0x278>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	bf94      	ite	ls
 8001f7c:	2301      	movls	r3, #1
 8001f7e:	2300      	movhi	r3, #0
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	e006      	b.n	8001f92 <HAL_I2C_Init+0x92>
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	4a7d      	ldr	r2, [pc, #500]	; (800217c <HAL_I2C_Init+0x27c>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	bf94      	ite	ls
 8001f8c:	2301      	movls	r3, #1
 8001f8e:	2300      	movhi	r3, #0
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e0e7      	b.n	800216a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	4a78      	ldr	r2, [pc, #480]	; (8002180 <HAL_I2C_Init+0x280>)
 8001f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa2:	0c9b      	lsrs	r3, r3, #18
 8001fa4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	68ba      	ldr	r2, [r7, #8]
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	6a1b      	ldr	r3, [r3, #32]
 8001fc0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	4a6a      	ldr	r2, [pc, #424]	; (8002174 <HAL_I2C_Init+0x274>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d802      	bhi.n	8001fd4 <HAL_I2C_Init+0xd4>
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	e009      	b.n	8001fe8 <HAL_I2C_Init+0xe8>
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001fda:	fb02 f303 	mul.w	r3, r2, r3
 8001fde:	4a69      	ldr	r2, [pc, #420]	; (8002184 <HAL_I2C_Init+0x284>)
 8001fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe4:	099b      	lsrs	r3, r3, #6
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	6812      	ldr	r2, [r2, #0]
 8001fec:	430b      	orrs	r3, r1
 8001fee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	69db      	ldr	r3, [r3, #28]
 8001ff6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001ffa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	495c      	ldr	r1, [pc, #368]	; (8002174 <HAL_I2C_Init+0x274>)
 8002004:	428b      	cmp	r3, r1
 8002006:	d819      	bhi.n	800203c <HAL_I2C_Init+0x13c>
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	1e59      	subs	r1, r3, #1
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	fbb1 f3f3 	udiv	r3, r1, r3
 8002016:	1c59      	adds	r1, r3, #1
 8002018:	f640 73fc 	movw	r3, #4092	; 0xffc
 800201c:	400b      	ands	r3, r1
 800201e:	2b00      	cmp	r3, #0
 8002020:	d00a      	beq.n	8002038 <HAL_I2C_Init+0x138>
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	1e59      	subs	r1, r3, #1
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002030:	3301      	adds	r3, #1
 8002032:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002036:	e051      	b.n	80020dc <HAL_I2C_Init+0x1dc>
 8002038:	2304      	movs	r3, #4
 800203a:	e04f      	b.n	80020dc <HAL_I2C_Init+0x1dc>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d111      	bne.n	8002068 <HAL_I2C_Init+0x168>
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	1e58      	subs	r0, r3, #1
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6859      	ldr	r1, [r3, #4]
 800204c:	460b      	mov	r3, r1
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	440b      	add	r3, r1
 8002052:	fbb0 f3f3 	udiv	r3, r0, r3
 8002056:	3301      	adds	r3, #1
 8002058:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800205c:	2b00      	cmp	r3, #0
 800205e:	bf0c      	ite	eq
 8002060:	2301      	moveq	r3, #1
 8002062:	2300      	movne	r3, #0
 8002064:	b2db      	uxtb	r3, r3
 8002066:	e012      	b.n	800208e <HAL_I2C_Init+0x18e>
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	1e58      	subs	r0, r3, #1
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6859      	ldr	r1, [r3, #4]
 8002070:	460b      	mov	r3, r1
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	440b      	add	r3, r1
 8002076:	0099      	lsls	r1, r3, #2
 8002078:	440b      	add	r3, r1
 800207a:	fbb0 f3f3 	udiv	r3, r0, r3
 800207e:	3301      	adds	r3, #1
 8002080:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002084:	2b00      	cmp	r3, #0
 8002086:	bf0c      	ite	eq
 8002088:	2301      	moveq	r3, #1
 800208a:	2300      	movne	r3, #0
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <HAL_I2C_Init+0x196>
 8002092:	2301      	movs	r3, #1
 8002094:	e022      	b.n	80020dc <HAL_I2C_Init+0x1dc>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d10e      	bne.n	80020bc <HAL_I2C_Init+0x1bc>
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	1e58      	subs	r0, r3, #1
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6859      	ldr	r1, [r3, #4]
 80020a6:	460b      	mov	r3, r1
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	440b      	add	r3, r1
 80020ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80020b0:	3301      	adds	r3, #1
 80020b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020ba:	e00f      	b.n	80020dc <HAL_I2C_Init+0x1dc>
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	1e58      	subs	r0, r3, #1
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6859      	ldr	r1, [r3, #4]
 80020c4:	460b      	mov	r3, r1
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	440b      	add	r3, r1
 80020ca:	0099      	lsls	r1, r3, #2
 80020cc:	440b      	add	r3, r1
 80020ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80020d2:	3301      	adds	r3, #1
 80020d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80020dc:	6879      	ldr	r1, [r7, #4]
 80020de:	6809      	ldr	r1, [r1, #0]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	69da      	ldr	r2, [r3, #28]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a1b      	ldr	r3, [r3, #32]
 80020f6:	431a      	orrs	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	430a      	orrs	r2, r1
 80020fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800210a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	6911      	ldr	r1, [r2, #16]
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	68d2      	ldr	r2, [r2, #12]
 8002116:	4311      	orrs	r1, r2
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	6812      	ldr	r2, [r2, #0]
 800211c:	430b      	orrs	r3, r1
 800211e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	695a      	ldr	r2, [r3, #20]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	699b      	ldr	r3, [r3, #24]
 8002132:	431a      	orrs	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	430a      	orrs	r2, r1
 800213a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f042 0201 	orr.w	r2, r2, #1
 800214a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2220      	movs	r2, #32
 8002156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	3710      	adds	r7, #16
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	000186a0 	.word	0x000186a0
 8002178:	001e847f 	.word	0x001e847f
 800217c:	003d08ff 	.word	0x003d08ff
 8002180:	431bde83 	.word	0x431bde83
 8002184:	10624dd3 	.word	0x10624dd3

08002188 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b088      	sub	sp, #32
 800218c:	af02      	add	r7, sp, #8
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	607a      	str	r2, [r7, #4]
 8002192:	461a      	mov	r2, r3
 8002194:	460b      	mov	r3, r1
 8002196:	817b      	strh	r3, [r7, #10]
 8002198:	4613      	mov	r3, r2
 800219a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800219c:	f7ff fb16 	bl	80017cc <HAL_GetTick>
 80021a0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	2b20      	cmp	r3, #32
 80021ac:	f040 80e0 	bne.w	8002370 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	9300      	str	r3, [sp, #0]
 80021b4:	2319      	movs	r3, #25
 80021b6:	2201      	movs	r2, #1
 80021b8:	4970      	ldr	r1, [pc, #448]	; (800237c <HAL_I2C_Master_Transmit+0x1f4>)
 80021ba:	68f8      	ldr	r0, [r7, #12]
 80021bc:	f000 fd86 	bl	8002ccc <I2C_WaitOnFlagUntilTimeout>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80021c6:	2302      	movs	r3, #2
 80021c8:	e0d3      	b.n	8002372 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d101      	bne.n	80021d8 <HAL_I2C_Master_Transmit+0x50>
 80021d4:	2302      	movs	r3, #2
 80021d6:	e0cc      	b.n	8002372 <HAL_I2C_Master_Transmit+0x1ea>
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2201      	movs	r2, #1
 80021dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d007      	beq.n	80021fe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f042 0201 	orr.w	r2, r2, #1
 80021fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800220c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2221      	movs	r2, #33	; 0x21
 8002212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2210      	movs	r2, #16
 800221a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2200      	movs	r2, #0
 8002222:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	893a      	ldrh	r2, [r7, #8]
 800222e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002234:	b29a      	uxth	r2, r3
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	4a50      	ldr	r2, [pc, #320]	; (8002380 <HAL_I2C_Master_Transmit+0x1f8>)
 800223e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002240:	8979      	ldrh	r1, [r7, #10]
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	6a3a      	ldr	r2, [r7, #32]
 8002246:	68f8      	ldr	r0, [r7, #12]
 8002248:	f000 fbf0 	bl	8002a2c <I2C_MasterRequestWrite>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e08d      	b.n	8002372 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002256:	2300      	movs	r3, #0
 8002258:	613b      	str	r3, [r7, #16]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	695b      	ldr	r3, [r3, #20]
 8002260:	613b      	str	r3, [r7, #16]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	613b      	str	r3, [r7, #16]
 800226a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800226c:	e066      	b.n	800233c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800226e:	697a      	ldr	r2, [r7, #20]
 8002270:	6a39      	ldr	r1, [r7, #32]
 8002272:	68f8      	ldr	r0, [r7, #12]
 8002274:	f000 fe00 	bl	8002e78 <I2C_WaitOnTXEFlagUntilTimeout>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d00d      	beq.n	800229a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002282:	2b04      	cmp	r3, #4
 8002284:	d107      	bne.n	8002296 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002294:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e06b      	b.n	8002372 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229e:	781a      	ldrb	r2, [r3, #0]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022aa:	1c5a      	adds	r2, r3, #1
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	3b01      	subs	r3, #1
 80022b8:	b29a      	uxth	r2, r3
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022c2:	3b01      	subs	r3, #1
 80022c4:	b29a      	uxth	r2, r3
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	695b      	ldr	r3, [r3, #20]
 80022d0:	f003 0304 	and.w	r3, r3, #4
 80022d4:	2b04      	cmp	r3, #4
 80022d6:	d11b      	bne.n	8002310 <HAL_I2C_Master_Transmit+0x188>
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d017      	beq.n	8002310 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e4:	781a      	ldrb	r2, [r3, #0]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f0:	1c5a      	adds	r2, r3, #1
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	3b01      	subs	r3, #1
 80022fe:	b29a      	uxth	r2, r3
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002308:	3b01      	subs	r3, #1
 800230a:	b29a      	uxth	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002310:	697a      	ldr	r2, [r7, #20]
 8002312:	6a39      	ldr	r1, [r7, #32]
 8002314:	68f8      	ldr	r0, [r7, #12]
 8002316:	f000 fdf0 	bl	8002efa <I2C_WaitOnBTFFlagUntilTimeout>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d00d      	beq.n	800233c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002324:	2b04      	cmp	r3, #4
 8002326:	d107      	bne.n	8002338 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002336:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e01a      	b.n	8002372 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002340:	2b00      	cmp	r3, #0
 8002342:	d194      	bne.n	800226e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002352:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2220      	movs	r2, #32
 8002358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2200      	movs	r2, #0
 8002360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800236c:	2300      	movs	r3, #0
 800236e:	e000      	b.n	8002372 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002370:	2302      	movs	r3, #2
  }
}
 8002372:	4618      	mov	r0, r3
 8002374:	3718      	adds	r7, #24
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	00100002 	.word	0x00100002
 8002380:	ffff0000 	.word	0xffff0000

08002384 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b08c      	sub	sp, #48	; 0x30
 8002388:	af02      	add	r7, sp, #8
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	607a      	str	r2, [r7, #4]
 800238e:	461a      	mov	r2, r3
 8002390:	460b      	mov	r3, r1
 8002392:	817b      	strh	r3, [r7, #10]
 8002394:	4613      	mov	r3, r2
 8002396:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002398:	f7ff fa18 	bl	80017cc <HAL_GetTick>
 800239c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	2b20      	cmp	r3, #32
 80023a8:	f040 820b 	bne.w	80027c2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ae:	9300      	str	r3, [sp, #0]
 80023b0:	2319      	movs	r3, #25
 80023b2:	2201      	movs	r2, #1
 80023b4:	497c      	ldr	r1, [pc, #496]	; (80025a8 <HAL_I2C_Master_Receive+0x224>)
 80023b6:	68f8      	ldr	r0, [r7, #12]
 80023b8:	f000 fc88 	bl	8002ccc <I2C_WaitOnFlagUntilTimeout>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80023c2:	2302      	movs	r3, #2
 80023c4:	e1fe      	b.n	80027c4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d101      	bne.n	80023d4 <HAL_I2C_Master_Receive+0x50>
 80023d0:	2302      	movs	r3, #2
 80023d2:	e1f7      	b.n	80027c4 <HAL_I2C_Master_Receive+0x440>
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2201      	movs	r2, #1
 80023d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0301 	and.w	r3, r3, #1
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d007      	beq.n	80023fa <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f042 0201 	orr.w	r2, r2, #1
 80023f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002408:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2222      	movs	r2, #34	; 0x22
 800240e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2210      	movs	r2, #16
 8002416:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2200      	movs	r2, #0
 800241e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	893a      	ldrh	r2, [r7, #8]
 800242a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002430:	b29a      	uxth	r2, r3
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	4a5c      	ldr	r2, [pc, #368]	; (80025ac <HAL_I2C_Master_Receive+0x228>)
 800243a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800243c:	8979      	ldrh	r1, [r7, #10]
 800243e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002440:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002442:	68f8      	ldr	r0, [r7, #12]
 8002444:	f000 fb74 	bl	8002b30 <I2C_MasterRequestRead>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e1b8      	b.n	80027c4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002456:	2b00      	cmp	r3, #0
 8002458:	d113      	bne.n	8002482 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800245a:	2300      	movs	r3, #0
 800245c:	623b      	str	r3, [r7, #32]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	695b      	ldr	r3, [r3, #20]
 8002464:	623b      	str	r3, [r7, #32]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	699b      	ldr	r3, [r3, #24]
 800246c:	623b      	str	r3, [r7, #32]
 800246e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	e18c      	b.n	800279c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002486:	2b01      	cmp	r3, #1
 8002488:	d11b      	bne.n	80024c2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002498:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800249a:	2300      	movs	r3, #0
 800249c:	61fb      	str	r3, [r7, #28]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	695b      	ldr	r3, [r3, #20]
 80024a4:	61fb      	str	r3, [r7, #28]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	699b      	ldr	r3, [r3, #24]
 80024ac:	61fb      	str	r3, [r7, #28]
 80024ae:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024be:	601a      	str	r2, [r3, #0]
 80024c0:	e16c      	b.n	800279c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d11b      	bne.n	8002502 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024d8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024ea:	2300      	movs	r3, #0
 80024ec:	61bb      	str	r3, [r7, #24]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	695b      	ldr	r3, [r3, #20]
 80024f4:	61bb      	str	r3, [r7, #24]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	699b      	ldr	r3, [r3, #24]
 80024fc:	61bb      	str	r3, [r7, #24]
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	e14c      	b.n	800279c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002510:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002512:	2300      	movs	r3, #0
 8002514:	617b      	str	r3, [r7, #20]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	695b      	ldr	r3, [r3, #20]
 800251c:	617b      	str	r3, [r7, #20]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	699b      	ldr	r3, [r3, #24]
 8002524:	617b      	str	r3, [r7, #20]
 8002526:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002528:	e138      	b.n	800279c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800252e:	2b03      	cmp	r3, #3
 8002530:	f200 80f1 	bhi.w	8002716 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002538:	2b01      	cmp	r3, #1
 800253a:	d123      	bne.n	8002584 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800253c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800253e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002540:	68f8      	ldr	r0, [r7, #12]
 8002542:	f000 fd1b 	bl	8002f7c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d001      	beq.n	8002550 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e139      	b.n	80027c4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	691a      	ldr	r2, [r3, #16]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255a:	b2d2      	uxtb	r2, r2
 800255c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002562:	1c5a      	adds	r2, r3, #1
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800256c:	3b01      	subs	r3, #1
 800256e:	b29a      	uxth	r2, r3
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002578:	b29b      	uxth	r3, r3
 800257a:	3b01      	subs	r3, #1
 800257c:	b29a      	uxth	r2, r3
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002582:	e10b      	b.n	800279c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002588:	2b02      	cmp	r3, #2
 800258a:	d14e      	bne.n	800262a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800258c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258e:	9300      	str	r3, [sp, #0]
 8002590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002592:	2200      	movs	r2, #0
 8002594:	4906      	ldr	r1, [pc, #24]	; (80025b0 <HAL_I2C_Master_Receive+0x22c>)
 8002596:	68f8      	ldr	r0, [r7, #12]
 8002598:	f000 fb98 	bl	8002ccc <I2C_WaitOnFlagUntilTimeout>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d008      	beq.n	80025b4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e10e      	b.n	80027c4 <HAL_I2C_Master_Receive+0x440>
 80025a6:	bf00      	nop
 80025a8:	00100002 	.word	0x00100002
 80025ac:	ffff0000 	.word	0xffff0000
 80025b0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	691a      	ldr	r2, [r3, #16]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ce:	b2d2      	uxtb	r2, r2
 80025d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d6:	1c5a      	adds	r2, r3, #1
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025e0:	3b01      	subs	r3, #1
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	3b01      	subs	r3, #1
 80025f0:	b29a      	uxth	r2, r3
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	691a      	ldr	r2, [r3, #16]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002600:	b2d2      	uxtb	r2, r2
 8002602:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002608:	1c5a      	adds	r2, r3, #1
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002612:	3b01      	subs	r3, #1
 8002614:	b29a      	uxth	r2, r3
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800261e:	b29b      	uxth	r3, r3
 8002620:	3b01      	subs	r3, #1
 8002622:	b29a      	uxth	r2, r3
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002628:	e0b8      	b.n	800279c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800262a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262c:	9300      	str	r3, [sp, #0]
 800262e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002630:	2200      	movs	r2, #0
 8002632:	4966      	ldr	r1, [pc, #408]	; (80027cc <HAL_I2C_Master_Receive+0x448>)
 8002634:	68f8      	ldr	r0, [r7, #12]
 8002636:	f000 fb49 	bl	8002ccc <I2C_WaitOnFlagUntilTimeout>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e0bf      	b.n	80027c4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002652:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	691a      	ldr	r2, [r3, #16]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265e:	b2d2      	uxtb	r2, r2
 8002660:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002666:	1c5a      	adds	r2, r3, #1
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002670:	3b01      	subs	r3, #1
 8002672:	b29a      	uxth	r2, r3
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800267c:	b29b      	uxth	r3, r3
 800267e:	3b01      	subs	r3, #1
 8002680:	b29a      	uxth	r2, r3
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002688:	9300      	str	r3, [sp, #0]
 800268a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800268c:	2200      	movs	r2, #0
 800268e:	494f      	ldr	r1, [pc, #316]	; (80027cc <HAL_I2C_Master_Receive+0x448>)
 8002690:	68f8      	ldr	r0, [r7, #12]
 8002692:	f000 fb1b 	bl	8002ccc <I2C_WaitOnFlagUntilTimeout>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e091      	b.n	80027c4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	691a      	ldr	r2, [r3, #16]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ba:	b2d2      	uxtb	r2, r2
 80026bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c2:	1c5a      	adds	r2, r3, #1
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026cc:	3b01      	subs	r3, #1
 80026ce:	b29a      	uxth	r2, r3
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d8:	b29b      	uxth	r3, r3
 80026da:	3b01      	subs	r3, #1
 80026dc:	b29a      	uxth	r2, r3
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	691a      	ldr	r2, [r3, #16]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ec:	b2d2      	uxtb	r2, r2
 80026ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f4:	1c5a      	adds	r2, r3, #1
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026fe:	3b01      	subs	r3, #1
 8002700:	b29a      	uxth	r2, r3
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800270a:	b29b      	uxth	r3, r3
 800270c:	3b01      	subs	r3, #1
 800270e:	b29a      	uxth	r2, r3
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002714:	e042      	b.n	800279c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002716:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002718:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800271a:	68f8      	ldr	r0, [r7, #12]
 800271c:	f000 fc2e 	bl	8002f7c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e04c      	b.n	80027c4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	691a      	ldr	r2, [r3, #16]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002734:	b2d2      	uxtb	r2, r2
 8002736:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273c:	1c5a      	adds	r2, r3, #1
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002746:	3b01      	subs	r3, #1
 8002748:	b29a      	uxth	r2, r3
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002752:	b29b      	uxth	r3, r3
 8002754:	3b01      	subs	r3, #1
 8002756:	b29a      	uxth	r2, r3
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	695b      	ldr	r3, [r3, #20]
 8002762:	f003 0304 	and.w	r3, r3, #4
 8002766:	2b04      	cmp	r3, #4
 8002768:	d118      	bne.n	800279c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	691a      	ldr	r2, [r3, #16]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002774:	b2d2      	uxtb	r2, r2
 8002776:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277c:	1c5a      	adds	r2, r3, #1
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002786:	3b01      	subs	r3, #1
 8002788:	b29a      	uxth	r2, r3
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002792:	b29b      	uxth	r3, r3
 8002794:	3b01      	subs	r3, #1
 8002796:	b29a      	uxth	r2, r3
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	f47f aec2 	bne.w	800252a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2220      	movs	r2, #32
 80027aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80027be:	2300      	movs	r3, #0
 80027c0:	e000      	b.n	80027c4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80027c2:	2302      	movs	r3, #2
  }
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3728      	adds	r7, #40	; 0x28
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	00010004 	.word	0x00010004

080027d0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b08a      	sub	sp, #40	; 0x28
 80027d4:	af02      	add	r7, sp, #8
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	607a      	str	r2, [r7, #4]
 80027da:	603b      	str	r3, [r7, #0]
 80027dc:	460b      	mov	r3, r1
 80027de:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80027e0:	f7fe fff4 	bl	80017cc <HAL_GetTick>
 80027e4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80027e6:	2300      	movs	r3, #0
 80027e8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	2b20      	cmp	r3, #32
 80027f4:	f040 8111 	bne.w	8002a1a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	9300      	str	r3, [sp, #0]
 80027fc:	2319      	movs	r3, #25
 80027fe:	2201      	movs	r2, #1
 8002800:	4988      	ldr	r1, [pc, #544]	; (8002a24 <HAL_I2C_IsDeviceReady+0x254>)
 8002802:	68f8      	ldr	r0, [r7, #12]
 8002804:	f000 fa62 	bl	8002ccc <I2C_WaitOnFlagUntilTimeout>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800280e:	2302      	movs	r3, #2
 8002810:	e104      	b.n	8002a1c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002818:	2b01      	cmp	r3, #1
 800281a:	d101      	bne.n	8002820 <HAL_I2C_IsDeviceReady+0x50>
 800281c:	2302      	movs	r3, #2
 800281e:	e0fd      	b.n	8002a1c <HAL_I2C_IsDeviceReady+0x24c>
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	2b01      	cmp	r3, #1
 8002834:	d007      	beq.n	8002846 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f042 0201 	orr.w	r2, r2, #1
 8002844:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002854:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2224      	movs	r2, #36	; 0x24
 800285a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2200      	movs	r2, #0
 8002862:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	4a70      	ldr	r2, [pc, #448]	; (8002a28 <HAL_I2C_IsDeviceReady+0x258>)
 8002868:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002878:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	9300      	str	r3, [sp, #0]
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	2200      	movs	r2, #0
 8002882:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002886:	68f8      	ldr	r0, [r7, #12]
 8002888:	f000 fa20 	bl	8002ccc <I2C_WaitOnFlagUntilTimeout>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00d      	beq.n	80028ae <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800289c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028a0:	d103      	bne.n	80028aa <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028a8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e0b6      	b.n	8002a1c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80028ae:	897b      	ldrh	r3, [r7, #10]
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	461a      	mov	r2, r3
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80028bc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80028be:	f7fe ff85 	bl	80017cc <HAL_GetTick>
 80028c2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	695b      	ldr	r3, [r3, #20]
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	bf0c      	ite	eq
 80028d2:	2301      	moveq	r3, #1
 80028d4:	2300      	movne	r3, #0
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	695b      	ldr	r3, [r3, #20]
 80028e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028e8:	bf0c      	ite	eq
 80028ea:	2301      	moveq	r3, #1
 80028ec:	2300      	movne	r3, #0
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80028f2:	e025      	b.n	8002940 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80028f4:	f7fe ff6a 	bl	80017cc <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	683a      	ldr	r2, [r7, #0]
 8002900:	429a      	cmp	r2, r3
 8002902:	d302      	bcc.n	800290a <HAL_I2C_IsDeviceReady+0x13a>
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d103      	bne.n	8002912 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	22a0      	movs	r2, #160	; 0xa0
 800290e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	695b      	ldr	r3, [r3, #20]
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	2b02      	cmp	r3, #2
 800291e:	bf0c      	ite	eq
 8002920:	2301      	moveq	r3, #1
 8002922:	2300      	movne	r3, #0
 8002924:	b2db      	uxtb	r3, r3
 8002926:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	695b      	ldr	r3, [r3, #20]
 800292e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002932:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002936:	bf0c      	ite	eq
 8002938:	2301      	moveq	r3, #1
 800293a:	2300      	movne	r3, #0
 800293c:	b2db      	uxtb	r3, r3
 800293e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002946:	b2db      	uxtb	r3, r3
 8002948:	2ba0      	cmp	r3, #160	; 0xa0
 800294a:	d005      	beq.n	8002958 <HAL_I2C_IsDeviceReady+0x188>
 800294c:	7dfb      	ldrb	r3, [r7, #23]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d102      	bne.n	8002958 <HAL_I2C_IsDeviceReady+0x188>
 8002952:	7dbb      	ldrb	r3, [r7, #22]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d0cd      	beq.n	80028f4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2220      	movs	r2, #32
 800295c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	695b      	ldr	r3, [r3, #20]
 8002966:	f003 0302 	and.w	r3, r3, #2
 800296a:	2b02      	cmp	r3, #2
 800296c:	d129      	bne.n	80029c2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800297c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800297e:	2300      	movs	r3, #0
 8002980:	613b      	str	r3, [r7, #16]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	695b      	ldr	r3, [r3, #20]
 8002988:	613b      	str	r3, [r7, #16]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	699b      	ldr	r3, [r3, #24]
 8002990:	613b      	str	r3, [r7, #16]
 8002992:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	9300      	str	r3, [sp, #0]
 8002998:	2319      	movs	r3, #25
 800299a:	2201      	movs	r2, #1
 800299c:	4921      	ldr	r1, [pc, #132]	; (8002a24 <HAL_I2C_IsDeviceReady+0x254>)
 800299e:	68f8      	ldr	r0, [r7, #12]
 80029a0:	f000 f994 	bl	8002ccc <I2C_WaitOnFlagUntilTimeout>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e036      	b.n	8002a1c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2220      	movs	r2, #32
 80029b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80029be:	2300      	movs	r3, #0
 80029c0:	e02c      	b.n	8002a1c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029d0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80029da:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	9300      	str	r3, [sp, #0]
 80029e0:	2319      	movs	r3, #25
 80029e2:	2201      	movs	r2, #1
 80029e4:	490f      	ldr	r1, [pc, #60]	; (8002a24 <HAL_I2C_IsDeviceReady+0x254>)
 80029e6:	68f8      	ldr	r0, [r7, #12]
 80029e8:	f000 f970 	bl	8002ccc <I2C_WaitOnFlagUntilTimeout>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d001      	beq.n	80029f6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e012      	b.n	8002a1c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	3301      	adds	r3, #1
 80029fa:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80029fc:	69ba      	ldr	r2, [r7, #24]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	f4ff af32 	bcc.w	800286a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2220      	movs	r2, #32
 8002a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e000      	b.n	8002a1c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002a1a:	2302      	movs	r3, #2
  }
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3720      	adds	r7, #32
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	00100002 	.word	0x00100002
 8002a28:	ffff0000 	.word	0xffff0000

08002a2c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b088      	sub	sp, #32
 8002a30:	af02      	add	r7, sp, #8
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	607a      	str	r2, [r7, #4]
 8002a36:	603b      	str	r3, [r7, #0]
 8002a38:	460b      	mov	r3, r1
 8002a3a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a40:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	2b08      	cmp	r3, #8
 8002a46:	d006      	beq.n	8002a56 <I2C_MasterRequestWrite+0x2a>
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d003      	beq.n	8002a56 <I2C_MasterRequestWrite+0x2a>
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a54:	d108      	bne.n	8002a68 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a64:	601a      	str	r2, [r3, #0]
 8002a66:	e00b      	b.n	8002a80 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6c:	2b12      	cmp	r3, #18
 8002a6e:	d107      	bne.n	8002a80 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a7e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	9300      	str	r3, [sp, #0]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a8c:	68f8      	ldr	r0, [r7, #12]
 8002a8e:	f000 f91d 	bl	8002ccc <I2C_WaitOnFlagUntilTimeout>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d00d      	beq.n	8002ab4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002aa6:	d103      	bne.n	8002ab0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002aae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e035      	b.n	8002b20 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	691b      	ldr	r3, [r3, #16]
 8002ab8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002abc:	d108      	bne.n	8002ad0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002abe:	897b      	ldrh	r3, [r7, #10]
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002acc:	611a      	str	r2, [r3, #16]
 8002ace:	e01b      	b.n	8002b08 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002ad0:	897b      	ldrh	r3, [r7, #10]
 8002ad2:	11db      	asrs	r3, r3, #7
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	f003 0306 	and.w	r3, r3, #6
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	f063 030f 	orn	r3, r3, #15
 8002ae0:	b2da      	uxtb	r2, r3
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	490e      	ldr	r1, [pc, #56]	; (8002b28 <I2C_MasterRequestWrite+0xfc>)
 8002aee:	68f8      	ldr	r0, [r7, #12]
 8002af0:	f000 f943 	bl	8002d7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d001      	beq.n	8002afe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e010      	b.n	8002b20 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002afe:	897b      	ldrh	r3, [r7, #10]
 8002b00:	b2da      	uxtb	r2, r3
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	4907      	ldr	r1, [pc, #28]	; (8002b2c <I2C_MasterRequestWrite+0x100>)
 8002b0e:	68f8      	ldr	r0, [r7, #12]
 8002b10:	f000 f933 	bl	8002d7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e000      	b.n	8002b20 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002b1e:	2300      	movs	r3, #0
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3718      	adds	r7, #24
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	00010008 	.word	0x00010008
 8002b2c:	00010002 	.word	0x00010002

08002b30 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b088      	sub	sp, #32
 8002b34:	af02      	add	r7, sp, #8
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	607a      	str	r2, [r7, #4]
 8002b3a:	603b      	str	r3, [r7, #0]
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b44:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b54:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	2b08      	cmp	r3, #8
 8002b5a:	d006      	beq.n	8002b6a <I2C_MasterRequestRead+0x3a>
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d003      	beq.n	8002b6a <I2C_MasterRequestRead+0x3a>
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b68:	d108      	bne.n	8002b7c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b78:	601a      	str	r2, [r3, #0]
 8002b7a:	e00b      	b.n	8002b94 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b80:	2b11      	cmp	r3, #17
 8002b82:	d107      	bne.n	8002b94 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b92:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	9300      	str	r3, [sp, #0]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ba0:	68f8      	ldr	r0, [r7, #12]
 8002ba2:	f000 f893 	bl	8002ccc <I2C_WaitOnFlagUntilTimeout>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d00d      	beq.n	8002bc8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bba:	d103      	bne.n	8002bc4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bc2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e079      	b.n	8002cbc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	691b      	ldr	r3, [r3, #16]
 8002bcc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002bd0:	d108      	bne.n	8002be4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002bd2:	897b      	ldrh	r3, [r7, #10]
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	f043 0301 	orr.w	r3, r3, #1
 8002bda:	b2da      	uxtb	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	611a      	str	r2, [r3, #16]
 8002be2:	e05f      	b.n	8002ca4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002be4:	897b      	ldrh	r3, [r7, #10]
 8002be6:	11db      	asrs	r3, r3, #7
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	f003 0306 	and.w	r3, r3, #6
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	f063 030f 	orn	r3, r3, #15
 8002bf4:	b2da      	uxtb	r2, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	4930      	ldr	r1, [pc, #192]	; (8002cc4 <I2C_MasterRequestRead+0x194>)
 8002c02:	68f8      	ldr	r0, [r7, #12]
 8002c04:	f000 f8b9 	bl	8002d7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d001      	beq.n	8002c12 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e054      	b.n	8002cbc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002c12:	897b      	ldrh	r3, [r7, #10]
 8002c14:	b2da      	uxtb	r2, r3
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	4929      	ldr	r1, [pc, #164]	; (8002cc8 <I2C_MasterRequestRead+0x198>)
 8002c22:	68f8      	ldr	r0, [r7, #12]
 8002c24:	f000 f8a9 	bl	8002d7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e044      	b.n	8002cbc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c32:	2300      	movs	r3, #0
 8002c34:	613b      	str	r3, [r7, #16]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	695b      	ldr	r3, [r3, #20]
 8002c3c:	613b      	str	r3, [r7, #16]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	699b      	ldr	r3, [r3, #24]
 8002c44:	613b      	str	r3, [r7, #16]
 8002c46:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c56:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	9300      	str	r3, [sp, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c64:	68f8      	ldr	r0, [r7, #12]
 8002c66:	f000 f831 	bl	8002ccc <I2C_WaitOnFlagUntilTimeout>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d00d      	beq.n	8002c8c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c7e:	d103      	bne.n	8002c88 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c86:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	e017      	b.n	8002cbc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002c8c:	897b      	ldrh	r3, [r7, #10]
 8002c8e:	11db      	asrs	r3, r3, #7
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	f003 0306 	and.w	r3, r3, #6
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	f063 030e 	orn	r3, r3, #14
 8002c9c:	b2da      	uxtb	r2, r3
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	4907      	ldr	r1, [pc, #28]	; (8002cc8 <I2C_MasterRequestRead+0x198>)
 8002caa:	68f8      	ldr	r0, [r7, #12]
 8002cac:	f000 f865 	bl	8002d7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d001      	beq.n	8002cba <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e000      	b.n	8002cbc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3718      	adds	r7, #24
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	00010008 	.word	0x00010008
 8002cc8:	00010002 	.word	0x00010002

08002ccc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	603b      	str	r3, [r7, #0]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cdc:	e025      	b.n	8002d2a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ce4:	d021      	beq.n	8002d2a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ce6:	f7fe fd71 	bl	80017cc <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	683a      	ldr	r2, [r7, #0]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d302      	bcc.n	8002cfc <I2C_WaitOnFlagUntilTimeout+0x30>
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d116      	bne.n	8002d2a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2220      	movs	r2, #32
 8002d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d16:	f043 0220 	orr.w	r2, r3, #32
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e023      	b.n	8002d72 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	0c1b      	lsrs	r3, r3, #16
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d10d      	bne.n	8002d50 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	43da      	mvns	r2, r3
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	4013      	ands	r3, r2
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	bf0c      	ite	eq
 8002d46:	2301      	moveq	r3, #1
 8002d48:	2300      	movne	r3, #0
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	e00c      	b.n	8002d6a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	43da      	mvns	r2, r3
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	bf0c      	ite	eq
 8002d62:	2301      	moveq	r3, #1
 8002d64:	2300      	movne	r3, #0
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	461a      	mov	r2, r3
 8002d6a:	79fb      	ldrb	r3, [r7, #7]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d0b6      	beq.n	8002cde <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3710      	adds	r7, #16
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}

08002d7a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	b084      	sub	sp, #16
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	60f8      	str	r0, [r7, #12]
 8002d82:	60b9      	str	r1, [r7, #8]
 8002d84:	607a      	str	r2, [r7, #4]
 8002d86:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d88:	e051      	b.n	8002e2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	695b      	ldr	r3, [r3, #20]
 8002d90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d98:	d123      	bne.n	8002de2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002da8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002db2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2200      	movs	r2, #0
 8002db8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2220      	movs	r2, #32
 8002dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dce:	f043 0204 	orr.w	r2, r3, #4
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e046      	b.n	8002e70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002de8:	d021      	beq.n	8002e2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dea:	f7fe fcef 	bl	80017cc <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d302      	bcc.n	8002e00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d116      	bne.n	8002e2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2200      	movs	r2, #0
 8002e04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2220      	movs	r2, #32
 8002e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1a:	f043 0220 	orr.w	r2, r3, #32
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e020      	b.n	8002e70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	0c1b      	lsrs	r3, r3, #16
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d10c      	bne.n	8002e52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	695b      	ldr	r3, [r3, #20]
 8002e3e:	43da      	mvns	r2, r3
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	4013      	ands	r3, r2
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	bf14      	ite	ne
 8002e4a:	2301      	movne	r3, #1
 8002e4c:	2300      	moveq	r3, #0
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	e00b      	b.n	8002e6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	699b      	ldr	r3, [r3, #24]
 8002e58:	43da      	mvns	r2, r3
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	bf14      	ite	ne
 8002e64:	2301      	movne	r3, #1
 8002e66:	2300      	moveq	r3, #0
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d18d      	bne.n	8002d8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002e6e:	2300      	movs	r3, #0
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3710      	adds	r7, #16
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e84:	e02d      	b.n	8002ee2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e86:	68f8      	ldr	r0, [r7, #12]
 8002e88:	f000 f8ce 	bl	8003028 <I2C_IsAcknowledgeFailed>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e02d      	b.n	8002ef2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e9c:	d021      	beq.n	8002ee2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e9e:	f7fe fc95 	bl	80017cc <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	68ba      	ldr	r2, [r7, #8]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d302      	bcc.n	8002eb4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d116      	bne.n	8002ee2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2220      	movs	r2, #32
 8002ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ece:	f043 0220 	orr.w	r2, r3, #32
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e007      	b.n	8002ef2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	695b      	ldr	r3, [r3, #20]
 8002ee8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eec:	2b80      	cmp	r3, #128	; 0x80
 8002eee:	d1ca      	bne.n	8002e86 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3710      	adds	r7, #16
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b084      	sub	sp, #16
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	60f8      	str	r0, [r7, #12]
 8002f02:	60b9      	str	r1, [r7, #8]
 8002f04:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f06:	e02d      	b.n	8002f64 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f08:	68f8      	ldr	r0, [r7, #12]
 8002f0a:	f000 f88d 	bl	8003028 <I2C_IsAcknowledgeFailed>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d001      	beq.n	8002f18 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e02d      	b.n	8002f74 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f1e:	d021      	beq.n	8002f64 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f20:	f7fe fc54 	bl	80017cc <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	68ba      	ldr	r2, [r7, #8]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d302      	bcc.n	8002f36 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d116      	bne.n	8002f64 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2220      	movs	r2, #32
 8002f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f50:	f043 0220 	orr.w	r2, r3, #32
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e007      	b.n	8002f74 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	695b      	ldr	r3, [r3, #20]
 8002f6a:	f003 0304 	and.w	r3, r3, #4
 8002f6e:	2b04      	cmp	r3, #4
 8002f70:	d1ca      	bne.n	8002f08 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f72:	2300      	movs	r3, #0
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3710      	adds	r7, #16
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f88:	e042      	b.n	8003010 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	695b      	ldr	r3, [r3, #20]
 8002f90:	f003 0310 	and.w	r3, r3, #16
 8002f94:	2b10      	cmp	r3, #16
 8002f96:	d119      	bne.n	8002fcc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f06f 0210 	mvn.w	r2, #16
 8002fa0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2220      	movs	r2, #32
 8002fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e029      	b.n	8003020 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fcc:	f7fe fbfe 	bl	80017cc <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	68ba      	ldr	r2, [r7, #8]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d302      	bcc.n	8002fe2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d116      	bne.n	8003010 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2220      	movs	r2, #32
 8002fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffc:	f043 0220 	orr.w	r2, r3, #32
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e007      	b.n	8003020 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	695b      	ldr	r3, [r3, #20]
 8003016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800301a:	2b40      	cmp	r3, #64	; 0x40
 800301c:	d1b5      	bne.n	8002f8a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800301e:	2300      	movs	r3, #0
}
 8003020:	4618      	mov	r0, r3
 8003022:	3710      	adds	r7, #16
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800303a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800303e:	d11b      	bne.n	8003078 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003048:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2220      	movs	r2, #32
 8003054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003064:	f043 0204 	orr.w	r2, r3, #4
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e000      	b.n	800307a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	370c      	adds	r7, #12
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr

08003086 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003086:	b480      	push	{r7}
 8003088:	b083      	sub	sp, #12
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
 800308e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003096:	b2db      	uxtb	r3, r3
 8003098:	2b20      	cmp	r3, #32
 800309a:	d129      	bne.n	80030f0 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2224      	movs	r2, #36	; 0x24
 80030a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f022 0201 	bic.w	r2, r2, #1
 80030b2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f022 0210 	bic.w	r2, r2, #16
 80030c2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	683a      	ldr	r2, [r7, #0]
 80030d0:	430a      	orrs	r2, r1
 80030d2:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f042 0201 	orr.w	r2, r2, #1
 80030e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2220      	movs	r2, #32
 80030e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80030ec:	2300      	movs	r3, #0
 80030ee:	e000      	b.n	80030f2 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80030f0:	2302      	movs	r3, #2
  }
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	370c      	adds	r7, #12
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr

080030fe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80030fe:	b480      	push	{r7}
 8003100:	b085      	sub	sp, #20
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
 8003106:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003108:	2300      	movs	r3, #0
 800310a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003112:	b2db      	uxtb	r3, r3
 8003114:	2b20      	cmp	r3, #32
 8003116:	d12a      	bne.n	800316e <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2224      	movs	r2, #36	; 0x24
 800311c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f022 0201 	bic.w	r2, r2, #1
 800312e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003136:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003138:	89fb      	ldrh	r3, [r7, #14]
 800313a:	f023 030f 	bic.w	r3, r3, #15
 800313e:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	b29a      	uxth	r2, r3
 8003144:	89fb      	ldrh	r3, [r7, #14]
 8003146:	4313      	orrs	r3, r2
 8003148:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	89fa      	ldrh	r2, [r7, #14]
 8003150:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f042 0201 	orr.w	r2, r2, #1
 8003160:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2220      	movs	r2, #32
 8003166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800316a:	2300      	movs	r3, #0
 800316c:	e000      	b.n	8003170 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800316e:	2302      	movs	r3, #2
  }
}
 8003170:	4618      	mov	r0, r3
 8003172:	3714      	adds	r7, #20
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr

0800317c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b086      	sub	sp, #24
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d101      	bne.n	800318e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e267      	b.n	800365e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0301 	and.w	r3, r3, #1
 8003196:	2b00      	cmp	r3, #0
 8003198:	d075      	beq.n	8003286 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800319a:	4b88      	ldr	r3, [pc, #544]	; (80033bc <HAL_RCC_OscConfig+0x240>)
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f003 030c 	and.w	r3, r3, #12
 80031a2:	2b04      	cmp	r3, #4
 80031a4:	d00c      	beq.n	80031c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031a6:	4b85      	ldr	r3, [pc, #532]	; (80033bc <HAL_RCC_OscConfig+0x240>)
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031ae:	2b08      	cmp	r3, #8
 80031b0:	d112      	bne.n	80031d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031b2:	4b82      	ldr	r3, [pc, #520]	; (80033bc <HAL_RCC_OscConfig+0x240>)
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031be:	d10b      	bne.n	80031d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031c0:	4b7e      	ldr	r3, [pc, #504]	; (80033bc <HAL_RCC_OscConfig+0x240>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d05b      	beq.n	8003284 <HAL_RCC_OscConfig+0x108>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d157      	bne.n	8003284 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e242      	b.n	800365e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031e0:	d106      	bne.n	80031f0 <HAL_RCC_OscConfig+0x74>
 80031e2:	4b76      	ldr	r3, [pc, #472]	; (80033bc <HAL_RCC_OscConfig+0x240>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a75      	ldr	r2, [pc, #468]	; (80033bc <HAL_RCC_OscConfig+0x240>)
 80031e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031ec:	6013      	str	r3, [r2, #0]
 80031ee:	e01d      	b.n	800322c <HAL_RCC_OscConfig+0xb0>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031f8:	d10c      	bne.n	8003214 <HAL_RCC_OscConfig+0x98>
 80031fa:	4b70      	ldr	r3, [pc, #448]	; (80033bc <HAL_RCC_OscConfig+0x240>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a6f      	ldr	r2, [pc, #444]	; (80033bc <HAL_RCC_OscConfig+0x240>)
 8003200:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003204:	6013      	str	r3, [r2, #0]
 8003206:	4b6d      	ldr	r3, [pc, #436]	; (80033bc <HAL_RCC_OscConfig+0x240>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a6c      	ldr	r2, [pc, #432]	; (80033bc <HAL_RCC_OscConfig+0x240>)
 800320c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003210:	6013      	str	r3, [r2, #0]
 8003212:	e00b      	b.n	800322c <HAL_RCC_OscConfig+0xb0>
 8003214:	4b69      	ldr	r3, [pc, #420]	; (80033bc <HAL_RCC_OscConfig+0x240>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a68      	ldr	r2, [pc, #416]	; (80033bc <HAL_RCC_OscConfig+0x240>)
 800321a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800321e:	6013      	str	r3, [r2, #0]
 8003220:	4b66      	ldr	r3, [pc, #408]	; (80033bc <HAL_RCC_OscConfig+0x240>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a65      	ldr	r2, [pc, #404]	; (80033bc <HAL_RCC_OscConfig+0x240>)
 8003226:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800322a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d013      	beq.n	800325c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003234:	f7fe faca 	bl	80017cc <HAL_GetTick>
 8003238:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800323a:	e008      	b.n	800324e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800323c:	f7fe fac6 	bl	80017cc <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	2b64      	cmp	r3, #100	; 0x64
 8003248:	d901      	bls.n	800324e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e207      	b.n	800365e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800324e:	4b5b      	ldr	r3, [pc, #364]	; (80033bc <HAL_RCC_OscConfig+0x240>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d0f0      	beq.n	800323c <HAL_RCC_OscConfig+0xc0>
 800325a:	e014      	b.n	8003286 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800325c:	f7fe fab6 	bl	80017cc <HAL_GetTick>
 8003260:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003262:	e008      	b.n	8003276 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003264:	f7fe fab2 	bl	80017cc <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b64      	cmp	r3, #100	; 0x64
 8003270:	d901      	bls.n	8003276 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e1f3      	b.n	800365e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003276:	4b51      	ldr	r3, [pc, #324]	; (80033bc <HAL_RCC_OscConfig+0x240>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1f0      	bne.n	8003264 <HAL_RCC_OscConfig+0xe8>
 8003282:	e000      	b.n	8003286 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003284:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0302 	and.w	r3, r3, #2
 800328e:	2b00      	cmp	r3, #0
 8003290:	d063      	beq.n	800335a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003292:	4b4a      	ldr	r3, [pc, #296]	; (80033bc <HAL_RCC_OscConfig+0x240>)
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f003 030c 	and.w	r3, r3, #12
 800329a:	2b00      	cmp	r3, #0
 800329c:	d00b      	beq.n	80032b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800329e:	4b47      	ldr	r3, [pc, #284]	; (80033bc <HAL_RCC_OscConfig+0x240>)
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032a6:	2b08      	cmp	r3, #8
 80032a8:	d11c      	bne.n	80032e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032aa:	4b44      	ldr	r3, [pc, #272]	; (80033bc <HAL_RCC_OscConfig+0x240>)
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d116      	bne.n	80032e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032b6:	4b41      	ldr	r3, [pc, #260]	; (80033bc <HAL_RCC_OscConfig+0x240>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0302 	and.w	r3, r3, #2
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d005      	beq.n	80032ce <HAL_RCC_OscConfig+0x152>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d001      	beq.n	80032ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e1c7      	b.n	800365e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032ce:	4b3b      	ldr	r3, [pc, #236]	; (80033bc <HAL_RCC_OscConfig+0x240>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	691b      	ldr	r3, [r3, #16]
 80032da:	00db      	lsls	r3, r3, #3
 80032dc:	4937      	ldr	r1, [pc, #220]	; (80033bc <HAL_RCC_OscConfig+0x240>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032e2:	e03a      	b.n	800335a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d020      	beq.n	800332e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032ec:	4b34      	ldr	r3, [pc, #208]	; (80033c0 <HAL_RCC_OscConfig+0x244>)
 80032ee:	2201      	movs	r2, #1
 80032f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f2:	f7fe fa6b 	bl	80017cc <HAL_GetTick>
 80032f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032f8:	e008      	b.n	800330c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032fa:	f7fe fa67 	bl	80017cc <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	2b02      	cmp	r3, #2
 8003306:	d901      	bls.n	800330c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e1a8      	b.n	800365e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800330c:	4b2b      	ldr	r3, [pc, #172]	; (80033bc <HAL_RCC_OscConfig+0x240>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0302 	and.w	r3, r3, #2
 8003314:	2b00      	cmp	r3, #0
 8003316:	d0f0      	beq.n	80032fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003318:	4b28      	ldr	r3, [pc, #160]	; (80033bc <HAL_RCC_OscConfig+0x240>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	691b      	ldr	r3, [r3, #16]
 8003324:	00db      	lsls	r3, r3, #3
 8003326:	4925      	ldr	r1, [pc, #148]	; (80033bc <HAL_RCC_OscConfig+0x240>)
 8003328:	4313      	orrs	r3, r2
 800332a:	600b      	str	r3, [r1, #0]
 800332c:	e015      	b.n	800335a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800332e:	4b24      	ldr	r3, [pc, #144]	; (80033c0 <HAL_RCC_OscConfig+0x244>)
 8003330:	2200      	movs	r2, #0
 8003332:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003334:	f7fe fa4a 	bl	80017cc <HAL_GetTick>
 8003338:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800333a:	e008      	b.n	800334e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800333c:	f7fe fa46 	bl	80017cc <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	2b02      	cmp	r3, #2
 8003348:	d901      	bls.n	800334e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e187      	b.n	800365e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800334e:	4b1b      	ldr	r3, [pc, #108]	; (80033bc <HAL_RCC_OscConfig+0x240>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0302 	and.w	r3, r3, #2
 8003356:	2b00      	cmp	r3, #0
 8003358:	d1f0      	bne.n	800333c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0308 	and.w	r3, r3, #8
 8003362:	2b00      	cmp	r3, #0
 8003364:	d036      	beq.n	80033d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d016      	beq.n	800339c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800336e:	4b15      	ldr	r3, [pc, #84]	; (80033c4 <HAL_RCC_OscConfig+0x248>)
 8003370:	2201      	movs	r2, #1
 8003372:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003374:	f7fe fa2a 	bl	80017cc <HAL_GetTick>
 8003378:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800337a:	e008      	b.n	800338e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800337c:	f7fe fa26 	bl	80017cc <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	2b02      	cmp	r3, #2
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e167      	b.n	800365e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800338e:	4b0b      	ldr	r3, [pc, #44]	; (80033bc <HAL_RCC_OscConfig+0x240>)
 8003390:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003392:	f003 0302 	and.w	r3, r3, #2
 8003396:	2b00      	cmp	r3, #0
 8003398:	d0f0      	beq.n	800337c <HAL_RCC_OscConfig+0x200>
 800339a:	e01b      	b.n	80033d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800339c:	4b09      	ldr	r3, [pc, #36]	; (80033c4 <HAL_RCC_OscConfig+0x248>)
 800339e:	2200      	movs	r2, #0
 80033a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033a2:	f7fe fa13 	bl	80017cc <HAL_GetTick>
 80033a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033a8:	e00e      	b.n	80033c8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033aa:	f7fe fa0f 	bl	80017cc <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d907      	bls.n	80033c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e150      	b.n	800365e <HAL_RCC_OscConfig+0x4e2>
 80033bc:	40023800 	.word	0x40023800
 80033c0:	42470000 	.word	0x42470000
 80033c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033c8:	4b88      	ldr	r3, [pc, #544]	; (80035ec <HAL_RCC_OscConfig+0x470>)
 80033ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033cc:	f003 0302 	and.w	r3, r3, #2
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d1ea      	bne.n	80033aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0304 	and.w	r3, r3, #4
 80033dc:	2b00      	cmp	r3, #0
 80033de:	f000 8097 	beq.w	8003510 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033e2:	2300      	movs	r3, #0
 80033e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033e6:	4b81      	ldr	r3, [pc, #516]	; (80035ec <HAL_RCC_OscConfig+0x470>)
 80033e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d10f      	bne.n	8003412 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033f2:	2300      	movs	r3, #0
 80033f4:	60bb      	str	r3, [r7, #8]
 80033f6:	4b7d      	ldr	r3, [pc, #500]	; (80035ec <HAL_RCC_OscConfig+0x470>)
 80033f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fa:	4a7c      	ldr	r2, [pc, #496]	; (80035ec <HAL_RCC_OscConfig+0x470>)
 80033fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003400:	6413      	str	r3, [r2, #64]	; 0x40
 8003402:	4b7a      	ldr	r3, [pc, #488]	; (80035ec <HAL_RCC_OscConfig+0x470>)
 8003404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800340a:	60bb      	str	r3, [r7, #8]
 800340c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800340e:	2301      	movs	r3, #1
 8003410:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003412:	4b77      	ldr	r3, [pc, #476]	; (80035f0 <HAL_RCC_OscConfig+0x474>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800341a:	2b00      	cmp	r3, #0
 800341c:	d118      	bne.n	8003450 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800341e:	4b74      	ldr	r3, [pc, #464]	; (80035f0 <HAL_RCC_OscConfig+0x474>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a73      	ldr	r2, [pc, #460]	; (80035f0 <HAL_RCC_OscConfig+0x474>)
 8003424:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003428:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800342a:	f7fe f9cf 	bl	80017cc <HAL_GetTick>
 800342e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003430:	e008      	b.n	8003444 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003432:	f7fe f9cb 	bl	80017cc <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	2b02      	cmp	r3, #2
 800343e:	d901      	bls.n	8003444 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e10c      	b.n	800365e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003444:	4b6a      	ldr	r3, [pc, #424]	; (80035f0 <HAL_RCC_OscConfig+0x474>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800344c:	2b00      	cmp	r3, #0
 800344e:	d0f0      	beq.n	8003432 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	2b01      	cmp	r3, #1
 8003456:	d106      	bne.n	8003466 <HAL_RCC_OscConfig+0x2ea>
 8003458:	4b64      	ldr	r3, [pc, #400]	; (80035ec <HAL_RCC_OscConfig+0x470>)
 800345a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800345c:	4a63      	ldr	r2, [pc, #396]	; (80035ec <HAL_RCC_OscConfig+0x470>)
 800345e:	f043 0301 	orr.w	r3, r3, #1
 8003462:	6713      	str	r3, [r2, #112]	; 0x70
 8003464:	e01c      	b.n	80034a0 <HAL_RCC_OscConfig+0x324>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	2b05      	cmp	r3, #5
 800346c:	d10c      	bne.n	8003488 <HAL_RCC_OscConfig+0x30c>
 800346e:	4b5f      	ldr	r3, [pc, #380]	; (80035ec <HAL_RCC_OscConfig+0x470>)
 8003470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003472:	4a5e      	ldr	r2, [pc, #376]	; (80035ec <HAL_RCC_OscConfig+0x470>)
 8003474:	f043 0304 	orr.w	r3, r3, #4
 8003478:	6713      	str	r3, [r2, #112]	; 0x70
 800347a:	4b5c      	ldr	r3, [pc, #368]	; (80035ec <HAL_RCC_OscConfig+0x470>)
 800347c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800347e:	4a5b      	ldr	r2, [pc, #364]	; (80035ec <HAL_RCC_OscConfig+0x470>)
 8003480:	f043 0301 	orr.w	r3, r3, #1
 8003484:	6713      	str	r3, [r2, #112]	; 0x70
 8003486:	e00b      	b.n	80034a0 <HAL_RCC_OscConfig+0x324>
 8003488:	4b58      	ldr	r3, [pc, #352]	; (80035ec <HAL_RCC_OscConfig+0x470>)
 800348a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800348c:	4a57      	ldr	r2, [pc, #348]	; (80035ec <HAL_RCC_OscConfig+0x470>)
 800348e:	f023 0301 	bic.w	r3, r3, #1
 8003492:	6713      	str	r3, [r2, #112]	; 0x70
 8003494:	4b55      	ldr	r3, [pc, #340]	; (80035ec <HAL_RCC_OscConfig+0x470>)
 8003496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003498:	4a54      	ldr	r2, [pc, #336]	; (80035ec <HAL_RCC_OscConfig+0x470>)
 800349a:	f023 0304 	bic.w	r3, r3, #4
 800349e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d015      	beq.n	80034d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034a8:	f7fe f990 	bl	80017cc <HAL_GetTick>
 80034ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034ae:	e00a      	b.n	80034c6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034b0:	f7fe f98c 	bl	80017cc <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80034be:	4293      	cmp	r3, r2
 80034c0:	d901      	bls.n	80034c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e0cb      	b.n	800365e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034c6:	4b49      	ldr	r3, [pc, #292]	; (80035ec <HAL_RCC_OscConfig+0x470>)
 80034c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d0ee      	beq.n	80034b0 <HAL_RCC_OscConfig+0x334>
 80034d2:	e014      	b.n	80034fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034d4:	f7fe f97a 	bl	80017cc <HAL_GetTick>
 80034d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034da:	e00a      	b.n	80034f2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034dc:	f7fe f976 	bl	80017cc <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d901      	bls.n	80034f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e0b5      	b.n	800365e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034f2:	4b3e      	ldr	r3, [pc, #248]	; (80035ec <HAL_RCC_OscConfig+0x470>)
 80034f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034f6:	f003 0302 	and.w	r3, r3, #2
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d1ee      	bne.n	80034dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034fe:	7dfb      	ldrb	r3, [r7, #23]
 8003500:	2b01      	cmp	r3, #1
 8003502:	d105      	bne.n	8003510 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003504:	4b39      	ldr	r3, [pc, #228]	; (80035ec <HAL_RCC_OscConfig+0x470>)
 8003506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003508:	4a38      	ldr	r2, [pc, #224]	; (80035ec <HAL_RCC_OscConfig+0x470>)
 800350a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800350e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	699b      	ldr	r3, [r3, #24]
 8003514:	2b00      	cmp	r3, #0
 8003516:	f000 80a1 	beq.w	800365c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800351a:	4b34      	ldr	r3, [pc, #208]	; (80035ec <HAL_RCC_OscConfig+0x470>)
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f003 030c 	and.w	r3, r3, #12
 8003522:	2b08      	cmp	r3, #8
 8003524:	d05c      	beq.n	80035e0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	2b02      	cmp	r3, #2
 800352c:	d141      	bne.n	80035b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800352e:	4b31      	ldr	r3, [pc, #196]	; (80035f4 <HAL_RCC_OscConfig+0x478>)
 8003530:	2200      	movs	r2, #0
 8003532:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003534:	f7fe f94a 	bl	80017cc <HAL_GetTick>
 8003538:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800353a:	e008      	b.n	800354e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800353c:	f7fe f946 	bl	80017cc <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	2b02      	cmp	r3, #2
 8003548:	d901      	bls.n	800354e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e087      	b.n	800365e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800354e:	4b27      	ldr	r3, [pc, #156]	; (80035ec <HAL_RCC_OscConfig+0x470>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d1f0      	bne.n	800353c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	69da      	ldr	r2, [r3, #28]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a1b      	ldr	r3, [r3, #32]
 8003562:	431a      	orrs	r2, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003568:	019b      	lsls	r3, r3, #6
 800356a:	431a      	orrs	r2, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003570:	085b      	lsrs	r3, r3, #1
 8003572:	3b01      	subs	r3, #1
 8003574:	041b      	lsls	r3, r3, #16
 8003576:	431a      	orrs	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800357c:	061b      	lsls	r3, r3, #24
 800357e:	491b      	ldr	r1, [pc, #108]	; (80035ec <HAL_RCC_OscConfig+0x470>)
 8003580:	4313      	orrs	r3, r2
 8003582:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003584:	4b1b      	ldr	r3, [pc, #108]	; (80035f4 <HAL_RCC_OscConfig+0x478>)
 8003586:	2201      	movs	r2, #1
 8003588:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800358a:	f7fe f91f 	bl	80017cc <HAL_GetTick>
 800358e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003590:	e008      	b.n	80035a4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003592:	f7fe f91b 	bl	80017cc <HAL_GetTick>
 8003596:	4602      	mov	r2, r0
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	2b02      	cmp	r3, #2
 800359e:	d901      	bls.n	80035a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	e05c      	b.n	800365e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035a4:	4b11      	ldr	r3, [pc, #68]	; (80035ec <HAL_RCC_OscConfig+0x470>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d0f0      	beq.n	8003592 <HAL_RCC_OscConfig+0x416>
 80035b0:	e054      	b.n	800365c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035b2:	4b10      	ldr	r3, [pc, #64]	; (80035f4 <HAL_RCC_OscConfig+0x478>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035b8:	f7fe f908 	bl	80017cc <HAL_GetTick>
 80035bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035be:	e008      	b.n	80035d2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035c0:	f7fe f904 	bl	80017cc <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d901      	bls.n	80035d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e045      	b.n	800365e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035d2:	4b06      	ldr	r3, [pc, #24]	; (80035ec <HAL_RCC_OscConfig+0x470>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d1f0      	bne.n	80035c0 <HAL_RCC_OscConfig+0x444>
 80035de:	e03d      	b.n	800365c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d107      	bne.n	80035f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e038      	b.n	800365e <HAL_RCC_OscConfig+0x4e2>
 80035ec:	40023800 	.word	0x40023800
 80035f0:	40007000 	.word	0x40007000
 80035f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035f8:	4b1b      	ldr	r3, [pc, #108]	; (8003668 <HAL_RCC_OscConfig+0x4ec>)
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	699b      	ldr	r3, [r3, #24]
 8003602:	2b01      	cmp	r3, #1
 8003604:	d028      	beq.n	8003658 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003610:	429a      	cmp	r2, r3
 8003612:	d121      	bne.n	8003658 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800361e:	429a      	cmp	r2, r3
 8003620:	d11a      	bne.n	8003658 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003628:	4013      	ands	r3, r2
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800362e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003630:	4293      	cmp	r3, r2
 8003632:	d111      	bne.n	8003658 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800363e:	085b      	lsrs	r3, r3, #1
 8003640:	3b01      	subs	r3, #1
 8003642:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003644:	429a      	cmp	r2, r3
 8003646:	d107      	bne.n	8003658 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003652:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003654:	429a      	cmp	r2, r3
 8003656:	d001      	beq.n	800365c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e000      	b.n	800365e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	3718      	adds	r7, #24
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	40023800 	.word	0x40023800

0800366c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d101      	bne.n	8003680 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e0cc      	b.n	800381a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003680:	4b68      	ldr	r3, [pc, #416]	; (8003824 <HAL_RCC_ClockConfig+0x1b8>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 030f 	and.w	r3, r3, #15
 8003688:	683a      	ldr	r2, [r7, #0]
 800368a:	429a      	cmp	r2, r3
 800368c:	d90c      	bls.n	80036a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800368e:	4b65      	ldr	r3, [pc, #404]	; (8003824 <HAL_RCC_ClockConfig+0x1b8>)
 8003690:	683a      	ldr	r2, [r7, #0]
 8003692:	b2d2      	uxtb	r2, r2
 8003694:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003696:	4b63      	ldr	r3, [pc, #396]	; (8003824 <HAL_RCC_ClockConfig+0x1b8>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 030f 	and.w	r3, r3, #15
 800369e:	683a      	ldr	r2, [r7, #0]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d001      	beq.n	80036a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e0b8      	b.n	800381a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0302 	and.w	r3, r3, #2
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d020      	beq.n	80036f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0304 	and.w	r3, r3, #4
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d005      	beq.n	80036cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036c0:	4b59      	ldr	r3, [pc, #356]	; (8003828 <HAL_RCC_ClockConfig+0x1bc>)
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	4a58      	ldr	r2, [pc, #352]	; (8003828 <HAL_RCC_ClockConfig+0x1bc>)
 80036c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80036ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0308 	and.w	r3, r3, #8
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d005      	beq.n	80036e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036d8:	4b53      	ldr	r3, [pc, #332]	; (8003828 <HAL_RCC_ClockConfig+0x1bc>)
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	4a52      	ldr	r2, [pc, #328]	; (8003828 <HAL_RCC_ClockConfig+0x1bc>)
 80036de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80036e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036e4:	4b50      	ldr	r3, [pc, #320]	; (8003828 <HAL_RCC_ClockConfig+0x1bc>)
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	494d      	ldr	r1, [pc, #308]	; (8003828 <HAL_RCC_ClockConfig+0x1bc>)
 80036f2:	4313      	orrs	r3, r2
 80036f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0301 	and.w	r3, r3, #1
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d044      	beq.n	800378c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	2b01      	cmp	r3, #1
 8003708:	d107      	bne.n	800371a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800370a:	4b47      	ldr	r3, [pc, #284]	; (8003828 <HAL_RCC_ClockConfig+0x1bc>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d119      	bne.n	800374a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e07f      	b.n	800381a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	2b02      	cmp	r3, #2
 8003720:	d003      	beq.n	800372a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003726:	2b03      	cmp	r3, #3
 8003728:	d107      	bne.n	800373a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800372a:	4b3f      	ldr	r3, [pc, #252]	; (8003828 <HAL_RCC_ClockConfig+0x1bc>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d109      	bne.n	800374a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e06f      	b.n	800381a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800373a:	4b3b      	ldr	r3, [pc, #236]	; (8003828 <HAL_RCC_ClockConfig+0x1bc>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0302 	and.w	r3, r3, #2
 8003742:	2b00      	cmp	r3, #0
 8003744:	d101      	bne.n	800374a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e067      	b.n	800381a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800374a:	4b37      	ldr	r3, [pc, #220]	; (8003828 <HAL_RCC_ClockConfig+0x1bc>)
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f023 0203 	bic.w	r2, r3, #3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	4934      	ldr	r1, [pc, #208]	; (8003828 <HAL_RCC_ClockConfig+0x1bc>)
 8003758:	4313      	orrs	r3, r2
 800375a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800375c:	f7fe f836 	bl	80017cc <HAL_GetTick>
 8003760:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003762:	e00a      	b.n	800377a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003764:	f7fe f832 	bl	80017cc <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003772:	4293      	cmp	r3, r2
 8003774:	d901      	bls.n	800377a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e04f      	b.n	800381a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800377a:	4b2b      	ldr	r3, [pc, #172]	; (8003828 <HAL_RCC_ClockConfig+0x1bc>)
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	f003 020c 	and.w	r2, r3, #12
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	429a      	cmp	r2, r3
 800378a:	d1eb      	bne.n	8003764 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800378c:	4b25      	ldr	r3, [pc, #148]	; (8003824 <HAL_RCC_ClockConfig+0x1b8>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 030f 	and.w	r3, r3, #15
 8003794:	683a      	ldr	r2, [r7, #0]
 8003796:	429a      	cmp	r2, r3
 8003798:	d20c      	bcs.n	80037b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800379a:	4b22      	ldr	r3, [pc, #136]	; (8003824 <HAL_RCC_ClockConfig+0x1b8>)
 800379c:	683a      	ldr	r2, [r7, #0]
 800379e:	b2d2      	uxtb	r2, r2
 80037a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037a2:	4b20      	ldr	r3, [pc, #128]	; (8003824 <HAL_RCC_ClockConfig+0x1b8>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 030f 	and.w	r3, r3, #15
 80037aa:	683a      	ldr	r2, [r7, #0]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d001      	beq.n	80037b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e032      	b.n	800381a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0304 	and.w	r3, r3, #4
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d008      	beq.n	80037d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037c0:	4b19      	ldr	r3, [pc, #100]	; (8003828 <HAL_RCC_ClockConfig+0x1bc>)
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	4916      	ldr	r1, [pc, #88]	; (8003828 <HAL_RCC_ClockConfig+0x1bc>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0308 	and.w	r3, r3, #8
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d009      	beq.n	80037f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037de:	4b12      	ldr	r3, [pc, #72]	; (8003828 <HAL_RCC_ClockConfig+0x1bc>)
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	691b      	ldr	r3, [r3, #16]
 80037ea:	00db      	lsls	r3, r3, #3
 80037ec:	490e      	ldr	r1, [pc, #56]	; (8003828 <HAL_RCC_ClockConfig+0x1bc>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80037f2:	f000 f821 	bl	8003838 <HAL_RCC_GetSysClockFreq>
 80037f6:	4602      	mov	r2, r0
 80037f8:	4b0b      	ldr	r3, [pc, #44]	; (8003828 <HAL_RCC_ClockConfig+0x1bc>)
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	091b      	lsrs	r3, r3, #4
 80037fe:	f003 030f 	and.w	r3, r3, #15
 8003802:	490a      	ldr	r1, [pc, #40]	; (800382c <HAL_RCC_ClockConfig+0x1c0>)
 8003804:	5ccb      	ldrb	r3, [r1, r3]
 8003806:	fa22 f303 	lsr.w	r3, r2, r3
 800380a:	4a09      	ldr	r2, [pc, #36]	; (8003830 <HAL_RCC_ClockConfig+0x1c4>)
 800380c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800380e:	4b09      	ldr	r3, [pc, #36]	; (8003834 <HAL_RCC_ClockConfig+0x1c8>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4618      	mov	r0, r3
 8003814:	f7fd ff96 	bl	8001744 <HAL_InitTick>

  return HAL_OK;
 8003818:	2300      	movs	r3, #0
}
 800381a:	4618      	mov	r0, r3
 800381c:	3710      	adds	r7, #16
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	40023c00 	.word	0x40023c00
 8003828:	40023800 	.word	0x40023800
 800382c:	08006ee8 	.word	0x08006ee8
 8003830:	20000000 	.word	0x20000000
 8003834:	20000004 	.word	0x20000004

08003838 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003838:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800383c:	b094      	sub	sp, #80	; 0x50
 800383e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003840:	2300      	movs	r3, #0
 8003842:	647b      	str	r3, [r7, #68]	; 0x44
 8003844:	2300      	movs	r3, #0
 8003846:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003848:	2300      	movs	r3, #0
 800384a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800384c:	2300      	movs	r3, #0
 800384e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003850:	4b79      	ldr	r3, [pc, #484]	; (8003a38 <HAL_RCC_GetSysClockFreq+0x200>)
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	f003 030c 	and.w	r3, r3, #12
 8003858:	2b08      	cmp	r3, #8
 800385a:	d00d      	beq.n	8003878 <HAL_RCC_GetSysClockFreq+0x40>
 800385c:	2b08      	cmp	r3, #8
 800385e:	f200 80e1 	bhi.w	8003a24 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003862:	2b00      	cmp	r3, #0
 8003864:	d002      	beq.n	800386c <HAL_RCC_GetSysClockFreq+0x34>
 8003866:	2b04      	cmp	r3, #4
 8003868:	d003      	beq.n	8003872 <HAL_RCC_GetSysClockFreq+0x3a>
 800386a:	e0db      	b.n	8003a24 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800386c:	4b73      	ldr	r3, [pc, #460]	; (8003a3c <HAL_RCC_GetSysClockFreq+0x204>)
 800386e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003870:	e0db      	b.n	8003a2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003872:	4b73      	ldr	r3, [pc, #460]	; (8003a40 <HAL_RCC_GetSysClockFreq+0x208>)
 8003874:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003876:	e0d8      	b.n	8003a2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003878:	4b6f      	ldr	r3, [pc, #444]	; (8003a38 <HAL_RCC_GetSysClockFreq+0x200>)
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003880:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003882:	4b6d      	ldr	r3, [pc, #436]	; (8003a38 <HAL_RCC_GetSysClockFreq+0x200>)
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d063      	beq.n	8003956 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800388e:	4b6a      	ldr	r3, [pc, #424]	; (8003a38 <HAL_RCC_GetSysClockFreq+0x200>)
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	099b      	lsrs	r3, r3, #6
 8003894:	2200      	movs	r2, #0
 8003896:	63bb      	str	r3, [r7, #56]	; 0x38
 8003898:	63fa      	str	r2, [r7, #60]	; 0x3c
 800389a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800389c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038a0:	633b      	str	r3, [r7, #48]	; 0x30
 80038a2:	2300      	movs	r3, #0
 80038a4:	637b      	str	r3, [r7, #52]	; 0x34
 80038a6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80038aa:	4622      	mov	r2, r4
 80038ac:	462b      	mov	r3, r5
 80038ae:	f04f 0000 	mov.w	r0, #0
 80038b2:	f04f 0100 	mov.w	r1, #0
 80038b6:	0159      	lsls	r1, r3, #5
 80038b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038bc:	0150      	lsls	r0, r2, #5
 80038be:	4602      	mov	r2, r0
 80038c0:	460b      	mov	r3, r1
 80038c2:	4621      	mov	r1, r4
 80038c4:	1a51      	subs	r1, r2, r1
 80038c6:	6139      	str	r1, [r7, #16]
 80038c8:	4629      	mov	r1, r5
 80038ca:	eb63 0301 	sbc.w	r3, r3, r1
 80038ce:	617b      	str	r3, [r7, #20]
 80038d0:	f04f 0200 	mov.w	r2, #0
 80038d4:	f04f 0300 	mov.w	r3, #0
 80038d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80038dc:	4659      	mov	r1, fp
 80038de:	018b      	lsls	r3, r1, #6
 80038e0:	4651      	mov	r1, sl
 80038e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80038e6:	4651      	mov	r1, sl
 80038e8:	018a      	lsls	r2, r1, #6
 80038ea:	4651      	mov	r1, sl
 80038ec:	ebb2 0801 	subs.w	r8, r2, r1
 80038f0:	4659      	mov	r1, fp
 80038f2:	eb63 0901 	sbc.w	r9, r3, r1
 80038f6:	f04f 0200 	mov.w	r2, #0
 80038fa:	f04f 0300 	mov.w	r3, #0
 80038fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003902:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003906:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800390a:	4690      	mov	r8, r2
 800390c:	4699      	mov	r9, r3
 800390e:	4623      	mov	r3, r4
 8003910:	eb18 0303 	adds.w	r3, r8, r3
 8003914:	60bb      	str	r3, [r7, #8]
 8003916:	462b      	mov	r3, r5
 8003918:	eb49 0303 	adc.w	r3, r9, r3
 800391c:	60fb      	str	r3, [r7, #12]
 800391e:	f04f 0200 	mov.w	r2, #0
 8003922:	f04f 0300 	mov.w	r3, #0
 8003926:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800392a:	4629      	mov	r1, r5
 800392c:	024b      	lsls	r3, r1, #9
 800392e:	4621      	mov	r1, r4
 8003930:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003934:	4621      	mov	r1, r4
 8003936:	024a      	lsls	r2, r1, #9
 8003938:	4610      	mov	r0, r2
 800393a:	4619      	mov	r1, r3
 800393c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800393e:	2200      	movs	r2, #0
 8003940:	62bb      	str	r3, [r7, #40]	; 0x28
 8003942:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003944:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003948:	f7fc fca2 	bl	8000290 <__aeabi_uldivmod>
 800394c:	4602      	mov	r2, r0
 800394e:	460b      	mov	r3, r1
 8003950:	4613      	mov	r3, r2
 8003952:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003954:	e058      	b.n	8003a08 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003956:	4b38      	ldr	r3, [pc, #224]	; (8003a38 <HAL_RCC_GetSysClockFreq+0x200>)
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	099b      	lsrs	r3, r3, #6
 800395c:	2200      	movs	r2, #0
 800395e:	4618      	mov	r0, r3
 8003960:	4611      	mov	r1, r2
 8003962:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003966:	623b      	str	r3, [r7, #32]
 8003968:	2300      	movs	r3, #0
 800396a:	627b      	str	r3, [r7, #36]	; 0x24
 800396c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003970:	4642      	mov	r2, r8
 8003972:	464b      	mov	r3, r9
 8003974:	f04f 0000 	mov.w	r0, #0
 8003978:	f04f 0100 	mov.w	r1, #0
 800397c:	0159      	lsls	r1, r3, #5
 800397e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003982:	0150      	lsls	r0, r2, #5
 8003984:	4602      	mov	r2, r0
 8003986:	460b      	mov	r3, r1
 8003988:	4641      	mov	r1, r8
 800398a:	ebb2 0a01 	subs.w	sl, r2, r1
 800398e:	4649      	mov	r1, r9
 8003990:	eb63 0b01 	sbc.w	fp, r3, r1
 8003994:	f04f 0200 	mov.w	r2, #0
 8003998:	f04f 0300 	mov.w	r3, #0
 800399c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80039a0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80039a4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80039a8:	ebb2 040a 	subs.w	r4, r2, sl
 80039ac:	eb63 050b 	sbc.w	r5, r3, fp
 80039b0:	f04f 0200 	mov.w	r2, #0
 80039b4:	f04f 0300 	mov.w	r3, #0
 80039b8:	00eb      	lsls	r3, r5, #3
 80039ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039be:	00e2      	lsls	r2, r4, #3
 80039c0:	4614      	mov	r4, r2
 80039c2:	461d      	mov	r5, r3
 80039c4:	4643      	mov	r3, r8
 80039c6:	18e3      	adds	r3, r4, r3
 80039c8:	603b      	str	r3, [r7, #0]
 80039ca:	464b      	mov	r3, r9
 80039cc:	eb45 0303 	adc.w	r3, r5, r3
 80039d0:	607b      	str	r3, [r7, #4]
 80039d2:	f04f 0200 	mov.w	r2, #0
 80039d6:	f04f 0300 	mov.w	r3, #0
 80039da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80039de:	4629      	mov	r1, r5
 80039e0:	028b      	lsls	r3, r1, #10
 80039e2:	4621      	mov	r1, r4
 80039e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80039e8:	4621      	mov	r1, r4
 80039ea:	028a      	lsls	r2, r1, #10
 80039ec:	4610      	mov	r0, r2
 80039ee:	4619      	mov	r1, r3
 80039f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039f2:	2200      	movs	r2, #0
 80039f4:	61bb      	str	r3, [r7, #24]
 80039f6:	61fa      	str	r2, [r7, #28]
 80039f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039fc:	f7fc fc48 	bl	8000290 <__aeabi_uldivmod>
 8003a00:	4602      	mov	r2, r0
 8003a02:	460b      	mov	r3, r1
 8003a04:	4613      	mov	r3, r2
 8003a06:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a08:	4b0b      	ldr	r3, [pc, #44]	; (8003a38 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	0c1b      	lsrs	r3, r3, #16
 8003a0e:	f003 0303 	and.w	r3, r3, #3
 8003a12:	3301      	adds	r3, #1
 8003a14:	005b      	lsls	r3, r3, #1
 8003a16:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003a18:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a20:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a22:	e002      	b.n	8003a2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a24:	4b05      	ldr	r3, [pc, #20]	; (8003a3c <HAL_RCC_GetSysClockFreq+0x204>)
 8003a26:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3750      	adds	r7, #80	; 0x50
 8003a30:	46bd      	mov	sp, r7
 8003a32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a36:	bf00      	nop
 8003a38:	40023800 	.word	0x40023800
 8003a3c:	00f42400 	.word	0x00f42400
 8003a40:	007a1200 	.word	0x007a1200

08003a44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a44:	b480      	push	{r7}
 8003a46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a48:	4b03      	ldr	r3, [pc, #12]	; (8003a58 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	20000000 	.word	0x20000000

08003a5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a60:	f7ff fff0 	bl	8003a44 <HAL_RCC_GetHCLKFreq>
 8003a64:	4602      	mov	r2, r0
 8003a66:	4b05      	ldr	r3, [pc, #20]	; (8003a7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	0a9b      	lsrs	r3, r3, #10
 8003a6c:	f003 0307 	and.w	r3, r3, #7
 8003a70:	4903      	ldr	r1, [pc, #12]	; (8003a80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a72:	5ccb      	ldrb	r3, [r1, r3]
 8003a74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	40023800 	.word	0x40023800
 8003a80:	08006ef8 	.word	0x08006ef8

08003a84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003a88:	f7ff ffdc 	bl	8003a44 <HAL_RCC_GetHCLKFreq>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	4b05      	ldr	r3, [pc, #20]	; (8003aa4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	0b5b      	lsrs	r3, r3, #13
 8003a94:	f003 0307 	and.w	r3, r3, #7
 8003a98:	4903      	ldr	r1, [pc, #12]	; (8003aa8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a9a:	5ccb      	ldrb	r3, [r1, r3]
 8003a9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	40023800 	.word	0x40023800
 8003aa8:	08006ef8 	.word	0x08006ef8

08003aac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d101      	bne.n	8003abe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e07b      	b.n	8003bb6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d108      	bne.n	8003ad8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ace:	d009      	beq.n	8003ae4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	61da      	str	r2, [r3, #28]
 8003ad6:	e005      	b.n	8003ae4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d106      	bne.n	8003b04 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f7fd fc8e 	bl	8001420 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2202      	movs	r2, #2
 8003b08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b1a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003b2c:	431a      	orrs	r2, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b36:	431a      	orrs	r2, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	f003 0302 	and.w	r3, r3, #2
 8003b40:	431a      	orrs	r2, r3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	695b      	ldr	r3, [r3, #20]
 8003b46:	f003 0301 	and.w	r3, r3, #1
 8003b4a:	431a      	orrs	r2, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	699b      	ldr	r3, [r3, #24]
 8003b50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b54:	431a      	orrs	r2, r3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	69db      	ldr	r3, [r3, #28]
 8003b5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b5e:	431a      	orrs	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a1b      	ldr	r3, [r3, #32]
 8003b64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b68:	ea42 0103 	orr.w	r1, r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b70:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	430a      	orrs	r2, r1
 8003b7a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	699b      	ldr	r3, [r3, #24]
 8003b80:	0c1b      	lsrs	r3, r3, #16
 8003b82:	f003 0104 	and.w	r1, r3, #4
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8a:	f003 0210 	and.w	r2, r3, #16
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	430a      	orrs	r2, r1
 8003b94:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	69da      	ldr	r2, [r3, #28]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ba4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3708      	adds	r7, #8
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}

08003bbe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bbe:	b580      	push	{r7, lr}
 8003bc0:	b088      	sub	sp, #32
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	60f8      	str	r0, [r7, #12]
 8003bc6:	60b9      	str	r1, [r7, #8]
 8003bc8:	603b      	str	r3, [r7, #0]
 8003bca:	4613      	mov	r3, r2
 8003bcc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d101      	bne.n	8003be0 <HAL_SPI_Transmit+0x22>
 8003bdc:	2302      	movs	r3, #2
 8003bde:	e126      	b.n	8003e2e <HAL_SPI_Transmit+0x270>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003be8:	f7fd fdf0 	bl	80017cc <HAL_GetTick>
 8003bec:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003bee:	88fb      	ldrh	r3, [r7, #6]
 8003bf0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d002      	beq.n	8003c04 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003bfe:	2302      	movs	r3, #2
 8003c00:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c02:	e10b      	b.n	8003e1c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d002      	beq.n	8003c10 <HAL_SPI_Transmit+0x52>
 8003c0a:	88fb      	ldrh	r3, [r7, #6]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d102      	bne.n	8003c16 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c14:	e102      	b.n	8003e1c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2203      	movs	r2, #3
 8003c1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2200      	movs	r2, #0
 8003c22:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	68ba      	ldr	r2, [r7, #8]
 8003c28:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	88fa      	ldrh	r2, [r7, #6]
 8003c2e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	88fa      	ldrh	r2, [r7, #6]
 8003c34:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2200      	movs	r2, #0
 8003c46:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2200      	movs	r2, #0
 8003c52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c5c:	d10f      	bne.n	8003c7e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c6c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c7c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c88:	2b40      	cmp	r3, #64	; 0x40
 8003c8a:	d007      	beq.n	8003c9c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c9a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ca4:	d14b      	bne.n	8003d3e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d002      	beq.n	8003cb4 <HAL_SPI_Transmit+0xf6>
 8003cae:	8afb      	ldrh	r3, [r7, #22]
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d13e      	bne.n	8003d32 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb8:	881a      	ldrh	r2, [r3, #0]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc4:	1c9a      	adds	r2, r3, #2
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	3b01      	subs	r3, #1
 8003cd2:	b29a      	uxth	r2, r3
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003cd8:	e02b      	b.n	8003d32 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f003 0302 	and.w	r3, r3, #2
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	d112      	bne.n	8003d0e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cec:	881a      	ldrh	r2, [r3, #0]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf8:	1c9a      	adds	r2, r3, #2
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	3b01      	subs	r3, #1
 8003d06:	b29a      	uxth	r2, r3
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	86da      	strh	r2, [r3, #54]	; 0x36
 8003d0c:	e011      	b.n	8003d32 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d0e:	f7fd fd5d 	bl	80017cc <HAL_GetTick>
 8003d12:	4602      	mov	r2, r0
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	683a      	ldr	r2, [r7, #0]
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d803      	bhi.n	8003d26 <HAL_SPI_Transmit+0x168>
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d24:	d102      	bne.n	8003d2c <HAL_SPI_Transmit+0x16e>
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d102      	bne.n	8003d32 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003d30:	e074      	b.n	8003e1c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d1ce      	bne.n	8003cda <HAL_SPI_Transmit+0x11c>
 8003d3c:	e04c      	b.n	8003dd8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d002      	beq.n	8003d4c <HAL_SPI_Transmit+0x18e>
 8003d46:	8afb      	ldrh	r3, [r7, #22]
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d140      	bne.n	8003dce <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	330c      	adds	r3, #12
 8003d56:	7812      	ldrb	r2, [r2, #0]
 8003d58:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5e:	1c5a      	adds	r2, r3, #1
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	b29a      	uxth	r2, r3
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003d72:	e02c      	b.n	8003dce <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	f003 0302 	and.w	r3, r3, #2
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d113      	bne.n	8003daa <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	330c      	adds	r3, #12
 8003d8c:	7812      	ldrb	r2, [r2, #0]
 8003d8e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d94:	1c5a      	adds	r2, r3, #1
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	3b01      	subs	r3, #1
 8003da2:	b29a      	uxth	r2, r3
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	86da      	strh	r2, [r3, #54]	; 0x36
 8003da8:	e011      	b.n	8003dce <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003daa:	f7fd fd0f 	bl	80017cc <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	69bb      	ldr	r3, [r7, #24]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	683a      	ldr	r2, [r7, #0]
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d803      	bhi.n	8003dc2 <HAL_SPI_Transmit+0x204>
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003dc0:	d102      	bne.n	8003dc8 <HAL_SPI_Transmit+0x20a>
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d102      	bne.n	8003dce <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003dcc:	e026      	b.n	8003e1c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d1cd      	bne.n	8003d74 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003dd8:	69ba      	ldr	r2, [r7, #24]
 8003dda:	6839      	ldr	r1, [r7, #0]
 8003ddc:	68f8      	ldr	r0, [r7, #12]
 8003dde:	f000 fbcb 	bl	8004578 <SPI_EndRxTxTransaction>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d002      	beq.n	8003dee <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2220      	movs	r2, #32
 8003dec:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d10a      	bne.n	8003e0c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003df6:	2300      	movs	r3, #0
 8003df8:	613b      	str	r3, [r7, #16]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	613b      	str	r3, [r7, #16]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	613b      	str	r3, [r7, #16]
 8003e0a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d002      	beq.n	8003e1a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	77fb      	strb	r3, [r7, #31]
 8003e18:	e000      	b.n	8003e1c <HAL_SPI_Transmit+0x25e>
  }

error:
 8003e1a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003e2c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3720      	adds	r7, #32
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}

08003e36 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e36:	b580      	push	{r7, lr}
 8003e38:	b088      	sub	sp, #32
 8003e3a:	af02      	add	r7, sp, #8
 8003e3c:	60f8      	str	r0, [r7, #12]
 8003e3e:	60b9      	str	r1, [r7, #8]
 8003e40:	603b      	str	r3, [r7, #0]
 8003e42:	4613      	mov	r3, r2
 8003e44:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003e46:	2300      	movs	r3, #0
 8003e48:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e52:	d112      	bne.n	8003e7a <HAL_SPI_Receive+0x44>
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d10e      	bne.n	8003e7a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2204      	movs	r2, #4
 8003e60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003e64:	88fa      	ldrh	r2, [r7, #6]
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	9300      	str	r3, [sp, #0]
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	68ba      	ldr	r2, [r7, #8]
 8003e6e:	68b9      	ldr	r1, [r7, #8]
 8003e70:	68f8      	ldr	r0, [r7, #12]
 8003e72:	f000 f8f1 	bl	8004058 <HAL_SPI_TransmitReceive>
 8003e76:	4603      	mov	r3, r0
 8003e78:	e0ea      	b.n	8004050 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d101      	bne.n	8003e88 <HAL_SPI_Receive+0x52>
 8003e84:	2302      	movs	r3, #2
 8003e86:	e0e3      	b.n	8004050 <HAL_SPI_Receive+0x21a>
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e90:	f7fd fc9c 	bl	80017cc <HAL_GetTick>
 8003e94:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d002      	beq.n	8003ea8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003ea2:	2302      	movs	r3, #2
 8003ea4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003ea6:	e0ca      	b.n	800403e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d002      	beq.n	8003eb4 <HAL_SPI_Receive+0x7e>
 8003eae:	88fb      	ldrh	r3, [r7, #6]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d102      	bne.n	8003eba <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003eb8:	e0c1      	b.n	800403e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2204      	movs	r2, #4
 8003ebe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	68ba      	ldr	r2, [r7, #8]
 8003ecc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	88fa      	ldrh	r2, [r7, #6]
 8003ed2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	88fa      	ldrh	r2, [r7, #6]
 8003ed8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2200      	movs	r2, #0
 8003ede:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f00:	d10f      	bne.n	8003f22 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f10:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003f20:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f2c:	2b40      	cmp	r3, #64	; 0x40
 8003f2e:	d007      	beq.n	8003f40 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f3e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d162      	bne.n	800400e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003f48:	e02e      	b.n	8003fa8 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f003 0301 	and.w	r3, r3, #1
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d115      	bne.n	8003f84 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f103 020c 	add.w	r2, r3, #12
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f64:	7812      	ldrb	r2, [r2, #0]
 8003f66:	b2d2      	uxtb	r2, r2
 8003f68:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f6e:	1c5a      	adds	r2, r3, #1
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	b29a      	uxth	r2, r3
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f82:	e011      	b.n	8003fa8 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f84:	f7fd fc22 	bl	80017cc <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	683a      	ldr	r2, [r7, #0]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d803      	bhi.n	8003f9c <HAL_SPI_Receive+0x166>
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f9a:	d102      	bne.n	8003fa2 <HAL_SPI_Receive+0x16c>
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d102      	bne.n	8003fa8 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003fa6:	e04a      	b.n	800403e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d1cb      	bne.n	8003f4a <HAL_SPI_Receive+0x114>
 8003fb2:	e031      	b.n	8004018 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f003 0301 	and.w	r3, r3, #1
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d113      	bne.n	8003fea <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	68da      	ldr	r2, [r3, #12]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fcc:	b292      	uxth	r2, r2
 8003fce:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd4:	1c9a      	adds	r2, r3, #2
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	3b01      	subs	r3, #1
 8003fe2:	b29a      	uxth	r2, r3
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003fe8:	e011      	b.n	800400e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003fea:	f7fd fbef 	bl	80017cc <HAL_GetTick>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	683a      	ldr	r2, [r7, #0]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d803      	bhi.n	8004002 <HAL_SPI_Receive+0x1cc>
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004000:	d102      	bne.n	8004008 <HAL_SPI_Receive+0x1d2>
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d102      	bne.n	800400e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004008:	2303      	movs	r3, #3
 800400a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800400c:	e017      	b.n	800403e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004012:	b29b      	uxth	r3, r3
 8004014:	2b00      	cmp	r3, #0
 8004016:	d1cd      	bne.n	8003fb4 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004018:	693a      	ldr	r2, [r7, #16]
 800401a:	6839      	ldr	r1, [r7, #0]
 800401c:	68f8      	ldr	r0, [r7, #12]
 800401e:	f000 fa45 	bl	80044ac <SPI_EndRxTransaction>
 8004022:	4603      	mov	r3, r0
 8004024:	2b00      	cmp	r3, #0
 8004026:	d002      	beq.n	800402e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2220      	movs	r2, #32
 800402c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004032:	2b00      	cmp	r3, #0
 8004034:	d002      	beq.n	800403c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	75fb      	strb	r3, [r7, #23]
 800403a:	e000      	b.n	800403e <HAL_SPI_Receive+0x208>
  }

error :
 800403c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2201      	movs	r2, #1
 8004042:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800404e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004050:	4618      	mov	r0, r3
 8004052:	3718      	adds	r7, #24
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}

08004058 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b08c      	sub	sp, #48	; 0x30
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	607a      	str	r2, [r7, #4]
 8004064:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004066:	2301      	movs	r3, #1
 8004068:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800406a:	2300      	movs	r3, #0
 800406c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004076:	2b01      	cmp	r3, #1
 8004078:	d101      	bne.n	800407e <HAL_SPI_TransmitReceive+0x26>
 800407a:	2302      	movs	r3, #2
 800407c:	e18a      	b.n	8004394 <HAL_SPI_TransmitReceive+0x33c>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2201      	movs	r2, #1
 8004082:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004086:	f7fd fba1 	bl	80017cc <HAL_GetTick>
 800408a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004092:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800409c:	887b      	ldrh	r3, [r7, #2]
 800409e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80040a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d00f      	beq.n	80040c8 <HAL_SPI_TransmitReceive+0x70>
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040ae:	d107      	bne.n	80040c0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d103      	bne.n	80040c0 <HAL_SPI_TransmitReceive+0x68>
 80040b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80040bc:	2b04      	cmp	r3, #4
 80040be:	d003      	beq.n	80040c8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80040c0:	2302      	movs	r3, #2
 80040c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80040c6:	e15b      	b.n	8004380 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d005      	beq.n	80040da <HAL_SPI_TransmitReceive+0x82>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d002      	beq.n	80040da <HAL_SPI_TransmitReceive+0x82>
 80040d4:	887b      	ldrh	r3, [r7, #2]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d103      	bne.n	80040e2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80040e0:	e14e      	b.n	8004380 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	2b04      	cmp	r3, #4
 80040ec:	d003      	beq.n	80040f6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2205      	movs	r2, #5
 80040f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2200      	movs	r2, #0
 80040fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	887a      	ldrh	r2, [r7, #2]
 8004106:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	887a      	ldrh	r2, [r7, #2]
 800410c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	68ba      	ldr	r2, [r7, #8]
 8004112:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	887a      	ldrh	r2, [r7, #2]
 8004118:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	887a      	ldrh	r2, [r7, #2]
 800411e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2200      	movs	r2, #0
 8004124:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2200      	movs	r2, #0
 800412a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004136:	2b40      	cmp	r3, #64	; 0x40
 8004138:	d007      	beq.n	800414a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004148:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004152:	d178      	bne.n	8004246 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d002      	beq.n	8004162 <HAL_SPI_TransmitReceive+0x10a>
 800415c:	8b7b      	ldrh	r3, [r7, #26]
 800415e:	2b01      	cmp	r3, #1
 8004160:	d166      	bne.n	8004230 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004166:	881a      	ldrh	r2, [r3, #0]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004172:	1c9a      	adds	r2, r3, #2
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800417c:	b29b      	uxth	r3, r3
 800417e:	3b01      	subs	r3, #1
 8004180:	b29a      	uxth	r2, r3
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004186:	e053      	b.n	8004230 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	f003 0302 	and.w	r3, r3, #2
 8004192:	2b02      	cmp	r3, #2
 8004194:	d11b      	bne.n	80041ce <HAL_SPI_TransmitReceive+0x176>
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800419a:	b29b      	uxth	r3, r3
 800419c:	2b00      	cmp	r3, #0
 800419e:	d016      	beq.n	80041ce <HAL_SPI_TransmitReceive+0x176>
 80041a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d113      	bne.n	80041ce <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041aa:	881a      	ldrh	r2, [r3, #0]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b6:	1c9a      	adds	r2, r3, #2
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	3b01      	subs	r3, #1
 80041c4:	b29a      	uxth	r2, r3
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80041ca:	2300      	movs	r3, #0
 80041cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	f003 0301 	and.w	r3, r3, #1
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d119      	bne.n	8004210 <HAL_SPI_TransmitReceive+0x1b8>
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d014      	beq.n	8004210 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68da      	ldr	r2, [r3, #12]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f0:	b292      	uxth	r2, r2
 80041f2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f8:	1c9a      	adds	r2, r3, #2
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004202:	b29b      	uxth	r3, r3
 8004204:	3b01      	subs	r3, #1
 8004206:	b29a      	uxth	r2, r3
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800420c:	2301      	movs	r3, #1
 800420e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004210:	f7fd fadc 	bl	80017cc <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800421c:	429a      	cmp	r2, r3
 800421e:	d807      	bhi.n	8004230 <HAL_SPI_TransmitReceive+0x1d8>
 8004220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004222:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004226:	d003      	beq.n	8004230 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004228:	2303      	movs	r3, #3
 800422a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800422e:	e0a7      	b.n	8004380 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004234:	b29b      	uxth	r3, r3
 8004236:	2b00      	cmp	r3, #0
 8004238:	d1a6      	bne.n	8004188 <HAL_SPI_TransmitReceive+0x130>
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800423e:	b29b      	uxth	r3, r3
 8004240:	2b00      	cmp	r3, #0
 8004242:	d1a1      	bne.n	8004188 <HAL_SPI_TransmitReceive+0x130>
 8004244:	e07c      	b.n	8004340 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d002      	beq.n	8004254 <HAL_SPI_TransmitReceive+0x1fc>
 800424e:	8b7b      	ldrh	r3, [r7, #26]
 8004250:	2b01      	cmp	r3, #1
 8004252:	d16b      	bne.n	800432c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	330c      	adds	r3, #12
 800425e:	7812      	ldrb	r2, [r2, #0]
 8004260:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004266:	1c5a      	adds	r2, r3, #1
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004270:	b29b      	uxth	r3, r3
 8004272:	3b01      	subs	r3, #1
 8004274:	b29a      	uxth	r2, r3
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800427a:	e057      	b.n	800432c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	f003 0302 	and.w	r3, r3, #2
 8004286:	2b02      	cmp	r3, #2
 8004288:	d11c      	bne.n	80042c4 <HAL_SPI_TransmitReceive+0x26c>
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800428e:	b29b      	uxth	r3, r3
 8004290:	2b00      	cmp	r3, #0
 8004292:	d017      	beq.n	80042c4 <HAL_SPI_TransmitReceive+0x26c>
 8004294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004296:	2b01      	cmp	r3, #1
 8004298:	d114      	bne.n	80042c4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	330c      	adds	r3, #12
 80042a4:	7812      	ldrb	r2, [r2, #0]
 80042a6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ac:	1c5a      	adds	r2, r3, #1
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	3b01      	subs	r3, #1
 80042ba:	b29a      	uxth	r2, r3
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80042c0:	2300      	movs	r3, #0
 80042c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	f003 0301 	and.w	r3, r3, #1
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d119      	bne.n	8004306 <HAL_SPI_TransmitReceive+0x2ae>
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d014      	beq.n	8004306 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	68da      	ldr	r2, [r3, #12]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e6:	b2d2      	uxtb	r2, r2
 80042e8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ee:	1c5a      	adds	r2, r3, #1
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	3b01      	subs	r3, #1
 80042fc:	b29a      	uxth	r2, r3
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004302:	2301      	movs	r3, #1
 8004304:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004306:	f7fd fa61 	bl	80017cc <HAL_GetTick>
 800430a:	4602      	mov	r2, r0
 800430c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004312:	429a      	cmp	r2, r3
 8004314:	d803      	bhi.n	800431e <HAL_SPI_TransmitReceive+0x2c6>
 8004316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004318:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800431c:	d102      	bne.n	8004324 <HAL_SPI_TransmitReceive+0x2cc>
 800431e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004320:	2b00      	cmp	r3, #0
 8004322:	d103      	bne.n	800432c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800432a:	e029      	b.n	8004380 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004330:	b29b      	uxth	r3, r3
 8004332:	2b00      	cmp	r3, #0
 8004334:	d1a2      	bne.n	800427c <HAL_SPI_TransmitReceive+0x224>
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800433a:	b29b      	uxth	r3, r3
 800433c:	2b00      	cmp	r3, #0
 800433e:	d19d      	bne.n	800427c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004340:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004342:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004344:	68f8      	ldr	r0, [r7, #12]
 8004346:	f000 f917 	bl	8004578 <SPI_EndRxTxTransaction>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d006      	beq.n	800435e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2220      	movs	r2, #32
 800435a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800435c:	e010      	b.n	8004380 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d10b      	bne.n	800437e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004366:	2300      	movs	r3, #0
 8004368:	617b      	str	r3, [r7, #20]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	617b      	str	r3, [r7, #20]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	617b      	str	r3, [r7, #20]
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	e000      	b.n	8004380 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800437e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2200      	movs	r2, #0
 800438c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004390:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004394:	4618      	mov	r0, r3
 8004396:	3730      	adds	r7, #48	; 0x30
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b088      	sub	sp, #32
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	603b      	str	r3, [r7, #0]
 80043a8:	4613      	mov	r3, r2
 80043aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80043ac:	f7fd fa0e 	bl	80017cc <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043b4:	1a9b      	subs	r3, r3, r2
 80043b6:	683a      	ldr	r2, [r7, #0]
 80043b8:	4413      	add	r3, r2
 80043ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80043bc:	f7fd fa06 	bl	80017cc <HAL_GetTick>
 80043c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80043c2:	4b39      	ldr	r3, [pc, #228]	; (80044a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	015b      	lsls	r3, r3, #5
 80043c8:	0d1b      	lsrs	r3, r3, #20
 80043ca:	69fa      	ldr	r2, [r7, #28]
 80043cc:	fb02 f303 	mul.w	r3, r2, r3
 80043d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043d2:	e054      	b.n	800447e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043da:	d050      	beq.n	800447e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80043dc:	f7fd f9f6 	bl	80017cc <HAL_GetTick>
 80043e0:	4602      	mov	r2, r0
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	69fa      	ldr	r2, [r7, #28]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d902      	bls.n	80043f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d13d      	bne.n	800446e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	685a      	ldr	r2, [r3, #4]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004400:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800440a:	d111      	bne.n	8004430 <SPI_WaitFlagStateUntilTimeout+0x94>
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004414:	d004      	beq.n	8004420 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800441e:	d107      	bne.n	8004430 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800442e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004434:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004438:	d10f      	bne.n	800445a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004448:	601a      	str	r2, [r3, #0]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004458:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2201      	movs	r2, #1
 800445e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e017      	b.n	800449e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d101      	bne.n	8004478 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004474:	2300      	movs	r3, #0
 8004476:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	3b01      	subs	r3, #1
 800447c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	689a      	ldr	r2, [r3, #8]
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	4013      	ands	r3, r2
 8004488:	68ba      	ldr	r2, [r7, #8]
 800448a:	429a      	cmp	r2, r3
 800448c:	bf0c      	ite	eq
 800448e:	2301      	moveq	r3, #1
 8004490:	2300      	movne	r3, #0
 8004492:	b2db      	uxtb	r3, r3
 8004494:	461a      	mov	r2, r3
 8004496:	79fb      	ldrb	r3, [r7, #7]
 8004498:	429a      	cmp	r2, r3
 800449a:	d19b      	bne.n	80043d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800449c:	2300      	movs	r3, #0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3720      	adds	r7, #32
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	20000000 	.word	0x20000000

080044ac <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b086      	sub	sp, #24
 80044b0:	af02      	add	r7, sp, #8
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044c0:	d111      	bne.n	80044e6 <SPI_EndRxTransaction+0x3a>
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044ca:	d004      	beq.n	80044d6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044d4:	d107      	bne.n	80044e6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044e4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044ee:	d12a      	bne.n	8004546 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044f8:	d012      	beq.n	8004520 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	9300      	str	r3, [sp, #0]
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	2200      	movs	r2, #0
 8004502:	2180      	movs	r1, #128	; 0x80
 8004504:	68f8      	ldr	r0, [r7, #12]
 8004506:	f7ff ff49 	bl	800439c <SPI_WaitFlagStateUntilTimeout>
 800450a:	4603      	mov	r3, r0
 800450c:	2b00      	cmp	r3, #0
 800450e:	d02d      	beq.n	800456c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004514:	f043 0220 	orr.w	r2, r3, #32
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800451c:	2303      	movs	r3, #3
 800451e:	e026      	b.n	800456e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	9300      	str	r3, [sp, #0]
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	2200      	movs	r2, #0
 8004528:	2101      	movs	r1, #1
 800452a:	68f8      	ldr	r0, [r7, #12]
 800452c:	f7ff ff36 	bl	800439c <SPI_WaitFlagStateUntilTimeout>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d01a      	beq.n	800456c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800453a:	f043 0220 	orr.w	r2, r3, #32
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e013      	b.n	800456e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	9300      	str	r3, [sp, #0]
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	2200      	movs	r2, #0
 800454e:	2101      	movs	r1, #1
 8004550:	68f8      	ldr	r0, [r7, #12]
 8004552:	f7ff ff23 	bl	800439c <SPI_WaitFlagStateUntilTimeout>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d007      	beq.n	800456c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004560:	f043 0220 	orr.w	r2, r3, #32
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004568:	2303      	movs	r3, #3
 800456a:	e000      	b.n	800456e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	3710      	adds	r7, #16
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
	...

08004578 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b088      	sub	sp, #32
 800457c:	af02      	add	r7, sp, #8
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004584:	4b1b      	ldr	r3, [pc, #108]	; (80045f4 <SPI_EndRxTxTransaction+0x7c>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a1b      	ldr	r2, [pc, #108]	; (80045f8 <SPI_EndRxTxTransaction+0x80>)
 800458a:	fba2 2303 	umull	r2, r3, r2, r3
 800458e:	0d5b      	lsrs	r3, r3, #21
 8004590:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004594:	fb02 f303 	mul.w	r3, r2, r3
 8004598:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045a2:	d112      	bne.n	80045ca <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	9300      	str	r3, [sp, #0]
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	2200      	movs	r2, #0
 80045ac:	2180      	movs	r1, #128	; 0x80
 80045ae:	68f8      	ldr	r0, [r7, #12]
 80045b0:	f7ff fef4 	bl	800439c <SPI_WaitFlagStateUntilTimeout>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d016      	beq.n	80045e8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045be:	f043 0220 	orr.w	r2, r3, #32
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e00f      	b.n	80045ea <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d00a      	beq.n	80045e6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	3b01      	subs	r3, #1
 80045d4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045e0:	2b80      	cmp	r3, #128	; 0x80
 80045e2:	d0f2      	beq.n	80045ca <SPI_EndRxTxTransaction+0x52>
 80045e4:	e000      	b.n	80045e8 <SPI_EndRxTxTransaction+0x70>
        break;
 80045e6:	bf00      	nop
  }

  return HAL_OK;
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3718      	adds	r7, #24
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	20000000 	.word	0x20000000
 80045f8:	165e9f81 	.word	0x165e9f81

080045fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b082      	sub	sp, #8
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d101      	bne.n	800460e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e041      	b.n	8004692 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004614:	b2db      	uxtb	r3, r3
 8004616:	2b00      	cmp	r3, #0
 8004618:	d106      	bne.n	8004628 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f7fc ff44 	bl	80014b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2202      	movs	r2, #2
 800462c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	3304      	adds	r3, #4
 8004638:	4619      	mov	r1, r3
 800463a:	4610      	mov	r0, r2
 800463c:	f000 f9ce 	bl	80049dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2201      	movs	r2, #1
 800466c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004690:	2300      	movs	r3, #0
}
 8004692:	4618      	mov	r0, r3
 8004694:	3708      	adds	r7, #8
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
	...

0800469c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800469c:	b480      	push	{r7}
 800469e:	b085      	sub	sp, #20
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d001      	beq.n	80046b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e04e      	b.n	8004752 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2202      	movs	r2, #2
 80046b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	68da      	ldr	r2, [r3, #12]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f042 0201 	orr.w	r2, r2, #1
 80046ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a23      	ldr	r2, [pc, #140]	; (8004760 <HAL_TIM_Base_Start_IT+0xc4>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d022      	beq.n	800471c <HAL_TIM_Base_Start_IT+0x80>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046de:	d01d      	beq.n	800471c <HAL_TIM_Base_Start_IT+0x80>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a1f      	ldr	r2, [pc, #124]	; (8004764 <HAL_TIM_Base_Start_IT+0xc8>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d018      	beq.n	800471c <HAL_TIM_Base_Start_IT+0x80>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a1e      	ldr	r2, [pc, #120]	; (8004768 <HAL_TIM_Base_Start_IT+0xcc>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d013      	beq.n	800471c <HAL_TIM_Base_Start_IT+0x80>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a1c      	ldr	r2, [pc, #112]	; (800476c <HAL_TIM_Base_Start_IT+0xd0>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d00e      	beq.n	800471c <HAL_TIM_Base_Start_IT+0x80>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a1b      	ldr	r2, [pc, #108]	; (8004770 <HAL_TIM_Base_Start_IT+0xd4>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d009      	beq.n	800471c <HAL_TIM_Base_Start_IT+0x80>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a19      	ldr	r2, [pc, #100]	; (8004774 <HAL_TIM_Base_Start_IT+0xd8>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d004      	beq.n	800471c <HAL_TIM_Base_Start_IT+0x80>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a18      	ldr	r2, [pc, #96]	; (8004778 <HAL_TIM_Base_Start_IT+0xdc>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d111      	bne.n	8004740 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	f003 0307 	and.w	r3, r3, #7
 8004726:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2b06      	cmp	r3, #6
 800472c:	d010      	beq.n	8004750 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f042 0201 	orr.w	r2, r2, #1
 800473c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800473e:	e007      	b.n	8004750 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f042 0201 	orr.w	r2, r2, #1
 800474e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	3714      	adds	r7, #20
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr
 800475e:	bf00      	nop
 8004760:	40010000 	.word	0x40010000
 8004764:	40000400 	.word	0x40000400
 8004768:	40000800 	.word	0x40000800
 800476c:	40000c00 	.word	0x40000c00
 8004770:	40010400 	.word	0x40010400
 8004774:	40014000 	.word	0x40014000
 8004778:	40001800 	.word	0x40001800

0800477c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b082      	sub	sp, #8
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	f003 0302 	and.w	r3, r3, #2
 800478e:	2b02      	cmp	r3, #2
 8004790:	d122      	bne.n	80047d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	f003 0302 	and.w	r3, r3, #2
 800479c:	2b02      	cmp	r3, #2
 800479e:	d11b      	bne.n	80047d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f06f 0202 	mvn.w	r2, #2
 80047a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2201      	movs	r2, #1
 80047ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	699b      	ldr	r3, [r3, #24]
 80047b6:	f003 0303 	and.w	r3, r3, #3
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d003      	beq.n	80047c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f000 f8ee 	bl	80049a0 <HAL_TIM_IC_CaptureCallback>
 80047c4:	e005      	b.n	80047d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f000 f8e0 	bl	800498c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f000 f8f1 	bl	80049b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	f003 0304 	and.w	r3, r3, #4
 80047e2:	2b04      	cmp	r3, #4
 80047e4:	d122      	bne.n	800482c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	f003 0304 	and.w	r3, r3, #4
 80047f0:	2b04      	cmp	r3, #4
 80047f2:	d11b      	bne.n	800482c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f06f 0204 	mvn.w	r2, #4
 80047fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2202      	movs	r2, #2
 8004802:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	699b      	ldr	r3, [r3, #24]
 800480a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800480e:	2b00      	cmp	r3, #0
 8004810:	d003      	beq.n	800481a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f000 f8c4 	bl	80049a0 <HAL_TIM_IC_CaptureCallback>
 8004818:	e005      	b.n	8004826 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f000 f8b6 	bl	800498c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f000 f8c7 	bl	80049b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	f003 0308 	and.w	r3, r3, #8
 8004836:	2b08      	cmp	r3, #8
 8004838:	d122      	bne.n	8004880 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	f003 0308 	and.w	r3, r3, #8
 8004844:	2b08      	cmp	r3, #8
 8004846:	d11b      	bne.n	8004880 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f06f 0208 	mvn.w	r2, #8
 8004850:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2204      	movs	r2, #4
 8004856:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	69db      	ldr	r3, [r3, #28]
 800485e:	f003 0303 	and.w	r3, r3, #3
 8004862:	2b00      	cmp	r3, #0
 8004864:	d003      	beq.n	800486e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f000 f89a 	bl	80049a0 <HAL_TIM_IC_CaptureCallback>
 800486c:	e005      	b.n	800487a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f000 f88c 	bl	800498c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f000 f89d 	bl	80049b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	691b      	ldr	r3, [r3, #16]
 8004886:	f003 0310 	and.w	r3, r3, #16
 800488a:	2b10      	cmp	r3, #16
 800488c:	d122      	bne.n	80048d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	f003 0310 	and.w	r3, r3, #16
 8004898:	2b10      	cmp	r3, #16
 800489a:	d11b      	bne.n	80048d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f06f 0210 	mvn.w	r2, #16
 80048a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2208      	movs	r2, #8
 80048aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	69db      	ldr	r3, [r3, #28]
 80048b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d003      	beq.n	80048c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 f870 	bl	80049a0 <HAL_TIM_IC_CaptureCallback>
 80048c0:	e005      	b.n	80048ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 f862 	bl	800498c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f000 f873 	bl	80049b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	691b      	ldr	r3, [r3, #16]
 80048da:	f003 0301 	and.w	r3, r3, #1
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d10e      	bne.n	8004900 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	f003 0301 	and.w	r3, r3, #1
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d107      	bne.n	8004900 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f06f 0201 	mvn.w	r2, #1
 80048f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f7fc fc1c 	bl	8001138 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800490a:	2b80      	cmp	r3, #128	; 0x80
 800490c:	d10e      	bne.n	800492c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004918:	2b80      	cmp	r3, #128	; 0x80
 800491a:	d107      	bne.n	800492c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004924:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 f97e 	bl	8004c28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004936:	2b40      	cmp	r3, #64	; 0x40
 8004938:	d10e      	bne.n	8004958 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004944:	2b40      	cmp	r3, #64	; 0x40
 8004946:	d107      	bne.n	8004958 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004950:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 f838 	bl	80049c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	691b      	ldr	r3, [r3, #16]
 800495e:	f003 0320 	and.w	r3, r3, #32
 8004962:	2b20      	cmp	r3, #32
 8004964:	d10e      	bne.n	8004984 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	f003 0320 	and.w	r3, r3, #32
 8004970:	2b20      	cmp	r3, #32
 8004972:	d107      	bne.n	8004984 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f06f 0220 	mvn.w	r2, #32
 800497c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f000 f948 	bl	8004c14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004984:	bf00      	nop
 8004986:	3708      	adds	r7, #8
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}

0800498c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800498c:	b480      	push	{r7}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004994:	bf00      	nop
 8004996:	370c      	adds	r7, #12
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr

080049a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049a8:	bf00      	nop
 80049aa:	370c      	adds	r7, #12
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr

080049b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b083      	sub	sp, #12
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049bc:	bf00      	nop
 80049be:	370c      	adds	r7, #12
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr

080049c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049d0:	bf00      	nop
 80049d2:	370c      	adds	r7, #12
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr

080049dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80049dc:	b480      	push	{r7}
 80049de:	b085      	sub	sp, #20
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	4a40      	ldr	r2, [pc, #256]	; (8004af0 <TIM_Base_SetConfig+0x114>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d013      	beq.n	8004a1c <TIM_Base_SetConfig+0x40>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049fa:	d00f      	beq.n	8004a1c <TIM_Base_SetConfig+0x40>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a3d      	ldr	r2, [pc, #244]	; (8004af4 <TIM_Base_SetConfig+0x118>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d00b      	beq.n	8004a1c <TIM_Base_SetConfig+0x40>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4a3c      	ldr	r2, [pc, #240]	; (8004af8 <TIM_Base_SetConfig+0x11c>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d007      	beq.n	8004a1c <TIM_Base_SetConfig+0x40>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	4a3b      	ldr	r2, [pc, #236]	; (8004afc <TIM_Base_SetConfig+0x120>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d003      	beq.n	8004a1c <TIM_Base_SetConfig+0x40>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	4a3a      	ldr	r2, [pc, #232]	; (8004b00 <TIM_Base_SetConfig+0x124>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d108      	bne.n	8004a2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	68fa      	ldr	r2, [r7, #12]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a2f      	ldr	r2, [pc, #188]	; (8004af0 <TIM_Base_SetConfig+0x114>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d02b      	beq.n	8004a8e <TIM_Base_SetConfig+0xb2>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a3c:	d027      	beq.n	8004a8e <TIM_Base_SetConfig+0xb2>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4a2c      	ldr	r2, [pc, #176]	; (8004af4 <TIM_Base_SetConfig+0x118>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d023      	beq.n	8004a8e <TIM_Base_SetConfig+0xb2>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a2b      	ldr	r2, [pc, #172]	; (8004af8 <TIM_Base_SetConfig+0x11c>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d01f      	beq.n	8004a8e <TIM_Base_SetConfig+0xb2>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a2a      	ldr	r2, [pc, #168]	; (8004afc <TIM_Base_SetConfig+0x120>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d01b      	beq.n	8004a8e <TIM_Base_SetConfig+0xb2>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a29      	ldr	r2, [pc, #164]	; (8004b00 <TIM_Base_SetConfig+0x124>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d017      	beq.n	8004a8e <TIM_Base_SetConfig+0xb2>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4a28      	ldr	r2, [pc, #160]	; (8004b04 <TIM_Base_SetConfig+0x128>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d013      	beq.n	8004a8e <TIM_Base_SetConfig+0xb2>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4a27      	ldr	r2, [pc, #156]	; (8004b08 <TIM_Base_SetConfig+0x12c>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d00f      	beq.n	8004a8e <TIM_Base_SetConfig+0xb2>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4a26      	ldr	r2, [pc, #152]	; (8004b0c <TIM_Base_SetConfig+0x130>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d00b      	beq.n	8004a8e <TIM_Base_SetConfig+0xb2>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4a25      	ldr	r2, [pc, #148]	; (8004b10 <TIM_Base_SetConfig+0x134>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d007      	beq.n	8004a8e <TIM_Base_SetConfig+0xb2>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a24      	ldr	r2, [pc, #144]	; (8004b14 <TIM_Base_SetConfig+0x138>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d003      	beq.n	8004a8e <TIM_Base_SetConfig+0xb2>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4a23      	ldr	r2, [pc, #140]	; (8004b18 <TIM_Base_SetConfig+0x13c>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d108      	bne.n	8004aa0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	68fa      	ldr	r2, [r7, #12]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	695b      	ldr	r3, [r3, #20]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	68fa      	ldr	r2, [r7, #12]
 8004ab2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	689a      	ldr	r2, [r3, #8]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	4a0a      	ldr	r2, [pc, #40]	; (8004af0 <TIM_Base_SetConfig+0x114>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d003      	beq.n	8004ad4 <TIM_Base_SetConfig+0xf8>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4a0c      	ldr	r2, [pc, #48]	; (8004b00 <TIM_Base_SetConfig+0x124>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d103      	bne.n	8004adc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	691a      	ldr	r2, [r3, #16]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	615a      	str	r2, [r3, #20]
}
 8004ae2:	bf00      	nop
 8004ae4:	3714      	adds	r7, #20
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr
 8004aee:	bf00      	nop
 8004af0:	40010000 	.word	0x40010000
 8004af4:	40000400 	.word	0x40000400
 8004af8:	40000800 	.word	0x40000800
 8004afc:	40000c00 	.word	0x40000c00
 8004b00:	40010400 	.word	0x40010400
 8004b04:	40014000 	.word	0x40014000
 8004b08:	40014400 	.word	0x40014400
 8004b0c:	40014800 	.word	0x40014800
 8004b10:	40001800 	.word	0x40001800
 8004b14:	40001c00 	.word	0x40001c00
 8004b18:	40002000 	.word	0x40002000

08004b1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b085      	sub	sp, #20
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d101      	bne.n	8004b34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b30:	2302      	movs	r3, #2
 8004b32:	e05a      	b.n	8004bea <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2202      	movs	r2, #2
 8004b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68fa      	ldr	r2, [r7, #12]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68fa      	ldr	r2, [r7, #12]
 8004b6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a21      	ldr	r2, [pc, #132]	; (8004bf8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d022      	beq.n	8004bbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b80:	d01d      	beq.n	8004bbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a1d      	ldr	r2, [pc, #116]	; (8004bfc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d018      	beq.n	8004bbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a1b      	ldr	r2, [pc, #108]	; (8004c00 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d013      	beq.n	8004bbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a1a      	ldr	r2, [pc, #104]	; (8004c04 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d00e      	beq.n	8004bbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a18      	ldr	r2, [pc, #96]	; (8004c08 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d009      	beq.n	8004bbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a17      	ldr	r2, [pc, #92]	; (8004c0c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d004      	beq.n	8004bbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a15      	ldr	r2, [pc, #84]	; (8004c10 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d10c      	bne.n	8004bd8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bc4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	68ba      	ldr	r2, [r7, #8]
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	68ba      	ldr	r2, [r7, #8]
 8004bd6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004be8:	2300      	movs	r3, #0
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3714      	adds	r7, #20
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr
 8004bf6:	bf00      	nop
 8004bf8:	40010000 	.word	0x40010000
 8004bfc:	40000400 	.word	0x40000400
 8004c00:	40000800 	.word	0x40000800
 8004c04:	40000c00 	.word	0x40000c00
 8004c08:	40010400 	.word	0x40010400
 8004c0c:	40014000 	.word	0x40014000
 8004c10:	40001800 	.word	0x40001800

08004c14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c1c:	bf00      	nop
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c30:	bf00      	nop
 8004c32:	370c      	adds	r7, #12
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr

08004c3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b082      	sub	sp, #8
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d101      	bne.n	8004c4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e03f      	b.n	8004cce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d106      	bne.n	8004c68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f7fc fc4c 	bl	8001500 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2224      	movs	r2, #36	; 0x24
 8004c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	68da      	ldr	r2, [r3, #12]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f000 fe1d 	bl	80058c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	691a      	ldr	r2, [r3, #16]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	695a      	ldr	r2, [r3, #20]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ca4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68da      	ldr	r2, [r3, #12]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004cb4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2220      	movs	r2, #32
 8004cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2220      	movs	r2, #32
 8004cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3708      	adds	r7, #8
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}

08004cd6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cd6:	b580      	push	{r7, lr}
 8004cd8:	b08a      	sub	sp, #40	; 0x28
 8004cda:	af02      	add	r7, sp, #8
 8004cdc:	60f8      	str	r0, [r7, #12]
 8004cde:	60b9      	str	r1, [r7, #8]
 8004ce0:	603b      	str	r3, [r7, #0]
 8004ce2:	4613      	mov	r3, r2
 8004ce4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	2b20      	cmp	r3, #32
 8004cf4:	d17c      	bne.n	8004df0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d002      	beq.n	8004d02 <HAL_UART_Transmit+0x2c>
 8004cfc:	88fb      	ldrh	r3, [r7, #6]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d101      	bne.n	8004d06 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e075      	b.n	8004df2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d101      	bne.n	8004d14 <HAL_UART_Transmit+0x3e>
 8004d10:	2302      	movs	r3, #2
 8004d12:	e06e      	b.n	8004df2 <HAL_UART_Transmit+0x11c>
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2221      	movs	r2, #33	; 0x21
 8004d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d2a:	f7fc fd4f 	bl	80017cc <HAL_GetTick>
 8004d2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	88fa      	ldrh	r2, [r7, #6]
 8004d34:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	88fa      	ldrh	r2, [r7, #6]
 8004d3a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d44:	d108      	bne.n	8004d58 <HAL_UART_Transmit+0x82>
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	691b      	ldr	r3, [r3, #16]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d104      	bne.n	8004d58 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	61bb      	str	r3, [r7, #24]
 8004d56:	e003      	b.n	8004d60 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004d68:	e02a      	b.n	8004dc0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	9300      	str	r3, [sp, #0]
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	2200      	movs	r2, #0
 8004d72:	2180      	movs	r1, #128	; 0x80
 8004d74:	68f8      	ldr	r0, [r7, #12]
 8004d76:	f000 fb9b 	bl	80054b0 <UART_WaitOnFlagUntilTimeout>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d001      	beq.n	8004d84 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004d80:	2303      	movs	r3, #3
 8004d82:	e036      	b.n	8004df2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d10b      	bne.n	8004da2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d8a:	69bb      	ldr	r3, [r7, #24]
 8004d8c:	881b      	ldrh	r3, [r3, #0]
 8004d8e:	461a      	mov	r2, r3
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d98:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	3302      	adds	r3, #2
 8004d9e:	61bb      	str	r3, [r7, #24]
 8004da0:	e007      	b.n	8004db2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	781a      	ldrb	r2, [r3, #0]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	3301      	adds	r3, #1
 8004db0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	3b01      	subs	r3, #1
 8004dba:	b29a      	uxth	r2, r3
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d1cf      	bne.n	8004d6a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	9300      	str	r3, [sp, #0]
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	2140      	movs	r1, #64	; 0x40
 8004dd4:	68f8      	ldr	r0, [r7, #12]
 8004dd6:	f000 fb6b 	bl	80054b0 <UART_WaitOnFlagUntilTimeout>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d001      	beq.n	8004de4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004de0:	2303      	movs	r3, #3
 8004de2:	e006      	b.n	8004df2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2220      	movs	r2, #32
 8004de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004dec:	2300      	movs	r3, #0
 8004dee:	e000      	b.n	8004df2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004df0:	2302      	movs	r3, #2
  }
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3720      	adds	r7, #32
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}

08004dfa <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dfa:	b580      	push	{r7, lr}
 8004dfc:	b08a      	sub	sp, #40	; 0x28
 8004dfe:	af02      	add	r7, sp, #8
 8004e00:	60f8      	str	r0, [r7, #12]
 8004e02:	60b9      	str	r1, [r7, #8]
 8004e04:	603b      	str	r3, [r7, #0]
 8004e06:	4613      	mov	r3, r2
 8004e08:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	2b20      	cmp	r3, #32
 8004e18:	f040 808c 	bne.w	8004f34 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d002      	beq.n	8004e28 <HAL_UART_Receive+0x2e>
 8004e22:	88fb      	ldrh	r3, [r7, #6]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d101      	bne.n	8004e2c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e084      	b.n	8004f36 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d101      	bne.n	8004e3a <HAL_UART_Receive+0x40>
 8004e36:	2302      	movs	r3, #2
 8004e38:	e07d      	b.n	8004f36 <HAL_UART_Receive+0x13c>
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2200      	movs	r2, #0
 8004e46:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2222      	movs	r2, #34	; 0x22
 8004e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2200      	movs	r2, #0
 8004e54:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e56:	f7fc fcb9 	bl	80017cc <HAL_GetTick>
 8004e5a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	88fa      	ldrh	r2, [r7, #6]
 8004e60:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	88fa      	ldrh	r2, [r7, #6]
 8004e66:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e70:	d108      	bne.n	8004e84 <HAL_UART_Receive+0x8a>
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	691b      	ldr	r3, [r3, #16]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d104      	bne.n	8004e84 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	61bb      	str	r3, [r7, #24]
 8004e82:	e003      	b.n	8004e8c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004e94:	e043      	b.n	8004f1e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	9300      	str	r3, [sp, #0]
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	2120      	movs	r1, #32
 8004ea0:	68f8      	ldr	r0, [r7, #12]
 8004ea2:	f000 fb05 	bl	80054b0 <UART_WaitOnFlagUntilTimeout>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d001      	beq.n	8004eb0 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8004eac:	2303      	movs	r3, #3
 8004eae:	e042      	b.n	8004f36 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d10c      	bne.n	8004ed0 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ec2:	b29a      	uxth	r2, r3
 8004ec4:	69bb      	ldr	r3, [r7, #24]
 8004ec6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004ec8:	69bb      	ldr	r3, [r7, #24]
 8004eca:	3302      	adds	r3, #2
 8004ecc:	61bb      	str	r3, [r7, #24]
 8004ece:	e01f      	b.n	8004f10 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ed8:	d007      	beq.n	8004eea <HAL_UART_Receive+0xf0>
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d10a      	bne.n	8004ef8 <HAL_UART_Receive+0xfe>
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	691b      	ldr	r3, [r3, #16]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d106      	bne.n	8004ef8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	b2da      	uxtb	r2, r3
 8004ef2:	69fb      	ldr	r3, [r7, #28]
 8004ef4:	701a      	strb	r2, [r3, #0]
 8004ef6:	e008      	b.n	8004f0a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f04:	b2da      	uxtb	r2, r3
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	3301      	adds	r3, #1
 8004f0e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	3b01      	subs	r3, #1
 8004f18:	b29a      	uxth	r2, r3
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d1b6      	bne.n	8004e96 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2220      	movs	r2, #32
 8004f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004f30:	2300      	movs	r3, #0
 8004f32:	e000      	b.n	8004f36 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004f34:	2302      	movs	r3, #2
  }
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3720      	adds	r7, #32
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
	...

08004f40 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b0ba      	sub	sp, #232	; 0xe8
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	695b      	ldr	r3, [r3, #20]
 8004f62:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004f66:	2300      	movs	r3, #0
 8004f68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004f72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f76:	f003 030f 	and.w	r3, r3, #15
 8004f7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004f7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d10f      	bne.n	8004fa6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f8a:	f003 0320 	and.w	r3, r3, #32
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d009      	beq.n	8004fa6 <HAL_UART_IRQHandler+0x66>
 8004f92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f96:	f003 0320 	and.w	r3, r3, #32
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d003      	beq.n	8004fa6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f000 fbd3 	bl	800574a <UART_Receive_IT>
      return;
 8004fa4:	e256      	b.n	8005454 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004fa6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	f000 80de 	beq.w	800516c <HAL_UART_IRQHandler+0x22c>
 8004fb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fb4:	f003 0301 	and.w	r3, r3, #1
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d106      	bne.n	8004fca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004fbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fc0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	f000 80d1 	beq.w	800516c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004fca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fce:	f003 0301 	and.w	r3, r3, #1
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d00b      	beq.n	8004fee <HAL_UART_IRQHandler+0xae>
 8004fd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d005      	beq.n	8004fee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe6:	f043 0201 	orr.w	r2, r3, #1
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004fee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ff2:	f003 0304 	and.w	r3, r3, #4
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d00b      	beq.n	8005012 <HAL_UART_IRQHandler+0xd2>
 8004ffa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ffe:	f003 0301 	and.w	r3, r3, #1
 8005002:	2b00      	cmp	r3, #0
 8005004:	d005      	beq.n	8005012 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500a:	f043 0202 	orr.w	r2, r3, #2
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005012:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005016:	f003 0302 	and.w	r3, r3, #2
 800501a:	2b00      	cmp	r3, #0
 800501c:	d00b      	beq.n	8005036 <HAL_UART_IRQHandler+0xf6>
 800501e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005022:	f003 0301 	and.w	r3, r3, #1
 8005026:	2b00      	cmp	r3, #0
 8005028:	d005      	beq.n	8005036 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800502e:	f043 0204 	orr.w	r2, r3, #4
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005036:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800503a:	f003 0308 	and.w	r3, r3, #8
 800503e:	2b00      	cmp	r3, #0
 8005040:	d011      	beq.n	8005066 <HAL_UART_IRQHandler+0x126>
 8005042:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005046:	f003 0320 	and.w	r3, r3, #32
 800504a:	2b00      	cmp	r3, #0
 800504c:	d105      	bne.n	800505a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800504e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005052:	f003 0301 	and.w	r3, r3, #1
 8005056:	2b00      	cmp	r3, #0
 8005058:	d005      	beq.n	8005066 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800505e:	f043 0208 	orr.w	r2, r3, #8
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506a:	2b00      	cmp	r3, #0
 800506c:	f000 81ed 	beq.w	800544a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005070:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005074:	f003 0320 	and.w	r3, r3, #32
 8005078:	2b00      	cmp	r3, #0
 800507a:	d008      	beq.n	800508e <HAL_UART_IRQHandler+0x14e>
 800507c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005080:	f003 0320 	and.w	r3, r3, #32
 8005084:	2b00      	cmp	r3, #0
 8005086:	d002      	beq.n	800508e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f000 fb5e 	bl	800574a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	695b      	ldr	r3, [r3, #20]
 8005094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005098:	2b40      	cmp	r3, #64	; 0x40
 800509a:	bf0c      	ite	eq
 800509c:	2301      	moveq	r3, #1
 800509e:	2300      	movne	r3, #0
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050aa:	f003 0308 	and.w	r3, r3, #8
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d103      	bne.n	80050ba <HAL_UART_IRQHandler+0x17a>
 80050b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d04f      	beq.n	800515a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 fa66 	bl	800558c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	695b      	ldr	r3, [r3, #20]
 80050c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ca:	2b40      	cmp	r3, #64	; 0x40
 80050cc:	d141      	bne.n	8005152 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	3314      	adds	r3, #20
 80050d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80050dc:	e853 3f00 	ldrex	r3, [r3]
 80050e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80050e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80050e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	3314      	adds	r3, #20
 80050f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80050fa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80050fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005102:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005106:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800510a:	e841 2300 	strex	r3, r2, [r1]
 800510e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005112:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d1d9      	bne.n	80050ce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800511e:	2b00      	cmp	r3, #0
 8005120:	d013      	beq.n	800514a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005126:	4a7d      	ldr	r2, [pc, #500]	; (800531c <HAL_UART_IRQHandler+0x3dc>)
 8005128:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800512e:	4618      	mov	r0, r3
 8005130:	f7fc fcfd 	bl	8001b2e <HAL_DMA_Abort_IT>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d016      	beq.n	8005168 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800513e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005144:	4610      	mov	r0, r2
 8005146:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005148:	e00e      	b.n	8005168 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f000 f99a 	bl	8005484 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005150:	e00a      	b.n	8005168 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 f996 	bl	8005484 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005158:	e006      	b.n	8005168 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 f992 	bl	8005484 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005166:	e170      	b.n	800544a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005168:	bf00      	nop
    return;
 800516a:	e16e      	b.n	800544a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005170:	2b01      	cmp	r3, #1
 8005172:	f040 814a 	bne.w	800540a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800517a:	f003 0310 	and.w	r3, r3, #16
 800517e:	2b00      	cmp	r3, #0
 8005180:	f000 8143 	beq.w	800540a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005184:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005188:	f003 0310 	and.w	r3, r3, #16
 800518c:	2b00      	cmp	r3, #0
 800518e:	f000 813c 	beq.w	800540a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005192:	2300      	movs	r3, #0
 8005194:	60bb      	str	r3, [r7, #8]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	60bb      	str	r3, [r7, #8]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	60bb      	str	r3, [r7, #8]
 80051a6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	695b      	ldr	r3, [r3, #20]
 80051ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051b2:	2b40      	cmp	r3, #64	; 0x40
 80051b4:	f040 80b4 	bne.w	8005320 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80051c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	f000 8140 	beq.w	800544e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80051d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80051d6:	429a      	cmp	r2, r3
 80051d8:	f080 8139 	bcs.w	800544e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80051e2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e8:	69db      	ldr	r3, [r3, #28]
 80051ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051ee:	f000 8088 	beq.w	8005302 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	330c      	adds	r3, #12
 80051f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005200:	e853 3f00 	ldrex	r3, [r3]
 8005204:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005208:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800520c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005210:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	330c      	adds	r3, #12
 800521a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800521e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005222:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005226:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800522a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800522e:	e841 2300 	strex	r3, r2, [r1]
 8005232:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005236:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800523a:	2b00      	cmp	r3, #0
 800523c:	d1d9      	bne.n	80051f2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	3314      	adds	r3, #20
 8005244:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005246:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005248:	e853 3f00 	ldrex	r3, [r3]
 800524c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800524e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005250:	f023 0301 	bic.w	r3, r3, #1
 8005254:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	3314      	adds	r3, #20
 800525e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005262:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005266:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005268:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800526a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800526e:	e841 2300 	strex	r3, r2, [r1]
 8005272:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005274:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005276:	2b00      	cmp	r3, #0
 8005278:	d1e1      	bne.n	800523e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	3314      	adds	r3, #20
 8005280:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005282:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005284:	e853 3f00 	ldrex	r3, [r3]
 8005288:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800528a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800528c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005290:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	3314      	adds	r3, #20
 800529a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800529e:	66fa      	str	r2, [r7, #108]	; 0x6c
 80052a0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80052a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80052a6:	e841 2300 	strex	r3, r2, [r1]
 80052aa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80052ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d1e3      	bne.n	800527a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2220      	movs	r2, #32
 80052b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	330c      	adds	r3, #12
 80052c6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052ca:	e853 3f00 	ldrex	r3, [r3]
 80052ce:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80052d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052d2:	f023 0310 	bic.w	r3, r3, #16
 80052d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	330c      	adds	r3, #12
 80052e0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80052e4:	65ba      	str	r2, [r7, #88]	; 0x58
 80052e6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80052ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80052ec:	e841 2300 	strex	r3, r2, [r1]
 80052f0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80052f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d1e3      	bne.n	80052c0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052fc:	4618      	mov	r0, r3
 80052fe:	f7fc fba6 	bl	8001a4e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800530a:	b29b      	uxth	r3, r3
 800530c:	1ad3      	subs	r3, r2, r3
 800530e:	b29b      	uxth	r3, r3
 8005310:	4619      	mov	r1, r3
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 f8c0 	bl	8005498 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005318:	e099      	b.n	800544e <HAL_UART_IRQHandler+0x50e>
 800531a:	bf00      	nop
 800531c:	08005653 	.word	0x08005653
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005328:	b29b      	uxth	r3, r3
 800532a:	1ad3      	subs	r3, r2, r3
 800532c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005334:	b29b      	uxth	r3, r3
 8005336:	2b00      	cmp	r3, #0
 8005338:	f000 808b 	beq.w	8005452 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800533c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005340:	2b00      	cmp	r3, #0
 8005342:	f000 8086 	beq.w	8005452 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	330c      	adds	r3, #12
 800534c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800534e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005350:	e853 3f00 	ldrex	r3, [r3]
 8005354:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005358:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800535c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	330c      	adds	r3, #12
 8005366:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800536a:	647a      	str	r2, [r7, #68]	; 0x44
 800536c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800536e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005370:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005372:	e841 2300 	strex	r3, r2, [r1]
 8005376:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800537a:	2b00      	cmp	r3, #0
 800537c:	d1e3      	bne.n	8005346 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	3314      	adds	r3, #20
 8005384:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005388:	e853 3f00 	ldrex	r3, [r3]
 800538c:	623b      	str	r3, [r7, #32]
   return(result);
 800538e:	6a3b      	ldr	r3, [r7, #32]
 8005390:	f023 0301 	bic.w	r3, r3, #1
 8005394:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	3314      	adds	r3, #20
 800539e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80053a2:	633a      	str	r2, [r7, #48]	; 0x30
 80053a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80053a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053aa:	e841 2300 	strex	r3, r2, [r1]
 80053ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80053b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d1e3      	bne.n	800537e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2220      	movs	r2, #32
 80053ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	330c      	adds	r3, #12
 80053ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	e853 3f00 	ldrex	r3, [r3]
 80053d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f023 0310 	bic.w	r3, r3, #16
 80053da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	330c      	adds	r3, #12
 80053e4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80053e8:	61fa      	str	r2, [r7, #28]
 80053ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ec:	69b9      	ldr	r1, [r7, #24]
 80053ee:	69fa      	ldr	r2, [r7, #28]
 80053f0:	e841 2300 	strex	r3, r2, [r1]
 80053f4:	617b      	str	r3, [r7, #20]
   return(result);
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d1e3      	bne.n	80053c4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80053fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005400:	4619      	mov	r1, r3
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f000 f848 	bl	8005498 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005408:	e023      	b.n	8005452 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800540a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800540e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005412:	2b00      	cmp	r3, #0
 8005414:	d009      	beq.n	800542a <HAL_UART_IRQHandler+0x4ea>
 8005416:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800541a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800541e:	2b00      	cmp	r3, #0
 8005420:	d003      	beq.n	800542a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f000 f929 	bl	800567a <UART_Transmit_IT>
    return;
 8005428:	e014      	b.n	8005454 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800542a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800542e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005432:	2b00      	cmp	r3, #0
 8005434:	d00e      	beq.n	8005454 <HAL_UART_IRQHandler+0x514>
 8005436:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800543a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800543e:	2b00      	cmp	r3, #0
 8005440:	d008      	beq.n	8005454 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f000 f969 	bl	800571a <UART_EndTransmit_IT>
    return;
 8005448:	e004      	b.n	8005454 <HAL_UART_IRQHandler+0x514>
    return;
 800544a:	bf00      	nop
 800544c:	e002      	b.n	8005454 <HAL_UART_IRQHandler+0x514>
      return;
 800544e:	bf00      	nop
 8005450:	e000      	b.n	8005454 <HAL_UART_IRQHandler+0x514>
      return;
 8005452:	bf00      	nop
  }
}
 8005454:	37e8      	adds	r7, #232	; 0xe8
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
 800545a:	bf00      	nop

0800545c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800545c:	b480      	push	{r7}
 800545e:	b083      	sub	sp, #12
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005464:	bf00      	nop
 8005466:	370c      	adds	r7, #12
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr

08005470 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005470:	b480      	push	{r7}
 8005472:	b083      	sub	sp, #12
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005478:	bf00      	nop
 800547a:	370c      	adds	r7, #12
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr

08005484 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005484:	b480      	push	{r7}
 8005486:	b083      	sub	sp, #12
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800548c:	bf00      	nop
 800548e:	370c      	adds	r7, #12
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr

08005498 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005498:	b480      	push	{r7}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	460b      	mov	r3, r1
 80054a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80054a4:	bf00      	nop
 80054a6:	370c      	adds	r7, #12
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr

080054b0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b090      	sub	sp, #64	; 0x40
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	603b      	str	r3, [r7, #0]
 80054bc:	4613      	mov	r3, r2
 80054be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054c0:	e050      	b.n	8005564 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054c8:	d04c      	beq.n	8005564 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80054ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d007      	beq.n	80054e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80054d0:	f7fc f97c 	bl	80017cc <HAL_GetTick>
 80054d4:	4602      	mov	r2, r0
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054dc:	429a      	cmp	r2, r3
 80054de:	d241      	bcs.n	8005564 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	330c      	adds	r3, #12
 80054e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ea:	e853 3f00 	ldrex	r3, [r3]
 80054ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80054f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80054f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	330c      	adds	r3, #12
 80054fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005500:	637a      	str	r2, [r7, #52]	; 0x34
 8005502:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005504:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005506:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005508:	e841 2300 	strex	r3, r2, [r1]
 800550c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800550e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005510:	2b00      	cmp	r3, #0
 8005512:	d1e5      	bne.n	80054e0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	3314      	adds	r3, #20
 800551a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	e853 3f00 	ldrex	r3, [r3]
 8005522:	613b      	str	r3, [r7, #16]
   return(result);
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	f023 0301 	bic.w	r3, r3, #1
 800552a:	63bb      	str	r3, [r7, #56]	; 0x38
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	3314      	adds	r3, #20
 8005532:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005534:	623a      	str	r2, [r7, #32]
 8005536:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005538:	69f9      	ldr	r1, [r7, #28]
 800553a:	6a3a      	ldr	r2, [r7, #32]
 800553c:	e841 2300 	strex	r3, r2, [r1]
 8005540:	61bb      	str	r3, [r7, #24]
   return(result);
 8005542:	69bb      	ldr	r3, [r7, #24]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d1e5      	bne.n	8005514 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2220      	movs	r2, #32
 800554c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2220      	movs	r2, #32
 8005554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2200      	movs	r2, #0
 800555c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005560:	2303      	movs	r3, #3
 8005562:	e00f      	b.n	8005584 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	4013      	ands	r3, r2
 800556e:	68ba      	ldr	r2, [r7, #8]
 8005570:	429a      	cmp	r2, r3
 8005572:	bf0c      	ite	eq
 8005574:	2301      	moveq	r3, #1
 8005576:	2300      	movne	r3, #0
 8005578:	b2db      	uxtb	r3, r3
 800557a:	461a      	mov	r2, r3
 800557c:	79fb      	ldrb	r3, [r7, #7]
 800557e:	429a      	cmp	r2, r3
 8005580:	d09f      	beq.n	80054c2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005582:	2300      	movs	r3, #0
}
 8005584:	4618      	mov	r0, r3
 8005586:	3740      	adds	r7, #64	; 0x40
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}

0800558c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800558c:	b480      	push	{r7}
 800558e:	b095      	sub	sp, #84	; 0x54
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	330c      	adds	r3, #12
 800559a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800559c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800559e:	e853 3f00 	ldrex	r3, [r3]
 80055a2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80055a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80055aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	330c      	adds	r3, #12
 80055b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80055b4:	643a      	str	r2, [r7, #64]	; 0x40
 80055b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80055ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80055bc:	e841 2300 	strex	r3, r2, [r1]
 80055c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80055c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d1e5      	bne.n	8005594 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	3314      	adds	r3, #20
 80055ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d0:	6a3b      	ldr	r3, [r7, #32]
 80055d2:	e853 3f00 	ldrex	r3, [r3]
 80055d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80055d8:	69fb      	ldr	r3, [r7, #28]
 80055da:	f023 0301 	bic.w	r3, r3, #1
 80055de:	64bb      	str	r3, [r7, #72]	; 0x48
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	3314      	adds	r3, #20
 80055e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80055ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80055ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055f0:	e841 2300 	strex	r3, r2, [r1]
 80055f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80055f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d1e5      	bne.n	80055c8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005600:	2b01      	cmp	r3, #1
 8005602:	d119      	bne.n	8005638 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	330c      	adds	r3, #12
 800560a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	e853 3f00 	ldrex	r3, [r3]
 8005612:	60bb      	str	r3, [r7, #8]
   return(result);
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	f023 0310 	bic.w	r3, r3, #16
 800561a:	647b      	str	r3, [r7, #68]	; 0x44
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	330c      	adds	r3, #12
 8005622:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005624:	61ba      	str	r2, [r7, #24]
 8005626:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005628:	6979      	ldr	r1, [r7, #20]
 800562a:	69ba      	ldr	r2, [r7, #24]
 800562c:	e841 2300 	strex	r3, r2, [r1]
 8005630:	613b      	str	r3, [r7, #16]
   return(result);
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d1e5      	bne.n	8005604 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2220      	movs	r2, #32
 800563c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2200      	movs	r2, #0
 8005644:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005646:	bf00      	nop
 8005648:	3754      	adds	r7, #84	; 0x54
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr

08005652 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005652:	b580      	push	{r7, lr}
 8005654:	b084      	sub	sp, #16
 8005656:	af00      	add	r7, sp, #0
 8005658:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800565e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2200      	movs	r2, #0
 8005664:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2200      	movs	r2, #0
 800566a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800566c:	68f8      	ldr	r0, [r7, #12]
 800566e:	f7ff ff09 	bl	8005484 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005672:	bf00      	nop
 8005674:	3710      	adds	r7, #16
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}

0800567a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800567a:	b480      	push	{r7}
 800567c:	b085      	sub	sp, #20
 800567e:	af00      	add	r7, sp, #0
 8005680:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005688:	b2db      	uxtb	r3, r3
 800568a:	2b21      	cmp	r3, #33	; 0x21
 800568c:	d13e      	bne.n	800570c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005696:	d114      	bne.n	80056c2 <UART_Transmit_IT+0x48>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	691b      	ldr	r3, [r3, #16]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d110      	bne.n	80056c2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6a1b      	ldr	r3, [r3, #32]
 80056a4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	881b      	ldrh	r3, [r3, #0]
 80056aa:	461a      	mov	r2, r3
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056b4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a1b      	ldr	r3, [r3, #32]
 80056ba:	1c9a      	adds	r2, r3, #2
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	621a      	str	r2, [r3, #32]
 80056c0:	e008      	b.n	80056d4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6a1b      	ldr	r3, [r3, #32]
 80056c6:	1c59      	adds	r1, r3, #1
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	6211      	str	r1, [r2, #32]
 80056cc:	781a      	ldrb	r2, [r3, #0]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056d8:	b29b      	uxth	r3, r3
 80056da:	3b01      	subs	r3, #1
 80056dc:	b29b      	uxth	r3, r3
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	4619      	mov	r1, r3
 80056e2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d10f      	bne.n	8005708 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	68da      	ldr	r2, [r3, #12]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80056f6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	68da      	ldr	r2, [r3, #12]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005706:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005708:	2300      	movs	r3, #0
 800570a:	e000      	b.n	800570e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800570c:	2302      	movs	r3, #2
  }
}
 800570e:	4618      	mov	r0, r3
 8005710:	3714      	adds	r7, #20
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr

0800571a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800571a:	b580      	push	{r7, lr}
 800571c:	b082      	sub	sp, #8
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	68da      	ldr	r2, [r3, #12]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005730:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2220      	movs	r2, #32
 8005736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f7ff fe8e 	bl	800545c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005740:	2300      	movs	r3, #0
}
 8005742:	4618      	mov	r0, r3
 8005744:	3708      	adds	r7, #8
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}

0800574a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800574a:	b580      	push	{r7, lr}
 800574c:	b08c      	sub	sp, #48	; 0x30
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005758:	b2db      	uxtb	r3, r3
 800575a:	2b22      	cmp	r3, #34	; 0x22
 800575c:	f040 80ab 	bne.w	80058b6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005768:	d117      	bne.n	800579a <UART_Receive_IT+0x50>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	691b      	ldr	r3, [r3, #16]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d113      	bne.n	800579a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005772:	2300      	movs	r3, #0
 8005774:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800577a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	b29b      	uxth	r3, r3
 8005784:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005788:	b29a      	uxth	r2, r3
 800578a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800578c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005792:	1c9a      	adds	r2, r3, #2
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	629a      	str	r2, [r3, #40]	; 0x28
 8005798:	e026      	b.n	80057e8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800579e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80057a0:	2300      	movs	r3, #0
 80057a2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057ac:	d007      	beq.n	80057be <UART_Receive_IT+0x74>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d10a      	bne.n	80057cc <UART_Receive_IT+0x82>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d106      	bne.n	80057cc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	b2da      	uxtb	r2, r3
 80057c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057c8:	701a      	strb	r2, [r3, #0]
 80057ca:	e008      	b.n	80057de <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057d8:	b2da      	uxtb	r2, r3
 80057da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057dc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057e2:	1c5a      	adds	r2, r3, #1
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	3b01      	subs	r3, #1
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	4619      	mov	r1, r3
 80057f6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d15a      	bne.n	80058b2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	68da      	ldr	r2, [r3, #12]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f022 0220 	bic.w	r2, r2, #32
 800580a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	68da      	ldr	r2, [r3, #12]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800581a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	695a      	ldr	r2, [r3, #20]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f022 0201 	bic.w	r2, r2, #1
 800582a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2220      	movs	r2, #32
 8005830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005838:	2b01      	cmp	r3, #1
 800583a:	d135      	bne.n	80058a8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2200      	movs	r2, #0
 8005840:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	330c      	adds	r3, #12
 8005848:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	e853 3f00 	ldrex	r3, [r3]
 8005850:	613b      	str	r3, [r7, #16]
   return(result);
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	f023 0310 	bic.w	r3, r3, #16
 8005858:	627b      	str	r3, [r7, #36]	; 0x24
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	330c      	adds	r3, #12
 8005860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005862:	623a      	str	r2, [r7, #32]
 8005864:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005866:	69f9      	ldr	r1, [r7, #28]
 8005868:	6a3a      	ldr	r2, [r7, #32]
 800586a:	e841 2300 	strex	r3, r2, [r1]
 800586e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005870:	69bb      	ldr	r3, [r7, #24]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d1e5      	bne.n	8005842 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 0310 	and.w	r3, r3, #16
 8005880:	2b10      	cmp	r3, #16
 8005882:	d10a      	bne.n	800589a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005884:	2300      	movs	r3, #0
 8005886:	60fb      	str	r3, [r7, #12]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	60fb      	str	r3, [r7, #12]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	60fb      	str	r3, [r7, #12]
 8005898:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800589e:	4619      	mov	r1, r3
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f7ff fdf9 	bl	8005498 <HAL_UARTEx_RxEventCallback>
 80058a6:	e002      	b.n	80058ae <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f7ff fde1 	bl	8005470 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80058ae:	2300      	movs	r3, #0
 80058b0:	e002      	b.n	80058b8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80058b2:	2300      	movs	r3, #0
 80058b4:	e000      	b.n	80058b8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80058b6:	2302      	movs	r3, #2
  }
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	3730      	adds	r7, #48	; 0x30
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}

080058c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058c4:	b0c0      	sub	sp, #256	; 0x100
 80058c6:	af00      	add	r7, sp, #0
 80058c8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	691b      	ldr	r3, [r3, #16]
 80058d4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80058d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058dc:	68d9      	ldr	r1, [r3, #12]
 80058de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	ea40 0301 	orr.w	r3, r0, r1
 80058e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80058ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058ee:	689a      	ldr	r2, [r3, #8]
 80058f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058f4:	691b      	ldr	r3, [r3, #16]
 80058f6:	431a      	orrs	r2, r3
 80058f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058fc:	695b      	ldr	r3, [r3, #20]
 80058fe:	431a      	orrs	r2, r3
 8005900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005904:	69db      	ldr	r3, [r3, #28]
 8005906:	4313      	orrs	r3, r2
 8005908:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800590c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005918:	f021 010c 	bic.w	r1, r1, #12
 800591c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005926:	430b      	orrs	r3, r1
 8005928:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800592a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	695b      	ldr	r3, [r3, #20]
 8005932:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005936:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800593a:	6999      	ldr	r1, [r3, #24]
 800593c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	ea40 0301 	orr.w	r3, r0, r1
 8005946:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	4b8f      	ldr	r3, [pc, #572]	; (8005b8c <UART_SetConfig+0x2cc>)
 8005950:	429a      	cmp	r2, r3
 8005952:	d005      	beq.n	8005960 <UART_SetConfig+0xa0>
 8005954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	4b8d      	ldr	r3, [pc, #564]	; (8005b90 <UART_SetConfig+0x2d0>)
 800595c:	429a      	cmp	r2, r3
 800595e:	d104      	bne.n	800596a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005960:	f7fe f890 	bl	8003a84 <HAL_RCC_GetPCLK2Freq>
 8005964:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005968:	e003      	b.n	8005972 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800596a:	f7fe f877 	bl	8003a5c <HAL_RCC_GetPCLK1Freq>
 800596e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005976:	69db      	ldr	r3, [r3, #28]
 8005978:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800597c:	f040 810c 	bne.w	8005b98 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005980:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005984:	2200      	movs	r2, #0
 8005986:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800598a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800598e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005992:	4622      	mov	r2, r4
 8005994:	462b      	mov	r3, r5
 8005996:	1891      	adds	r1, r2, r2
 8005998:	65b9      	str	r1, [r7, #88]	; 0x58
 800599a:	415b      	adcs	r3, r3
 800599c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800599e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80059a2:	4621      	mov	r1, r4
 80059a4:	eb12 0801 	adds.w	r8, r2, r1
 80059a8:	4629      	mov	r1, r5
 80059aa:	eb43 0901 	adc.w	r9, r3, r1
 80059ae:	f04f 0200 	mov.w	r2, #0
 80059b2:	f04f 0300 	mov.w	r3, #0
 80059b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80059ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80059be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80059c2:	4690      	mov	r8, r2
 80059c4:	4699      	mov	r9, r3
 80059c6:	4623      	mov	r3, r4
 80059c8:	eb18 0303 	adds.w	r3, r8, r3
 80059cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80059d0:	462b      	mov	r3, r5
 80059d2:	eb49 0303 	adc.w	r3, r9, r3
 80059d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80059da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	2200      	movs	r2, #0
 80059e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80059e6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80059ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80059ee:	460b      	mov	r3, r1
 80059f0:	18db      	adds	r3, r3, r3
 80059f2:	653b      	str	r3, [r7, #80]	; 0x50
 80059f4:	4613      	mov	r3, r2
 80059f6:	eb42 0303 	adc.w	r3, r2, r3
 80059fa:	657b      	str	r3, [r7, #84]	; 0x54
 80059fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005a00:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005a04:	f7fa fc44 	bl	8000290 <__aeabi_uldivmod>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	460b      	mov	r3, r1
 8005a0c:	4b61      	ldr	r3, [pc, #388]	; (8005b94 <UART_SetConfig+0x2d4>)
 8005a0e:	fba3 2302 	umull	r2, r3, r3, r2
 8005a12:	095b      	lsrs	r3, r3, #5
 8005a14:	011c      	lsls	r4, r3, #4
 8005a16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005a20:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005a24:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005a28:	4642      	mov	r2, r8
 8005a2a:	464b      	mov	r3, r9
 8005a2c:	1891      	adds	r1, r2, r2
 8005a2e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005a30:	415b      	adcs	r3, r3
 8005a32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a34:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005a38:	4641      	mov	r1, r8
 8005a3a:	eb12 0a01 	adds.w	sl, r2, r1
 8005a3e:	4649      	mov	r1, r9
 8005a40:	eb43 0b01 	adc.w	fp, r3, r1
 8005a44:	f04f 0200 	mov.w	r2, #0
 8005a48:	f04f 0300 	mov.w	r3, #0
 8005a4c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005a50:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005a54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a58:	4692      	mov	sl, r2
 8005a5a:	469b      	mov	fp, r3
 8005a5c:	4643      	mov	r3, r8
 8005a5e:	eb1a 0303 	adds.w	r3, sl, r3
 8005a62:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005a66:	464b      	mov	r3, r9
 8005a68:	eb4b 0303 	adc.w	r3, fp, r3
 8005a6c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	2200      	movs	r2, #0
 8005a78:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005a7c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005a80:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005a84:	460b      	mov	r3, r1
 8005a86:	18db      	adds	r3, r3, r3
 8005a88:	643b      	str	r3, [r7, #64]	; 0x40
 8005a8a:	4613      	mov	r3, r2
 8005a8c:	eb42 0303 	adc.w	r3, r2, r3
 8005a90:	647b      	str	r3, [r7, #68]	; 0x44
 8005a92:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005a96:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005a9a:	f7fa fbf9 	bl	8000290 <__aeabi_uldivmod>
 8005a9e:	4602      	mov	r2, r0
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	4611      	mov	r1, r2
 8005aa4:	4b3b      	ldr	r3, [pc, #236]	; (8005b94 <UART_SetConfig+0x2d4>)
 8005aa6:	fba3 2301 	umull	r2, r3, r3, r1
 8005aaa:	095b      	lsrs	r3, r3, #5
 8005aac:	2264      	movs	r2, #100	; 0x64
 8005aae:	fb02 f303 	mul.w	r3, r2, r3
 8005ab2:	1acb      	subs	r3, r1, r3
 8005ab4:	00db      	lsls	r3, r3, #3
 8005ab6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005aba:	4b36      	ldr	r3, [pc, #216]	; (8005b94 <UART_SetConfig+0x2d4>)
 8005abc:	fba3 2302 	umull	r2, r3, r3, r2
 8005ac0:	095b      	lsrs	r3, r3, #5
 8005ac2:	005b      	lsls	r3, r3, #1
 8005ac4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005ac8:	441c      	add	r4, r3
 8005aca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005ad4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005ad8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005adc:	4642      	mov	r2, r8
 8005ade:	464b      	mov	r3, r9
 8005ae0:	1891      	adds	r1, r2, r2
 8005ae2:	63b9      	str	r1, [r7, #56]	; 0x38
 8005ae4:	415b      	adcs	r3, r3
 8005ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ae8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005aec:	4641      	mov	r1, r8
 8005aee:	1851      	adds	r1, r2, r1
 8005af0:	6339      	str	r1, [r7, #48]	; 0x30
 8005af2:	4649      	mov	r1, r9
 8005af4:	414b      	adcs	r3, r1
 8005af6:	637b      	str	r3, [r7, #52]	; 0x34
 8005af8:	f04f 0200 	mov.w	r2, #0
 8005afc:	f04f 0300 	mov.w	r3, #0
 8005b00:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005b04:	4659      	mov	r1, fp
 8005b06:	00cb      	lsls	r3, r1, #3
 8005b08:	4651      	mov	r1, sl
 8005b0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b0e:	4651      	mov	r1, sl
 8005b10:	00ca      	lsls	r2, r1, #3
 8005b12:	4610      	mov	r0, r2
 8005b14:	4619      	mov	r1, r3
 8005b16:	4603      	mov	r3, r0
 8005b18:	4642      	mov	r2, r8
 8005b1a:	189b      	adds	r3, r3, r2
 8005b1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005b20:	464b      	mov	r3, r9
 8005b22:	460a      	mov	r2, r1
 8005b24:	eb42 0303 	adc.w	r3, r2, r3
 8005b28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	2200      	movs	r2, #0
 8005b34:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005b38:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005b3c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005b40:	460b      	mov	r3, r1
 8005b42:	18db      	adds	r3, r3, r3
 8005b44:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b46:	4613      	mov	r3, r2
 8005b48:	eb42 0303 	adc.w	r3, r2, r3
 8005b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b4e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005b52:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005b56:	f7fa fb9b 	bl	8000290 <__aeabi_uldivmod>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	460b      	mov	r3, r1
 8005b5e:	4b0d      	ldr	r3, [pc, #52]	; (8005b94 <UART_SetConfig+0x2d4>)
 8005b60:	fba3 1302 	umull	r1, r3, r3, r2
 8005b64:	095b      	lsrs	r3, r3, #5
 8005b66:	2164      	movs	r1, #100	; 0x64
 8005b68:	fb01 f303 	mul.w	r3, r1, r3
 8005b6c:	1ad3      	subs	r3, r2, r3
 8005b6e:	00db      	lsls	r3, r3, #3
 8005b70:	3332      	adds	r3, #50	; 0x32
 8005b72:	4a08      	ldr	r2, [pc, #32]	; (8005b94 <UART_SetConfig+0x2d4>)
 8005b74:	fba2 2303 	umull	r2, r3, r2, r3
 8005b78:	095b      	lsrs	r3, r3, #5
 8005b7a:	f003 0207 	and.w	r2, r3, #7
 8005b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4422      	add	r2, r4
 8005b86:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005b88:	e105      	b.n	8005d96 <UART_SetConfig+0x4d6>
 8005b8a:	bf00      	nop
 8005b8c:	40011000 	.word	0x40011000
 8005b90:	40011400 	.word	0x40011400
 8005b94:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005ba2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005ba6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005baa:	4642      	mov	r2, r8
 8005bac:	464b      	mov	r3, r9
 8005bae:	1891      	adds	r1, r2, r2
 8005bb0:	6239      	str	r1, [r7, #32]
 8005bb2:	415b      	adcs	r3, r3
 8005bb4:	627b      	str	r3, [r7, #36]	; 0x24
 8005bb6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005bba:	4641      	mov	r1, r8
 8005bbc:	1854      	adds	r4, r2, r1
 8005bbe:	4649      	mov	r1, r9
 8005bc0:	eb43 0501 	adc.w	r5, r3, r1
 8005bc4:	f04f 0200 	mov.w	r2, #0
 8005bc8:	f04f 0300 	mov.w	r3, #0
 8005bcc:	00eb      	lsls	r3, r5, #3
 8005bce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005bd2:	00e2      	lsls	r2, r4, #3
 8005bd4:	4614      	mov	r4, r2
 8005bd6:	461d      	mov	r5, r3
 8005bd8:	4643      	mov	r3, r8
 8005bda:	18e3      	adds	r3, r4, r3
 8005bdc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005be0:	464b      	mov	r3, r9
 8005be2:	eb45 0303 	adc.w	r3, r5, r3
 8005be6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005bea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005bf6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005bfa:	f04f 0200 	mov.w	r2, #0
 8005bfe:	f04f 0300 	mov.w	r3, #0
 8005c02:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005c06:	4629      	mov	r1, r5
 8005c08:	008b      	lsls	r3, r1, #2
 8005c0a:	4621      	mov	r1, r4
 8005c0c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c10:	4621      	mov	r1, r4
 8005c12:	008a      	lsls	r2, r1, #2
 8005c14:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005c18:	f7fa fb3a 	bl	8000290 <__aeabi_uldivmod>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	460b      	mov	r3, r1
 8005c20:	4b60      	ldr	r3, [pc, #384]	; (8005da4 <UART_SetConfig+0x4e4>)
 8005c22:	fba3 2302 	umull	r2, r3, r3, r2
 8005c26:	095b      	lsrs	r3, r3, #5
 8005c28:	011c      	lsls	r4, r3, #4
 8005c2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005c34:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005c38:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005c3c:	4642      	mov	r2, r8
 8005c3e:	464b      	mov	r3, r9
 8005c40:	1891      	adds	r1, r2, r2
 8005c42:	61b9      	str	r1, [r7, #24]
 8005c44:	415b      	adcs	r3, r3
 8005c46:	61fb      	str	r3, [r7, #28]
 8005c48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c4c:	4641      	mov	r1, r8
 8005c4e:	1851      	adds	r1, r2, r1
 8005c50:	6139      	str	r1, [r7, #16]
 8005c52:	4649      	mov	r1, r9
 8005c54:	414b      	adcs	r3, r1
 8005c56:	617b      	str	r3, [r7, #20]
 8005c58:	f04f 0200 	mov.w	r2, #0
 8005c5c:	f04f 0300 	mov.w	r3, #0
 8005c60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005c64:	4659      	mov	r1, fp
 8005c66:	00cb      	lsls	r3, r1, #3
 8005c68:	4651      	mov	r1, sl
 8005c6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c6e:	4651      	mov	r1, sl
 8005c70:	00ca      	lsls	r2, r1, #3
 8005c72:	4610      	mov	r0, r2
 8005c74:	4619      	mov	r1, r3
 8005c76:	4603      	mov	r3, r0
 8005c78:	4642      	mov	r2, r8
 8005c7a:	189b      	adds	r3, r3, r2
 8005c7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005c80:	464b      	mov	r3, r9
 8005c82:	460a      	mov	r2, r1
 8005c84:	eb42 0303 	adc.w	r3, r2, r3
 8005c88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	67bb      	str	r3, [r7, #120]	; 0x78
 8005c96:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005c98:	f04f 0200 	mov.w	r2, #0
 8005c9c:	f04f 0300 	mov.w	r3, #0
 8005ca0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005ca4:	4649      	mov	r1, r9
 8005ca6:	008b      	lsls	r3, r1, #2
 8005ca8:	4641      	mov	r1, r8
 8005caa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005cae:	4641      	mov	r1, r8
 8005cb0:	008a      	lsls	r2, r1, #2
 8005cb2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005cb6:	f7fa faeb 	bl	8000290 <__aeabi_uldivmod>
 8005cba:	4602      	mov	r2, r0
 8005cbc:	460b      	mov	r3, r1
 8005cbe:	4b39      	ldr	r3, [pc, #228]	; (8005da4 <UART_SetConfig+0x4e4>)
 8005cc0:	fba3 1302 	umull	r1, r3, r3, r2
 8005cc4:	095b      	lsrs	r3, r3, #5
 8005cc6:	2164      	movs	r1, #100	; 0x64
 8005cc8:	fb01 f303 	mul.w	r3, r1, r3
 8005ccc:	1ad3      	subs	r3, r2, r3
 8005cce:	011b      	lsls	r3, r3, #4
 8005cd0:	3332      	adds	r3, #50	; 0x32
 8005cd2:	4a34      	ldr	r2, [pc, #208]	; (8005da4 <UART_SetConfig+0x4e4>)
 8005cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8005cd8:	095b      	lsrs	r3, r3, #5
 8005cda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005cde:	441c      	add	r4, r3
 8005ce0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	673b      	str	r3, [r7, #112]	; 0x70
 8005ce8:	677a      	str	r2, [r7, #116]	; 0x74
 8005cea:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005cee:	4642      	mov	r2, r8
 8005cf0:	464b      	mov	r3, r9
 8005cf2:	1891      	adds	r1, r2, r2
 8005cf4:	60b9      	str	r1, [r7, #8]
 8005cf6:	415b      	adcs	r3, r3
 8005cf8:	60fb      	str	r3, [r7, #12]
 8005cfa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005cfe:	4641      	mov	r1, r8
 8005d00:	1851      	adds	r1, r2, r1
 8005d02:	6039      	str	r1, [r7, #0]
 8005d04:	4649      	mov	r1, r9
 8005d06:	414b      	adcs	r3, r1
 8005d08:	607b      	str	r3, [r7, #4]
 8005d0a:	f04f 0200 	mov.w	r2, #0
 8005d0e:	f04f 0300 	mov.w	r3, #0
 8005d12:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005d16:	4659      	mov	r1, fp
 8005d18:	00cb      	lsls	r3, r1, #3
 8005d1a:	4651      	mov	r1, sl
 8005d1c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d20:	4651      	mov	r1, sl
 8005d22:	00ca      	lsls	r2, r1, #3
 8005d24:	4610      	mov	r0, r2
 8005d26:	4619      	mov	r1, r3
 8005d28:	4603      	mov	r3, r0
 8005d2a:	4642      	mov	r2, r8
 8005d2c:	189b      	adds	r3, r3, r2
 8005d2e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d30:	464b      	mov	r3, r9
 8005d32:	460a      	mov	r2, r1
 8005d34:	eb42 0303 	adc.w	r3, r2, r3
 8005d38:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	2200      	movs	r2, #0
 8005d42:	663b      	str	r3, [r7, #96]	; 0x60
 8005d44:	667a      	str	r2, [r7, #100]	; 0x64
 8005d46:	f04f 0200 	mov.w	r2, #0
 8005d4a:	f04f 0300 	mov.w	r3, #0
 8005d4e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005d52:	4649      	mov	r1, r9
 8005d54:	008b      	lsls	r3, r1, #2
 8005d56:	4641      	mov	r1, r8
 8005d58:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d5c:	4641      	mov	r1, r8
 8005d5e:	008a      	lsls	r2, r1, #2
 8005d60:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005d64:	f7fa fa94 	bl	8000290 <__aeabi_uldivmod>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	460b      	mov	r3, r1
 8005d6c:	4b0d      	ldr	r3, [pc, #52]	; (8005da4 <UART_SetConfig+0x4e4>)
 8005d6e:	fba3 1302 	umull	r1, r3, r3, r2
 8005d72:	095b      	lsrs	r3, r3, #5
 8005d74:	2164      	movs	r1, #100	; 0x64
 8005d76:	fb01 f303 	mul.w	r3, r1, r3
 8005d7a:	1ad3      	subs	r3, r2, r3
 8005d7c:	011b      	lsls	r3, r3, #4
 8005d7e:	3332      	adds	r3, #50	; 0x32
 8005d80:	4a08      	ldr	r2, [pc, #32]	; (8005da4 <UART_SetConfig+0x4e4>)
 8005d82:	fba2 2303 	umull	r2, r3, r2, r3
 8005d86:	095b      	lsrs	r3, r3, #5
 8005d88:	f003 020f 	and.w	r2, r3, #15
 8005d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4422      	add	r2, r4
 8005d94:	609a      	str	r2, [r3, #8]
}
 8005d96:	bf00      	nop
 8005d98:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005da2:	bf00      	nop
 8005da4:	51eb851f 	.word	0x51eb851f

08005da8 <__errno>:
 8005da8:	4b01      	ldr	r3, [pc, #4]	; (8005db0 <__errno+0x8>)
 8005daa:	6818      	ldr	r0, [r3, #0]
 8005dac:	4770      	bx	lr
 8005dae:	bf00      	nop
 8005db0:	2000000c 	.word	0x2000000c

08005db4 <__libc_init_array>:
 8005db4:	b570      	push	{r4, r5, r6, lr}
 8005db6:	4d0d      	ldr	r5, [pc, #52]	; (8005dec <__libc_init_array+0x38>)
 8005db8:	4c0d      	ldr	r4, [pc, #52]	; (8005df0 <__libc_init_array+0x3c>)
 8005dba:	1b64      	subs	r4, r4, r5
 8005dbc:	10a4      	asrs	r4, r4, #2
 8005dbe:	2600      	movs	r6, #0
 8005dc0:	42a6      	cmp	r6, r4
 8005dc2:	d109      	bne.n	8005dd8 <__libc_init_array+0x24>
 8005dc4:	4d0b      	ldr	r5, [pc, #44]	; (8005df4 <__libc_init_array+0x40>)
 8005dc6:	4c0c      	ldr	r4, [pc, #48]	; (8005df8 <__libc_init_array+0x44>)
 8005dc8:	f001 f87c 	bl	8006ec4 <_init>
 8005dcc:	1b64      	subs	r4, r4, r5
 8005dce:	10a4      	asrs	r4, r4, #2
 8005dd0:	2600      	movs	r6, #0
 8005dd2:	42a6      	cmp	r6, r4
 8005dd4:	d105      	bne.n	8005de2 <__libc_init_array+0x2e>
 8005dd6:	bd70      	pop	{r4, r5, r6, pc}
 8005dd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ddc:	4798      	blx	r3
 8005dde:	3601      	adds	r6, #1
 8005de0:	e7ee      	b.n	8005dc0 <__libc_init_array+0xc>
 8005de2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005de6:	4798      	blx	r3
 8005de8:	3601      	adds	r6, #1
 8005dea:	e7f2      	b.n	8005dd2 <__libc_init_array+0x1e>
 8005dec:	08006fa0 	.word	0x08006fa0
 8005df0:	08006fa0 	.word	0x08006fa0
 8005df4:	08006fa0 	.word	0x08006fa0
 8005df8:	08006fa4 	.word	0x08006fa4

08005dfc <memset>:
 8005dfc:	4402      	add	r2, r0
 8005dfe:	4603      	mov	r3, r0
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d100      	bne.n	8005e06 <memset+0xa>
 8005e04:	4770      	bx	lr
 8005e06:	f803 1b01 	strb.w	r1, [r3], #1
 8005e0a:	e7f9      	b.n	8005e00 <memset+0x4>

08005e0c <iprintf>:
 8005e0c:	b40f      	push	{r0, r1, r2, r3}
 8005e0e:	4b0a      	ldr	r3, [pc, #40]	; (8005e38 <iprintf+0x2c>)
 8005e10:	b513      	push	{r0, r1, r4, lr}
 8005e12:	681c      	ldr	r4, [r3, #0]
 8005e14:	b124      	cbz	r4, 8005e20 <iprintf+0x14>
 8005e16:	69a3      	ldr	r3, [r4, #24]
 8005e18:	b913      	cbnz	r3, 8005e20 <iprintf+0x14>
 8005e1a:	4620      	mov	r0, r4
 8005e1c:	f000 f9ee 	bl	80061fc <__sinit>
 8005e20:	ab05      	add	r3, sp, #20
 8005e22:	9a04      	ldr	r2, [sp, #16]
 8005e24:	68a1      	ldr	r1, [r4, #8]
 8005e26:	9301      	str	r3, [sp, #4]
 8005e28:	4620      	mov	r0, r4
 8005e2a:	f000 fbff 	bl	800662c <_vfiprintf_r>
 8005e2e:	b002      	add	sp, #8
 8005e30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e34:	b004      	add	sp, #16
 8005e36:	4770      	bx	lr
 8005e38:	2000000c 	.word	0x2000000c

08005e3c <setvbuf>:
 8005e3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005e40:	461d      	mov	r5, r3
 8005e42:	4b5d      	ldr	r3, [pc, #372]	; (8005fb8 <setvbuf+0x17c>)
 8005e44:	681f      	ldr	r7, [r3, #0]
 8005e46:	4604      	mov	r4, r0
 8005e48:	460e      	mov	r6, r1
 8005e4a:	4690      	mov	r8, r2
 8005e4c:	b127      	cbz	r7, 8005e58 <setvbuf+0x1c>
 8005e4e:	69bb      	ldr	r3, [r7, #24]
 8005e50:	b913      	cbnz	r3, 8005e58 <setvbuf+0x1c>
 8005e52:	4638      	mov	r0, r7
 8005e54:	f000 f9d2 	bl	80061fc <__sinit>
 8005e58:	4b58      	ldr	r3, [pc, #352]	; (8005fbc <setvbuf+0x180>)
 8005e5a:	429c      	cmp	r4, r3
 8005e5c:	d167      	bne.n	8005f2e <setvbuf+0xf2>
 8005e5e:	687c      	ldr	r4, [r7, #4]
 8005e60:	f1b8 0f02 	cmp.w	r8, #2
 8005e64:	d006      	beq.n	8005e74 <setvbuf+0x38>
 8005e66:	f1b8 0f01 	cmp.w	r8, #1
 8005e6a:	f200 809f 	bhi.w	8005fac <setvbuf+0x170>
 8005e6e:	2d00      	cmp	r5, #0
 8005e70:	f2c0 809c 	blt.w	8005fac <setvbuf+0x170>
 8005e74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e76:	07db      	lsls	r3, r3, #31
 8005e78:	d405      	bmi.n	8005e86 <setvbuf+0x4a>
 8005e7a:	89a3      	ldrh	r3, [r4, #12]
 8005e7c:	0598      	lsls	r0, r3, #22
 8005e7e:	d402      	bmi.n	8005e86 <setvbuf+0x4a>
 8005e80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e82:	f000 fa59 	bl	8006338 <__retarget_lock_acquire_recursive>
 8005e86:	4621      	mov	r1, r4
 8005e88:	4638      	mov	r0, r7
 8005e8a:	f000 f923 	bl	80060d4 <_fflush_r>
 8005e8e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e90:	b141      	cbz	r1, 8005ea4 <setvbuf+0x68>
 8005e92:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e96:	4299      	cmp	r1, r3
 8005e98:	d002      	beq.n	8005ea0 <setvbuf+0x64>
 8005e9a:	4638      	mov	r0, r7
 8005e9c:	f000 fabc 	bl	8006418 <_free_r>
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	6363      	str	r3, [r4, #52]	; 0x34
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	61a3      	str	r3, [r4, #24]
 8005ea8:	6063      	str	r3, [r4, #4]
 8005eaa:	89a3      	ldrh	r3, [r4, #12]
 8005eac:	0619      	lsls	r1, r3, #24
 8005eae:	d503      	bpl.n	8005eb8 <setvbuf+0x7c>
 8005eb0:	6921      	ldr	r1, [r4, #16]
 8005eb2:	4638      	mov	r0, r7
 8005eb4:	f000 fab0 	bl	8006418 <_free_r>
 8005eb8:	89a3      	ldrh	r3, [r4, #12]
 8005eba:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8005ebe:	f023 0303 	bic.w	r3, r3, #3
 8005ec2:	f1b8 0f02 	cmp.w	r8, #2
 8005ec6:	81a3      	strh	r3, [r4, #12]
 8005ec8:	d06c      	beq.n	8005fa4 <setvbuf+0x168>
 8005eca:	ab01      	add	r3, sp, #4
 8005ecc:	466a      	mov	r2, sp
 8005ece:	4621      	mov	r1, r4
 8005ed0:	4638      	mov	r0, r7
 8005ed2:	f000 fa33 	bl	800633c <__swhatbuf_r>
 8005ed6:	89a3      	ldrh	r3, [r4, #12]
 8005ed8:	4318      	orrs	r0, r3
 8005eda:	81a0      	strh	r0, [r4, #12]
 8005edc:	2d00      	cmp	r5, #0
 8005ede:	d130      	bne.n	8005f42 <setvbuf+0x106>
 8005ee0:	9d00      	ldr	r5, [sp, #0]
 8005ee2:	4628      	mov	r0, r5
 8005ee4:	f000 fa90 	bl	8006408 <malloc>
 8005ee8:	4606      	mov	r6, r0
 8005eea:	2800      	cmp	r0, #0
 8005eec:	d155      	bne.n	8005f9a <setvbuf+0x15e>
 8005eee:	f8dd 9000 	ldr.w	r9, [sp]
 8005ef2:	45a9      	cmp	r9, r5
 8005ef4:	d14a      	bne.n	8005f8c <setvbuf+0x150>
 8005ef6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005efa:	2200      	movs	r2, #0
 8005efc:	60a2      	str	r2, [r4, #8]
 8005efe:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8005f02:	6022      	str	r2, [r4, #0]
 8005f04:	6122      	str	r2, [r4, #16]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f0c:	6162      	str	r2, [r4, #20]
 8005f0e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005f10:	f043 0302 	orr.w	r3, r3, #2
 8005f14:	07d2      	lsls	r2, r2, #31
 8005f16:	81a3      	strh	r3, [r4, #12]
 8005f18:	d405      	bmi.n	8005f26 <setvbuf+0xea>
 8005f1a:	f413 7f00 	tst.w	r3, #512	; 0x200
 8005f1e:	d102      	bne.n	8005f26 <setvbuf+0xea>
 8005f20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f22:	f000 fa0a 	bl	800633a <__retarget_lock_release_recursive>
 8005f26:	4628      	mov	r0, r5
 8005f28:	b003      	add	sp, #12
 8005f2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005f2e:	4b24      	ldr	r3, [pc, #144]	; (8005fc0 <setvbuf+0x184>)
 8005f30:	429c      	cmp	r4, r3
 8005f32:	d101      	bne.n	8005f38 <setvbuf+0xfc>
 8005f34:	68bc      	ldr	r4, [r7, #8]
 8005f36:	e793      	b.n	8005e60 <setvbuf+0x24>
 8005f38:	4b22      	ldr	r3, [pc, #136]	; (8005fc4 <setvbuf+0x188>)
 8005f3a:	429c      	cmp	r4, r3
 8005f3c:	bf08      	it	eq
 8005f3e:	68fc      	ldreq	r4, [r7, #12]
 8005f40:	e78e      	b.n	8005e60 <setvbuf+0x24>
 8005f42:	2e00      	cmp	r6, #0
 8005f44:	d0cd      	beq.n	8005ee2 <setvbuf+0xa6>
 8005f46:	69bb      	ldr	r3, [r7, #24]
 8005f48:	b913      	cbnz	r3, 8005f50 <setvbuf+0x114>
 8005f4a:	4638      	mov	r0, r7
 8005f4c:	f000 f956 	bl	80061fc <__sinit>
 8005f50:	f1b8 0f01 	cmp.w	r8, #1
 8005f54:	bf08      	it	eq
 8005f56:	89a3      	ldrheq	r3, [r4, #12]
 8005f58:	6026      	str	r6, [r4, #0]
 8005f5a:	bf04      	itt	eq
 8005f5c:	f043 0301 	orreq.w	r3, r3, #1
 8005f60:	81a3      	strheq	r3, [r4, #12]
 8005f62:	89a2      	ldrh	r2, [r4, #12]
 8005f64:	f012 0308 	ands.w	r3, r2, #8
 8005f68:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8005f6c:	d01c      	beq.n	8005fa8 <setvbuf+0x16c>
 8005f6e:	07d3      	lsls	r3, r2, #31
 8005f70:	bf41      	itttt	mi
 8005f72:	2300      	movmi	r3, #0
 8005f74:	426d      	negmi	r5, r5
 8005f76:	60a3      	strmi	r3, [r4, #8]
 8005f78:	61a5      	strmi	r5, [r4, #24]
 8005f7a:	bf58      	it	pl
 8005f7c:	60a5      	strpl	r5, [r4, #8]
 8005f7e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8005f80:	f015 0501 	ands.w	r5, r5, #1
 8005f84:	d115      	bne.n	8005fb2 <setvbuf+0x176>
 8005f86:	f412 7f00 	tst.w	r2, #512	; 0x200
 8005f8a:	e7c8      	b.n	8005f1e <setvbuf+0xe2>
 8005f8c:	4648      	mov	r0, r9
 8005f8e:	f000 fa3b 	bl	8006408 <malloc>
 8005f92:	4606      	mov	r6, r0
 8005f94:	2800      	cmp	r0, #0
 8005f96:	d0ae      	beq.n	8005ef6 <setvbuf+0xba>
 8005f98:	464d      	mov	r5, r9
 8005f9a:	89a3      	ldrh	r3, [r4, #12]
 8005f9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fa0:	81a3      	strh	r3, [r4, #12]
 8005fa2:	e7d0      	b.n	8005f46 <setvbuf+0x10a>
 8005fa4:	2500      	movs	r5, #0
 8005fa6:	e7a8      	b.n	8005efa <setvbuf+0xbe>
 8005fa8:	60a3      	str	r3, [r4, #8]
 8005faa:	e7e8      	b.n	8005f7e <setvbuf+0x142>
 8005fac:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005fb0:	e7b9      	b.n	8005f26 <setvbuf+0xea>
 8005fb2:	2500      	movs	r5, #0
 8005fb4:	e7b7      	b.n	8005f26 <setvbuf+0xea>
 8005fb6:	bf00      	nop
 8005fb8:	2000000c 	.word	0x2000000c
 8005fbc:	08006f24 	.word	0x08006f24
 8005fc0:	08006f44 	.word	0x08006f44
 8005fc4:	08006f04 	.word	0x08006f04

08005fc8 <__sflush_r>:
 8005fc8:	898a      	ldrh	r2, [r1, #12]
 8005fca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fce:	4605      	mov	r5, r0
 8005fd0:	0710      	lsls	r0, r2, #28
 8005fd2:	460c      	mov	r4, r1
 8005fd4:	d458      	bmi.n	8006088 <__sflush_r+0xc0>
 8005fd6:	684b      	ldr	r3, [r1, #4]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	dc05      	bgt.n	8005fe8 <__sflush_r+0x20>
 8005fdc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	dc02      	bgt.n	8005fe8 <__sflush_r+0x20>
 8005fe2:	2000      	movs	r0, #0
 8005fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fe8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005fea:	2e00      	cmp	r6, #0
 8005fec:	d0f9      	beq.n	8005fe2 <__sflush_r+0x1a>
 8005fee:	2300      	movs	r3, #0
 8005ff0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005ff4:	682f      	ldr	r7, [r5, #0]
 8005ff6:	602b      	str	r3, [r5, #0]
 8005ff8:	d032      	beq.n	8006060 <__sflush_r+0x98>
 8005ffa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005ffc:	89a3      	ldrh	r3, [r4, #12]
 8005ffe:	075a      	lsls	r2, r3, #29
 8006000:	d505      	bpl.n	800600e <__sflush_r+0x46>
 8006002:	6863      	ldr	r3, [r4, #4]
 8006004:	1ac0      	subs	r0, r0, r3
 8006006:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006008:	b10b      	cbz	r3, 800600e <__sflush_r+0x46>
 800600a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800600c:	1ac0      	subs	r0, r0, r3
 800600e:	2300      	movs	r3, #0
 8006010:	4602      	mov	r2, r0
 8006012:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006014:	6a21      	ldr	r1, [r4, #32]
 8006016:	4628      	mov	r0, r5
 8006018:	47b0      	blx	r6
 800601a:	1c43      	adds	r3, r0, #1
 800601c:	89a3      	ldrh	r3, [r4, #12]
 800601e:	d106      	bne.n	800602e <__sflush_r+0x66>
 8006020:	6829      	ldr	r1, [r5, #0]
 8006022:	291d      	cmp	r1, #29
 8006024:	d82c      	bhi.n	8006080 <__sflush_r+0xb8>
 8006026:	4a2a      	ldr	r2, [pc, #168]	; (80060d0 <__sflush_r+0x108>)
 8006028:	40ca      	lsrs	r2, r1
 800602a:	07d6      	lsls	r6, r2, #31
 800602c:	d528      	bpl.n	8006080 <__sflush_r+0xb8>
 800602e:	2200      	movs	r2, #0
 8006030:	6062      	str	r2, [r4, #4]
 8006032:	04d9      	lsls	r1, r3, #19
 8006034:	6922      	ldr	r2, [r4, #16]
 8006036:	6022      	str	r2, [r4, #0]
 8006038:	d504      	bpl.n	8006044 <__sflush_r+0x7c>
 800603a:	1c42      	adds	r2, r0, #1
 800603c:	d101      	bne.n	8006042 <__sflush_r+0x7a>
 800603e:	682b      	ldr	r3, [r5, #0]
 8006040:	b903      	cbnz	r3, 8006044 <__sflush_r+0x7c>
 8006042:	6560      	str	r0, [r4, #84]	; 0x54
 8006044:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006046:	602f      	str	r7, [r5, #0]
 8006048:	2900      	cmp	r1, #0
 800604a:	d0ca      	beq.n	8005fe2 <__sflush_r+0x1a>
 800604c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006050:	4299      	cmp	r1, r3
 8006052:	d002      	beq.n	800605a <__sflush_r+0x92>
 8006054:	4628      	mov	r0, r5
 8006056:	f000 f9df 	bl	8006418 <_free_r>
 800605a:	2000      	movs	r0, #0
 800605c:	6360      	str	r0, [r4, #52]	; 0x34
 800605e:	e7c1      	b.n	8005fe4 <__sflush_r+0x1c>
 8006060:	6a21      	ldr	r1, [r4, #32]
 8006062:	2301      	movs	r3, #1
 8006064:	4628      	mov	r0, r5
 8006066:	47b0      	blx	r6
 8006068:	1c41      	adds	r1, r0, #1
 800606a:	d1c7      	bne.n	8005ffc <__sflush_r+0x34>
 800606c:	682b      	ldr	r3, [r5, #0]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d0c4      	beq.n	8005ffc <__sflush_r+0x34>
 8006072:	2b1d      	cmp	r3, #29
 8006074:	d001      	beq.n	800607a <__sflush_r+0xb2>
 8006076:	2b16      	cmp	r3, #22
 8006078:	d101      	bne.n	800607e <__sflush_r+0xb6>
 800607a:	602f      	str	r7, [r5, #0]
 800607c:	e7b1      	b.n	8005fe2 <__sflush_r+0x1a>
 800607e:	89a3      	ldrh	r3, [r4, #12]
 8006080:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006084:	81a3      	strh	r3, [r4, #12]
 8006086:	e7ad      	b.n	8005fe4 <__sflush_r+0x1c>
 8006088:	690f      	ldr	r7, [r1, #16]
 800608a:	2f00      	cmp	r7, #0
 800608c:	d0a9      	beq.n	8005fe2 <__sflush_r+0x1a>
 800608e:	0793      	lsls	r3, r2, #30
 8006090:	680e      	ldr	r6, [r1, #0]
 8006092:	bf08      	it	eq
 8006094:	694b      	ldreq	r3, [r1, #20]
 8006096:	600f      	str	r7, [r1, #0]
 8006098:	bf18      	it	ne
 800609a:	2300      	movne	r3, #0
 800609c:	eba6 0807 	sub.w	r8, r6, r7
 80060a0:	608b      	str	r3, [r1, #8]
 80060a2:	f1b8 0f00 	cmp.w	r8, #0
 80060a6:	dd9c      	ble.n	8005fe2 <__sflush_r+0x1a>
 80060a8:	6a21      	ldr	r1, [r4, #32]
 80060aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80060ac:	4643      	mov	r3, r8
 80060ae:	463a      	mov	r2, r7
 80060b0:	4628      	mov	r0, r5
 80060b2:	47b0      	blx	r6
 80060b4:	2800      	cmp	r0, #0
 80060b6:	dc06      	bgt.n	80060c6 <__sflush_r+0xfe>
 80060b8:	89a3      	ldrh	r3, [r4, #12]
 80060ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060be:	81a3      	strh	r3, [r4, #12]
 80060c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80060c4:	e78e      	b.n	8005fe4 <__sflush_r+0x1c>
 80060c6:	4407      	add	r7, r0
 80060c8:	eba8 0800 	sub.w	r8, r8, r0
 80060cc:	e7e9      	b.n	80060a2 <__sflush_r+0xda>
 80060ce:	bf00      	nop
 80060d0:	20400001 	.word	0x20400001

080060d4 <_fflush_r>:
 80060d4:	b538      	push	{r3, r4, r5, lr}
 80060d6:	690b      	ldr	r3, [r1, #16]
 80060d8:	4605      	mov	r5, r0
 80060da:	460c      	mov	r4, r1
 80060dc:	b913      	cbnz	r3, 80060e4 <_fflush_r+0x10>
 80060de:	2500      	movs	r5, #0
 80060e0:	4628      	mov	r0, r5
 80060e2:	bd38      	pop	{r3, r4, r5, pc}
 80060e4:	b118      	cbz	r0, 80060ee <_fflush_r+0x1a>
 80060e6:	6983      	ldr	r3, [r0, #24]
 80060e8:	b90b      	cbnz	r3, 80060ee <_fflush_r+0x1a>
 80060ea:	f000 f887 	bl	80061fc <__sinit>
 80060ee:	4b14      	ldr	r3, [pc, #80]	; (8006140 <_fflush_r+0x6c>)
 80060f0:	429c      	cmp	r4, r3
 80060f2:	d11b      	bne.n	800612c <_fflush_r+0x58>
 80060f4:	686c      	ldr	r4, [r5, #4]
 80060f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d0ef      	beq.n	80060de <_fflush_r+0xa>
 80060fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006100:	07d0      	lsls	r0, r2, #31
 8006102:	d404      	bmi.n	800610e <_fflush_r+0x3a>
 8006104:	0599      	lsls	r1, r3, #22
 8006106:	d402      	bmi.n	800610e <_fflush_r+0x3a>
 8006108:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800610a:	f000 f915 	bl	8006338 <__retarget_lock_acquire_recursive>
 800610e:	4628      	mov	r0, r5
 8006110:	4621      	mov	r1, r4
 8006112:	f7ff ff59 	bl	8005fc8 <__sflush_r>
 8006116:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006118:	07da      	lsls	r2, r3, #31
 800611a:	4605      	mov	r5, r0
 800611c:	d4e0      	bmi.n	80060e0 <_fflush_r+0xc>
 800611e:	89a3      	ldrh	r3, [r4, #12]
 8006120:	059b      	lsls	r3, r3, #22
 8006122:	d4dd      	bmi.n	80060e0 <_fflush_r+0xc>
 8006124:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006126:	f000 f908 	bl	800633a <__retarget_lock_release_recursive>
 800612a:	e7d9      	b.n	80060e0 <_fflush_r+0xc>
 800612c:	4b05      	ldr	r3, [pc, #20]	; (8006144 <_fflush_r+0x70>)
 800612e:	429c      	cmp	r4, r3
 8006130:	d101      	bne.n	8006136 <_fflush_r+0x62>
 8006132:	68ac      	ldr	r4, [r5, #8]
 8006134:	e7df      	b.n	80060f6 <_fflush_r+0x22>
 8006136:	4b04      	ldr	r3, [pc, #16]	; (8006148 <_fflush_r+0x74>)
 8006138:	429c      	cmp	r4, r3
 800613a:	bf08      	it	eq
 800613c:	68ec      	ldreq	r4, [r5, #12]
 800613e:	e7da      	b.n	80060f6 <_fflush_r+0x22>
 8006140:	08006f24 	.word	0x08006f24
 8006144:	08006f44 	.word	0x08006f44
 8006148:	08006f04 	.word	0x08006f04

0800614c <std>:
 800614c:	2300      	movs	r3, #0
 800614e:	b510      	push	{r4, lr}
 8006150:	4604      	mov	r4, r0
 8006152:	e9c0 3300 	strd	r3, r3, [r0]
 8006156:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800615a:	6083      	str	r3, [r0, #8]
 800615c:	8181      	strh	r1, [r0, #12]
 800615e:	6643      	str	r3, [r0, #100]	; 0x64
 8006160:	81c2      	strh	r2, [r0, #14]
 8006162:	6183      	str	r3, [r0, #24]
 8006164:	4619      	mov	r1, r3
 8006166:	2208      	movs	r2, #8
 8006168:	305c      	adds	r0, #92	; 0x5c
 800616a:	f7ff fe47 	bl	8005dfc <memset>
 800616e:	4b05      	ldr	r3, [pc, #20]	; (8006184 <std+0x38>)
 8006170:	6263      	str	r3, [r4, #36]	; 0x24
 8006172:	4b05      	ldr	r3, [pc, #20]	; (8006188 <std+0x3c>)
 8006174:	62a3      	str	r3, [r4, #40]	; 0x28
 8006176:	4b05      	ldr	r3, [pc, #20]	; (800618c <std+0x40>)
 8006178:	62e3      	str	r3, [r4, #44]	; 0x2c
 800617a:	4b05      	ldr	r3, [pc, #20]	; (8006190 <std+0x44>)
 800617c:	6224      	str	r4, [r4, #32]
 800617e:	6323      	str	r3, [r4, #48]	; 0x30
 8006180:	bd10      	pop	{r4, pc}
 8006182:	bf00      	nop
 8006184:	08006bd5 	.word	0x08006bd5
 8006188:	08006bf7 	.word	0x08006bf7
 800618c:	08006c2f 	.word	0x08006c2f
 8006190:	08006c53 	.word	0x08006c53

08006194 <_cleanup_r>:
 8006194:	4901      	ldr	r1, [pc, #4]	; (800619c <_cleanup_r+0x8>)
 8006196:	f000 b8af 	b.w	80062f8 <_fwalk_reent>
 800619a:	bf00      	nop
 800619c:	080060d5 	.word	0x080060d5

080061a0 <__sfmoreglue>:
 80061a0:	b570      	push	{r4, r5, r6, lr}
 80061a2:	2268      	movs	r2, #104	; 0x68
 80061a4:	1e4d      	subs	r5, r1, #1
 80061a6:	4355      	muls	r5, r2
 80061a8:	460e      	mov	r6, r1
 80061aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80061ae:	f000 f99f 	bl	80064f0 <_malloc_r>
 80061b2:	4604      	mov	r4, r0
 80061b4:	b140      	cbz	r0, 80061c8 <__sfmoreglue+0x28>
 80061b6:	2100      	movs	r1, #0
 80061b8:	e9c0 1600 	strd	r1, r6, [r0]
 80061bc:	300c      	adds	r0, #12
 80061be:	60a0      	str	r0, [r4, #8]
 80061c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80061c4:	f7ff fe1a 	bl	8005dfc <memset>
 80061c8:	4620      	mov	r0, r4
 80061ca:	bd70      	pop	{r4, r5, r6, pc}

080061cc <__sfp_lock_acquire>:
 80061cc:	4801      	ldr	r0, [pc, #4]	; (80061d4 <__sfp_lock_acquire+0x8>)
 80061ce:	f000 b8b3 	b.w	8006338 <__retarget_lock_acquire_recursive>
 80061d2:	bf00      	nop
 80061d4:	200001f1 	.word	0x200001f1

080061d8 <__sfp_lock_release>:
 80061d8:	4801      	ldr	r0, [pc, #4]	; (80061e0 <__sfp_lock_release+0x8>)
 80061da:	f000 b8ae 	b.w	800633a <__retarget_lock_release_recursive>
 80061de:	bf00      	nop
 80061e0:	200001f1 	.word	0x200001f1

080061e4 <__sinit_lock_acquire>:
 80061e4:	4801      	ldr	r0, [pc, #4]	; (80061ec <__sinit_lock_acquire+0x8>)
 80061e6:	f000 b8a7 	b.w	8006338 <__retarget_lock_acquire_recursive>
 80061ea:	bf00      	nop
 80061ec:	200001f2 	.word	0x200001f2

080061f0 <__sinit_lock_release>:
 80061f0:	4801      	ldr	r0, [pc, #4]	; (80061f8 <__sinit_lock_release+0x8>)
 80061f2:	f000 b8a2 	b.w	800633a <__retarget_lock_release_recursive>
 80061f6:	bf00      	nop
 80061f8:	200001f2 	.word	0x200001f2

080061fc <__sinit>:
 80061fc:	b510      	push	{r4, lr}
 80061fe:	4604      	mov	r4, r0
 8006200:	f7ff fff0 	bl	80061e4 <__sinit_lock_acquire>
 8006204:	69a3      	ldr	r3, [r4, #24]
 8006206:	b11b      	cbz	r3, 8006210 <__sinit+0x14>
 8006208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800620c:	f7ff bff0 	b.w	80061f0 <__sinit_lock_release>
 8006210:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006214:	6523      	str	r3, [r4, #80]	; 0x50
 8006216:	4b13      	ldr	r3, [pc, #76]	; (8006264 <__sinit+0x68>)
 8006218:	4a13      	ldr	r2, [pc, #76]	; (8006268 <__sinit+0x6c>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	62a2      	str	r2, [r4, #40]	; 0x28
 800621e:	42a3      	cmp	r3, r4
 8006220:	bf04      	itt	eq
 8006222:	2301      	moveq	r3, #1
 8006224:	61a3      	streq	r3, [r4, #24]
 8006226:	4620      	mov	r0, r4
 8006228:	f000 f820 	bl	800626c <__sfp>
 800622c:	6060      	str	r0, [r4, #4]
 800622e:	4620      	mov	r0, r4
 8006230:	f000 f81c 	bl	800626c <__sfp>
 8006234:	60a0      	str	r0, [r4, #8]
 8006236:	4620      	mov	r0, r4
 8006238:	f000 f818 	bl	800626c <__sfp>
 800623c:	2200      	movs	r2, #0
 800623e:	60e0      	str	r0, [r4, #12]
 8006240:	2104      	movs	r1, #4
 8006242:	6860      	ldr	r0, [r4, #4]
 8006244:	f7ff ff82 	bl	800614c <std>
 8006248:	68a0      	ldr	r0, [r4, #8]
 800624a:	2201      	movs	r2, #1
 800624c:	2109      	movs	r1, #9
 800624e:	f7ff ff7d 	bl	800614c <std>
 8006252:	68e0      	ldr	r0, [r4, #12]
 8006254:	2202      	movs	r2, #2
 8006256:	2112      	movs	r1, #18
 8006258:	f7ff ff78 	bl	800614c <std>
 800625c:	2301      	movs	r3, #1
 800625e:	61a3      	str	r3, [r4, #24]
 8006260:	e7d2      	b.n	8006208 <__sinit+0xc>
 8006262:	bf00      	nop
 8006264:	08006f00 	.word	0x08006f00
 8006268:	08006195 	.word	0x08006195

0800626c <__sfp>:
 800626c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800626e:	4607      	mov	r7, r0
 8006270:	f7ff ffac 	bl	80061cc <__sfp_lock_acquire>
 8006274:	4b1e      	ldr	r3, [pc, #120]	; (80062f0 <__sfp+0x84>)
 8006276:	681e      	ldr	r6, [r3, #0]
 8006278:	69b3      	ldr	r3, [r6, #24]
 800627a:	b913      	cbnz	r3, 8006282 <__sfp+0x16>
 800627c:	4630      	mov	r0, r6
 800627e:	f7ff ffbd 	bl	80061fc <__sinit>
 8006282:	3648      	adds	r6, #72	; 0x48
 8006284:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006288:	3b01      	subs	r3, #1
 800628a:	d503      	bpl.n	8006294 <__sfp+0x28>
 800628c:	6833      	ldr	r3, [r6, #0]
 800628e:	b30b      	cbz	r3, 80062d4 <__sfp+0x68>
 8006290:	6836      	ldr	r6, [r6, #0]
 8006292:	e7f7      	b.n	8006284 <__sfp+0x18>
 8006294:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006298:	b9d5      	cbnz	r5, 80062d0 <__sfp+0x64>
 800629a:	4b16      	ldr	r3, [pc, #88]	; (80062f4 <__sfp+0x88>)
 800629c:	60e3      	str	r3, [r4, #12]
 800629e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80062a2:	6665      	str	r5, [r4, #100]	; 0x64
 80062a4:	f000 f847 	bl	8006336 <__retarget_lock_init_recursive>
 80062a8:	f7ff ff96 	bl	80061d8 <__sfp_lock_release>
 80062ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80062b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80062b4:	6025      	str	r5, [r4, #0]
 80062b6:	61a5      	str	r5, [r4, #24]
 80062b8:	2208      	movs	r2, #8
 80062ba:	4629      	mov	r1, r5
 80062bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80062c0:	f7ff fd9c 	bl	8005dfc <memset>
 80062c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80062c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80062cc:	4620      	mov	r0, r4
 80062ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062d0:	3468      	adds	r4, #104	; 0x68
 80062d2:	e7d9      	b.n	8006288 <__sfp+0x1c>
 80062d4:	2104      	movs	r1, #4
 80062d6:	4638      	mov	r0, r7
 80062d8:	f7ff ff62 	bl	80061a0 <__sfmoreglue>
 80062dc:	4604      	mov	r4, r0
 80062de:	6030      	str	r0, [r6, #0]
 80062e0:	2800      	cmp	r0, #0
 80062e2:	d1d5      	bne.n	8006290 <__sfp+0x24>
 80062e4:	f7ff ff78 	bl	80061d8 <__sfp_lock_release>
 80062e8:	230c      	movs	r3, #12
 80062ea:	603b      	str	r3, [r7, #0]
 80062ec:	e7ee      	b.n	80062cc <__sfp+0x60>
 80062ee:	bf00      	nop
 80062f0:	08006f00 	.word	0x08006f00
 80062f4:	ffff0001 	.word	0xffff0001

080062f8 <_fwalk_reent>:
 80062f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062fc:	4606      	mov	r6, r0
 80062fe:	4688      	mov	r8, r1
 8006300:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006304:	2700      	movs	r7, #0
 8006306:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800630a:	f1b9 0901 	subs.w	r9, r9, #1
 800630e:	d505      	bpl.n	800631c <_fwalk_reent+0x24>
 8006310:	6824      	ldr	r4, [r4, #0]
 8006312:	2c00      	cmp	r4, #0
 8006314:	d1f7      	bne.n	8006306 <_fwalk_reent+0xe>
 8006316:	4638      	mov	r0, r7
 8006318:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800631c:	89ab      	ldrh	r3, [r5, #12]
 800631e:	2b01      	cmp	r3, #1
 8006320:	d907      	bls.n	8006332 <_fwalk_reent+0x3a>
 8006322:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006326:	3301      	adds	r3, #1
 8006328:	d003      	beq.n	8006332 <_fwalk_reent+0x3a>
 800632a:	4629      	mov	r1, r5
 800632c:	4630      	mov	r0, r6
 800632e:	47c0      	blx	r8
 8006330:	4307      	orrs	r7, r0
 8006332:	3568      	adds	r5, #104	; 0x68
 8006334:	e7e9      	b.n	800630a <_fwalk_reent+0x12>

08006336 <__retarget_lock_init_recursive>:
 8006336:	4770      	bx	lr

08006338 <__retarget_lock_acquire_recursive>:
 8006338:	4770      	bx	lr

0800633a <__retarget_lock_release_recursive>:
 800633a:	4770      	bx	lr

0800633c <__swhatbuf_r>:
 800633c:	b570      	push	{r4, r5, r6, lr}
 800633e:	460e      	mov	r6, r1
 8006340:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006344:	2900      	cmp	r1, #0
 8006346:	b096      	sub	sp, #88	; 0x58
 8006348:	4614      	mov	r4, r2
 800634a:	461d      	mov	r5, r3
 800634c:	da08      	bge.n	8006360 <__swhatbuf_r+0x24>
 800634e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006352:	2200      	movs	r2, #0
 8006354:	602a      	str	r2, [r5, #0]
 8006356:	061a      	lsls	r2, r3, #24
 8006358:	d410      	bmi.n	800637c <__swhatbuf_r+0x40>
 800635a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800635e:	e00e      	b.n	800637e <__swhatbuf_r+0x42>
 8006360:	466a      	mov	r2, sp
 8006362:	f000 fd5d 	bl	8006e20 <_fstat_r>
 8006366:	2800      	cmp	r0, #0
 8006368:	dbf1      	blt.n	800634e <__swhatbuf_r+0x12>
 800636a:	9a01      	ldr	r2, [sp, #4]
 800636c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006370:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006374:	425a      	negs	r2, r3
 8006376:	415a      	adcs	r2, r3
 8006378:	602a      	str	r2, [r5, #0]
 800637a:	e7ee      	b.n	800635a <__swhatbuf_r+0x1e>
 800637c:	2340      	movs	r3, #64	; 0x40
 800637e:	2000      	movs	r0, #0
 8006380:	6023      	str	r3, [r4, #0]
 8006382:	b016      	add	sp, #88	; 0x58
 8006384:	bd70      	pop	{r4, r5, r6, pc}
	...

08006388 <__smakebuf_r>:
 8006388:	898b      	ldrh	r3, [r1, #12]
 800638a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800638c:	079d      	lsls	r5, r3, #30
 800638e:	4606      	mov	r6, r0
 8006390:	460c      	mov	r4, r1
 8006392:	d507      	bpl.n	80063a4 <__smakebuf_r+0x1c>
 8006394:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006398:	6023      	str	r3, [r4, #0]
 800639a:	6123      	str	r3, [r4, #16]
 800639c:	2301      	movs	r3, #1
 800639e:	6163      	str	r3, [r4, #20]
 80063a0:	b002      	add	sp, #8
 80063a2:	bd70      	pop	{r4, r5, r6, pc}
 80063a4:	ab01      	add	r3, sp, #4
 80063a6:	466a      	mov	r2, sp
 80063a8:	f7ff ffc8 	bl	800633c <__swhatbuf_r>
 80063ac:	9900      	ldr	r1, [sp, #0]
 80063ae:	4605      	mov	r5, r0
 80063b0:	4630      	mov	r0, r6
 80063b2:	f000 f89d 	bl	80064f0 <_malloc_r>
 80063b6:	b948      	cbnz	r0, 80063cc <__smakebuf_r+0x44>
 80063b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063bc:	059a      	lsls	r2, r3, #22
 80063be:	d4ef      	bmi.n	80063a0 <__smakebuf_r+0x18>
 80063c0:	f023 0303 	bic.w	r3, r3, #3
 80063c4:	f043 0302 	orr.w	r3, r3, #2
 80063c8:	81a3      	strh	r3, [r4, #12]
 80063ca:	e7e3      	b.n	8006394 <__smakebuf_r+0xc>
 80063cc:	4b0d      	ldr	r3, [pc, #52]	; (8006404 <__smakebuf_r+0x7c>)
 80063ce:	62b3      	str	r3, [r6, #40]	; 0x28
 80063d0:	89a3      	ldrh	r3, [r4, #12]
 80063d2:	6020      	str	r0, [r4, #0]
 80063d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063d8:	81a3      	strh	r3, [r4, #12]
 80063da:	9b00      	ldr	r3, [sp, #0]
 80063dc:	6163      	str	r3, [r4, #20]
 80063de:	9b01      	ldr	r3, [sp, #4]
 80063e0:	6120      	str	r0, [r4, #16]
 80063e2:	b15b      	cbz	r3, 80063fc <__smakebuf_r+0x74>
 80063e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063e8:	4630      	mov	r0, r6
 80063ea:	f000 fd2b 	bl	8006e44 <_isatty_r>
 80063ee:	b128      	cbz	r0, 80063fc <__smakebuf_r+0x74>
 80063f0:	89a3      	ldrh	r3, [r4, #12]
 80063f2:	f023 0303 	bic.w	r3, r3, #3
 80063f6:	f043 0301 	orr.w	r3, r3, #1
 80063fa:	81a3      	strh	r3, [r4, #12]
 80063fc:	89a0      	ldrh	r0, [r4, #12]
 80063fe:	4305      	orrs	r5, r0
 8006400:	81a5      	strh	r5, [r4, #12]
 8006402:	e7cd      	b.n	80063a0 <__smakebuf_r+0x18>
 8006404:	08006195 	.word	0x08006195

08006408 <malloc>:
 8006408:	4b02      	ldr	r3, [pc, #8]	; (8006414 <malloc+0xc>)
 800640a:	4601      	mov	r1, r0
 800640c:	6818      	ldr	r0, [r3, #0]
 800640e:	f000 b86f 	b.w	80064f0 <_malloc_r>
 8006412:	bf00      	nop
 8006414:	2000000c 	.word	0x2000000c

08006418 <_free_r>:
 8006418:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800641a:	2900      	cmp	r1, #0
 800641c:	d044      	beq.n	80064a8 <_free_r+0x90>
 800641e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006422:	9001      	str	r0, [sp, #4]
 8006424:	2b00      	cmp	r3, #0
 8006426:	f1a1 0404 	sub.w	r4, r1, #4
 800642a:	bfb8      	it	lt
 800642c:	18e4      	addlt	r4, r4, r3
 800642e:	f000 fd2b 	bl	8006e88 <__malloc_lock>
 8006432:	4a1e      	ldr	r2, [pc, #120]	; (80064ac <_free_r+0x94>)
 8006434:	9801      	ldr	r0, [sp, #4]
 8006436:	6813      	ldr	r3, [r2, #0]
 8006438:	b933      	cbnz	r3, 8006448 <_free_r+0x30>
 800643a:	6063      	str	r3, [r4, #4]
 800643c:	6014      	str	r4, [r2, #0]
 800643e:	b003      	add	sp, #12
 8006440:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006444:	f000 bd26 	b.w	8006e94 <__malloc_unlock>
 8006448:	42a3      	cmp	r3, r4
 800644a:	d908      	bls.n	800645e <_free_r+0x46>
 800644c:	6825      	ldr	r5, [r4, #0]
 800644e:	1961      	adds	r1, r4, r5
 8006450:	428b      	cmp	r3, r1
 8006452:	bf01      	itttt	eq
 8006454:	6819      	ldreq	r1, [r3, #0]
 8006456:	685b      	ldreq	r3, [r3, #4]
 8006458:	1949      	addeq	r1, r1, r5
 800645a:	6021      	streq	r1, [r4, #0]
 800645c:	e7ed      	b.n	800643a <_free_r+0x22>
 800645e:	461a      	mov	r2, r3
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	b10b      	cbz	r3, 8006468 <_free_r+0x50>
 8006464:	42a3      	cmp	r3, r4
 8006466:	d9fa      	bls.n	800645e <_free_r+0x46>
 8006468:	6811      	ldr	r1, [r2, #0]
 800646a:	1855      	adds	r5, r2, r1
 800646c:	42a5      	cmp	r5, r4
 800646e:	d10b      	bne.n	8006488 <_free_r+0x70>
 8006470:	6824      	ldr	r4, [r4, #0]
 8006472:	4421      	add	r1, r4
 8006474:	1854      	adds	r4, r2, r1
 8006476:	42a3      	cmp	r3, r4
 8006478:	6011      	str	r1, [r2, #0]
 800647a:	d1e0      	bne.n	800643e <_free_r+0x26>
 800647c:	681c      	ldr	r4, [r3, #0]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	6053      	str	r3, [r2, #4]
 8006482:	4421      	add	r1, r4
 8006484:	6011      	str	r1, [r2, #0]
 8006486:	e7da      	b.n	800643e <_free_r+0x26>
 8006488:	d902      	bls.n	8006490 <_free_r+0x78>
 800648a:	230c      	movs	r3, #12
 800648c:	6003      	str	r3, [r0, #0]
 800648e:	e7d6      	b.n	800643e <_free_r+0x26>
 8006490:	6825      	ldr	r5, [r4, #0]
 8006492:	1961      	adds	r1, r4, r5
 8006494:	428b      	cmp	r3, r1
 8006496:	bf04      	itt	eq
 8006498:	6819      	ldreq	r1, [r3, #0]
 800649a:	685b      	ldreq	r3, [r3, #4]
 800649c:	6063      	str	r3, [r4, #4]
 800649e:	bf04      	itt	eq
 80064a0:	1949      	addeq	r1, r1, r5
 80064a2:	6021      	streq	r1, [r4, #0]
 80064a4:	6054      	str	r4, [r2, #4]
 80064a6:	e7ca      	b.n	800643e <_free_r+0x26>
 80064a8:	b003      	add	sp, #12
 80064aa:	bd30      	pop	{r4, r5, pc}
 80064ac:	200001f4 	.word	0x200001f4

080064b0 <sbrk_aligned>:
 80064b0:	b570      	push	{r4, r5, r6, lr}
 80064b2:	4e0e      	ldr	r6, [pc, #56]	; (80064ec <sbrk_aligned+0x3c>)
 80064b4:	460c      	mov	r4, r1
 80064b6:	6831      	ldr	r1, [r6, #0]
 80064b8:	4605      	mov	r5, r0
 80064ba:	b911      	cbnz	r1, 80064c2 <sbrk_aligned+0x12>
 80064bc:	f000 fb7a 	bl	8006bb4 <_sbrk_r>
 80064c0:	6030      	str	r0, [r6, #0]
 80064c2:	4621      	mov	r1, r4
 80064c4:	4628      	mov	r0, r5
 80064c6:	f000 fb75 	bl	8006bb4 <_sbrk_r>
 80064ca:	1c43      	adds	r3, r0, #1
 80064cc:	d00a      	beq.n	80064e4 <sbrk_aligned+0x34>
 80064ce:	1cc4      	adds	r4, r0, #3
 80064d0:	f024 0403 	bic.w	r4, r4, #3
 80064d4:	42a0      	cmp	r0, r4
 80064d6:	d007      	beq.n	80064e8 <sbrk_aligned+0x38>
 80064d8:	1a21      	subs	r1, r4, r0
 80064da:	4628      	mov	r0, r5
 80064dc:	f000 fb6a 	bl	8006bb4 <_sbrk_r>
 80064e0:	3001      	adds	r0, #1
 80064e2:	d101      	bne.n	80064e8 <sbrk_aligned+0x38>
 80064e4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80064e8:	4620      	mov	r0, r4
 80064ea:	bd70      	pop	{r4, r5, r6, pc}
 80064ec:	200001f8 	.word	0x200001f8

080064f0 <_malloc_r>:
 80064f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064f4:	1ccd      	adds	r5, r1, #3
 80064f6:	f025 0503 	bic.w	r5, r5, #3
 80064fa:	3508      	adds	r5, #8
 80064fc:	2d0c      	cmp	r5, #12
 80064fe:	bf38      	it	cc
 8006500:	250c      	movcc	r5, #12
 8006502:	2d00      	cmp	r5, #0
 8006504:	4607      	mov	r7, r0
 8006506:	db01      	blt.n	800650c <_malloc_r+0x1c>
 8006508:	42a9      	cmp	r1, r5
 800650a:	d905      	bls.n	8006518 <_malloc_r+0x28>
 800650c:	230c      	movs	r3, #12
 800650e:	603b      	str	r3, [r7, #0]
 8006510:	2600      	movs	r6, #0
 8006512:	4630      	mov	r0, r6
 8006514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006518:	4e2e      	ldr	r6, [pc, #184]	; (80065d4 <_malloc_r+0xe4>)
 800651a:	f000 fcb5 	bl	8006e88 <__malloc_lock>
 800651e:	6833      	ldr	r3, [r6, #0]
 8006520:	461c      	mov	r4, r3
 8006522:	bb34      	cbnz	r4, 8006572 <_malloc_r+0x82>
 8006524:	4629      	mov	r1, r5
 8006526:	4638      	mov	r0, r7
 8006528:	f7ff ffc2 	bl	80064b0 <sbrk_aligned>
 800652c:	1c43      	adds	r3, r0, #1
 800652e:	4604      	mov	r4, r0
 8006530:	d14d      	bne.n	80065ce <_malloc_r+0xde>
 8006532:	6834      	ldr	r4, [r6, #0]
 8006534:	4626      	mov	r6, r4
 8006536:	2e00      	cmp	r6, #0
 8006538:	d140      	bne.n	80065bc <_malloc_r+0xcc>
 800653a:	6823      	ldr	r3, [r4, #0]
 800653c:	4631      	mov	r1, r6
 800653e:	4638      	mov	r0, r7
 8006540:	eb04 0803 	add.w	r8, r4, r3
 8006544:	f000 fb36 	bl	8006bb4 <_sbrk_r>
 8006548:	4580      	cmp	r8, r0
 800654a:	d13a      	bne.n	80065c2 <_malloc_r+0xd2>
 800654c:	6821      	ldr	r1, [r4, #0]
 800654e:	3503      	adds	r5, #3
 8006550:	1a6d      	subs	r5, r5, r1
 8006552:	f025 0503 	bic.w	r5, r5, #3
 8006556:	3508      	adds	r5, #8
 8006558:	2d0c      	cmp	r5, #12
 800655a:	bf38      	it	cc
 800655c:	250c      	movcc	r5, #12
 800655e:	4629      	mov	r1, r5
 8006560:	4638      	mov	r0, r7
 8006562:	f7ff ffa5 	bl	80064b0 <sbrk_aligned>
 8006566:	3001      	adds	r0, #1
 8006568:	d02b      	beq.n	80065c2 <_malloc_r+0xd2>
 800656a:	6823      	ldr	r3, [r4, #0]
 800656c:	442b      	add	r3, r5
 800656e:	6023      	str	r3, [r4, #0]
 8006570:	e00e      	b.n	8006590 <_malloc_r+0xa0>
 8006572:	6822      	ldr	r2, [r4, #0]
 8006574:	1b52      	subs	r2, r2, r5
 8006576:	d41e      	bmi.n	80065b6 <_malloc_r+0xc6>
 8006578:	2a0b      	cmp	r2, #11
 800657a:	d916      	bls.n	80065aa <_malloc_r+0xba>
 800657c:	1961      	adds	r1, r4, r5
 800657e:	42a3      	cmp	r3, r4
 8006580:	6025      	str	r5, [r4, #0]
 8006582:	bf18      	it	ne
 8006584:	6059      	strne	r1, [r3, #4]
 8006586:	6863      	ldr	r3, [r4, #4]
 8006588:	bf08      	it	eq
 800658a:	6031      	streq	r1, [r6, #0]
 800658c:	5162      	str	r2, [r4, r5]
 800658e:	604b      	str	r3, [r1, #4]
 8006590:	4638      	mov	r0, r7
 8006592:	f104 060b 	add.w	r6, r4, #11
 8006596:	f000 fc7d 	bl	8006e94 <__malloc_unlock>
 800659a:	f026 0607 	bic.w	r6, r6, #7
 800659e:	1d23      	adds	r3, r4, #4
 80065a0:	1af2      	subs	r2, r6, r3
 80065a2:	d0b6      	beq.n	8006512 <_malloc_r+0x22>
 80065a4:	1b9b      	subs	r3, r3, r6
 80065a6:	50a3      	str	r3, [r4, r2]
 80065a8:	e7b3      	b.n	8006512 <_malloc_r+0x22>
 80065aa:	6862      	ldr	r2, [r4, #4]
 80065ac:	42a3      	cmp	r3, r4
 80065ae:	bf0c      	ite	eq
 80065b0:	6032      	streq	r2, [r6, #0]
 80065b2:	605a      	strne	r2, [r3, #4]
 80065b4:	e7ec      	b.n	8006590 <_malloc_r+0xa0>
 80065b6:	4623      	mov	r3, r4
 80065b8:	6864      	ldr	r4, [r4, #4]
 80065ba:	e7b2      	b.n	8006522 <_malloc_r+0x32>
 80065bc:	4634      	mov	r4, r6
 80065be:	6876      	ldr	r6, [r6, #4]
 80065c0:	e7b9      	b.n	8006536 <_malloc_r+0x46>
 80065c2:	230c      	movs	r3, #12
 80065c4:	603b      	str	r3, [r7, #0]
 80065c6:	4638      	mov	r0, r7
 80065c8:	f000 fc64 	bl	8006e94 <__malloc_unlock>
 80065cc:	e7a1      	b.n	8006512 <_malloc_r+0x22>
 80065ce:	6025      	str	r5, [r4, #0]
 80065d0:	e7de      	b.n	8006590 <_malloc_r+0xa0>
 80065d2:	bf00      	nop
 80065d4:	200001f4 	.word	0x200001f4

080065d8 <__sfputc_r>:
 80065d8:	6893      	ldr	r3, [r2, #8]
 80065da:	3b01      	subs	r3, #1
 80065dc:	2b00      	cmp	r3, #0
 80065de:	b410      	push	{r4}
 80065e0:	6093      	str	r3, [r2, #8]
 80065e2:	da08      	bge.n	80065f6 <__sfputc_r+0x1e>
 80065e4:	6994      	ldr	r4, [r2, #24]
 80065e6:	42a3      	cmp	r3, r4
 80065e8:	db01      	blt.n	80065ee <__sfputc_r+0x16>
 80065ea:	290a      	cmp	r1, #10
 80065ec:	d103      	bne.n	80065f6 <__sfputc_r+0x1e>
 80065ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80065f2:	f000 bb33 	b.w	8006c5c <__swbuf_r>
 80065f6:	6813      	ldr	r3, [r2, #0]
 80065f8:	1c58      	adds	r0, r3, #1
 80065fa:	6010      	str	r0, [r2, #0]
 80065fc:	7019      	strb	r1, [r3, #0]
 80065fe:	4608      	mov	r0, r1
 8006600:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006604:	4770      	bx	lr

08006606 <__sfputs_r>:
 8006606:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006608:	4606      	mov	r6, r0
 800660a:	460f      	mov	r7, r1
 800660c:	4614      	mov	r4, r2
 800660e:	18d5      	adds	r5, r2, r3
 8006610:	42ac      	cmp	r4, r5
 8006612:	d101      	bne.n	8006618 <__sfputs_r+0x12>
 8006614:	2000      	movs	r0, #0
 8006616:	e007      	b.n	8006628 <__sfputs_r+0x22>
 8006618:	f814 1b01 	ldrb.w	r1, [r4], #1
 800661c:	463a      	mov	r2, r7
 800661e:	4630      	mov	r0, r6
 8006620:	f7ff ffda 	bl	80065d8 <__sfputc_r>
 8006624:	1c43      	adds	r3, r0, #1
 8006626:	d1f3      	bne.n	8006610 <__sfputs_r+0xa>
 8006628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800662c <_vfiprintf_r>:
 800662c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006630:	460d      	mov	r5, r1
 8006632:	b09d      	sub	sp, #116	; 0x74
 8006634:	4614      	mov	r4, r2
 8006636:	4698      	mov	r8, r3
 8006638:	4606      	mov	r6, r0
 800663a:	b118      	cbz	r0, 8006644 <_vfiprintf_r+0x18>
 800663c:	6983      	ldr	r3, [r0, #24]
 800663e:	b90b      	cbnz	r3, 8006644 <_vfiprintf_r+0x18>
 8006640:	f7ff fddc 	bl	80061fc <__sinit>
 8006644:	4b89      	ldr	r3, [pc, #548]	; (800686c <_vfiprintf_r+0x240>)
 8006646:	429d      	cmp	r5, r3
 8006648:	d11b      	bne.n	8006682 <_vfiprintf_r+0x56>
 800664a:	6875      	ldr	r5, [r6, #4]
 800664c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800664e:	07d9      	lsls	r1, r3, #31
 8006650:	d405      	bmi.n	800665e <_vfiprintf_r+0x32>
 8006652:	89ab      	ldrh	r3, [r5, #12]
 8006654:	059a      	lsls	r2, r3, #22
 8006656:	d402      	bmi.n	800665e <_vfiprintf_r+0x32>
 8006658:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800665a:	f7ff fe6d 	bl	8006338 <__retarget_lock_acquire_recursive>
 800665e:	89ab      	ldrh	r3, [r5, #12]
 8006660:	071b      	lsls	r3, r3, #28
 8006662:	d501      	bpl.n	8006668 <_vfiprintf_r+0x3c>
 8006664:	692b      	ldr	r3, [r5, #16]
 8006666:	b9eb      	cbnz	r3, 80066a4 <_vfiprintf_r+0x78>
 8006668:	4629      	mov	r1, r5
 800666a:	4630      	mov	r0, r6
 800666c:	f000 fb5a 	bl	8006d24 <__swsetup_r>
 8006670:	b1c0      	cbz	r0, 80066a4 <_vfiprintf_r+0x78>
 8006672:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006674:	07dc      	lsls	r4, r3, #31
 8006676:	d50e      	bpl.n	8006696 <_vfiprintf_r+0x6a>
 8006678:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800667c:	b01d      	add	sp, #116	; 0x74
 800667e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006682:	4b7b      	ldr	r3, [pc, #492]	; (8006870 <_vfiprintf_r+0x244>)
 8006684:	429d      	cmp	r5, r3
 8006686:	d101      	bne.n	800668c <_vfiprintf_r+0x60>
 8006688:	68b5      	ldr	r5, [r6, #8]
 800668a:	e7df      	b.n	800664c <_vfiprintf_r+0x20>
 800668c:	4b79      	ldr	r3, [pc, #484]	; (8006874 <_vfiprintf_r+0x248>)
 800668e:	429d      	cmp	r5, r3
 8006690:	bf08      	it	eq
 8006692:	68f5      	ldreq	r5, [r6, #12]
 8006694:	e7da      	b.n	800664c <_vfiprintf_r+0x20>
 8006696:	89ab      	ldrh	r3, [r5, #12]
 8006698:	0598      	lsls	r0, r3, #22
 800669a:	d4ed      	bmi.n	8006678 <_vfiprintf_r+0x4c>
 800669c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800669e:	f7ff fe4c 	bl	800633a <__retarget_lock_release_recursive>
 80066a2:	e7e9      	b.n	8006678 <_vfiprintf_r+0x4c>
 80066a4:	2300      	movs	r3, #0
 80066a6:	9309      	str	r3, [sp, #36]	; 0x24
 80066a8:	2320      	movs	r3, #32
 80066aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80066ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80066b2:	2330      	movs	r3, #48	; 0x30
 80066b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006878 <_vfiprintf_r+0x24c>
 80066b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80066bc:	f04f 0901 	mov.w	r9, #1
 80066c0:	4623      	mov	r3, r4
 80066c2:	469a      	mov	sl, r3
 80066c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80066c8:	b10a      	cbz	r2, 80066ce <_vfiprintf_r+0xa2>
 80066ca:	2a25      	cmp	r2, #37	; 0x25
 80066cc:	d1f9      	bne.n	80066c2 <_vfiprintf_r+0x96>
 80066ce:	ebba 0b04 	subs.w	fp, sl, r4
 80066d2:	d00b      	beq.n	80066ec <_vfiprintf_r+0xc0>
 80066d4:	465b      	mov	r3, fp
 80066d6:	4622      	mov	r2, r4
 80066d8:	4629      	mov	r1, r5
 80066da:	4630      	mov	r0, r6
 80066dc:	f7ff ff93 	bl	8006606 <__sfputs_r>
 80066e0:	3001      	adds	r0, #1
 80066e2:	f000 80aa 	beq.w	800683a <_vfiprintf_r+0x20e>
 80066e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066e8:	445a      	add	r2, fp
 80066ea:	9209      	str	r2, [sp, #36]	; 0x24
 80066ec:	f89a 3000 	ldrb.w	r3, [sl]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	f000 80a2 	beq.w	800683a <_vfiprintf_r+0x20e>
 80066f6:	2300      	movs	r3, #0
 80066f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80066fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006700:	f10a 0a01 	add.w	sl, sl, #1
 8006704:	9304      	str	r3, [sp, #16]
 8006706:	9307      	str	r3, [sp, #28]
 8006708:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800670c:	931a      	str	r3, [sp, #104]	; 0x68
 800670e:	4654      	mov	r4, sl
 8006710:	2205      	movs	r2, #5
 8006712:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006716:	4858      	ldr	r0, [pc, #352]	; (8006878 <_vfiprintf_r+0x24c>)
 8006718:	f7f9 fd6a 	bl	80001f0 <memchr>
 800671c:	9a04      	ldr	r2, [sp, #16]
 800671e:	b9d8      	cbnz	r0, 8006758 <_vfiprintf_r+0x12c>
 8006720:	06d1      	lsls	r1, r2, #27
 8006722:	bf44      	itt	mi
 8006724:	2320      	movmi	r3, #32
 8006726:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800672a:	0713      	lsls	r3, r2, #28
 800672c:	bf44      	itt	mi
 800672e:	232b      	movmi	r3, #43	; 0x2b
 8006730:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006734:	f89a 3000 	ldrb.w	r3, [sl]
 8006738:	2b2a      	cmp	r3, #42	; 0x2a
 800673a:	d015      	beq.n	8006768 <_vfiprintf_r+0x13c>
 800673c:	9a07      	ldr	r2, [sp, #28]
 800673e:	4654      	mov	r4, sl
 8006740:	2000      	movs	r0, #0
 8006742:	f04f 0c0a 	mov.w	ip, #10
 8006746:	4621      	mov	r1, r4
 8006748:	f811 3b01 	ldrb.w	r3, [r1], #1
 800674c:	3b30      	subs	r3, #48	; 0x30
 800674e:	2b09      	cmp	r3, #9
 8006750:	d94e      	bls.n	80067f0 <_vfiprintf_r+0x1c4>
 8006752:	b1b0      	cbz	r0, 8006782 <_vfiprintf_r+0x156>
 8006754:	9207      	str	r2, [sp, #28]
 8006756:	e014      	b.n	8006782 <_vfiprintf_r+0x156>
 8006758:	eba0 0308 	sub.w	r3, r0, r8
 800675c:	fa09 f303 	lsl.w	r3, r9, r3
 8006760:	4313      	orrs	r3, r2
 8006762:	9304      	str	r3, [sp, #16]
 8006764:	46a2      	mov	sl, r4
 8006766:	e7d2      	b.n	800670e <_vfiprintf_r+0xe2>
 8006768:	9b03      	ldr	r3, [sp, #12]
 800676a:	1d19      	adds	r1, r3, #4
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	9103      	str	r1, [sp, #12]
 8006770:	2b00      	cmp	r3, #0
 8006772:	bfbb      	ittet	lt
 8006774:	425b      	neglt	r3, r3
 8006776:	f042 0202 	orrlt.w	r2, r2, #2
 800677a:	9307      	strge	r3, [sp, #28]
 800677c:	9307      	strlt	r3, [sp, #28]
 800677e:	bfb8      	it	lt
 8006780:	9204      	strlt	r2, [sp, #16]
 8006782:	7823      	ldrb	r3, [r4, #0]
 8006784:	2b2e      	cmp	r3, #46	; 0x2e
 8006786:	d10c      	bne.n	80067a2 <_vfiprintf_r+0x176>
 8006788:	7863      	ldrb	r3, [r4, #1]
 800678a:	2b2a      	cmp	r3, #42	; 0x2a
 800678c:	d135      	bne.n	80067fa <_vfiprintf_r+0x1ce>
 800678e:	9b03      	ldr	r3, [sp, #12]
 8006790:	1d1a      	adds	r2, r3, #4
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	9203      	str	r2, [sp, #12]
 8006796:	2b00      	cmp	r3, #0
 8006798:	bfb8      	it	lt
 800679a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800679e:	3402      	adds	r4, #2
 80067a0:	9305      	str	r3, [sp, #20]
 80067a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006888 <_vfiprintf_r+0x25c>
 80067a6:	7821      	ldrb	r1, [r4, #0]
 80067a8:	2203      	movs	r2, #3
 80067aa:	4650      	mov	r0, sl
 80067ac:	f7f9 fd20 	bl	80001f0 <memchr>
 80067b0:	b140      	cbz	r0, 80067c4 <_vfiprintf_r+0x198>
 80067b2:	2340      	movs	r3, #64	; 0x40
 80067b4:	eba0 000a 	sub.w	r0, r0, sl
 80067b8:	fa03 f000 	lsl.w	r0, r3, r0
 80067bc:	9b04      	ldr	r3, [sp, #16]
 80067be:	4303      	orrs	r3, r0
 80067c0:	3401      	adds	r4, #1
 80067c2:	9304      	str	r3, [sp, #16]
 80067c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067c8:	482c      	ldr	r0, [pc, #176]	; (800687c <_vfiprintf_r+0x250>)
 80067ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80067ce:	2206      	movs	r2, #6
 80067d0:	f7f9 fd0e 	bl	80001f0 <memchr>
 80067d4:	2800      	cmp	r0, #0
 80067d6:	d03f      	beq.n	8006858 <_vfiprintf_r+0x22c>
 80067d8:	4b29      	ldr	r3, [pc, #164]	; (8006880 <_vfiprintf_r+0x254>)
 80067da:	bb1b      	cbnz	r3, 8006824 <_vfiprintf_r+0x1f8>
 80067dc:	9b03      	ldr	r3, [sp, #12]
 80067de:	3307      	adds	r3, #7
 80067e0:	f023 0307 	bic.w	r3, r3, #7
 80067e4:	3308      	adds	r3, #8
 80067e6:	9303      	str	r3, [sp, #12]
 80067e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067ea:	443b      	add	r3, r7
 80067ec:	9309      	str	r3, [sp, #36]	; 0x24
 80067ee:	e767      	b.n	80066c0 <_vfiprintf_r+0x94>
 80067f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80067f4:	460c      	mov	r4, r1
 80067f6:	2001      	movs	r0, #1
 80067f8:	e7a5      	b.n	8006746 <_vfiprintf_r+0x11a>
 80067fa:	2300      	movs	r3, #0
 80067fc:	3401      	adds	r4, #1
 80067fe:	9305      	str	r3, [sp, #20]
 8006800:	4619      	mov	r1, r3
 8006802:	f04f 0c0a 	mov.w	ip, #10
 8006806:	4620      	mov	r0, r4
 8006808:	f810 2b01 	ldrb.w	r2, [r0], #1
 800680c:	3a30      	subs	r2, #48	; 0x30
 800680e:	2a09      	cmp	r2, #9
 8006810:	d903      	bls.n	800681a <_vfiprintf_r+0x1ee>
 8006812:	2b00      	cmp	r3, #0
 8006814:	d0c5      	beq.n	80067a2 <_vfiprintf_r+0x176>
 8006816:	9105      	str	r1, [sp, #20]
 8006818:	e7c3      	b.n	80067a2 <_vfiprintf_r+0x176>
 800681a:	fb0c 2101 	mla	r1, ip, r1, r2
 800681e:	4604      	mov	r4, r0
 8006820:	2301      	movs	r3, #1
 8006822:	e7f0      	b.n	8006806 <_vfiprintf_r+0x1da>
 8006824:	ab03      	add	r3, sp, #12
 8006826:	9300      	str	r3, [sp, #0]
 8006828:	462a      	mov	r2, r5
 800682a:	4b16      	ldr	r3, [pc, #88]	; (8006884 <_vfiprintf_r+0x258>)
 800682c:	a904      	add	r1, sp, #16
 800682e:	4630      	mov	r0, r6
 8006830:	f3af 8000 	nop.w
 8006834:	4607      	mov	r7, r0
 8006836:	1c78      	adds	r0, r7, #1
 8006838:	d1d6      	bne.n	80067e8 <_vfiprintf_r+0x1bc>
 800683a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800683c:	07d9      	lsls	r1, r3, #31
 800683e:	d405      	bmi.n	800684c <_vfiprintf_r+0x220>
 8006840:	89ab      	ldrh	r3, [r5, #12]
 8006842:	059a      	lsls	r2, r3, #22
 8006844:	d402      	bmi.n	800684c <_vfiprintf_r+0x220>
 8006846:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006848:	f7ff fd77 	bl	800633a <__retarget_lock_release_recursive>
 800684c:	89ab      	ldrh	r3, [r5, #12]
 800684e:	065b      	lsls	r3, r3, #25
 8006850:	f53f af12 	bmi.w	8006678 <_vfiprintf_r+0x4c>
 8006854:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006856:	e711      	b.n	800667c <_vfiprintf_r+0x50>
 8006858:	ab03      	add	r3, sp, #12
 800685a:	9300      	str	r3, [sp, #0]
 800685c:	462a      	mov	r2, r5
 800685e:	4b09      	ldr	r3, [pc, #36]	; (8006884 <_vfiprintf_r+0x258>)
 8006860:	a904      	add	r1, sp, #16
 8006862:	4630      	mov	r0, r6
 8006864:	f000 f880 	bl	8006968 <_printf_i>
 8006868:	e7e4      	b.n	8006834 <_vfiprintf_r+0x208>
 800686a:	bf00      	nop
 800686c:	08006f24 	.word	0x08006f24
 8006870:	08006f44 	.word	0x08006f44
 8006874:	08006f04 	.word	0x08006f04
 8006878:	08006f64 	.word	0x08006f64
 800687c:	08006f6e 	.word	0x08006f6e
 8006880:	00000000 	.word	0x00000000
 8006884:	08006607 	.word	0x08006607
 8006888:	08006f6a 	.word	0x08006f6a

0800688c <_printf_common>:
 800688c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006890:	4616      	mov	r6, r2
 8006892:	4699      	mov	r9, r3
 8006894:	688a      	ldr	r2, [r1, #8]
 8006896:	690b      	ldr	r3, [r1, #16]
 8006898:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800689c:	4293      	cmp	r3, r2
 800689e:	bfb8      	it	lt
 80068a0:	4613      	movlt	r3, r2
 80068a2:	6033      	str	r3, [r6, #0]
 80068a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80068a8:	4607      	mov	r7, r0
 80068aa:	460c      	mov	r4, r1
 80068ac:	b10a      	cbz	r2, 80068b2 <_printf_common+0x26>
 80068ae:	3301      	adds	r3, #1
 80068b0:	6033      	str	r3, [r6, #0]
 80068b2:	6823      	ldr	r3, [r4, #0]
 80068b4:	0699      	lsls	r1, r3, #26
 80068b6:	bf42      	ittt	mi
 80068b8:	6833      	ldrmi	r3, [r6, #0]
 80068ba:	3302      	addmi	r3, #2
 80068bc:	6033      	strmi	r3, [r6, #0]
 80068be:	6825      	ldr	r5, [r4, #0]
 80068c0:	f015 0506 	ands.w	r5, r5, #6
 80068c4:	d106      	bne.n	80068d4 <_printf_common+0x48>
 80068c6:	f104 0a19 	add.w	sl, r4, #25
 80068ca:	68e3      	ldr	r3, [r4, #12]
 80068cc:	6832      	ldr	r2, [r6, #0]
 80068ce:	1a9b      	subs	r3, r3, r2
 80068d0:	42ab      	cmp	r3, r5
 80068d2:	dc26      	bgt.n	8006922 <_printf_common+0x96>
 80068d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80068d8:	1e13      	subs	r3, r2, #0
 80068da:	6822      	ldr	r2, [r4, #0]
 80068dc:	bf18      	it	ne
 80068de:	2301      	movne	r3, #1
 80068e0:	0692      	lsls	r2, r2, #26
 80068e2:	d42b      	bmi.n	800693c <_printf_common+0xb0>
 80068e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80068e8:	4649      	mov	r1, r9
 80068ea:	4638      	mov	r0, r7
 80068ec:	47c0      	blx	r8
 80068ee:	3001      	adds	r0, #1
 80068f0:	d01e      	beq.n	8006930 <_printf_common+0xa4>
 80068f2:	6823      	ldr	r3, [r4, #0]
 80068f4:	68e5      	ldr	r5, [r4, #12]
 80068f6:	6832      	ldr	r2, [r6, #0]
 80068f8:	f003 0306 	and.w	r3, r3, #6
 80068fc:	2b04      	cmp	r3, #4
 80068fe:	bf08      	it	eq
 8006900:	1aad      	subeq	r5, r5, r2
 8006902:	68a3      	ldr	r3, [r4, #8]
 8006904:	6922      	ldr	r2, [r4, #16]
 8006906:	bf0c      	ite	eq
 8006908:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800690c:	2500      	movne	r5, #0
 800690e:	4293      	cmp	r3, r2
 8006910:	bfc4      	itt	gt
 8006912:	1a9b      	subgt	r3, r3, r2
 8006914:	18ed      	addgt	r5, r5, r3
 8006916:	2600      	movs	r6, #0
 8006918:	341a      	adds	r4, #26
 800691a:	42b5      	cmp	r5, r6
 800691c:	d11a      	bne.n	8006954 <_printf_common+0xc8>
 800691e:	2000      	movs	r0, #0
 8006920:	e008      	b.n	8006934 <_printf_common+0xa8>
 8006922:	2301      	movs	r3, #1
 8006924:	4652      	mov	r2, sl
 8006926:	4649      	mov	r1, r9
 8006928:	4638      	mov	r0, r7
 800692a:	47c0      	blx	r8
 800692c:	3001      	adds	r0, #1
 800692e:	d103      	bne.n	8006938 <_printf_common+0xac>
 8006930:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006934:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006938:	3501      	adds	r5, #1
 800693a:	e7c6      	b.n	80068ca <_printf_common+0x3e>
 800693c:	18e1      	adds	r1, r4, r3
 800693e:	1c5a      	adds	r2, r3, #1
 8006940:	2030      	movs	r0, #48	; 0x30
 8006942:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006946:	4422      	add	r2, r4
 8006948:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800694c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006950:	3302      	adds	r3, #2
 8006952:	e7c7      	b.n	80068e4 <_printf_common+0x58>
 8006954:	2301      	movs	r3, #1
 8006956:	4622      	mov	r2, r4
 8006958:	4649      	mov	r1, r9
 800695a:	4638      	mov	r0, r7
 800695c:	47c0      	blx	r8
 800695e:	3001      	adds	r0, #1
 8006960:	d0e6      	beq.n	8006930 <_printf_common+0xa4>
 8006962:	3601      	adds	r6, #1
 8006964:	e7d9      	b.n	800691a <_printf_common+0x8e>
	...

08006968 <_printf_i>:
 8006968:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800696c:	7e0f      	ldrb	r7, [r1, #24]
 800696e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006970:	2f78      	cmp	r7, #120	; 0x78
 8006972:	4691      	mov	r9, r2
 8006974:	4680      	mov	r8, r0
 8006976:	460c      	mov	r4, r1
 8006978:	469a      	mov	sl, r3
 800697a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800697e:	d807      	bhi.n	8006990 <_printf_i+0x28>
 8006980:	2f62      	cmp	r7, #98	; 0x62
 8006982:	d80a      	bhi.n	800699a <_printf_i+0x32>
 8006984:	2f00      	cmp	r7, #0
 8006986:	f000 80d8 	beq.w	8006b3a <_printf_i+0x1d2>
 800698a:	2f58      	cmp	r7, #88	; 0x58
 800698c:	f000 80a3 	beq.w	8006ad6 <_printf_i+0x16e>
 8006990:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006994:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006998:	e03a      	b.n	8006a10 <_printf_i+0xa8>
 800699a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800699e:	2b15      	cmp	r3, #21
 80069a0:	d8f6      	bhi.n	8006990 <_printf_i+0x28>
 80069a2:	a101      	add	r1, pc, #4	; (adr r1, 80069a8 <_printf_i+0x40>)
 80069a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80069a8:	08006a01 	.word	0x08006a01
 80069ac:	08006a15 	.word	0x08006a15
 80069b0:	08006991 	.word	0x08006991
 80069b4:	08006991 	.word	0x08006991
 80069b8:	08006991 	.word	0x08006991
 80069bc:	08006991 	.word	0x08006991
 80069c0:	08006a15 	.word	0x08006a15
 80069c4:	08006991 	.word	0x08006991
 80069c8:	08006991 	.word	0x08006991
 80069cc:	08006991 	.word	0x08006991
 80069d0:	08006991 	.word	0x08006991
 80069d4:	08006b21 	.word	0x08006b21
 80069d8:	08006a45 	.word	0x08006a45
 80069dc:	08006b03 	.word	0x08006b03
 80069e0:	08006991 	.word	0x08006991
 80069e4:	08006991 	.word	0x08006991
 80069e8:	08006b43 	.word	0x08006b43
 80069ec:	08006991 	.word	0x08006991
 80069f0:	08006a45 	.word	0x08006a45
 80069f4:	08006991 	.word	0x08006991
 80069f8:	08006991 	.word	0x08006991
 80069fc:	08006b0b 	.word	0x08006b0b
 8006a00:	682b      	ldr	r3, [r5, #0]
 8006a02:	1d1a      	adds	r2, r3, #4
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	602a      	str	r2, [r5, #0]
 8006a08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a10:	2301      	movs	r3, #1
 8006a12:	e0a3      	b.n	8006b5c <_printf_i+0x1f4>
 8006a14:	6820      	ldr	r0, [r4, #0]
 8006a16:	6829      	ldr	r1, [r5, #0]
 8006a18:	0606      	lsls	r6, r0, #24
 8006a1a:	f101 0304 	add.w	r3, r1, #4
 8006a1e:	d50a      	bpl.n	8006a36 <_printf_i+0xce>
 8006a20:	680e      	ldr	r6, [r1, #0]
 8006a22:	602b      	str	r3, [r5, #0]
 8006a24:	2e00      	cmp	r6, #0
 8006a26:	da03      	bge.n	8006a30 <_printf_i+0xc8>
 8006a28:	232d      	movs	r3, #45	; 0x2d
 8006a2a:	4276      	negs	r6, r6
 8006a2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a30:	485e      	ldr	r0, [pc, #376]	; (8006bac <_printf_i+0x244>)
 8006a32:	230a      	movs	r3, #10
 8006a34:	e019      	b.n	8006a6a <_printf_i+0x102>
 8006a36:	680e      	ldr	r6, [r1, #0]
 8006a38:	602b      	str	r3, [r5, #0]
 8006a3a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006a3e:	bf18      	it	ne
 8006a40:	b236      	sxthne	r6, r6
 8006a42:	e7ef      	b.n	8006a24 <_printf_i+0xbc>
 8006a44:	682b      	ldr	r3, [r5, #0]
 8006a46:	6820      	ldr	r0, [r4, #0]
 8006a48:	1d19      	adds	r1, r3, #4
 8006a4a:	6029      	str	r1, [r5, #0]
 8006a4c:	0601      	lsls	r1, r0, #24
 8006a4e:	d501      	bpl.n	8006a54 <_printf_i+0xec>
 8006a50:	681e      	ldr	r6, [r3, #0]
 8006a52:	e002      	b.n	8006a5a <_printf_i+0xf2>
 8006a54:	0646      	lsls	r6, r0, #25
 8006a56:	d5fb      	bpl.n	8006a50 <_printf_i+0xe8>
 8006a58:	881e      	ldrh	r6, [r3, #0]
 8006a5a:	4854      	ldr	r0, [pc, #336]	; (8006bac <_printf_i+0x244>)
 8006a5c:	2f6f      	cmp	r7, #111	; 0x6f
 8006a5e:	bf0c      	ite	eq
 8006a60:	2308      	moveq	r3, #8
 8006a62:	230a      	movne	r3, #10
 8006a64:	2100      	movs	r1, #0
 8006a66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006a6a:	6865      	ldr	r5, [r4, #4]
 8006a6c:	60a5      	str	r5, [r4, #8]
 8006a6e:	2d00      	cmp	r5, #0
 8006a70:	bfa2      	ittt	ge
 8006a72:	6821      	ldrge	r1, [r4, #0]
 8006a74:	f021 0104 	bicge.w	r1, r1, #4
 8006a78:	6021      	strge	r1, [r4, #0]
 8006a7a:	b90e      	cbnz	r6, 8006a80 <_printf_i+0x118>
 8006a7c:	2d00      	cmp	r5, #0
 8006a7e:	d04d      	beq.n	8006b1c <_printf_i+0x1b4>
 8006a80:	4615      	mov	r5, r2
 8006a82:	fbb6 f1f3 	udiv	r1, r6, r3
 8006a86:	fb03 6711 	mls	r7, r3, r1, r6
 8006a8a:	5dc7      	ldrb	r7, [r0, r7]
 8006a8c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006a90:	4637      	mov	r7, r6
 8006a92:	42bb      	cmp	r3, r7
 8006a94:	460e      	mov	r6, r1
 8006a96:	d9f4      	bls.n	8006a82 <_printf_i+0x11a>
 8006a98:	2b08      	cmp	r3, #8
 8006a9a:	d10b      	bne.n	8006ab4 <_printf_i+0x14c>
 8006a9c:	6823      	ldr	r3, [r4, #0]
 8006a9e:	07de      	lsls	r6, r3, #31
 8006aa0:	d508      	bpl.n	8006ab4 <_printf_i+0x14c>
 8006aa2:	6923      	ldr	r3, [r4, #16]
 8006aa4:	6861      	ldr	r1, [r4, #4]
 8006aa6:	4299      	cmp	r1, r3
 8006aa8:	bfde      	ittt	le
 8006aaa:	2330      	movle	r3, #48	; 0x30
 8006aac:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006ab0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006ab4:	1b52      	subs	r2, r2, r5
 8006ab6:	6122      	str	r2, [r4, #16]
 8006ab8:	f8cd a000 	str.w	sl, [sp]
 8006abc:	464b      	mov	r3, r9
 8006abe:	aa03      	add	r2, sp, #12
 8006ac0:	4621      	mov	r1, r4
 8006ac2:	4640      	mov	r0, r8
 8006ac4:	f7ff fee2 	bl	800688c <_printf_common>
 8006ac8:	3001      	adds	r0, #1
 8006aca:	d14c      	bne.n	8006b66 <_printf_i+0x1fe>
 8006acc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ad0:	b004      	add	sp, #16
 8006ad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ad6:	4835      	ldr	r0, [pc, #212]	; (8006bac <_printf_i+0x244>)
 8006ad8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006adc:	6829      	ldr	r1, [r5, #0]
 8006ade:	6823      	ldr	r3, [r4, #0]
 8006ae0:	f851 6b04 	ldr.w	r6, [r1], #4
 8006ae4:	6029      	str	r1, [r5, #0]
 8006ae6:	061d      	lsls	r5, r3, #24
 8006ae8:	d514      	bpl.n	8006b14 <_printf_i+0x1ac>
 8006aea:	07df      	lsls	r7, r3, #31
 8006aec:	bf44      	itt	mi
 8006aee:	f043 0320 	orrmi.w	r3, r3, #32
 8006af2:	6023      	strmi	r3, [r4, #0]
 8006af4:	b91e      	cbnz	r6, 8006afe <_printf_i+0x196>
 8006af6:	6823      	ldr	r3, [r4, #0]
 8006af8:	f023 0320 	bic.w	r3, r3, #32
 8006afc:	6023      	str	r3, [r4, #0]
 8006afe:	2310      	movs	r3, #16
 8006b00:	e7b0      	b.n	8006a64 <_printf_i+0xfc>
 8006b02:	6823      	ldr	r3, [r4, #0]
 8006b04:	f043 0320 	orr.w	r3, r3, #32
 8006b08:	6023      	str	r3, [r4, #0]
 8006b0a:	2378      	movs	r3, #120	; 0x78
 8006b0c:	4828      	ldr	r0, [pc, #160]	; (8006bb0 <_printf_i+0x248>)
 8006b0e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006b12:	e7e3      	b.n	8006adc <_printf_i+0x174>
 8006b14:	0659      	lsls	r1, r3, #25
 8006b16:	bf48      	it	mi
 8006b18:	b2b6      	uxthmi	r6, r6
 8006b1a:	e7e6      	b.n	8006aea <_printf_i+0x182>
 8006b1c:	4615      	mov	r5, r2
 8006b1e:	e7bb      	b.n	8006a98 <_printf_i+0x130>
 8006b20:	682b      	ldr	r3, [r5, #0]
 8006b22:	6826      	ldr	r6, [r4, #0]
 8006b24:	6961      	ldr	r1, [r4, #20]
 8006b26:	1d18      	adds	r0, r3, #4
 8006b28:	6028      	str	r0, [r5, #0]
 8006b2a:	0635      	lsls	r5, r6, #24
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	d501      	bpl.n	8006b34 <_printf_i+0x1cc>
 8006b30:	6019      	str	r1, [r3, #0]
 8006b32:	e002      	b.n	8006b3a <_printf_i+0x1d2>
 8006b34:	0670      	lsls	r0, r6, #25
 8006b36:	d5fb      	bpl.n	8006b30 <_printf_i+0x1c8>
 8006b38:	8019      	strh	r1, [r3, #0]
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	6123      	str	r3, [r4, #16]
 8006b3e:	4615      	mov	r5, r2
 8006b40:	e7ba      	b.n	8006ab8 <_printf_i+0x150>
 8006b42:	682b      	ldr	r3, [r5, #0]
 8006b44:	1d1a      	adds	r2, r3, #4
 8006b46:	602a      	str	r2, [r5, #0]
 8006b48:	681d      	ldr	r5, [r3, #0]
 8006b4a:	6862      	ldr	r2, [r4, #4]
 8006b4c:	2100      	movs	r1, #0
 8006b4e:	4628      	mov	r0, r5
 8006b50:	f7f9 fb4e 	bl	80001f0 <memchr>
 8006b54:	b108      	cbz	r0, 8006b5a <_printf_i+0x1f2>
 8006b56:	1b40      	subs	r0, r0, r5
 8006b58:	6060      	str	r0, [r4, #4]
 8006b5a:	6863      	ldr	r3, [r4, #4]
 8006b5c:	6123      	str	r3, [r4, #16]
 8006b5e:	2300      	movs	r3, #0
 8006b60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b64:	e7a8      	b.n	8006ab8 <_printf_i+0x150>
 8006b66:	6923      	ldr	r3, [r4, #16]
 8006b68:	462a      	mov	r2, r5
 8006b6a:	4649      	mov	r1, r9
 8006b6c:	4640      	mov	r0, r8
 8006b6e:	47d0      	blx	sl
 8006b70:	3001      	adds	r0, #1
 8006b72:	d0ab      	beq.n	8006acc <_printf_i+0x164>
 8006b74:	6823      	ldr	r3, [r4, #0]
 8006b76:	079b      	lsls	r3, r3, #30
 8006b78:	d413      	bmi.n	8006ba2 <_printf_i+0x23a>
 8006b7a:	68e0      	ldr	r0, [r4, #12]
 8006b7c:	9b03      	ldr	r3, [sp, #12]
 8006b7e:	4298      	cmp	r0, r3
 8006b80:	bfb8      	it	lt
 8006b82:	4618      	movlt	r0, r3
 8006b84:	e7a4      	b.n	8006ad0 <_printf_i+0x168>
 8006b86:	2301      	movs	r3, #1
 8006b88:	4632      	mov	r2, r6
 8006b8a:	4649      	mov	r1, r9
 8006b8c:	4640      	mov	r0, r8
 8006b8e:	47d0      	blx	sl
 8006b90:	3001      	adds	r0, #1
 8006b92:	d09b      	beq.n	8006acc <_printf_i+0x164>
 8006b94:	3501      	adds	r5, #1
 8006b96:	68e3      	ldr	r3, [r4, #12]
 8006b98:	9903      	ldr	r1, [sp, #12]
 8006b9a:	1a5b      	subs	r3, r3, r1
 8006b9c:	42ab      	cmp	r3, r5
 8006b9e:	dcf2      	bgt.n	8006b86 <_printf_i+0x21e>
 8006ba0:	e7eb      	b.n	8006b7a <_printf_i+0x212>
 8006ba2:	2500      	movs	r5, #0
 8006ba4:	f104 0619 	add.w	r6, r4, #25
 8006ba8:	e7f5      	b.n	8006b96 <_printf_i+0x22e>
 8006baa:	bf00      	nop
 8006bac:	08006f75 	.word	0x08006f75
 8006bb0:	08006f86 	.word	0x08006f86

08006bb4 <_sbrk_r>:
 8006bb4:	b538      	push	{r3, r4, r5, lr}
 8006bb6:	4d06      	ldr	r5, [pc, #24]	; (8006bd0 <_sbrk_r+0x1c>)
 8006bb8:	2300      	movs	r3, #0
 8006bba:	4604      	mov	r4, r0
 8006bbc:	4608      	mov	r0, r1
 8006bbe:	602b      	str	r3, [r5, #0]
 8006bc0:	f7fa fd2c 	bl	800161c <_sbrk>
 8006bc4:	1c43      	adds	r3, r0, #1
 8006bc6:	d102      	bne.n	8006bce <_sbrk_r+0x1a>
 8006bc8:	682b      	ldr	r3, [r5, #0]
 8006bca:	b103      	cbz	r3, 8006bce <_sbrk_r+0x1a>
 8006bcc:	6023      	str	r3, [r4, #0]
 8006bce:	bd38      	pop	{r3, r4, r5, pc}
 8006bd0:	200001fc 	.word	0x200001fc

08006bd4 <__sread>:
 8006bd4:	b510      	push	{r4, lr}
 8006bd6:	460c      	mov	r4, r1
 8006bd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bdc:	f000 f960 	bl	8006ea0 <_read_r>
 8006be0:	2800      	cmp	r0, #0
 8006be2:	bfab      	itete	ge
 8006be4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006be6:	89a3      	ldrhlt	r3, [r4, #12]
 8006be8:	181b      	addge	r3, r3, r0
 8006bea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006bee:	bfac      	ite	ge
 8006bf0:	6563      	strge	r3, [r4, #84]	; 0x54
 8006bf2:	81a3      	strhlt	r3, [r4, #12]
 8006bf4:	bd10      	pop	{r4, pc}

08006bf6 <__swrite>:
 8006bf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bfa:	461f      	mov	r7, r3
 8006bfc:	898b      	ldrh	r3, [r1, #12]
 8006bfe:	05db      	lsls	r3, r3, #23
 8006c00:	4605      	mov	r5, r0
 8006c02:	460c      	mov	r4, r1
 8006c04:	4616      	mov	r6, r2
 8006c06:	d505      	bpl.n	8006c14 <__swrite+0x1e>
 8006c08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c0c:	2302      	movs	r3, #2
 8006c0e:	2200      	movs	r2, #0
 8006c10:	f000 f928 	bl	8006e64 <_lseek_r>
 8006c14:	89a3      	ldrh	r3, [r4, #12]
 8006c16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c1e:	81a3      	strh	r3, [r4, #12]
 8006c20:	4632      	mov	r2, r6
 8006c22:	463b      	mov	r3, r7
 8006c24:	4628      	mov	r0, r5
 8006c26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c2a:	f000 b869 	b.w	8006d00 <_write_r>

08006c2e <__sseek>:
 8006c2e:	b510      	push	{r4, lr}
 8006c30:	460c      	mov	r4, r1
 8006c32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c36:	f000 f915 	bl	8006e64 <_lseek_r>
 8006c3a:	1c43      	adds	r3, r0, #1
 8006c3c:	89a3      	ldrh	r3, [r4, #12]
 8006c3e:	bf15      	itete	ne
 8006c40:	6560      	strne	r0, [r4, #84]	; 0x54
 8006c42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006c46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006c4a:	81a3      	strheq	r3, [r4, #12]
 8006c4c:	bf18      	it	ne
 8006c4e:	81a3      	strhne	r3, [r4, #12]
 8006c50:	bd10      	pop	{r4, pc}

08006c52 <__sclose>:
 8006c52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c56:	f000 b8d3 	b.w	8006e00 <_close_r>
	...

08006c5c <__swbuf_r>:
 8006c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c5e:	460e      	mov	r6, r1
 8006c60:	4614      	mov	r4, r2
 8006c62:	4605      	mov	r5, r0
 8006c64:	b118      	cbz	r0, 8006c6e <__swbuf_r+0x12>
 8006c66:	6983      	ldr	r3, [r0, #24]
 8006c68:	b90b      	cbnz	r3, 8006c6e <__swbuf_r+0x12>
 8006c6a:	f7ff fac7 	bl	80061fc <__sinit>
 8006c6e:	4b21      	ldr	r3, [pc, #132]	; (8006cf4 <__swbuf_r+0x98>)
 8006c70:	429c      	cmp	r4, r3
 8006c72:	d12b      	bne.n	8006ccc <__swbuf_r+0x70>
 8006c74:	686c      	ldr	r4, [r5, #4]
 8006c76:	69a3      	ldr	r3, [r4, #24]
 8006c78:	60a3      	str	r3, [r4, #8]
 8006c7a:	89a3      	ldrh	r3, [r4, #12]
 8006c7c:	071a      	lsls	r2, r3, #28
 8006c7e:	d52f      	bpl.n	8006ce0 <__swbuf_r+0x84>
 8006c80:	6923      	ldr	r3, [r4, #16]
 8006c82:	b36b      	cbz	r3, 8006ce0 <__swbuf_r+0x84>
 8006c84:	6923      	ldr	r3, [r4, #16]
 8006c86:	6820      	ldr	r0, [r4, #0]
 8006c88:	1ac0      	subs	r0, r0, r3
 8006c8a:	6963      	ldr	r3, [r4, #20]
 8006c8c:	b2f6      	uxtb	r6, r6
 8006c8e:	4283      	cmp	r3, r0
 8006c90:	4637      	mov	r7, r6
 8006c92:	dc04      	bgt.n	8006c9e <__swbuf_r+0x42>
 8006c94:	4621      	mov	r1, r4
 8006c96:	4628      	mov	r0, r5
 8006c98:	f7ff fa1c 	bl	80060d4 <_fflush_r>
 8006c9c:	bb30      	cbnz	r0, 8006cec <__swbuf_r+0x90>
 8006c9e:	68a3      	ldr	r3, [r4, #8]
 8006ca0:	3b01      	subs	r3, #1
 8006ca2:	60a3      	str	r3, [r4, #8]
 8006ca4:	6823      	ldr	r3, [r4, #0]
 8006ca6:	1c5a      	adds	r2, r3, #1
 8006ca8:	6022      	str	r2, [r4, #0]
 8006caa:	701e      	strb	r6, [r3, #0]
 8006cac:	6963      	ldr	r3, [r4, #20]
 8006cae:	3001      	adds	r0, #1
 8006cb0:	4283      	cmp	r3, r0
 8006cb2:	d004      	beq.n	8006cbe <__swbuf_r+0x62>
 8006cb4:	89a3      	ldrh	r3, [r4, #12]
 8006cb6:	07db      	lsls	r3, r3, #31
 8006cb8:	d506      	bpl.n	8006cc8 <__swbuf_r+0x6c>
 8006cba:	2e0a      	cmp	r6, #10
 8006cbc:	d104      	bne.n	8006cc8 <__swbuf_r+0x6c>
 8006cbe:	4621      	mov	r1, r4
 8006cc0:	4628      	mov	r0, r5
 8006cc2:	f7ff fa07 	bl	80060d4 <_fflush_r>
 8006cc6:	b988      	cbnz	r0, 8006cec <__swbuf_r+0x90>
 8006cc8:	4638      	mov	r0, r7
 8006cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ccc:	4b0a      	ldr	r3, [pc, #40]	; (8006cf8 <__swbuf_r+0x9c>)
 8006cce:	429c      	cmp	r4, r3
 8006cd0:	d101      	bne.n	8006cd6 <__swbuf_r+0x7a>
 8006cd2:	68ac      	ldr	r4, [r5, #8]
 8006cd4:	e7cf      	b.n	8006c76 <__swbuf_r+0x1a>
 8006cd6:	4b09      	ldr	r3, [pc, #36]	; (8006cfc <__swbuf_r+0xa0>)
 8006cd8:	429c      	cmp	r4, r3
 8006cda:	bf08      	it	eq
 8006cdc:	68ec      	ldreq	r4, [r5, #12]
 8006cde:	e7ca      	b.n	8006c76 <__swbuf_r+0x1a>
 8006ce0:	4621      	mov	r1, r4
 8006ce2:	4628      	mov	r0, r5
 8006ce4:	f000 f81e 	bl	8006d24 <__swsetup_r>
 8006ce8:	2800      	cmp	r0, #0
 8006cea:	d0cb      	beq.n	8006c84 <__swbuf_r+0x28>
 8006cec:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006cf0:	e7ea      	b.n	8006cc8 <__swbuf_r+0x6c>
 8006cf2:	bf00      	nop
 8006cf4:	08006f24 	.word	0x08006f24
 8006cf8:	08006f44 	.word	0x08006f44
 8006cfc:	08006f04 	.word	0x08006f04

08006d00 <_write_r>:
 8006d00:	b538      	push	{r3, r4, r5, lr}
 8006d02:	4d07      	ldr	r5, [pc, #28]	; (8006d20 <_write_r+0x20>)
 8006d04:	4604      	mov	r4, r0
 8006d06:	4608      	mov	r0, r1
 8006d08:	4611      	mov	r1, r2
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	602a      	str	r2, [r5, #0]
 8006d0e:	461a      	mov	r2, r3
 8006d10:	f7fa fa5c 	bl	80011cc <_write>
 8006d14:	1c43      	adds	r3, r0, #1
 8006d16:	d102      	bne.n	8006d1e <_write_r+0x1e>
 8006d18:	682b      	ldr	r3, [r5, #0]
 8006d1a:	b103      	cbz	r3, 8006d1e <_write_r+0x1e>
 8006d1c:	6023      	str	r3, [r4, #0]
 8006d1e:	bd38      	pop	{r3, r4, r5, pc}
 8006d20:	200001fc 	.word	0x200001fc

08006d24 <__swsetup_r>:
 8006d24:	4b32      	ldr	r3, [pc, #200]	; (8006df0 <__swsetup_r+0xcc>)
 8006d26:	b570      	push	{r4, r5, r6, lr}
 8006d28:	681d      	ldr	r5, [r3, #0]
 8006d2a:	4606      	mov	r6, r0
 8006d2c:	460c      	mov	r4, r1
 8006d2e:	b125      	cbz	r5, 8006d3a <__swsetup_r+0x16>
 8006d30:	69ab      	ldr	r3, [r5, #24]
 8006d32:	b913      	cbnz	r3, 8006d3a <__swsetup_r+0x16>
 8006d34:	4628      	mov	r0, r5
 8006d36:	f7ff fa61 	bl	80061fc <__sinit>
 8006d3a:	4b2e      	ldr	r3, [pc, #184]	; (8006df4 <__swsetup_r+0xd0>)
 8006d3c:	429c      	cmp	r4, r3
 8006d3e:	d10f      	bne.n	8006d60 <__swsetup_r+0x3c>
 8006d40:	686c      	ldr	r4, [r5, #4]
 8006d42:	89a3      	ldrh	r3, [r4, #12]
 8006d44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d48:	0719      	lsls	r1, r3, #28
 8006d4a:	d42c      	bmi.n	8006da6 <__swsetup_r+0x82>
 8006d4c:	06dd      	lsls	r5, r3, #27
 8006d4e:	d411      	bmi.n	8006d74 <__swsetup_r+0x50>
 8006d50:	2309      	movs	r3, #9
 8006d52:	6033      	str	r3, [r6, #0]
 8006d54:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006d58:	81a3      	strh	r3, [r4, #12]
 8006d5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d5e:	e03e      	b.n	8006dde <__swsetup_r+0xba>
 8006d60:	4b25      	ldr	r3, [pc, #148]	; (8006df8 <__swsetup_r+0xd4>)
 8006d62:	429c      	cmp	r4, r3
 8006d64:	d101      	bne.n	8006d6a <__swsetup_r+0x46>
 8006d66:	68ac      	ldr	r4, [r5, #8]
 8006d68:	e7eb      	b.n	8006d42 <__swsetup_r+0x1e>
 8006d6a:	4b24      	ldr	r3, [pc, #144]	; (8006dfc <__swsetup_r+0xd8>)
 8006d6c:	429c      	cmp	r4, r3
 8006d6e:	bf08      	it	eq
 8006d70:	68ec      	ldreq	r4, [r5, #12]
 8006d72:	e7e6      	b.n	8006d42 <__swsetup_r+0x1e>
 8006d74:	0758      	lsls	r0, r3, #29
 8006d76:	d512      	bpl.n	8006d9e <__swsetup_r+0x7a>
 8006d78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d7a:	b141      	cbz	r1, 8006d8e <__swsetup_r+0x6a>
 8006d7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d80:	4299      	cmp	r1, r3
 8006d82:	d002      	beq.n	8006d8a <__swsetup_r+0x66>
 8006d84:	4630      	mov	r0, r6
 8006d86:	f7ff fb47 	bl	8006418 <_free_r>
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	6363      	str	r3, [r4, #52]	; 0x34
 8006d8e:	89a3      	ldrh	r3, [r4, #12]
 8006d90:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006d94:	81a3      	strh	r3, [r4, #12]
 8006d96:	2300      	movs	r3, #0
 8006d98:	6063      	str	r3, [r4, #4]
 8006d9a:	6923      	ldr	r3, [r4, #16]
 8006d9c:	6023      	str	r3, [r4, #0]
 8006d9e:	89a3      	ldrh	r3, [r4, #12]
 8006da0:	f043 0308 	orr.w	r3, r3, #8
 8006da4:	81a3      	strh	r3, [r4, #12]
 8006da6:	6923      	ldr	r3, [r4, #16]
 8006da8:	b94b      	cbnz	r3, 8006dbe <__swsetup_r+0x9a>
 8006daa:	89a3      	ldrh	r3, [r4, #12]
 8006dac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006db0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006db4:	d003      	beq.n	8006dbe <__swsetup_r+0x9a>
 8006db6:	4621      	mov	r1, r4
 8006db8:	4630      	mov	r0, r6
 8006dba:	f7ff fae5 	bl	8006388 <__smakebuf_r>
 8006dbe:	89a0      	ldrh	r0, [r4, #12]
 8006dc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006dc4:	f010 0301 	ands.w	r3, r0, #1
 8006dc8:	d00a      	beq.n	8006de0 <__swsetup_r+0xbc>
 8006dca:	2300      	movs	r3, #0
 8006dcc:	60a3      	str	r3, [r4, #8]
 8006dce:	6963      	ldr	r3, [r4, #20]
 8006dd0:	425b      	negs	r3, r3
 8006dd2:	61a3      	str	r3, [r4, #24]
 8006dd4:	6923      	ldr	r3, [r4, #16]
 8006dd6:	b943      	cbnz	r3, 8006dea <__swsetup_r+0xc6>
 8006dd8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006ddc:	d1ba      	bne.n	8006d54 <__swsetup_r+0x30>
 8006dde:	bd70      	pop	{r4, r5, r6, pc}
 8006de0:	0781      	lsls	r1, r0, #30
 8006de2:	bf58      	it	pl
 8006de4:	6963      	ldrpl	r3, [r4, #20]
 8006de6:	60a3      	str	r3, [r4, #8]
 8006de8:	e7f4      	b.n	8006dd4 <__swsetup_r+0xb0>
 8006dea:	2000      	movs	r0, #0
 8006dec:	e7f7      	b.n	8006dde <__swsetup_r+0xba>
 8006dee:	bf00      	nop
 8006df0:	2000000c 	.word	0x2000000c
 8006df4:	08006f24 	.word	0x08006f24
 8006df8:	08006f44 	.word	0x08006f44
 8006dfc:	08006f04 	.word	0x08006f04

08006e00 <_close_r>:
 8006e00:	b538      	push	{r3, r4, r5, lr}
 8006e02:	4d06      	ldr	r5, [pc, #24]	; (8006e1c <_close_r+0x1c>)
 8006e04:	2300      	movs	r3, #0
 8006e06:	4604      	mov	r4, r0
 8006e08:	4608      	mov	r0, r1
 8006e0a:	602b      	str	r3, [r5, #0]
 8006e0c:	f7fa fa0a 	bl	8001224 <_close>
 8006e10:	1c43      	adds	r3, r0, #1
 8006e12:	d102      	bne.n	8006e1a <_close_r+0x1a>
 8006e14:	682b      	ldr	r3, [r5, #0]
 8006e16:	b103      	cbz	r3, 8006e1a <_close_r+0x1a>
 8006e18:	6023      	str	r3, [r4, #0]
 8006e1a:	bd38      	pop	{r3, r4, r5, pc}
 8006e1c:	200001fc 	.word	0x200001fc

08006e20 <_fstat_r>:
 8006e20:	b538      	push	{r3, r4, r5, lr}
 8006e22:	4d07      	ldr	r5, [pc, #28]	; (8006e40 <_fstat_r+0x20>)
 8006e24:	2300      	movs	r3, #0
 8006e26:	4604      	mov	r4, r0
 8006e28:	4608      	mov	r0, r1
 8006e2a:	4611      	mov	r1, r2
 8006e2c:	602b      	str	r3, [r5, #0]
 8006e2e:	f7fa fa49 	bl	80012c4 <_fstat>
 8006e32:	1c43      	adds	r3, r0, #1
 8006e34:	d102      	bne.n	8006e3c <_fstat_r+0x1c>
 8006e36:	682b      	ldr	r3, [r5, #0]
 8006e38:	b103      	cbz	r3, 8006e3c <_fstat_r+0x1c>
 8006e3a:	6023      	str	r3, [r4, #0]
 8006e3c:	bd38      	pop	{r3, r4, r5, pc}
 8006e3e:	bf00      	nop
 8006e40:	200001fc 	.word	0x200001fc

08006e44 <_isatty_r>:
 8006e44:	b538      	push	{r3, r4, r5, lr}
 8006e46:	4d06      	ldr	r5, [pc, #24]	; (8006e60 <_isatty_r+0x1c>)
 8006e48:	2300      	movs	r3, #0
 8006e4a:	4604      	mov	r4, r0
 8006e4c:	4608      	mov	r0, r1
 8006e4e:	602b      	str	r3, [r5, #0]
 8006e50:	f7fa f9a6 	bl	80011a0 <_isatty>
 8006e54:	1c43      	adds	r3, r0, #1
 8006e56:	d102      	bne.n	8006e5e <_isatty_r+0x1a>
 8006e58:	682b      	ldr	r3, [r5, #0]
 8006e5a:	b103      	cbz	r3, 8006e5e <_isatty_r+0x1a>
 8006e5c:	6023      	str	r3, [r4, #0]
 8006e5e:	bd38      	pop	{r3, r4, r5, pc}
 8006e60:	200001fc 	.word	0x200001fc

08006e64 <_lseek_r>:
 8006e64:	b538      	push	{r3, r4, r5, lr}
 8006e66:	4d07      	ldr	r5, [pc, #28]	; (8006e84 <_lseek_r+0x20>)
 8006e68:	4604      	mov	r4, r0
 8006e6a:	4608      	mov	r0, r1
 8006e6c:	4611      	mov	r1, r2
 8006e6e:	2200      	movs	r2, #0
 8006e70:	602a      	str	r2, [r5, #0]
 8006e72:	461a      	mov	r2, r3
 8006e74:	f7fa f9ed 	bl	8001252 <_lseek>
 8006e78:	1c43      	adds	r3, r0, #1
 8006e7a:	d102      	bne.n	8006e82 <_lseek_r+0x1e>
 8006e7c:	682b      	ldr	r3, [r5, #0]
 8006e7e:	b103      	cbz	r3, 8006e82 <_lseek_r+0x1e>
 8006e80:	6023      	str	r3, [r4, #0]
 8006e82:	bd38      	pop	{r3, r4, r5, pc}
 8006e84:	200001fc 	.word	0x200001fc

08006e88 <__malloc_lock>:
 8006e88:	4801      	ldr	r0, [pc, #4]	; (8006e90 <__malloc_lock+0x8>)
 8006e8a:	f7ff ba55 	b.w	8006338 <__retarget_lock_acquire_recursive>
 8006e8e:	bf00      	nop
 8006e90:	200001f0 	.word	0x200001f0

08006e94 <__malloc_unlock>:
 8006e94:	4801      	ldr	r0, [pc, #4]	; (8006e9c <__malloc_unlock+0x8>)
 8006e96:	f7ff ba50 	b.w	800633a <__retarget_lock_release_recursive>
 8006e9a:	bf00      	nop
 8006e9c:	200001f0 	.word	0x200001f0

08006ea0 <_read_r>:
 8006ea0:	b538      	push	{r3, r4, r5, lr}
 8006ea2:	4d07      	ldr	r5, [pc, #28]	; (8006ec0 <_read_r+0x20>)
 8006ea4:	4604      	mov	r4, r0
 8006ea6:	4608      	mov	r0, r1
 8006ea8:	4611      	mov	r1, r2
 8006eaa:	2200      	movs	r2, #0
 8006eac:	602a      	str	r2, [r5, #0]
 8006eae:	461a      	mov	r2, r3
 8006eb0:	f7fa f9e0 	bl	8001274 <_read>
 8006eb4:	1c43      	adds	r3, r0, #1
 8006eb6:	d102      	bne.n	8006ebe <_read_r+0x1e>
 8006eb8:	682b      	ldr	r3, [r5, #0]
 8006eba:	b103      	cbz	r3, 8006ebe <_read_r+0x1e>
 8006ebc:	6023      	str	r3, [r4, #0]
 8006ebe:	bd38      	pop	{r3, r4, r5, pc}
 8006ec0:	200001fc 	.word	0x200001fc

08006ec4 <_init>:
 8006ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ec6:	bf00      	nop
 8006ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006eca:	bc08      	pop	{r3}
 8006ecc:	469e      	mov	lr, r3
 8006ece:	4770      	bx	lr

08006ed0 <_fini>:
 8006ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ed2:	bf00      	nop
 8006ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ed6:	bc08      	pop	{r3}
 8006ed8:	469e      	mov	lr, r3
 8006eda:	4770      	bx	lr
